{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Form, FormGroup, ActionGroup, FormHelperText } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { Button } from '../Button';\nimport { Checkbox } from '../Checkbox';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { InputGroup } from '../InputGroup';\nimport EyeSlashIcon from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\nimport EyeIcon from '@patternfly/react-icons/dist/esm/icons/eye-icon';\nexport var LoginForm = function LoginForm(_a) {\n  var _a$noAutoFocus = _a.noAutoFocus,\n      noAutoFocus = _a$noAutoFocus === void 0 ? false : _a$noAutoFocus,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$showHelperText = _a.showHelperText,\n      showHelperText = _a$showHelperText === void 0 ? false : _a$showHelperText,\n      _a$helperText = _a.helperText,\n      helperText = _a$helperText === void 0 ? null : _a$helperText,\n      _a$helperTextIcon = _a.helperTextIcon,\n      helperTextIcon = _a$helperTextIcon === void 0 ? null : _a$helperTextIcon,\n      _a$usernameLabel = _a.usernameLabel,\n      usernameLabel = _a$usernameLabel === void 0 ? 'Username' : _a$usernameLabel,\n      _a$usernameValue = _a.usernameValue,\n      usernameValue = _a$usernameValue === void 0 ? '' : _a$usernameValue,\n      _a$onChangeUsername = _a.onChangeUsername,\n      onChangeUsername = _a$onChangeUsername === void 0 ? function () {\n    return undefined;\n  } : _a$onChangeUsername,\n      _a$isValidUsername = _a.isValidUsername,\n      isValidUsername = _a$isValidUsername === void 0 ? true : _a$isValidUsername,\n      _a$passwordLabel = _a.passwordLabel,\n      passwordLabel = _a$passwordLabel === void 0 ? 'Password' : _a$passwordLabel,\n      _a$passwordValue = _a.passwordValue,\n      passwordValue = _a$passwordValue === void 0 ? '' : _a$passwordValue,\n      _a$onChangePassword = _a.onChangePassword,\n      onChangePassword = _a$onChangePassword === void 0 ? function () {\n    return undefined;\n  } : _a$onChangePassword,\n      _a$isShowPasswordEnab = _a.isShowPasswordEnabled,\n      isShowPasswordEnabled = _a$isShowPasswordEnab === void 0 ? false : _a$isShowPasswordEnab,\n      _a$hidePasswordAriaLa = _a.hidePasswordAriaLabel,\n      hidePasswordAriaLabel = _a$hidePasswordAriaLa === void 0 ? 'Hide password' : _a$hidePasswordAriaLa,\n      _a$showPasswordAriaLa = _a.showPasswordAriaLabel,\n      showPasswordAriaLabel = _a$showPasswordAriaLa === void 0 ? 'Show password' : _a$showPasswordAriaLa,\n      _a$isValidPassword = _a.isValidPassword,\n      isValidPassword = _a$isValidPassword === void 0 ? true : _a$isValidPassword,\n      _a$loginButtonLabel = _a.loginButtonLabel,\n      loginButtonLabel = _a$loginButtonLabel === void 0 ? 'Log In' : _a$loginButtonLabel,\n      _a$isLoginButtonDisab = _a.isLoginButtonDisabled,\n      isLoginButtonDisabled = _a$isLoginButtonDisab === void 0 ? false : _a$isLoginButtonDisab,\n      _a$onLoginButtonClick = _a.onLoginButtonClick,\n      onLoginButtonClick = _a$onLoginButtonClick === void 0 ? function () {\n    return undefined;\n  } : _a$onLoginButtonClick,\n      _a$rememberMeLabel = _a.rememberMeLabel,\n      rememberMeLabel = _a$rememberMeLabel === void 0 ? '' : _a$rememberMeLabel,\n      _a$isRememberMeChecke = _a.isRememberMeChecked,\n      isRememberMeChecked = _a$isRememberMeChecke === void 0 ? false : _a$isRememberMeChecke,\n      _a$onChangeRememberMe = _a.onChangeRememberMe,\n      onChangeRememberMe = _a$onChangeRememberMe === void 0 ? function () {\n    return undefined;\n  } : _a$onChangeRememberMe,\n      props = __rest(_a, [\"noAutoFocus\", \"className\", \"showHelperText\", \"helperText\", \"helperTextIcon\", \"usernameLabel\", \"usernameValue\", \"onChangeUsername\", \"isValidUsername\", \"passwordLabel\", \"passwordValue\", \"onChangePassword\", \"isShowPasswordEnabled\", \"hidePasswordAriaLabel\", \"showPasswordAriaLabel\", \"isValidPassword\", \"loginButtonLabel\", \"isLoginButtonDisabled\", \"onLoginButtonClick\", \"rememberMeLabel\", \"isRememberMeChecked\", \"onChangeRememberMe\"]);\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      passwordHidden = _React$useState2[0],\n      setPasswordHidden = _React$useState2[1];\n\n  var passwordInput = React.createElement(TextInput, {\n    isRequired: true,\n    type: passwordHidden ? 'password' : 'text',\n    id: \"pf-login-password-id\",\n    name: \"pf-login-password-id\",\n    validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error,\n    value: passwordValue,\n    onChange: onChangePassword\n  });\n  return React.createElement(Form, Object.assign({\n    className: className\n  }, props), React.createElement(FormHelperText, {\n    isError: !isValidUsername || !isValidPassword,\n    isHidden: !showHelperText,\n    icon: helperTextIcon\n  }, helperText), React.createElement(FormGroup, {\n    label: usernameLabel,\n    isRequired: true,\n    validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error,\n    fieldId: \"pf-login-username-id\"\n  }, React.createElement(TextInput, {\n    autoFocus: !noAutoFocus,\n    id: \"pf-login-username-id\",\n    isRequired: true,\n    validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error,\n    type: \"text\",\n    name: \"pf-login-username-id\",\n    value: usernameValue,\n    onChange: onChangeUsername\n  })), React.createElement(FormGroup, {\n    label: passwordLabel,\n    isRequired: true,\n    validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error,\n    fieldId: \"pf-login-password-id\"\n  }, isShowPasswordEnabled && React.createElement(InputGroup, null, passwordInput, React.createElement(Button, {\n    variant: \"control\",\n    onClick: function onClick() {\n      return setPasswordHidden(!passwordHidden);\n    },\n    \"aria-label\": passwordHidden ? showPasswordAriaLabel : hidePasswordAriaLabel\n  }, passwordHidden ? React.createElement(EyeIcon, null) : React.createElement(EyeSlashIcon, null))), !isShowPasswordEnabled && passwordInput), rememberMeLabel.length > 0 && React.createElement(FormGroup, {\n    fieldId: \"pf-login-remember-me-id\"\n  }, React.createElement(Checkbox, {\n    id: \"pf-login-remember-me-id\",\n    label: rememberMeLabel,\n    isChecked: isRememberMeChecked,\n    onChange: onChangeRememberMe\n  })), React.createElement(ActionGroup, null, React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: onLoginButtonClick,\n    isBlock: true,\n    isDisabled: isLoginButtonDisabled\n  }, loginButtonLabel)));\n};\nLoginForm.displayName = 'LoginForm';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/LoginPage/LoginForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Form, FormGroup, ActionGroup, FormHelperText } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { Button } from '../Button';\nimport { Checkbox } from '../Checkbox';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { InputGroup } from '../InputGroup';\nimport EyeSlashIcon from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\nimport EyeIcon from '@patternfly/react-icons/dist/esm/icons/eye-icon';\n\nexport interface LoginFormProps extends React.HTMLProps<HTMLFormElement> {\n  /** Flag to indicate if the first dropdown item should not gain initial focus */\n  noAutoFocus?: boolean;\n  /** Additional classes added to the Login Main Body's Form */\n  className?: string;\n  /** Flag indicating the Helper Text is visible * */\n  showHelperText?: boolean;\n  /** Content displayed in the Helper Text component * */\n  helperText?: React.ReactNode;\n  /** Icon displayed to the left in the Helper Text */\n  helperTextIcon?: React.ReactNode;\n  /** Label for the Username Input Field */\n  usernameLabel?: string;\n  /** Value for the Username */\n  usernameValue?: string;\n  /** Function that handles the onChange event for the Username */\n  onChangeUsername?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Flag indicating if the Username is valid */\n  isValidUsername?: boolean;\n  /** Label for the Password Input Field */\n  passwordLabel?: string;\n  /** Value for the Password */\n  passwordValue?: string;\n  /** Function that handles the onChange event for the Password */\n  onChangePassword?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Flag indicating if the Password is valid */\n  isValidPassword?: boolean;\n  /** Flag indicating if the user can toggle hiding the password */\n  isShowPasswordEnabled?: boolean;\n  /** Accessible label for the show password button */\n  showPasswordAriaLabel?: string;\n  /** Accessible label for the hide password button */\n  hidePasswordAriaLabel?: string;\n  /** Label for the Log in Button Input */\n  loginButtonLabel?: string;\n  /** Flag indicating if the Login Button is disabled */\n  isLoginButtonDisabled?: boolean;\n  /** Function that is called when the Login button is clicked */\n  onLoginButtonClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  /** Label for the Remember Me Checkbox that indicates the user should be kept logged in.  If the label is not provided, the checkbox will not show. */\n  rememberMeLabel?: string;\n  /** Flag indicating if the remember me Checkbox is checked. */\n  isRememberMeChecked?: boolean;\n  /** Function that handles the onChange event for the Remember Me Checkbox */\n  onChangeRememberMe?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nexport const LoginForm: React.FunctionComponent<LoginFormProps> = ({\n  noAutoFocus = false,\n  className = '',\n  showHelperText = false,\n  helperText = null,\n  helperTextIcon = null,\n  usernameLabel = 'Username',\n  usernameValue = '',\n  onChangeUsername = () => undefined as any,\n  isValidUsername = true,\n  passwordLabel = 'Password',\n  passwordValue = '',\n  onChangePassword = () => undefined as any,\n  isShowPasswordEnabled = false,\n  hidePasswordAriaLabel = 'Hide password',\n  showPasswordAriaLabel = 'Show password',\n  isValidPassword = true,\n  loginButtonLabel = 'Log In',\n  isLoginButtonDisabled = false,\n  onLoginButtonClick = () => undefined as any,\n  rememberMeLabel = '',\n  isRememberMeChecked = false,\n  onChangeRememberMe = () => undefined as any,\n  ...props\n}: LoginFormProps) => {\n  const [passwordHidden, setPasswordHidden] = React.useState(true);\n\n  const passwordInput = (\n    <TextInput\n      isRequired\n      type={passwordHidden ? 'password' : 'text'}\n      id=\"pf-login-password-id\"\n      name=\"pf-login-password-id\"\n      validated={isValidPassword ? ValidatedOptions.default : ValidatedOptions.error}\n      value={passwordValue}\n      onChange={onChangePassword}\n    />\n  );\n\n  return (\n    <Form className={className} {...props}>\n      <FormHelperText isError={!isValidUsername || !isValidPassword} isHidden={!showHelperText} icon={helperTextIcon}>\n        {helperText}\n      </FormHelperText>\n      <FormGroup\n        label={usernameLabel}\n        isRequired\n        validated={isValidUsername ? ValidatedOptions.default : ValidatedOptions.error}\n        fieldId=\"pf-login-username-id\"\n      >\n        <TextInput\n          autoFocus={!noAutoFocus}\n          id=\"pf-login-username-id\"\n          isRequired\n          validated={isValidUsername ? ValidatedOptions.default : ValidatedOptions.error}\n          type=\"text\"\n          name=\"pf-login-username-id\"\n          value={usernameValue}\n          onChange={onChangeUsername}\n        />\n      </FormGroup>\n      <FormGroup\n        label={passwordLabel}\n        isRequired\n        validated={isValidPassword ? ValidatedOptions.default : ValidatedOptions.error}\n        fieldId=\"pf-login-password-id\"\n      >\n        {isShowPasswordEnabled && (\n          <InputGroup>\n            {passwordInput}\n            <Button\n              variant=\"control\"\n              onClick={() => setPasswordHidden(!passwordHidden)}\n              aria-label={passwordHidden ? showPasswordAriaLabel : hidePasswordAriaLabel}\n            >\n              {passwordHidden ? <EyeIcon /> : <EyeSlashIcon />}\n            </Button>\n          </InputGroup>\n        )}\n        {!isShowPasswordEnabled && passwordInput}\n      </FormGroup>\n      {rememberMeLabel.length > 0 && (\n        <FormGroup fieldId=\"pf-login-remember-me-id\">\n          <Checkbox\n            id=\"pf-login-remember-me-id\"\n            label={rememberMeLabel}\n            isChecked={isRememberMeChecked}\n            onChange={onChangeRememberMe}\n          />\n        </FormGroup>\n      )}\n      <ActionGroup>\n        <Button variant=\"primary\" type=\"submit\" onClick={onLoginButtonClick} isBlock isDisabled={isLoginButtonDisabled}>\n          {loginButtonLabel}\n        </Button>\n      </ActionGroup>\n    </Form>\n  );\n};\nLoginForm.displayName = 'LoginForm';\n"]},"metadata":{},"sourceType":"module"}