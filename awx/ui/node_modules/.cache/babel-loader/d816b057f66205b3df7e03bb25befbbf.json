{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Divider/divider';\nimport { formatBreakpointMods } from '../../helpers/util';\nexport var DividerVariant;\n\n(function (DividerVariant) {\n  DividerVariant[\"hr\"] = \"hr\";\n  DividerVariant[\"li\"] = \"li\";\n  DividerVariant[\"div\"] = \"div\";\n})(DividerVariant || (DividerVariant = {}));\n\nexport var Divider = function Divider(_a) {\n  var className = _a.className,\n      _a$component = _a.component,\n      component = _a$component === void 0 ? DividerVariant.hr : _a$component,\n      _a$isVertical = _a.isVertical,\n      isVertical = _a$isVertical === void 0 ? false : _a$isVertical,\n      inset = _a.inset,\n      orientation = _a.orientation,\n      props = __rest(_a, [\"className\", \"component\", \"isVertical\", \"inset\", \"orientation\"]);\n\n  var Component = component;\n  return React.createElement(Component, Object.assign({\n    className: css(styles.divider, isVertical && styles.modifiers.vertical, formatBreakpointMods(inset, styles), formatBreakpointMods(orientation, styles), className)\n  }, component !== 'hr' && {\n    role: 'separator'\n  }, props));\n};\nDivider.displayName = 'Divider';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Divider/Divider.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,yDAAnB;AACA,SAAS,oBAAT,QAAqC,oBAArC;AAEA,OAAA,IAAY,cAAZ;;AAAA,CAAA,UAAY,cAAZ,EAA0B;AACxB,EAAA,cAAA,CAAA,IAAA,CAAA,GAAA,IAAA;AACA,EAAA,cAAA,CAAA,IAAA,CAAA,GAAA,IAAA;AACA,EAAA,cAAA,CAAA,KAAA,CAAA,GAAA,KAAA;AACD,CAJD,EAAY,cAAc,KAAd,cAAc,GAAA,EAAA,CAA1B;;AAiCA,OAAO,IAAM,OAAO,GAA0C,SAAjD,OAAiD,CAAC,EAAD,EAO3C;AAP4C,MAC7D,SAD6D,GAKlD,EALkD,CAC7D,SAD6D;AAAA,qBAKlD,EALkD,CAE7D,SAF6D;AAAA,MAE7D,SAF6D,6BAEjD,cAAc,CAAC,EAFkC;AAAA,sBAKlD,EALkD,CAG7D,UAH6D;AAAA,MAG7D,UAH6D,8BAGhD,KAHgD;AAAA,MAI7D,KAJ6D,GAKlD,EALkD,CAI7D,KAJ6D;AAAA,MAK7D,WAL6D,GAKlD,EALkD,CAK7D,WAL6D;AAAA,MAM1D,KAN0D,GAMrD,MAAA,CAAA,EAAA,EANqD,CAAA,WAAA,EAAA,WAAA,EAAA,YAAA,EAAA,OAAA,EAAA,aAAA,CAMrD,CANqD;;AAQ7D,MAAM,SAAS,GAAQ,SAAvB;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA;AACR,IAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,OADK,EAEZ,UAAU,IAAI,MAAM,CAAC,SAAP,CAAiB,QAFnB,EAGZ,oBAAoB,CAAC,KAAD,EAAQ,MAAR,CAHR,EAIZ,oBAAoB,CAAC,WAAD,EAAc,MAAd,CAJR,EAKZ,SALY;AADN,GAAA,EAQH,SAAS,KAAK,IAAd,IAAsB;AAAE,IAAA,IAAI,EAAE;AAAR,GARnB,EASJ,KATI,CAAV,CADF;AAaD,CAvBM;AAwBP,OAAO,CAAC,WAAR,GAAsB,SAAtB","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Divider/divider';\nimport { formatBreakpointMods } from '../../helpers/util';\n\nexport enum DividerVariant {\n  hr = 'hr',\n  li = 'li',\n  div = 'div'\n}\n\nexport interface DividerProps extends React.HTMLProps<HTMLElement> {\n  /** Additional classes added to the divider */\n  className?: string;\n  /** The component type to use */\n  component?: 'hr' | 'li' | 'div';\n  /** @deprecated Use `orientation` instead. Flag to indicate the divider is vertical (must be in a flex layout) */\n  isVertical?: boolean;\n  /** Insets at various breakpoints. */\n  inset?: {\n    default?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n    sm?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n    md?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n    lg?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n    xl?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n    '2xl'?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n  };\n  /** Indicates how the divider will display at various breakpoints. Vertical divider must be in a flex layout. */\n  orientation?: {\n    default?: 'vertical' | 'horizontal';\n    sm?: 'vertical' | 'horizontal';\n    md?: 'vertical' | 'horizontal';\n    lg?: 'vertical' | 'horizontal';\n    xl?: 'vertical' | 'horizontal';\n    '2xl'?: 'vertical' | 'horizontal';\n  };\n}\n\nexport const Divider: React.FunctionComponent<DividerProps> = ({\n  className,\n  component = DividerVariant.hr,\n  isVertical = false,\n  inset,\n  orientation,\n  ...props\n}: DividerProps) => {\n  const Component: any = component;\n\n  return (\n    <Component\n      className={css(\n        styles.divider,\n        isVertical && styles.modifiers.vertical,\n        formatBreakpointMods(inset, styles),\n        formatBreakpointMods(orientation, styles),\n        className\n      )}\n      {...(component !== 'hr' && { role: 'separator' })}\n      {...props}\n    />\n  );\n};\nDivider.displayName = 'Divider';\n"]},"metadata":{},"sourceType":"module"}