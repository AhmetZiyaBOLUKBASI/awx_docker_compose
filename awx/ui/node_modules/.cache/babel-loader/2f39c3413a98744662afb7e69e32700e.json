{"ast":null,"code":"import _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport scrollStyles from '@patternfly/react-styles/css/components/Table/table-scrollable';\nimport { info } from '../Table/utils/decorators/info';\nimport { sortable, sortableFavorites } from '../Table/utils/decorators/sortable';\nimport { selectable } from '../Table/utils/decorators/selectable';\nimport { collapsible } from '../Table/utils/decorators/collapsible';\nimport { cellWidth } from './../Table/utils/decorators/cellWidth';\nimport { Visibility, classNames } from './../Table/utils/decorators/classNames';\nimport { mergeProps } from '../Table/base/merge-props';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nvar ThBase = function ThBase(_a) {\n  var children = _a.children,\n      className = _a.className,\n      _a$component = _a.component,\n      component = _a$component === void 0 ? 'th' : _a$component,\n      dataLabel = _a.dataLabel,\n      _a$scope = _a.scope,\n      scope = _a$scope === void 0 ? 'col' : _a$scope,\n      _a$textCenter = _a.textCenter,\n      textCenter = _a$textCenter === void 0 ? false : _a$textCenter,\n      _a$sort = _a.sort,\n      sort = _a$sort === void 0 ? null : _a$sort,\n      modifier = _a.modifier,\n      _a$select = _a.select,\n      select = _a$select === void 0 ? null : _a$select,\n      _a$expand = _a.expand,\n      collapse = _a$expand === void 0 ? null : _a$expand,\n      _a$tooltip = _a.tooltip,\n      tooltip = _a$tooltip === void 0 ? '' : _a$tooltip,\n      _a$onMouseEnter = _a.onMouseEnter,\n      onMouseEnterProp = _a$onMouseEnter === void 0 ? function () {} : _a$onMouseEnter,\n      width = _a.width,\n      visibility = _a.visibility,\n      innerRef = _a.innerRef,\n      infoProps = _a.info,\n      _a$isStickyColumn = _a.isStickyColumn,\n      isStickyColumn = _a$isStickyColumn === void 0 ? false : _a$isStickyColumn,\n      _a$hasRightBorder = _a.hasRightBorder,\n      hasRightBorder = _a$hasRightBorder === void 0 ? false : _a$hasRightBorder,\n      _a$stickyMinWidth = _a.stickyMinWidth,\n      stickyMinWidth = _a$stickyMinWidth === void 0 ? '120px' : _a$stickyMinWidth,\n      stickyLeftOffset = _a.stickyLeftOffset,\n      _a$isSubheader = _a.isSubheader,\n      isSubheader = _a$isSubheader === void 0 ? false : _a$isSubheader,\n      props = __rest(_a, [\"children\", \"className\", \"component\", \"dataLabel\", \"scope\", \"textCenter\", \"sort\", \"modifier\", \"select\", \"expand\", \"tooltip\", \"onMouseEnter\", \"width\", \"visibility\", \"innerRef\", \"info\", \"isStickyColumn\", \"hasRightBorder\", \"stickyMinWidth\", \"stickyLeftOffset\", \"isSubheader\"]);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      showTooltip = _React$useState2[0],\n      setShowTooltip = _React$useState2[1];\n\n  var onMouseEnter = function onMouseEnter(event) {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      !showTooltip && setShowTooltip(true);\n    } else {\n      showTooltip && setShowTooltip(false);\n    }\n\n    onMouseEnterProp(event);\n  };\n\n  var sortParams = null;\n\n  if (sort) {\n    if (sort.isFavorites) {\n      sortParams = sortableFavorites({\n        onSort: sort === null || sort === void 0 ? void 0 : sort.onSort,\n        columnIndex: sort.columnIndex,\n        sortBy: sort.sortBy\n      })();\n    } else {\n      sortParams = sortable(children, {\n        columnIndex: sort.columnIndex,\n        column: {\n          extraParams: {\n            sortBy: sort.sortBy,\n            onSort: sort === null || sort === void 0 ? void 0 : sort.onSort\n          }\n        }\n      });\n    }\n  }\n\n  var selectParams = select ? selectable(children, {\n    column: {\n      extraParams: {\n        onSelect: select === null || select === void 0 ? void 0 : select.onSelect,\n        selectVariant: 'checkbox',\n        allRowsSelected: select.isSelected,\n        isHeaderSelectDisabled: !!select.isHeaderSelectDisabled\n      }\n    }\n  }) : null;\n  var collapseParams = collapse ? collapsible(children, {\n    column: {\n      extraParams: {\n        onCollapse: collapse === null || collapse === void 0 ? void 0 : collapse.onToggle,\n        allRowsExpanded: !collapse.areAllExpanded,\n        collapseAllAriaLabel: ''\n      }\n    }\n  }) : null;\n  var widthParams = width ? cellWidth(width)() : null;\n  var visibilityParams = visibility ? classNames.apply(void 0, _toConsumableArray(visibility.map(function (vis) {\n    return Visibility[vis];\n  })))() : null;\n  var transformedChildren = (sortParams === null || sortParams === void 0 ? void 0 : sortParams.children) || (selectParams === null || selectParams === void 0 ? void 0 : selectParams.children) || (collapseParams === null || collapseParams === void 0 ? void 0 : collapseParams.children) || children; // info can wrap other transformedChildren\n\n  var infoParams = null;\n\n  if (infoProps) {\n    infoParams = info(infoProps)(transformedChildren);\n    transformedChildren = infoParams.children;\n  }\n\n  var merged = mergeProps(sortParams, selectParams, collapseParams, widthParams, visibilityParams, infoParams);\n\n  var _merged$children = merged.children,\n      mergedChildren = _merged$children === void 0 ? null : _merged$children,\n      _merged$isVisible = merged.isVisible,\n      isVisible = _merged$isVisible === void 0 ? null : _merged$isVisible,\n      _merged$className = merged.className,\n      mergedClassName = _merged$className === void 0 ? '' : _merged$className,\n      _merged$component = merged.component,\n      MergedComponent = _merged$component === void 0 ? component : _merged$component,\n      mergedProps = __rest(merged, [\"children\", \"isVisible\", \"className\", \"component\"]);\n\n  var cell = React.createElement(MergedComponent, Object.assign({\n    \"data-label\": dataLabel,\n    onMouseEnter: tooltip !== null ? onMouseEnter : onMouseEnterProp,\n    scope: component === 'th' && children ? scope : null,\n    ref: innerRef,\n    className: css(className, textCenter && styles.modifiers.center, isSubheader && styles.tableSubhead, isStickyColumn && scrollStyles.tableStickyColumn, hasRightBorder && scrollStyles.modifiers.borderRight, modifier && styles.modifiers[modifier], mergedClassName)\n  }, mergedProps, props, isStickyColumn && {\n    style: Object.assign({\n      '--pf-c-table__sticky-column--MinWidth': stickyMinWidth ? stickyMinWidth : undefined,\n      '--pf-c-table__sticky-column--Left': stickyLeftOffset ? stickyLeftOffset : undefined\n    }, props.style)\n  }), transformedChildren);\n  var canDefault = tooltip === '' ? typeof children === 'string' : true;\n  return tooltip !== null && canDefault && showTooltip ? React.createElement(Tooltip, {\n    content: tooltip || tooltip === '' && children,\n    isVisible: true\n  }, cell) : cell;\n};\n\nexport var Th = React.forwardRef(function (props, ref) {\n  return React.createElement(ThBase, Object.assign({}, props, {\n    innerRef: ref\n  }));\n});\nTh.displayName = 'Th';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/TableComposable/Th.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport scrollStyles from '@patternfly/react-styles/css/components/Table/table-scrollable';\nimport { info } from '../Table/utils/decorators/info';\nimport { sortable, sortableFavorites } from '../Table/utils/decorators/sortable';\nimport { selectable } from '../Table/utils/decorators/selectable';\nimport { collapsible } from '../Table/utils/decorators/collapsible';\nimport { cellWidth } from './../Table/utils/decorators/cellWidth';\nimport { Visibility, classNames } from './../Table/utils/decorators/classNames';\nimport { ThInfoType, ThSelectType, ThExpandType, ThSortType, formatterValueType } from '../Table/base/types';\nimport { mergeProps } from '../Table/base/merge-props';\nimport { IVisibility } from '../Table/utils/decorators/classNames';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport { BaseCellProps } from './TableComposable';\nimport { IFormatterValueType, IColumn } from '../Table/TableTypes';\n\nexport interface ThProps\n  extends BaseCellProps,\n    Omit<React.HTMLProps<HTMLTableHeaderCellElement>, 'onSelect' | 'width'> {\n  /**\n   * The column header the cell corresponds to. Applicable when this component is used as a direct child to <Tr>.\n   * This attribute replaces table header in mobile viewport. It is rendered by ::before pseudo element.\n   */\n  dataLabel?: string;\n  /** Renders a checkbox select so that all row checkboxes can be selected/deselected */\n  select?: ThSelectType;\n  /** Renders a chevron so that all row chevrons can be expanded/collapsed */\n  expand?: ThExpandType;\n  /** Formats the header so that its column will be sortable */\n  sort?: ThSortType;\n  /**\n   * Tooltip to show on the header cell\n   * Note: If the header cell is truncated and has simple string content, it will already attempt to display the header text\n   * If you want to show a tooltip that differs from the header text, you can set it here\n   * To disable it completely you can set it to null\n   */\n  tooltip?: React.ReactNode;\n  /** Callback on mouse enter */\n  onMouseEnter?: (event: any) => void;\n  /** Adds tooltip/popover info button */\n  info?: ThInfoType;\n  /** Adds scope to the column to associate header cells with data cells*/\n  scope?: string;\n  /** Indicates the header column should be sticky */\n  isStickyColumn?: boolean;\n  /** Adds a border to the right side of the cell */\n  hasRightBorder?: boolean;\n  /** Minimum width for a sticky column */\n  stickyMinWidth?: string;\n  /** Left offset of a sticky column. This will typically be equal to the combined value set by stickyMinWidth of any sticky columns that precede the current sticky column. */\n  stickyLeftOffset?: string;\n  /** Indicates the <th> is part of a subheader of a nested header */\n  isSubheader?: boolean;\n}\n\nconst ThBase: React.FunctionComponent<ThProps> = ({\n  children,\n  className,\n  component = 'th',\n  dataLabel,\n  scope = 'col',\n  textCenter = false,\n  sort = null,\n  modifier,\n  select = null,\n  expand: collapse = null,\n  tooltip = '',\n  onMouseEnter: onMouseEnterProp = () => {},\n  width,\n  visibility,\n  innerRef,\n  info: infoProps,\n  isStickyColumn = false,\n  hasRightBorder = false,\n  stickyMinWidth = '120px',\n  stickyLeftOffset,\n  isSubheader = false,\n  ...props\n}: ThProps) => {\n  const [showTooltip, setShowTooltip] = React.useState(false);\n  const onMouseEnter = (event: any) => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      !showTooltip && setShowTooltip(true);\n    } else {\n      showTooltip && setShowTooltip(false);\n    }\n    onMouseEnterProp(event);\n  };\n  let sortParams = null;\n  if (sort) {\n    if (sort.isFavorites) {\n      sortParams = sortableFavorites({\n        onSort: sort?.onSort,\n        columnIndex: sort.columnIndex,\n        sortBy: sort.sortBy\n      })();\n    } else {\n      sortParams = sortable(children as IFormatterValueType, {\n        columnIndex: sort.columnIndex,\n        column: {\n          extraParams: {\n            sortBy: sort.sortBy,\n            onSort: sort?.onSort\n          }\n        } as IColumn\n      });\n    }\n  }\n  const selectParams = select\n    ? selectable(children as IFormatterValueType, {\n        column: {\n          extraParams: {\n            onSelect: select?.onSelect,\n            selectVariant: 'checkbox',\n            allRowsSelected: select.isSelected,\n            isHeaderSelectDisabled: !!select.isHeaderSelectDisabled\n          }\n        }\n      })\n    : null;\n  const collapseParams = collapse\n    ? collapsible(children as IFormatterValueType, {\n        column: {\n          extraParams: {\n            onCollapse: collapse?.onToggle,\n            allRowsExpanded: !collapse.areAllExpanded,\n            collapseAllAriaLabel: ''\n          }\n        }\n      })\n    : null;\n  const widthParams = width ? cellWidth(width)() : null;\n  const visibilityParams = visibility\n    ? classNames(...visibility.map((vis: keyof IVisibility) => Visibility[vis]))()\n    : null;\n  let transformedChildren = sortParams?.children || selectParams?.children || collapseParams?.children || children;\n  // info can wrap other transformedChildren\n  let infoParams = null;\n  if (infoProps) {\n    infoParams = info(infoProps)(transformedChildren as formatterValueType);\n    transformedChildren = infoParams.children;\n  }\n  const merged = mergeProps(sortParams, selectParams, collapseParams, widthParams, visibilityParams, infoParams);\n  const {\n    // ignore the merged children since we transform them ourselves so we can wrap it with info\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    children: mergedChildren = null,\n    // selectable adds this but we don't want it\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isVisible = null,\n    className: mergedClassName = '',\n    component: MergedComponent = component,\n    ...mergedProps\n  } = merged;\n\n  const cell = (\n    <MergedComponent\n      data-label={dataLabel}\n      onMouseEnter={tooltip !== null ? onMouseEnter : onMouseEnterProp}\n      scope={component === 'th' && children ? scope : null}\n      ref={innerRef}\n      className={css(\n        className,\n        textCenter && styles.modifiers.center,\n        isSubheader && styles.tableSubhead,\n        isStickyColumn && scrollStyles.tableStickyColumn,\n        hasRightBorder && scrollStyles.modifiers.borderRight,\n        modifier && styles.modifiers[modifier as 'breakWord' | 'fitContent' | 'nowrap' | 'truncate' | 'wrap'],\n        mergedClassName\n      )}\n      {...mergedProps}\n      {...props}\n      {...(isStickyColumn && {\n        style: {\n          '--pf-c-table__sticky-column--MinWidth': stickyMinWidth ? stickyMinWidth : undefined,\n          '--pf-c-table__sticky-column--Left': stickyLeftOffset ? stickyLeftOffset : undefined,\n          ...props.style\n        } as React.CSSProperties\n      })}\n    >\n      {transformedChildren}\n    </MergedComponent>\n  );\n\n  const canDefault = tooltip === '' ? typeof children === 'string' : true;\n  return tooltip !== null && canDefault && showTooltip ? (\n    <Tooltip content={tooltip || (tooltip === '' && children)} isVisible>\n      {cell}\n    </Tooltip>\n  ) : (\n    cell\n  );\n};\n\nexport const Th = React.forwardRef((props: ThProps, ref: React.Ref<HTMLTableHeaderCellElement>) => (\n  <ThBase {...props} innerRef={ref} />\n));\nTh.displayName = 'Th';\n"]},"metadata":{},"sourceType":"module"}