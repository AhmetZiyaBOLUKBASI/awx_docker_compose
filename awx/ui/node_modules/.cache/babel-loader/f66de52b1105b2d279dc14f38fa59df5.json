{"ast":null,"code":"import _createForOfIteratorHelper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n\nvar hasCompoundParentsExpanded = function hasCompoundParentsExpanded(parentId, compoundParent, rows) {\n  // max rows.length parents\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  var _iterator = _createForOfIteratorHelper(rows),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var i = _step.value;\n\n      if (rows[parentId].hasOwnProperty('parent')) {\n        parentId = rows[parentId].parent;\n      } else {\n        return rows[parentId].cells[compoundParent].props.isOpen;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return false;\n};\n\nvar hasParentsExpanded = function hasParentsExpanded(parentId, rows) {\n  // max rows.length parents\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  var _iterator2 = _createForOfIteratorHelper(rows),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var i = _step2.value;\n\n      if (rows[parentId].hasOwnProperty('parent')) {\n        parentId = rows[parentId].parent;\n      } else {\n        return rows[parentId].isOpen;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return false;\n};\n\nexport var isRowExpanded = function isRowExpanded(row, rows) {\n  if (row.parent !== undefined) {\n    if (row.hasOwnProperty('compoundParent')) {\n      return hasCompoundParentsExpanded(row.parent, row.compoundParent, rows);\n    }\n\n    return hasParentsExpanded(row.parent, rows) && rows[row.parent].isOpen;\n  }\n\n  return undefined;\n};\nexport var getErrorTextByValidator = function getErrorTextByValidator(validatorName, validators) {\n  var result = validators.filter(function (validator) {\n    return validator.name === validatorName;\n  });\n  return result[0].errorText;\n};\nexport var cancelCellEdits = function cancelCellEdits(row) {\n  row.cells.forEach(function (cell) {\n    delete cell.props.errorText;\n    delete cell.props.editableValue;\n    cell.props.isValid = true; // for editable selects, revert the selected property to its original value\n\n    if (cell.props.selected) {\n      cell.props.selected = cell.props.value;\n    }\n  });\n  row.isEditable = !row.isEditable;\n  row.isValid = true;\n  return row;\n};\nexport var validateCellEdits = function validateCellEdits(row, type, validationErrors) {\n  var missingPropErrorTxt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Validation requires unique name property for row cells';\n  row.isValid = Object.keys(validationErrors).length ? false : true;\n  row.cells.forEach(function (cell) {\n    delete cell.props.errorText;\n    var hasValue = cell.props.value !== undefined && cell.props.value !== null;\n    var hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null;\n\n    if (cell.props && hasValue && hasEditableValue) {\n      if (type === 'save') {\n        var errorMsg = Object.keys(validationErrors).filter(function (validatorName) {\n          return validationErrors[validatorName].includes(cell.props.name);\n        }).map(function (validatorName) {\n          return getErrorTextByValidator(validatorName, row.rowEditValidationRules);\n        });\n\n        if (errorMsg.length) {\n          cell.props.errorText = cell.props.name ? errorMsg.join(', ') : missingPropErrorTxt;\n\n          if (cell.props.name === undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('Row edit validation reporting requires cell definitions to have a unique name property.');\n          }\n        } else {\n          delete cell.props.errorText;\n          cell.props.isValid = true;\n        }\n      }\n    }\n  });\n  return row;\n};\nexport var applyCellEdits = function applyCellEdits(row, type) {\n  row.cells.forEach(function (cell) {\n    delete cell.props.errorText;\n    var hasValue = cell.props.value !== undefined && cell.props.value !== null;\n    var hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null; // sync for validation\n\n    if (hasValue && !hasEditableValue) {\n      cell.props.editableValue = cell.props.value;\n    }\n\n    if (cell.props && hasValue && hasEditableValue) {\n      if (type === 'save') {\n        cell.props.value = cell.props.editableValue;\n        cell.props.isValid = true;\n        delete cell.props.errorText;\n      }\n\n      delete cell.props.editableValue;\n    }\n  });\n  row.isEditable = !row.isEditable;\n  row.isValid = true;\n  return row;\n};\n\nvar camelize = function camelize(s) {\n  return s.toUpperCase().replace('-', '').replace('_', '');\n};\n\nexport var toCamel = function toCamel(s) {\n  return s.replace(/([-_][a-z])/gi, camelize);\n};\n/**\n * @param {string} input - String to capitalize\n */\n\nexport function capitalize(input) {\n  return input[0].toUpperCase() + input.substring(1);\n}","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/utils/utils.tsx"],"names":[],"mappings":"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","sourcesContent":["import { IRow, IRowCell, IValidatorDef, RowEditType, RowErrors } from '../TableTypes';\n\nconst hasCompoundParentsExpanded = (parentId: number, compoundParent: number, rows: IRow[]) => {\n  // max rows.length parents\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const i of rows) {\n    if (rows[parentId].hasOwnProperty('parent')) {\n      parentId = rows[parentId].parent;\n    } else {\n      return (rows[parentId].cells[compoundParent] as IRowCell).props.isOpen;\n    }\n  }\n  return false;\n};\n\nconst hasParentsExpanded = (parentId: number, rows: IRow[]) => {\n  // max rows.length parents\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const i of rows) {\n    if (rows[parentId].hasOwnProperty('parent')) {\n      parentId = rows[parentId].parent;\n    } else {\n      return rows[parentId].isOpen;\n    }\n  }\n  return false;\n};\n\nexport const isRowExpanded = (row: IRow, rows: IRow[]) => {\n  if (row.parent !== undefined) {\n    if (row.hasOwnProperty('compoundParent')) {\n      return hasCompoundParentsExpanded(row.parent, row.compoundParent, rows);\n    }\n    return hasParentsExpanded(row.parent, rows) && rows[row.parent].isOpen;\n  }\n  return undefined;\n};\n\nexport const getErrorTextByValidator = (validatorName: string, validators: IValidatorDef[]) => {\n  const result = validators.filter(validator => validator.name === validatorName);\n  return result[0].errorText;\n};\n\nexport const cancelCellEdits = (row: IRow) => {\n  (row.cells as IRowCell[]).forEach(cell => {\n    delete cell.props.errorText;\n    delete cell.props.editableValue;\n    cell.props.isValid = true;\n    // for editable selects, revert the selected property to its original value\n    if (cell.props.selected) {\n      cell.props.selected = cell.props.value;\n    }\n  });\n\n  row.isEditable = !row.isEditable;\n  row.isValid = true;\n  return row;\n};\n\nexport const validateCellEdits = (\n  row: IRow,\n  type: RowEditType,\n  validationErrors: RowErrors,\n  missingPropErrorTxt = 'Validation requires unique name property for row cells'\n) => {\n  row.isValid = Object.keys(validationErrors).length ? false : true;\n\n  (row.cells as IRowCell[]).forEach(cell => {\n    delete cell.props.errorText;\n\n    const hasValue = cell.props.value !== undefined && cell.props.value !== null;\n    const hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null;\n\n    if (cell.props && hasValue && hasEditableValue) {\n      if (type === 'save') {\n        const errorMsg = Object.keys(validationErrors)\n          .filter(validatorName => validationErrors[validatorName].includes(cell.props.name))\n          .map(validatorName => getErrorTextByValidator(validatorName, row.rowEditValidationRules));\n\n        if (errorMsg.length) {\n          cell.props.errorText = cell.props.name ? errorMsg.join(', ') : missingPropErrorTxt;\n          if (cell.props.name === undefined) {\n            // eslint-disable-next-line no-console\n            console.warn('Row edit validation reporting requires cell definitions to have a unique name property.');\n          }\n        } else {\n          delete cell.props.errorText;\n          cell.props.isValid = true;\n        }\n      }\n    }\n  });\n  return row;\n};\n\nexport const applyCellEdits = (row: IRow, type: RowEditType) => {\n  (row.cells as IRowCell[]).forEach(cell => {\n    delete cell.props.errorText;\n    const hasValue = cell.props.value !== undefined && cell.props.value !== null;\n    const hasEditableValue = cell.props.editableValue !== undefined && cell.props.editableValue !== null;\n\n    // sync for validation\n    if (hasValue && !hasEditableValue) {\n      cell.props.editableValue = cell.props.value;\n    }\n\n    if (cell.props && hasValue && hasEditableValue) {\n      if (type === 'save') {\n        cell.props.value = cell.props.editableValue;\n        cell.props.isValid = true;\n        delete cell.props.errorText;\n      }\n      delete cell.props.editableValue;\n    }\n  });\n\n  row.isEditable = !row.isEditable;\n  row.isValid = true;\n  return row;\n};\n\nconst camelize = (s: string) =>\n  s\n    .toUpperCase()\n    .replace('-', '')\n    .replace('_', '');\nexport const toCamel = (s: string) => s.replace(/([-_][a-z])/gi, camelize);\n\n/**\n * @param {string} input - String to capitalize\n */\nexport function capitalize(input: string) {\n  return input[0].toUpperCase() + input.substring(1);\n}\n"]},"metadata":{},"sourceType":"module"}