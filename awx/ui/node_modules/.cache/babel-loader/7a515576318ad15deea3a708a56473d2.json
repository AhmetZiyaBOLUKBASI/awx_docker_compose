{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";function filterDefaultParams(paramsArr,config){var defaultParamsKeys=Object.keys(config.defaultParams||{});return paramsArr.filter(function(key){return defaultParamsKeys.indexOf(key)===-1;});}function getLabelFromValue(columns,value,colKey){var _currentSearchColumn$;var label=value;var currentSearchColumn=columns.find(function(_ref){var key=_ref.key;return key===colKey;});if(currentSearchColumn!==null&&currentSearchColumn!==void 0&&(_currentSearchColumn$=currentSearchColumn.options)!==null&&_currentSearchColumn$!==void 0&&_currentSearchColumn$.length){var _currentSearchColumn$2=currentSearchColumn.options.find(function(_ref2){var _ref3=_slicedToArray(_ref2,1),optVal=_ref3[0];return optVal===value;});var _currentSearchColumn$3=_slicedToArray(_currentSearchColumn$2,2);label=_currentSearchColumn$3[1];}else if(currentSearchColumn!==null&&currentSearchColumn!==void 0&&currentSearchColumn.booleanLabels){label=currentSearchColumn.booleanLabels[value];}return(label||colKey).toString();}export default function getChipsByKey(queryParams,columns,qsConfig){var queryParamsByKey={};columns.forEach(function(_ref4){var name=_ref4.name,key=_ref4.key;queryParamsByKey[key]={key:key,label:\"\".concat(name,\" (\").concat(key,\")\"),chips:[]};});var nonDefaultParams=filterDefaultParams(Object.keys(queryParams||{}),qsConfig);nonDefaultParams.forEach(function(key){var columnKey=key;var label=columns.filter(function(_ref5){var keyToCheck=_ref5.key;return columnKey===keyToCheck;}).length?\"\".concat(columns.find(function(_ref6){var keyToCheck=_ref6.key;return columnKey===keyToCheck;}).name,\" (\").concat(key,\")\"):columnKey;queryParamsByKey[columnKey]={key:key,label:label,chips:[]};if(Array.isArray(queryParams[key])){queryParams[key].forEach(function(val){return queryParamsByKey[columnKey].chips.push({key:\"\".concat(key,\":\").concat(val),node:getLabelFromValue(columns,val,columnKey)});});}else{queryParamsByKey[columnKey].chips.push({key:\"\".concat(key,\":\").concat(queryParams[key]),node:getLabelFromValue(columns,queryParams[key],columnKey)});}});return queryParamsByKey;}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/Search/getChipsByKey.js"],"names":["filterDefaultParams","paramsArr","config","defaultParamsKeys","Object","keys","defaultParams","filter","key","indexOf","getLabelFromValue","columns","value","colKey","label","currentSearchColumn","find","options","length","optVal","booleanLabels","toString","getChipsByKey","queryParams","qsConfig","queryParamsByKey","forEach","name","chips","nonDefaultParams","columnKey","keyToCheck","Array","isArray","val","push","node"],"mappings":"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","sourcesContent":["function filterDefaultParams(paramsArr, config) {\n  const defaultParamsKeys = Object.keys(config.defaultParams || {});\n  return paramsArr.filter((key) => defaultParamsKeys.indexOf(key) === -1);\n}\n\nfunction getLabelFromValue(columns, value, colKey) {\n  let label = value;\n  const currentSearchColumn = columns.find(({ key }) => key === colKey);\n  if (currentSearchColumn?.options?.length) {\n    [, label] = currentSearchColumn.options.find(\n      ([optVal]) => optVal === value\n    );\n  } else if (currentSearchColumn?.booleanLabels) {\n    label = currentSearchColumn.booleanLabels[value];\n  }\n  return (label || colKey).toString();\n}\n\nexport default function getChipsByKey(queryParams, columns, qsConfig) {\n  const queryParamsByKey = {};\n  columns.forEach(({ name, key }) => {\n    queryParamsByKey[key] = { key, label: `${name} (${key})`, chips: [] };\n  });\n  const nonDefaultParams = filterDefaultParams(\n    Object.keys(queryParams || {}),\n    qsConfig\n  );\n\n  nonDefaultParams.forEach((key) => {\n    const columnKey = key;\n    const label = columns.filter(\n      ({ key: keyToCheck }) => columnKey === keyToCheck\n    ).length\n      ? `${\n          columns.find(({ key: keyToCheck }) => columnKey === keyToCheck).name\n        } (${key})`\n      : columnKey;\n\n    queryParamsByKey[columnKey] = { key, label, chips: [] };\n\n    if (Array.isArray(queryParams[key])) {\n      queryParams[key].forEach((val) =>\n        queryParamsByKey[columnKey].chips.push({\n          key: `${key}:${val}`,\n          node: getLabelFromValue(columns, val, columnKey),\n        })\n      );\n    } else {\n      queryParamsByKey[columnKey].chips.push({\n        key: `${key}:${queryParams[key]}`,\n        node: getLabelFromValue(columns, queryParams[key], columnKey),\n      });\n    }\n  });\n  return queryParamsByKey;\n}\n"]},"metadata":{},"sourceType":"module"}