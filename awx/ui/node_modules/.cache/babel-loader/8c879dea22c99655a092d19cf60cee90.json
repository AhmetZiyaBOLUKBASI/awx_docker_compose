{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { Toggle } from './Toggle';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport var DropdownToggle = function DropdownToggle(_a) {\n  var _a$id = _a.id,\n      id = _a$id === void 0 ? '' : _a$id,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$isOpen = _a.isOpen,\n      isOpen = _a$isOpen === void 0 ? false : _a$isOpen,\n      _a$parentRef = _a.parentRef,\n      parentRef = _a$parentRef === void 0 ? null : _a$parentRef,\n      _a$getMenuRef = _a.getMenuRef,\n      getMenuRef = _a$getMenuRef === void 0 ? null : _a$getMenuRef,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      _a$isPlain = _a.isPlain,\n      isPlain = _a$isPlain === void 0 ? false : _a$isPlain,\n      _a$isText = _a.isText,\n      isText = _a$isText === void 0 ? false : _a$isText,\n      _a$isPrimary = _a.isPrimary,\n      isPrimary = _a$isPrimary === void 0 ? false : _a$isPrimary,\n      _a$toggleVariant = _a.toggleVariant,\n      toggleVariant = _a$toggleVariant === void 0 ? 'default' : _a$toggleVariant,\n      _a$isActive = _a.isActive,\n      isActive = _a$isActive === void 0 ? false : _a$isActive,\n      _a$onToggle = _a.onToggle,\n      onToggle = _a$onToggle === void 0 ? function (_isOpen) {\n    return undefined;\n  } : _a$onToggle,\n      _a$icon = _a.icon,\n      icon = _a$icon === void 0 ? null : _a$icon,\n      _a$toggleIndicator = _a.toggleIndicator,\n      ToggleIndicator = _a$toggleIndicator === void 0 ? CaretDownIcon : _a$toggleIndicator,\n      splitButtonItems = _a.splitButtonItems,\n      _a$splitButtonVariant = _a.splitButtonVariant,\n      splitButtonVariant = _a$splitButtonVariant === void 0 ? 'checkbox' : _a$splitButtonVariant,\n      ariaHasPopup = _a['aria-haspopup'],\n      ouiaId = _a.ouiaId,\n      ouiaSafe = _a.ouiaSafe,\n      ref = _a.ref,\n      props = __rest(_a, [\"id\", \"children\", \"className\", \"isOpen\", \"parentRef\", \"getMenuRef\", \"isDisabled\", \"isPlain\", \"isText\", \"isPrimary\", \"toggleVariant\", \"isActive\", \"onToggle\", \"icon\", \"toggleIndicator\", \"splitButtonItems\", \"splitButtonVariant\", 'aria-haspopup', \"ouiaId\", \"ouiaSafe\", \"ref\"]);\n\n  var ouiaProps = useOUIAProps(DropdownToggle.displayName, ouiaId, ouiaSafe);\n  var toggle = React.createElement(DropdownContext.Consumer, null, function (_ref) {\n    var toggleTextClass = _ref.toggleTextClass,\n        toggleIndicatorClass = _ref.toggleIndicatorClass,\n        toggleIconClass = _ref.toggleIconClass;\n    return React.createElement(Toggle, Object.assign({}, props, {\n      id: id,\n      className: className,\n      isOpen: isOpen,\n      parentRef: parentRef,\n      getMenuRef: getMenuRef,\n      isActive: isActive,\n      isDisabled: isDisabled,\n      isPlain: isPlain,\n      isText: isText,\n      isPrimary: isPrimary,\n      toggleVariant: toggleVariant,\n      onToggle: onToggle,\n      \"aria-haspopup\": ariaHasPopup\n    }, ouiaProps, splitButtonItems && {\n      isSplitButton: true,\n      'aria-label': props['aria-label'] || 'Select'\n    }), icon && React.createElement(\"span\", {\n      className: css(toggleIconClass)\n    }, icon), children && React.createElement(\"span\", {\n      className: ToggleIndicator && css(toggleTextClass)\n    }, children), ToggleIndicator && React.createElement(\"span\", {\n      className: css(!splitButtonItems && toggleIndicatorClass)\n    }, React.createElement(ToggleIndicator, null)));\n  });\n\n  if (splitButtonItems) {\n    return React.createElement(\"div\", {\n      className: css(styles.dropdownToggle, styles.modifiers.splitButton, splitButtonVariant === 'action' && styles.modifiers.action, (toggleVariant === 'primary' || isPrimary) && splitButtonVariant === 'action' && styles.modifiers.primary, isDisabled && styles.modifiers.disabled)\n    }, splitButtonItems, toggle);\n  }\n\n  return toggle;\n};\nDropdownToggle.displayName = 'DropdownToggle';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Dropdown/DropdownToggle.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { Toggle } from './Toggle';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps, OUIAProps } from '../../helpers';\n\nexport interface DropdownToggleProps extends React.HTMLProps<HTMLButtonElement>, OUIAProps {\n  /** HTML ID of dropdown toggle */\n  id?: string;\n  /** Anything which can be rendered as dropdown toggle button */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown toggle button */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (value: boolean, event: any) => void;\n  /** Element which wraps toggle */\n  parentRef?: HTMLElement;\n  /** The menu element */\n  getMenuRef?: () => HTMLElement;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Display the toggle in text only mode */\n  isText?: boolean;\n  /** Whether or not the <div> has a disabled state */\n  isDisabled?: boolean;\n  /** @deprecated Use `toggleVariant` instead. Whether or not the dropdown toggle button should have primary button styling */\n  isPrimary?: boolean;\n  /** Alternate styles for the dropdown toggle button */\n  toggleVariant?: 'primary' | 'secondary' | 'default';\n  /** An image to display within the dropdown toggle, appearing before any component children */\n  icon?: React.ReactNode;\n  /** The icon to display for the toggle, appearing after any component children. Defaults to CaretDownIcon. Set to null to not show an icon. */\n  toggleIndicator?: React.ElementType | null;\n  /** Elements to display before the toggle button. When included, renders the toggle as a split button. */\n  splitButtonItems?: React.ReactNode[];\n  /** Variant of split button toggle */\n  splitButtonVariant?: 'action' | 'checkbox';\n  /** Accessible label for the dropdown toggle button */\n  'aria-label'?: string;\n  /** Accessibility property to indicate correct has popup */\n  'aria-haspopup'?: boolean | 'listbox' | 'menu' | 'dialog' | 'grid' | 'tree';\n  /** Type to put on the button */\n  type?: 'button' | 'submit' | 'reset';\n  /** Callback called when the Enter key is pressed */\n  onEnter?: (event?: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nexport const DropdownToggle: React.FunctionComponent<DropdownToggleProps> = ({\n  id = '',\n  children = null,\n  className = '',\n  isOpen = false,\n  parentRef = null,\n  getMenuRef = null,\n  isDisabled = false,\n  isPlain = false,\n  isText = false,\n  isPrimary = false,\n  toggleVariant = 'default',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isActive = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle = (_isOpen: boolean) => undefined as any,\n  icon = null,\n  toggleIndicator: ToggleIndicator = CaretDownIcon,\n  splitButtonItems,\n  splitButtonVariant = 'checkbox',\n  'aria-haspopup': ariaHasPopup,\n  ouiaId,\n  ouiaSafe,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ref, // Types of Ref are different for React.FunctionComponent vs React.Component\n  ...props\n}: DropdownToggleProps) => {\n  const ouiaProps = useOUIAProps(DropdownToggle.displayName, ouiaId, ouiaSafe);\n  const toggle = (\n    <DropdownContext.Consumer>\n      {({ toggleTextClass, toggleIndicatorClass, toggleIconClass }) => (\n        <Toggle\n          {...props}\n          id={id}\n          className={className}\n          isOpen={isOpen}\n          parentRef={parentRef}\n          getMenuRef={getMenuRef}\n          isActive={isActive}\n          isDisabled={isDisabled}\n          isPlain={isPlain}\n          isText={isText}\n          isPrimary={isPrimary}\n          toggleVariant={toggleVariant}\n          onToggle={onToggle}\n          aria-haspopup={ariaHasPopup}\n          {...ouiaProps}\n          {...(splitButtonItems && { isSplitButton: true, 'aria-label': props['aria-label'] || 'Select' })}\n        >\n          {icon && <span className={css(toggleIconClass)}>{icon}</span>}\n          {children && <span className={ToggleIndicator && css(toggleTextClass)}>{children}</span>}\n          {ToggleIndicator && (\n            <span className={css(!splitButtonItems && toggleIndicatorClass)}>\n              <ToggleIndicator />\n            </span>\n          )}\n        </Toggle>\n      )}\n    </DropdownContext.Consumer>\n  );\n\n  if (splitButtonItems) {\n    return (\n      <div\n        className={css(\n          styles.dropdownToggle,\n          styles.modifiers.splitButton,\n          splitButtonVariant === 'action' && styles.modifiers.action,\n          (toggleVariant === 'primary' || isPrimary) && splitButtonVariant === 'action' && styles.modifiers.primary,\n          isDisabled && styles.modifiers.disabled\n        )}\n      >\n        {splitButtonItems}\n        {toggle}\n      </div>\n    );\n  }\n\n  return toggle;\n};\nDropdownToggle.displayName = 'DropdownToggle';\n"]},"metadata":{},"sourceType":"module"}