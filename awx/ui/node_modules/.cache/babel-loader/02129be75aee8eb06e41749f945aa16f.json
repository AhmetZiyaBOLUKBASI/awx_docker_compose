{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport var FormGroup = function FormGroup(_a) {\n  var _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      label = _a.label,\n      labelInfo = _a.labelInfo,\n      labelIcon = _a.labelIcon,\n      _a$isRequired = _a.isRequired,\n      isRequired = _a$isRequired === void 0 ? false : _a$isRequired,\n      _a$validated = _a.validated,\n      validated = _a$validated === void 0 ? 'default' : _a$validated,\n      _a$isInline = _a.isInline,\n      isInline = _a$isInline === void 0 ? false : _a$isInline,\n      _a$hasNoPaddingTop = _a.hasNoPaddingTop,\n      hasNoPaddingTop = _a$hasNoPaddingTop === void 0 ? false : _a$hasNoPaddingTop,\n      _a$isStack = _a.isStack,\n      isStack = _a$isStack === void 0 ? false : _a$isStack,\n      helperText = _a.helperText,\n      _a$isHelperTextBefore = _a.isHelperTextBeforeField,\n      isHelperTextBeforeField = _a$isHelperTextBefore === void 0 ? false : _a$isHelperTextBefore,\n      helperTextInvalid = _a.helperTextInvalid,\n      helperTextIcon = _a.helperTextIcon,\n      helperTextInvalidIcon = _a.helperTextInvalidIcon,\n      fieldId = _a.fieldId,\n      role = _a.role,\n      props = __rest(_a, [\"children\", \"className\", \"label\", \"labelInfo\", \"labelIcon\", \"isRequired\", \"validated\", \"isInline\", \"hasNoPaddingTop\", \"isStack\", \"helperText\", \"isHelperTextBeforeField\", \"helperTextInvalid\", \"helperTextIcon\", \"helperTextInvalidIcon\", \"fieldId\", \"role\"]);\n\n  var validHelperText = typeof helperText !== 'string' ? helperText : React.createElement(\"div\", {\n    className: css(styles.formHelperText, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning),\n    id: \"\".concat(fieldId, \"-helper\"),\n    \"aria-live\": \"polite\"\n  }, helperTextIcon && React.createElement(\"span\", {\n    className: css(styles.formHelperTextIcon)\n  }, helperTextIcon), helperText);\n  var inValidHelperText = typeof helperTextInvalid !== 'string' ? helperTextInvalid : React.createElement(\"div\", {\n    className: css(styles.formHelperText, styles.modifiers.error),\n    id: \"\".concat(fieldId, \"-helper\"),\n    \"aria-live\": \"polite\"\n  }, helperTextInvalidIcon && React.createElement(\"span\", {\n    className: css(styles.formHelperTextIcon)\n  }, helperTextInvalidIcon), helperTextInvalid);\n\n  var showValidHelperTxt = function showValidHelperTxt(validationType) {\n    return validationType !== ValidatedOptions.error && helperText ? validHelperText : '';\n  };\n\n  var helperTextToDisplay = validated === ValidatedOptions.error && helperTextInvalid ? inValidHelperText : showValidHelperTxt(validated);\n  var isGroupOrRadioGroup = role === 'group' || role === 'radiogroup';\n  var LabelComponent = isGroupOrRadioGroup ? 'span' : 'label';\n  var labelContent = React.createElement(React.Fragment, null, React.createElement(LabelComponent, Object.assign({\n    className: css(styles.formLabel)\n  }, !isGroupOrRadioGroup && {\n    htmlFor: fieldId\n  }), React.createElement(\"span\", {\n    className: css(styles.formLabelText)\n  }, label), isRequired && React.createElement(\"span\", {\n    className: css(styles.formLabelRequired),\n    \"aria-hidden\": \"true\"\n  }, ' ', ASTERISK)), ' ', React.isValidElement(labelIcon) && labelIcon);\n  return React.createElement(GenerateId, null, function (randomId) {\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.formGroup, className)\n    }, role && {\n      role: role\n    }, isGroupOrRadioGroup && {\n      'aria-labelledby': \"\".concat(fieldId || randomId, \"-legend\")\n    }, props), label && React.createElement(\"div\", Object.assign({\n      className: css(styles.formGroupLabel, labelInfo && styles.modifiers.info, hasNoPaddingTop && styles.modifiers.noPaddingTop)\n    }, isGroupOrRadioGroup && {\n      id: \"\".concat(fieldId || randomId, \"-legend\")\n    }), labelInfo && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.formGroupLabelMain)\n    }, labelContent), React.createElement(\"div\", {\n      className: css(styles.formGroupLabelInfo)\n    }, labelInfo)), !labelInfo && labelContent), React.createElement(\"div\", {\n      className: css(styles.formGroupControl, isInline && styles.modifiers.inline, isStack && styles.modifiers.stack)\n    }, isHelperTextBeforeField && helperTextToDisplay, children, !isHelperTextBeforeField && helperTextToDisplay));\n  });\n};\nFormGroup.displayName = 'FormGroup';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Form/FormGroup.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport interface FormGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'label'> {\n  /** Anything that can be rendered as FormGroup content. */\n  children?: React.ReactNode;\n  /** Additional classes added to the FormGroup. */\n  className?: string;\n  /** Label text before the field. */\n  label?: React.ReactNode;\n  /** Additional label information displayed after the label. */\n  labelInfo?: React.ReactNode;\n  /** Sets an icon for the label. For providing additional context. Host element for Popover  */\n  labelIcon?: React.ReactElement;\n  /** Sets the FormGroup required. */\n  isRequired?: boolean;\n  /**\n   * Sets the FormGroup validated. If you set to success, text color of helper text will be modified to indicate valid state.\n   * If set to error, text color of helper text will be modified to indicate error state.\n   * If set to warning, text color of helper text will be modified to indicate warning state.\n   */\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  /** Sets the FormGroup isInline. */\n  isInline?: boolean;\n  /** Sets the FormGroupControl to be stacked */\n  isStack?: boolean;\n  /** Removes top spacer from label. */\n  hasNoPaddingTop?: boolean;\n  /** Helper text regarding the field. It can be a simple text or an object. */\n  helperText?: React.ReactNode;\n  /** Flag to position the helper text before the field. False by default */\n  isHelperTextBeforeField?: boolean;\n  /** Helper text after the field when the field is invalid. It can be a simple text or an object. */\n  helperTextInvalid?: React.ReactNode;\n  /** Icon displayed to the left of the helper text. */\n  helperTextIcon?: React.ReactNode;\n  /** Icon displayed to the left of the helper text when the field is invalid. */\n  helperTextInvalidIcon?: React.ReactNode;\n  /** ID of an individual field or a group of multiple fields. Required when a role of \"group\" or \"radiogroup\" is passed in.\n   * If only one field is included, its ID attribute and this prop must be the same.\n   */\n  fieldId?: string;\n  /** Sets the role of the form group. Pass in \"radiogroup\" when the form group contains multiple\n   * radio inputs, or pass in \"group\" when the form group contains multiple of any other input type.\n   */\n  role?: string;\n}\n\nexport const FormGroup: React.FunctionComponent<FormGroupProps> = ({\n  children = null,\n  className = '',\n  label,\n  labelInfo,\n  labelIcon,\n  isRequired = false,\n  validated = 'default',\n  isInline = false,\n  hasNoPaddingTop = false,\n  isStack = false,\n  helperText,\n  isHelperTextBeforeField = false,\n  helperTextInvalid,\n  helperTextIcon,\n  helperTextInvalidIcon,\n  fieldId,\n  role,\n  ...props\n}: FormGroupProps) => {\n  const validHelperText =\n    typeof helperText !== 'string' ? (\n      helperText\n    ) : (\n      <div\n        className={css(\n          styles.formHelperText,\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning\n        )}\n        id={`${fieldId}-helper`}\n        aria-live=\"polite\"\n      >\n        {helperTextIcon && <span className={css(styles.formHelperTextIcon)}>{helperTextIcon}</span>}\n        {helperText}\n      </div>\n    );\n\n  const inValidHelperText =\n    typeof helperTextInvalid !== 'string' ? (\n      helperTextInvalid\n    ) : (\n      <div className={css(styles.formHelperText, styles.modifiers.error)} id={`${fieldId}-helper`} aria-live=\"polite\">\n        {helperTextInvalidIcon && <span className={css(styles.formHelperTextIcon)}>{helperTextInvalidIcon}</span>}\n        {helperTextInvalid}\n      </div>\n    );\n\n  const showValidHelperTxt = (validationType: 'success' | 'warning' | 'error' | 'default') =>\n    validationType !== ValidatedOptions.error && helperText ? validHelperText : '';\n\n  const helperTextToDisplay =\n    validated === ValidatedOptions.error && helperTextInvalid ? inValidHelperText : showValidHelperTxt(validated);\n\n  const isGroupOrRadioGroup = role === 'group' || role === 'radiogroup';\n  const LabelComponent = isGroupOrRadioGroup ? 'span' : 'label';\n\n  const labelContent = (\n    <React.Fragment>\n      <LabelComponent className={css(styles.formLabel)} {...(!isGroupOrRadioGroup && { htmlFor: fieldId })}>\n        <span className={css(styles.formLabelText)}>{label}</span>\n        {isRequired && (\n          <span className={css(styles.formLabelRequired)} aria-hidden=\"true\">\n            {' '}\n            {ASTERISK}\n          </span>\n        )}\n      </LabelComponent>{' '}\n      {React.isValidElement(labelIcon) && labelIcon}\n    </React.Fragment>\n  );\n\n  return (\n    <GenerateId>\n      {randomId => (\n        <div\n          className={css(styles.formGroup, className)}\n          {...(role && { role })}\n          {...(isGroupOrRadioGroup && { 'aria-labelledby': `${fieldId || randomId}-legend` })}\n          {...props}\n        >\n          {label && (\n            <div\n              className={css(\n                styles.formGroupLabel,\n                labelInfo && styles.modifiers.info,\n                hasNoPaddingTop && styles.modifiers.noPaddingTop\n              )}\n              {...(isGroupOrRadioGroup && { id: `${fieldId || randomId}-legend` })}\n            >\n              {labelInfo && (\n                <React.Fragment>\n                  <div className={css(styles.formGroupLabelMain)}>{labelContent}</div>\n                  <div className={css(styles.formGroupLabelInfo)}>{labelInfo}</div>\n                </React.Fragment>\n              )}\n              {!labelInfo && labelContent}\n            </div>\n          )}\n          <div\n            className={css(\n              styles.formGroupControl,\n              isInline && styles.modifiers.inline,\n              isStack && styles.modifiers.stack\n            )}\n          >\n            {isHelperTextBeforeField && helperTextToDisplay}\n            {children}\n            {!isHelperTextBeforeField && helperTextToDisplay}\n          </div>\n        </div>\n      )}\n    </GenerateId>\n  );\n};\nFormGroup.displayName = 'FormGroup';\n"]},"metadata":{},"sourceType":"module"}