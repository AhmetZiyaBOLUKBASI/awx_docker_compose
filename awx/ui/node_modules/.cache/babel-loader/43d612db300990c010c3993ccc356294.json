{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { createFocusTrap } from 'focus-trap';\nexport var FocusTrap = /*#__PURE__*/function (_React$Component) {\n  _inherits(FocusTrap, _React$Component);\n\n  var _super = _createSuper(FocusTrap);\n\n  function FocusTrap(props) {\n    var _this;\n\n    _classCallCheck(this, FocusTrap);\n\n    _this = _super.call(this, props);\n    _this.divRef = React.createRef();\n\n    if (typeof document !== 'undefined') {\n      _this.previouslyFocusedElement = document.activeElement;\n    }\n\n    return _this;\n  }\n\n  _createClass(FocusTrap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // We need to hijack the returnFocusOnDeactivate option,\n      // because React can move focus into the element before we arrived at\n      // this lifecycle hook (e.g. with autoFocus inputs). So the component\n      // captures the previouslyFocusedElement in componentWillMount,\n      // then (optionally) returns focus to it in componentWillUnmount.\n      this.focusTrap = createFocusTrap(this.divRef.current, Object.assign(Object.assign({}, this.props.focusTrapOptions), {\n        returnFocusOnDeactivate: false\n      }));\n\n      if (this.props.active) {\n        this.focusTrap.activate();\n      }\n\n      if (this.props.paused) {\n        this.focusTrap.pause();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.active && !this.props.active) {\n        this.focusTrap.deactivate();\n      } else if (!prevProps.active && this.props.active) {\n        this.focusTrap.activate();\n      }\n\n      if (prevProps.paused && !this.props.paused) {\n        this.focusTrap.unpause();\n      } else if (!prevProps.paused && this.props.paused) {\n        this.focusTrap.pause();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.focusTrap.deactivate();\n\n      if (this.props.focusTrapOptions.returnFocusOnDeactivate !== false && this.previouslyFocusedElement && this.previouslyFocusedElement.focus) {\n        this.previouslyFocusedElement.focus({\n          preventScroll: this.props.preventScrollOnDeactivate\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var _a = this.props,\n          children = _a.children,\n          className = _a.className,\n          focusTrapOptions = _a.focusTrapOptions,\n          active = _a.active,\n          paused = _a.paused,\n          preventScrollOnDeactivate = _a.preventScrollOnDeactivate,\n          rest = __rest(_a, [\"children\", \"className\", \"focusTrapOptions\", \"active\", \"paused\", \"preventScrollOnDeactivate\"]);\n\n      return React.createElement(\"div\", Object.assign({\n        ref: this.divRef,\n        className: className\n      }, rest), children);\n    }\n  }]);\n\n  return FocusTrap;\n}(React.Component);\nFocusTrap.displayName = 'FocusTrap';\nFocusTrap.defaultProps = {\n  active: true,\n  paused: false,\n  focusTrapOptions: {},\n  preventScrollOnDeactivate: false\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/helpers/FocusTrap/FocusTrap.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { createFocusTrap, Options as FocusTrapOptions, FocusTrap as IFocusTrap } from 'focus-trap';\n\ninterface FocusTrapProps extends React.HTMLProps<HTMLDivElement> {\n  children: React.ReactNode;\n  className?: string;\n  active?: boolean;\n  paused?: boolean;\n  focusTrapOptions?: FocusTrapOptions;\n  /** Prevent from scrolling to the previously focused element on deactivation */\n  preventScrollOnDeactivate?: boolean;\n}\n\nexport class FocusTrap extends React.Component<FocusTrapProps> {\n  static displayName = 'FocusTrap';\n  previouslyFocusedElement: HTMLElement;\n  focusTrap: IFocusTrap;\n  divRef = React.createRef<HTMLDivElement>();\n\n  static defaultProps = {\n    active: true,\n    paused: false,\n    focusTrapOptions: {},\n    preventScrollOnDeactivate: false\n  };\n\n  constructor(props: FocusTrapProps) {\n    super(props);\n\n    if (typeof document !== 'undefined') {\n      this.previouslyFocusedElement = document.activeElement as HTMLElement;\n    }\n  }\n\n  componentDidMount() {\n    // We need to hijack the returnFocusOnDeactivate option,\n    // because React can move focus into the element before we arrived at\n    // this lifecycle hook (e.g. with autoFocus inputs). So the component\n    // captures the previouslyFocusedElement in componentWillMount,\n    // then (optionally) returns focus to it in componentWillUnmount.\n    this.focusTrap = createFocusTrap(this.divRef.current, {\n      ...this.props.focusTrapOptions,\n      returnFocusOnDeactivate: false\n    });\n    if (this.props.active) {\n      this.focusTrap.activate();\n    }\n    if (this.props.paused) {\n      this.focusTrap.pause();\n    }\n  }\n\n  componentDidUpdate(prevProps: FocusTrapProps) {\n    if (prevProps.active && !this.props.active) {\n      this.focusTrap.deactivate();\n    } else if (!prevProps.active && this.props.active) {\n      this.focusTrap.activate();\n    }\n\n    if (prevProps.paused && !this.props.paused) {\n      this.focusTrap.unpause();\n    } else if (!prevProps.paused && this.props.paused) {\n      this.focusTrap.pause();\n    }\n  }\n\n  componentWillUnmount() {\n    this.focusTrap.deactivate();\n    if (\n      this.props.focusTrapOptions.returnFocusOnDeactivate !== false &&\n      this.previouslyFocusedElement &&\n      this.previouslyFocusedElement.focus\n    ) {\n      this.previouslyFocusedElement.focus({ preventScroll: this.props.preventScrollOnDeactivate });\n    }\n  }\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { children, className, focusTrapOptions, active, paused, preventScrollOnDeactivate, ...rest } = this.props;\n    return (\n      <div ref={this.divRef} className={className} {...rest}>\n        {children}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}