{"ast":null,"code":"import _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport getCompositeRect from './dom-utils/getCompositeRect';\nimport getLayoutRect from './dom-utils/getLayoutRect';\nimport listScrollParents from './dom-utils/listScrollParents';\nimport getOffsetParent from './dom-utils/getOffsetParent';\nimport getComputedStyle from './dom-utils/getComputedStyle';\nimport orderModifiers from './utils/orderModifiers';\nimport debounce from './utils/debounce';\nimport validateModifiers from './utils/validateModifiers';\nimport uniqueBy from './utils/uniqueBy';\nimport getBasePlacement from './utils/getBasePlacement';\nimport mergeByName from './utils/mergeByName';\nimport detectOverflow from './utils/detectOverflow';\nimport { isElement } from './dom-utils/instanceOf';\nimport { auto } from './enums';\nexport * from './types';\nexport * from './enums';\nvar INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';\nvar INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';\nvar DEFAULT_OPTIONS = {\n  placement: 'bottom',\n  modifiers: [],\n  strategy: 'absolute'\n};\n/**\n * @param args\n */\n\nfunction areValidElements() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return !args.some(function (element) {\n    return !(element && typeof element.getBoundingClientRect === 'function');\n  });\n}\n/**\n * @param generatorOptions\n */\n\n\nexport function popperGenerator() {\n  var generatorOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _generatorOptions$def = generatorOptions.defaultModifiers,\n      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n      _generatorOptions$def2 = generatorOptions.defaultOptions,\n      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n  return function createPopper(reference, popper) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOptions;\n    var state = {\n      placement: 'bottom',\n      orderedModifiers: [],\n      options: Object.assign(Object.assign({}, DEFAULT_OPTIONS), defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference: reference,\n        popper: popper\n      },\n      attributes: {},\n      styles: {}\n    };\n    var effectCleanupFns = [];\n    var isDestroyed = false;\n    var instance = {\n      state: state,\n      setOptions: function setOptions(options) {\n        cleanupModifierEffects();\n        state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions), state.options), options);\n        state.scrollParents = {\n          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n          popper: listScrollParents(popper)\n        }; // Orders the modifiers based on their dependencies and `phase`\n        // properties\n\n        var orderedModifiers = orderModifiers(mergeByName([].concat(_toConsumableArray(defaultModifiers), _toConsumableArray(state.options.modifiers)))); // Strip out disabled modifiers\n\n        state.orderedModifiers = orderedModifiers.filter(function (m) {\n          return m.enabled;\n        }); // Validate the provided modifiers so that the consumer will get warned\n        // if one of the modifiers is invalid for any reason\n\n        if (false\n        /* __DEV__*/\n        ) {\n          var modifiers = uniqueBy([].concat(_toConsumableArray(orderedModifiers), _toConsumableArray(state.options.modifiers)), function (_ref) {\n            var name = _ref.name;\n            return name;\n          });\n          validateModifiers(modifiers);\n\n          if (getBasePlacement(state.options.placement) === auto) {\n            var flipModifier = state.orderedModifiers.find(function (_ref2) {\n              var name = _ref2.name;\n              return name === 'flip';\n            });\n\n            if (!flipModifier) {\n              console.error(['Popper: \"auto\" placements require the \"flip\" modifier be', 'present and enabled to work.'].join(' '));\n            }\n          }\n\n          var _getComputedStyle = getComputedStyle(popper),\n              marginTop = _getComputedStyle.marginTop,\n              marginRight = _getComputedStyle.marginRight,\n              marginBottom = _getComputedStyle.marginBottom,\n              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can\n          // cause bugs with positioning, so we'll warn the consumer\n\n\n          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {\n            return parseFloat(margin);\n          })) {\n            console.warn(['Popper: CSS \"margin\" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));\n          }\n        }\n\n        runModifierEffects();\n        return instance.update();\n      },\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate: function forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n\n        var _state$elements = state.elements,\n            reference = _state$elements.reference,\n            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n        // anymore\n\n        if (!areValidElements(reference, popper)) {\n          if (false\n          /* __DEV__*/\n          ) {\n            console.error(INVALID_ELEMENT_ERROR);\n          }\n\n          return;\n        } // Store the reference and popper rects to be read by modifiers\n\n\n        state.rects = {\n          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n          popper: getLayoutRect(popper)\n        }; // Modifiers have the ability to reset the current update cycle. The\n        // most common use case for this is the `flip` modifier changing the\n        // placement, which then needs to re-run all the modifiers, because the\n        // logic was previously ran for the previous placement and is therefore\n        // stale/incorrect\n\n        state.reset = false;\n        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n        // is filled with the initial data specified by the modifier. This means\n        // it doesn't persist and is fresh on each update.\n        // To ensure persistent data, use `${name}#persistent`\n\n        state.orderedModifiers.forEach(function (modifier) {\n          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n        });\n        var __debug_loops__ = 0;\n\n        for (var index = 0; index < state.orderedModifiers.length; index++) {\n          if (false\n          /* __DEV__*/\n          ) {\n            __debug_loops__ += 1;\n\n            if (__debug_loops__ > 100) {\n              console.error(INFINITE_LOOP_ERROR);\n              break;\n            }\n          }\n\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          var _state$orderedModifie = state.orderedModifiers[index],\n              fn = _state$orderedModifie.fn,\n              _state$orderedModifie2 = _state$orderedModifie.options,\n              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n              name = _state$orderedModifie.name;\n\n          if (typeof fn === 'function') {\n            state = fn({\n              state: state,\n              options: _options,\n              name: name,\n              instance: instance\n            }) || state;\n          }\n        }\n      },\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: debounce(function () {\n        return new Promise(function (resolve) {\n          instance.forceUpdate();\n          resolve(state);\n        });\n      }),\n      destroy: function destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n    };\n\n    if (!areValidElements(reference, popper)) {\n      if (false\n      /* __DEV__*/\n      ) {\n        console.error(INVALID_ELEMENT_ERROR);\n      }\n\n      return instance;\n    }\n\n    instance.setOptions(options).then(function (state) {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state);\n      }\n    }); // Modifiers have the ability to execute arbitrary code before the first\n    // update cycle runs. They will be executed in the same order as the update\n    // cycle. This is useful when a modifier adds some persistent data that\n    // other modifiers need to use, but the modifier is run after the dependent\n    // one.\n\n    /**\n     *\n     */\n\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(function (_ref3) {\n        var name = _ref3.name,\n            _ref3$options = _ref3.options,\n            options = _ref3$options === void 0 ? {} : _ref3$options,\n            effect = _ref3.effect;\n\n        if (typeof effect === 'function') {\n          var cleanupFn = effect({\n            state: state,\n            name: name,\n            instance: instance,\n            options: options\n          });\n\n          var noopFn = function noopFn() {};\n\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n    /**\n     *\n     */\n\n\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(function (fn) {\n        return fn();\n      });\n      effectCleanupFns = [];\n    }\n\n    return instance;\n  };\n}\nexport var createPopper = popperGenerator(); // eslint-disable-next-line import/no-unused-modules\n\nexport { detectOverflow };","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/index.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { State, OptionsGeneric, Modifier, Instance, VirtualElement } from './types';\nimport getCompositeRect from './dom-utils/getCompositeRect';\nimport getLayoutRect from './dom-utils/getLayoutRect';\nimport listScrollParents from './dom-utils/listScrollParents';\nimport getOffsetParent from './dom-utils/getOffsetParent';\nimport getComputedStyle from './dom-utils/getComputedStyle';\nimport orderModifiers from './utils/orderModifiers';\nimport debounce from './utils/debounce';\nimport validateModifiers from './utils/validateModifiers';\nimport uniqueBy from './utils/uniqueBy';\nimport getBasePlacement from './utils/getBasePlacement';\nimport mergeByName from './utils/mergeByName';\nimport detectOverflow from './utils/detectOverflow';\nimport { isElement } from './dom-utils/instanceOf';\nimport { auto } from './enums';\n\nexport * from './types';\nexport * from './enums';\n\nconst INVALID_ELEMENT_ERROR =\n  'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';\nconst INFINITE_LOOP_ERROR =\n  'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';\n\nconst DEFAULT_OPTIONS: OptionsGeneric<any> = {\n  placement: 'bottom',\n  modifiers: [],\n  strategy: 'absolute'\n};\n\ninterface PopperGeneratorArgs {\n  defaultModifiers?: Modifier<any, any>[];\n  defaultOptions?: Partial<OptionsGeneric<any>>;\n}\n\n/**\n * @param args\n */\nfunction areValidElements(...args: any[]): boolean {\n  return !args.some(element => !(element && typeof element.getBoundingClientRect === 'function'));\n}\n\n/**\n * @param generatorOptions\n */\nexport function popperGenerator(generatorOptions: PopperGeneratorArgs = {}) {\n  const { defaultModifiers = [], defaultOptions = DEFAULT_OPTIONS } = generatorOptions;\n\n  return function createPopper<TModifier extends Partial<Modifier<any, any>>>(\n    reference: Element | VirtualElement,\n    popper: HTMLElement,\n    options: Partial<OptionsGeneric<TModifier>> = defaultOptions\n  ): Instance {\n    let state: Partial<State> = {\n      placement: 'bottom',\n      orderedModifiers: [],\n      options: { ...DEFAULT_OPTIONS, ...defaultOptions },\n      modifiersData: {},\n      elements: {\n        reference,\n        popper\n      },\n      attributes: {},\n      styles: {}\n    };\n\n    let effectCleanupFns: (() => void)[] = [];\n    let isDestroyed = false;\n\n    const instance = {\n      state,\n      setOptions(options) {\n        cleanupModifierEffects();\n\n        state.options = {\n          // $FlowFixMe\n          ...defaultOptions,\n          ...state.options,\n          ...options\n        };\n\n        state.scrollParents = {\n          reference: isElement(reference)\n            ? listScrollParents(reference)\n            : reference.contextElement\n            ? listScrollParents(reference.contextElement)\n            : [],\n          popper: listScrollParents(popper)\n        };\n\n        // Orders the modifiers based on their dependencies and `phase`\n        // properties\n        const orderedModifiers = orderModifiers(mergeByName([...defaultModifiers, ...state.options.modifiers]));\n\n        // Strip out disabled modifiers\n        state.orderedModifiers = orderedModifiers.filter(m => m.enabled);\n\n        // Validate the provided modifiers so that the consumer will get warned\n        // if one of the modifiers is invalid for any reason\n        if (false /* __DEV__*/) {\n          const modifiers = uniqueBy([...orderedModifiers, ...state.options.modifiers], ({ name }) => name);\n\n          validateModifiers(modifiers);\n\n          if (getBasePlacement(state.options.placement) === auto) {\n            const flipModifier = state.orderedModifiers.find(({ name }) => name === 'flip');\n\n            if (!flipModifier) {\n              console.error(\n                ['Popper: \"auto\" placements require the \"flip\" modifier be', 'present and enabled to work.'].join(' ')\n              );\n            }\n          }\n\n          const { marginTop, marginRight, marginBottom, marginLeft } = getComputedStyle(popper);\n\n          // We no longer take into account `margins` on the popper, and it can\n          // cause bugs with positioning, so we'll warn the consumer\n          if ([marginTop, marginRight, marginBottom, marginLeft].some(margin => parseFloat(margin))) {\n            console.warn(\n              [\n                'Popper: CSS \"margin\" styles cannot be used to apply padding',\n                'between the popper and its reference element or boundary.',\n                'To replicate margin, use the `offset` modifier, as well as',\n                'the `padding` option in the `preventOverflow` and `flip`',\n                'modifiers.'\n              ].join(' ')\n            );\n          }\n        }\n\n        runModifierEffects();\n\n        return instance.update();\n      },\n\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n\n        const { reference, popper } = state.elements;\n\n        // Don't proceed if `reference` or `popper` are not valid elements\n        // anymore\n        if (!areValidElements(reference, popper)) {\n          if (false /* __DEV__*/) {\n            console.error(INVALID_ELEMENT_ERROR);\n          }\n          return;\n        }\n\n        // Store the reference and popper rects to be read by modifiers\n        state.rects = {\n          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n          popper: getLayoutRect(popper)\n        };\n\n        // Modifiers have the ability to reset the current update cycle. The\n        // most common use case for this is the `flip` modifier changing the\n        // placement, which then needs to re-run all the modifiers, because the\n        // logic was previously ran for the previous placement and is therefore\n        // stale/incorrect\n        state.reset = false;\n\n        state.placement = state.options.placement;\n\n        // On each update cycle, the `modifiersData` property for each modifier\n        // is filled with the initial data specified by the modifier. This means\n        // it doesn't persist and is fresh on each update.\n        // To ensure persistent data, use `${name}#persistent`\n        state.orderedModifiers.forEach(\n          modifier =>\n            (state.modifiersData[modifier.name] = {\n              ...modifier.data\n            })\n        );\n\n        let __debug_loops__ = 0;\n        for (let index = 0; index < state.orderedModifiers.length; index++) {\n          if (false /* __DEV__*/) {\n            __debug_loops__ += 1;\n            if (__debug_loops__ > 100) {\n              console.error(INFINITE_LOOP_ERROR);\n              break;\n            }\n          }\n\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          const { fn, options = {}, name } = state.orderedModifiers[index];\n\n          if (typeof fn === 'function') {\n            state = fn({ state, options, name, instance }) || state;\n          }\n        }\n      },\n\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: debounce<Partial<State>>(\n        () =>\n          new Promise<Partial<State>>(resolve => {\n            instance.forceUpdate();\n            resolve(state);\n          })\n      ),\n\n      destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n    };\n\n    if (!areValidElements(reference, popper)) {\n      if (false /* __DEV__*/) {\n        console.error(INVALID_ELEMENT_ERROR);\n      }\n      return instance;\n    }\n\n    instance.setOptions(options).then(state => {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state);\n      }\n    });\n\n    // Modifiers have the ability to execute arbitrary code before the first\n    // update cycle runs. They will be executed in the same order as the update\n    // cycle. This is useful when a modifier adds some persistent data that\n    // other modifiers need to use, but the modifier is run after the dependent\n    // one.\n    /**\n     *\n     */\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(({ name, options = {}, effect }) => {\n        if (typeof effect === 'function') {\n          const cleanupFn = effect({ state, name, instance, options });\n          const noopFn = () => {};\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n\n    /**\n     *\n     */\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(fn => fn());\n      effectCleanupFns = [];\n    }\n\n    return instance;\n  };\n}\n\nexport const createPopper = popperGenerator();\n\n// eslint-disable-next-line import/no-unused-modules\nexport { detectOverflow };\n"]},"metadata":{},"sourceType":"module"}