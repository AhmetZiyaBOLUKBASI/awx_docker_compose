{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";var _excluded=[\"team\",\"handleCancel\",\"handleSubmit\",\"submitError\"];import{i18n}from\"@lingui/core\";import React,{useCallback}from'react';import{Formik,useField,useFormikContext}from'formik';import{Form}from'@patternfly/react-core';import FormActionGroup from'components/FormActionGroup/FormActionGroup';import FormField,{FormSubmitError}from'components/FormField';import OrganizationLookup from'components/Lookup/OrganizationLookup';import{required}from'util/validators';import{FormColumnLayout}from'components/FormLayout';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function TeamFormFields(_ref){var team=_ref.team;var _useFormikContext=useFormikContext(),setFieldValue=_useFormikContext.setFieldValue,setFieldTouched=_useFormikContext.setFieldTouched;var _useField=useField('organization'),_useField2=_slicedToArray(_useField,3),orgField=_useField2[0],orgMeta=_useField2[1],orgHelpers=_useField2[2];var handleOrganizationUpdate=useCallback(function(value){setFieldValue('organization',value);setFieldTouched('organization',true,false);},[setFieldValue,setFieldTouched]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(FormField,{id:\"team-name\",label:/*i18n*/i18n._(\"Name\"),name:\"name\",type:\"text\",validate:required(null),isRequired:true}),/*#__PURE__*/_jsx(FormField,{id:\"team-description\",label:/*i18n*/i18n._(\"Description\"),name:\"description\",type:\"text\"}),/*#__PURE__*/_jsx(OrganizationLookup,{helperTextInvalid:orgMeta.error,isValid:!orgMeta.touched||!orgMeta.error,onBlur:function onBlur(){return orgHelpers.setTouched('organization');},onChange:handleOrganizationUpdate,value:orgField.value,required:true,autoPopulate:!(team!==null&&team!==void 0&&team.id),validate:required(/*i18n*/i18n._(\"Select a value for this field\"))})]});}function TeamForm(props){var _team$summary_fields;var team=props.team,handleCancel=props.handleCancel,handleSubmit=props.handleSubmit,submitError=props.submitError,rest=_objectWithoutProperties(props,_excluded);return/*#__PURE__*/_jsx(Formik,{initialValues:{description:team.description||'',name:team.name||'',organization:((_team$summary_fields=team.summary_fields)===null||_team$summary_fields===void 0?void 0:_team$summary_fields.organization)||null},onSubmit:handleSubmit,children:function children(formik){return/*#__PURE__*/_jsx(Form,{autoComplete:\"off\",onSubmit:formik.handleSubmit,children:/*#__PURE__*/_jsxs(FormColumnLayout,{children:[/*#__PURE__*/_jsx(TeamFormFields,_objectSpread({team:team},rest)),/*#__PURE__*/_jsx(FormSubmitError,{error:submitError}),/*#__PURE__*/_jsx(FormActionGroup,{onCancel:handleCancel,onSubmit:formik.handleSubmit})]})});}});}TeamForm.defaultProps={team:{},submitError:null};export default TeamForm;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Team/shared/TeamForm.js"],"names":["React","useCallback","Formik","useField","useFormikContext","Form","FormActionGroup","FormField","FormSubmitError","OrganizationLookup","required","FormColumnLayout","TeamFormFields","team","setFieldValue","setFieldTouched","orgField","orgMeta","orgHelpers","handleOrganizationUpdate","value","error","touched","setTouched","id","TeamForm","props","handleCancel","handleSubmit","submitError","rest","description","name","organization","summary_fields","formik","defaultProps"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { t } from '@lingui/macro';\nimport { Formik, useField, useFormikContext } from 'formik';\nimport { Form } from '@patternfly/react-core';\nimport FormActionGroup from 'components/FormActionGroup/FormActionGroup';\nimport FormField, { FormSubmitError } from 'components/FormField';\nimport OrganizationLookup from 'components/Lookup/OrganizationLookup';\nimport { required } from 'util/validators';\nimport { FormColumnLayout } from 'components/FormLayout';\n\nfunction TeamFormFields({ team }) {\n  const { setFieldValue, setFieldTouched } = useFormikContext();\n  const [orgField, orgMeta, orgHelpers] = useField('organization');\n\n  const handleOrganizationUpdate = useCallback(\n    (value) => {\n      setFieldValue('organization', value);\n      setFieldTouched('organization', true, false);\n    },\n    [setFieldValue, setFieldTouched]\n  );\n\n  return (\n    <>\n      <FormField\n        id=\"team-name\"\n        label={t`Name`}\n        name=\"name\"\n        type=\"text\"\n        validate={required(null)}\n        isRequired\n      />\n      <FormField\n        id=\"team-description\"\n        label={t`Description`}\n        name=\"description\"\n        type=\"text\"\n      />\n      <OrganizationLookup\n        helperTextInvalid={orgMeta.error}\n        isValid={!orgMeta.touched || !orgMeta.error}\n        onBlur={() => orgHelpers.setTouched('organization')}\n        onChange={handleOrganizationUpdate}\n        value={orgField.value}\n        required\n        autoPopulate={!team?.id}\n        validate={required(t`Select a value for this field`)}\n      />\n    </>\n  );\n}\n\nfunction TeamForm(props) {\n  const { team, handleCancel, handleSubmit, submitError, ...rest } = props;\n\n  return (\n    <Formik\n      initialValues={{\n        description: team.description || '',\n        name: team.name || '',\n        organization: team.summary_fields?.organization || null,\n      }}\n      onSubmit={handleSubmit}\n    >\n      {(formik) => (\n        <Form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\n          <FormColumnLayout>\n            <TeamFormFields team={team} {...rest} />\n            <FormSubmitError error={submitError} />\n            <FormActionGroup\n              onCancel={handleCancel}\n              onSubmit={formik.handleSubmit}\n            />\n          </FormColumnLayout>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nTeamForm.propTypes = {\n  handleCancel: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  team: PropTypes.shape({}),\n  submitError: PropTypes.shape(),\n};\n\nTeamForm.defaultProps = {\n  team: {},\n  submitError: null,\n};\n\nexport default TeamForm;\n"]},"metadata":{},"sourceType":"module"}