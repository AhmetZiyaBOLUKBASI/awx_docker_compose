{"ast":null,"code":"import _defineProperty from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Body as BaseBody } from './base';\nimport { TableContext } from './TableContext';\nimport { isRowExpanded } from './utils';\n\nvar flagVisibility = function flagVisibility(rows) {\n  var visibleRows = rows.filter(function (oneRow) {\n    return !oneRow.parent || oneRow.isExpanded;\n  });\n\n  if (visibleRows.length > 0) {\n    visibleRows[0].isFirstVisible = true;\n    visibleRows[visibleRows.length - 1].isLastVisible = true;\n  }\n};\n\nvar ContextBody = /*#__PURE__*/function (_React$Component) {\n  _inherits(ContextBody, _React$Component);\n\n  var _super = _createSuper(ContextBody);\n\n  function ContextBody() {\n    var _this;\n\n    _classCallCheck(this, ContextBody);\n\n    _this = _super.apply(this, arguments);\n\n    _this.onRow = function (row, rowProps) {\n      var _this$props = _this.props,\n          onRowClick = _this$props.onRowClick,\n          onRow = _this$props.onRow;\n      var extendedRowProps = Object.assign(Object.assign({}, rowProps), onRow ? onRow(row, rowProps) : {});\n      return {\n        row: row,\n        rowProps: extendedRowProps,\n        onClick: function onClick(event) {\n          var tagName = event.target.tagName;\n          var computedData = {\n            isInput: tagName === 'INPUT',\n            isButton: tagName === 'BUTTON'\n          };\n          onRowClick(event, row, rowProps, computedData);\n        },\n        onKeyDown: function onKeyDown(event) {\n          var targetElement = event.target;\n          var tagName = targetElement.tagName;\n          var computedData = {\n            isInput: tagName === 'INPUT',\n            isButton: tagName === 'BUTTON'\n          };\n\n          if (event.key === 'Enter' || event.key === ' ') {\n            onRowClick(event, row, rowProps, computedData); // prevent event default if space is typed while focusing on a hoverable row\n            // so that the page does not scroll when trying to use spacebar to select a row\n\n            if (event.key === ' ' && !!targetElement.closest('.pf-m-hoverable')) {\n              event.preventDefault();\n            }\n          }\n        }\n      };\n    };\n\n    _this.mapCells = function (headerData, row, rowKey) {\n      // column indexes start after generated optional columns like collapsible or select column(s)\n      var firstUserColumnIndex = headerData[0].extraParams.firstUserColumnIndex;\n      var isFullWidth = row && row.fullWidth; // typically you'd want to map each cell to its column header, but in the case of fullWidth\n      // the first column could be the Select and/or Expandable column\n\n      var additionalColsIndexShift = isFullWidth ? 0 : firstUserColumnIndex;\n      return Object.assign({}, row && (row.cells || row).reduce(function (acc, cell, cellIndex) {\n        var isCellObject = cell === Object(cell);\n        var isCellFunction = cell && typeof cell.title === 'function';\n        var formatters = [];\n\n        if (isCellObject && cell.formatters) {\n          // give priority to formatters specified on the cell object\n          // expandable example:\n          // rows: [{ parent: 0, fullWidth: true, cells: [{ title: 'fullWidth, child - a', formatters: [expandable]}] }]\n          formatters = cell.formatters;\n        } else if (isFullWidth && cellIndex < firstUserColumnIndex) {\n          // for backwards compatibility, map the cells that are not under user columns (like Select/Expandable)\n          // to the first user column's header formatters\n          formatters = headerData[firstUserColumnIndex].cell.formatters;\n        }\n\n        var mappedCellTitle = cell;\n\n        if (isCellObject && isCellFunction) {\n          mappedCellTitle = cell.title(cell.props.value, rowKey, cellIndex, cell.props);\n        } else if (isCellObject) {\n          mappedCellTitle = cell.title;\n        }\n\n        var mappedCell = _defineProperty({}, headerData[cellIndex + additionalColsIndexShift].property, {\n          title: mappedCellTitle,\n          formatters: formatters,\n          props: Object.assign({\n            isVisible: true\n          }, isCellObject ? cell.props : null)\n        }); // increment the shift index when a cell spans multiple columns\n\n\n        if (isCellObject && cell.props && cell.props.colSpan) {\n          additionalColsIndexShift += cell.props.colSpan - 1;\n        }\n\n        return Object.assign(Object.assign({}, acc), mappedCell);\n      }, {\n        secretTableRowKeyId: row.id !== undefined ? row.id : rowKey\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(ContextBody, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var _a = this.props,\n          className = _a.className,\n          headerData = _a.headerData,\n          rows = _a.rows,\n          rowKey = _a.rowKey,\n          children = _a.children,\n          onRowClick = _a.onRowClick,\n          props = __rest(_a, [\"className\", \"headerData\", \"rows\", \"rowKey\", \"children\", \"onRowClick\"]);\n\n      var mappedRows;\n\n      if (headerData.length > 0) {\n        mappedRows = rows.map(function (oneRow, oneRowKey) {\n          return Object.assign(Object.assign(Object.assign({}, oneRow), _this2.mapCells(headerData, oneRow, oneRowKey)), {\n            isExpanded: isRowExpanded(oneRow, rows),\n            isHeightAuto: oneRow.heightAuto || false,\n            isFirst: oneRowKey === 0,\n            isLast: oneRowKey === rows.length - 1,\n            isFirstVisible: false,\n            isLastVisible: false\n          });\n        });\n        flagVisibility(mappedRows);\n      }\n\n      return React.createElement(React.Fragment, null, mappedRows && React.createElement(BaseBody, Object.assign({}, props, {\n        mappedRows: mappedRows,\n        rows: mappedRows,\n        onRow: this.onRow,\n        rowKey: rowKey,\n        className: className\n      })));\n    }\n  }]);\n\n  return ContextBody;\n}(React.Component);\n\nexport var TableBody = function TableBody(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$rowKey = _a.rowKey,\n      rowKey = _a$rowKey === void 0 ? 'secretTableRowKeyId' : _a$rowKey,\n      _a$onRow = _a.onRow,\n      onRow = _a$onRow === void 0 ? function () {\n    return {};\n  } : _a$onRow,\n      _a$onRowClick = _a.onRowClick,\n      onRowClick = _a$onRowClick === void 0 ? function (event, row, rowProps, computedData) {\n    return (\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      undefined\n    );\n  } : _a$onRowClick,\n      props = __rest(_a, [\"className\", \"children\", \"rowKey\", \"onRow\", \"onRowClick\"]);\n\n  return React.createElement(TableContext.Consumer, null, function (_a) {\n    var _a$headerData = _a.headerData,\n        headerData = _a$headerData === void 0 ? [] : _a$headerData,\n        _a$rows = _a.rows,\n        rows = _a$rows === void 0 ? [] : _a$rows,\n        rest = __rest(_a, [\"headerData\", \"rows\"]);\n\n    return React.createElement(ContextBody, Object.assign({\n      headerData: headerData,\n      rows: rows,\n      onRow: onRow,\n      className: className,\n      rowKey: rowKey,\n      onRowClick: onRowClick\n    }, props, rest), children);\n  });\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/Body.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Body as BaseBody } from './base';\nimport { RowType, RowKeyType } from './base/types';\nimport { IRow, IRowCell, IExtraRowData } from './TableTypes';\nimport { TableContext } from './TableContext';\nimport { isRowExpanded } from './utils';\n\nexport interface IComputedData {\n  isInput: boolean;\n  isButton: boolean;\n}\n\nexport type OnRowClick = (\n  event: React.KeyboardEvent | React.MouseEvent,\n  row: IRow,\n  rowProps: IExtraRowData,\n  computedData: IComputedData\n) => void;\n\nexport interface TableBodyProps {\n  /** Additional classes added to the TableBody  */\n  className?: string;\n  /** @hide This prop should not be set manually  */\n  children?: React.ReactNode;\n  /** @hide This prop should not be set manually  */\n  headerData?: IRow[];\n  /** @hide This prop should not be set manually  */\n  rows?: IRow[];\n  /** @hide This prop should not be set manually  */\n  rowKey?: RowKeyType;\n  /** A click handler for the row  */\n  onRowClick?: OnRowClick;\n  /** @hide This prop should not be set manually  */\n  onRow?: Function;\n  /** Flag indicating the <tbody> contains oddly striped rows. */\n  isOddStriped?: boolean;\n  /** Flag indicating the <tbody> contains evenly striped rows. */\n  isEvenStriped?: boolean;\n}\n\nconst flagVisibility = (rows: IRow[]) => {\n  const visibleRows = (rows as IRow[]).filter((oneRow: IRow) => !oneRow.parent || oneRow.isExpanded) as IRow[];\n  if (visibleRows.length > 0) {\n    visibleRows[0].isFirstVisible = true;\n    visibleRows[visibleRows.length - 1].isLastVisible = true;\n  }\n};\n\ninterface IMappedCell {\n  [name: string]: IRowCell;\n}\n\nclass ContextBody extends React.Component<TableBodyProps, {}> {\n  onRow = (row: IRow, rowProps: any) => {\n    const { onRowClick, onRow } = this.props;\n    const extendedRowProps = {\n      ...rowProps,\n      ...(onRow ? onRow(row, rowProps) : {})\n    };\n    return {\n      row,\n      rowProps: extendedRowProps,\n      onClick: (event: React.MouseEvent) => {\n        const tagName = (event.target as HTMLElement).tagName;\n        const computedData = {\n          isInput: tagName === 'INPUT',\n          isButton: tagName === 'BUTTON'\n        };\n\n        onRowClick(event, row, rowProps, computedData);\n      },\n      onKeyDown: (event: React.KeyboardEvent) => {\n        const targetElement = event.target as HTMLElement;\n        const tagName = targetElement.tagName;\n        const computedData = {\n          isInput: tagName === 'INPUT',\n          isButton: tagName === 'BUTTON'\n        };\n        if (event.key === 'Enter' || event.key === ' ') {\n          onRowClick(event, row, rowProps, computedData);\n\n          // prevent event default if space is typed while focusing on a hoverable row\n          // so that the page does not scroll when trying to use spacebar to select a row\n          if (event.key === ' ' && !!targetElement.closest('.pf-m-hoverable')) {\n            event.preventDefault();\n          }\n        }\n      }\n    };\n  };\n\n  mapCells = (headerData: IRow[], row: IRow, rowKey: number) => {\n    // column indexes start after generated optional columns like collapsible or select column(s)\n    const { firstUserColumnIndex } = headerData[0].extraParams;\n    const isFullWidth = row && row.fullWidth;\n    // typically you'd want to map each cell to its column header, but in the case of fullWidth\n    // the first column could be the Select and/or Expandable column\n    let additionalColsIndexShift = isFullWidth ? 0 : firstUserColumnIndex;\n    return {\n      ...(row &&\n        (row.cells || row).reduce(\n          (acc: object, cell: IRowCell, cellIndex: number) => {\n            const isCellObject = cell === Object(cell);\n            const isCellFunction = cell && typeof cell.title === 'function';\n            let formatters: any = [];\n            if (isCellObject && cell.formatters) {\n              // give priority to formatters specified on the cell object\n              // expandable example:\n              // rows: [{ parent: 0, fullWidth: true, cells: [{ title: 'fullWidth, child - a', formatters: [expandable]}] }]\n              formatters = cell.formatters;\n            } else if (isFullWidth && cellIndex < firstUserColumnIndex) {\n              // for backwards compatibility, map the cells that are not under user columns (like Select/Expandable)\n              // to the first user column's header formatters\n              formatters = headerData[firstUserColumnIndex].cell.formatters;\n            }\n            let mappedCellTitle: IRowCell | Function | IRowCell['title'] = cell;\n            if (isCellObject && isCellFunction) {\n              mappedCellTitle = (cell.title as Function)(cell.props.value, rowKey, cellIndex, cell.props);\n            } else if (isCellObject) {\n              mappedCellTitle = cell.title;\n            }\n            const mappedCell: IMappedCell = {\n              [headerData[cellIndex + additionalColsIndexShift].property]: {\n                title: mappedCellTitle as React.ReactNode,\n                formatters,\n                props: {\n                  isVisible: true,\n                  ...(isCellObject ? cell.props : null)\n                }\n              }\n            };\n\n            // increment the shift index when a cell spans multiple columns\n            if (isCellObject && cell.props && cell.props.colSpan) {\n              additionalColsIndexShift += cell.props.colSpan - 1;\n            }\n            return {\n              ...acc,\n              ...mappedCell\n            };\n          },\n          { secretTableRowKeyId: row.id !== undefined ? row.id : rowKey }\n        ))\n    };\n  };\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { className, headerData, rows, rowKey, children, onRowClick, ...props } = this.props;\n\n    let mappedRows: IRow[];\n    if (headerData.length > 0) {\n      mappedRows = (rows as IRow[]).map((oneRow: IRow, oneRowKey: number) => ({\n        ...oneRow,\n        ...this.mapCells(headerData, oneRow, oneRowKey),\n        isExpanded: isRowExpanded(oneRow, rows),\n        isHeightAuto: oneRow.heightAuto || false,\n        isFirst: oneRowKey === 0,\n        isLast: oneRowKey === rows.length - 1,\n        isFirstVisible: false,\n        isLastVisible: false\n      })) as IRow[];\n      flagVisibility(mappedRows);\n    }\n\n    return (\n      <React.Fragment>\n        {mappedRows && (\n          <BaseBody\n            {...props}\n            mappedRows={mappedRows}\n            rows={mappedRows as RowType[]}\n            onRow={this.onRow}\n            rowKey={rowKey}\n            className={className}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport const TableBody = ({\n  className = '' as string,\n  children = null as React.ReactNode,\n  rowKey = 'secretTableRowKeyId' as string,\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  onRow = (...args: any) => ({}),\n  onRowClick = (\n    event: React.MouseEvent | React.KeyboardEvent,\n    row: IRow,\n    rowProps: IExtraRowData,\n    computedData: IComputedData\n  ) =>\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    undefined as OnRowClick,\n  ...props\n}: TableBodyProps) => (\n  <TableContext.Consumer>\n    {({ headerData = [], rows = [], ...rest }) => (\n      <ContextBody\n        headerData={headerData}\n        rows={rows as IRow[]}\n        onRow={onRow}\n        className={className}\n        rowKey={rowKey}\n        onRowClick={onRowClick}\n        {...props}\n        {...rest}\n      >\n        {children}\n      </ContextBody>\n    )}\n  </TableContext.Consumer>\n);\n"]},"metadata":{},"sourceType":"module"}