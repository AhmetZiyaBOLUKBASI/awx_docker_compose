{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{i18n}from\"@lingui/core\";import React,{useState}from'react';import{useField}from'formik';import{Button,ButtonVariant,TextInput,Tooltip}from'@patternfly/react-core';import{EyeIcon,EyeSlashIcon}from'@patternfly/react-icons';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function PasswordInput(props){var autocomplete=props.autocomplete,id=props.id,name=props.name,validate=props.validate,isFieldGroupValid=props.isFieldGroupValid,isRequired=props.isRequired,isDisabled=props.isDisabled;var _useState=useState('password'),_useState2=_slicedToArray(_useState,2),inputType=_useState2[0],setInputType=_useState2[1];var _useField=useField({name:name,validate:validate}),_useField2=_slicedToArray(_useField,2),field=_useField2[0],meta=_useField2[1];var isValid=!(meta.touched&&meta.error);var handlePasswordToggle=function handlePasswordToggle(){setInputType(inputType==='text'?'password':'text');};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Tooltip,{content:inputType==='password'?/*i18n*/i18n._(\"Show\"):/*i18n*/i18n._(\"Hide\"),children:/*#__PURE__*/_jsxs(Button,{ouiaId:\"\".concat(id,\"-toggle\"),variant:ButtonVariant.control,\"aria-label\":/*i18n*/i18n._(\"Toggle Password\"),onClick:handlePasswordToggle,isDisabled:isDisabled,children:[inputType==='password'&&/*#__PURE__*/_jsx(EyeSlashIcon,{}),inputType==='text'&&/*#__PURE__*/_jsx(EyeIcon,{})]})}),/*#__PURE__*/_jsx(TextInput,_objectSpread(_objectSpread({autoComplete:autocomplete,id:id,placeholder:field.value==='$encrypted$'?'ENCRYPTED':undefined},field),{},{value:field.value==='$encrypted$'?'':field.value,isDisabled:isDisabled,isRequired:isRequired,validated:isValid||isFieldGroupValid?'default':'error',type:inputType,onChange:function onChange(_,event){field.onChange(event);}}))]});}PasswordInput.defaultProps={autocomplete:'new-password',validate:function validate(){},isRequired:false,isDisabled:false};export default PasswordInput;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/FormField/PasswordInput.js"],"names":["React","useState","useField","Button","ButtonVariant","TextInput","Tooltip","EyeIcon","EyeSlashIcon","PasswordInput","props","autocomplete","id","name","validate","isFieldGroupValid","isRequired","isDisabled","inputType","setInputType","field","meta","isValid","touched","error","handlePasswordToggle","control","value","undefined","_","event","onChange","defaultProps"],"mappings":"4OAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAIA,OAASC,QAAT,KAAyB,QAAzB,CACA,OACEC,MADF,CAEEC,aAFF,CAGEC,SAHF,CAIEC,OAJF,KAKO,wBALP,CAMA,OAASC,OAAT,CAAkBC,YAAlB,KAAsC,yBAAtC,C,6IAEA,QAASC,CAAAA,aAAT,CAAuBC,KAAvB,CAA8B,CAC5B,GACEC,CAAAA,YADF,CAQID,KARJ,CACEC,YADF,CAEEC,EAFF,CAQIF,KARJ,CAEEE,EAFF,CAGEC,IAHF,CAQIH,KARJ,CAGEG,IAHF,CAIEC,QAJF,CAQIJ,KARJ,CAIEI,QAJF,CAKEC,iBALF,CAQIL,KARJ,CAKEK,iBALF,CAMEC,UANF,CAQIN,KARJ,CAMEM,UANF,CAOEC,UAPF,CAQIP,KARJ,CAOEO,UAPF,CASA,cAAkChB,QAAQ,CAAC,UAAD,CAA1C,wCAAOiB,SAAP,eAAkBC,YAAlB,eACA,cAAsBjB,QAAQ,CAAC,CAAEW,IAAI,CAAJA,IAAF,CAAQC,QAAQ,CAARA,QAAR,CAAD,CAA9B,wCAAOM,KAAP,eAAcC,IAAd,eAEA,GAAMC,CAAAA,OAAO,CAAG,EAAED,IAAI,CAACE,OAAL,EAAgBF,IAAI,CAACG,KAAvB,CAAhB,CAEA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,CACjCN,YAAY,CAACD,SAAS,GAAK,MAAd,CAAuB,UAAvB,CAAoC,MAArC,CAAZ,CACD,CAFD,CAIA,mBACE,wCACE,KAAC,OAAD,EAAS,OAAO,CAAEA,SAAS,GAAK,UAAd,SAA2B,cAA3B,SAAqC,cAAvD,uBACE,MAAC,MAAD,EACE,MAAM,WAAKN,EAAL,WADR,CAEE,OAAO,CAAER,aAAa,CAACsB,OAFzB,CAGE,qBAAY,yBAHd,CAIE,OAAO,CAAED,oBAJX,CAKE,UAAU,CAAER,UALd,WAOGC,SAAS,GAAK,UAAd,eAA4B,KAAC,YAAD,IAP/B,CAQGA,SAAS,GAAK,MAAd,eAAwB,KAAC,OAAD,IAR3B,GADF,EADF,cAaE,KAAC,SAAD,8BACE,YAAY,CAAEP,YADhB,CAEE,EAAE,CAAEC,EAFN,CAGE,WAAW,CAAEQ,KAAK,CAACO,KAAN,GAAgB,aAAhB,CAAgC,WAAhC,CAA8CC,SAH7D,EAIMR,KAJN,MAKE,KAAK,CAAEA,KAAK,CAACO,KAAN,GAAgB,aAAhB,CAAgC,EAAhC,CAAqCP,KAAK,CAACO,KALpD,CAME,UAAU,CAAEV,UANd,CAOE,UAAU,CAAED,UAPd,CAQE,SAAS,CAAEM,OAAO,EAAIP,iBAAX,CAA+B,SAA/B,CAA2C,OARxD,CASE,IAAI,CAAEG,SATR,CAUE,QAAQ,CAAE,kBAACW,CAAD,CAAIC,KAAJ,CAAc,CACtBV,KAAK,CAACW,QAAN,CAAeD,KAAf,EACD,CAZH,GAbF,GADF,CA8BD,CAWDrB,aAAa,CAACuB,YAAd,CAA6B,CAC3BrB,YAAY,CAAE,cADa,CAE3BG,QAAQ,CAAE,mBAAM,CAAE,CAFS,CAG3BE,UAAU,CAAE,KAHe,CAI3BC,UAAU,CAAE,KAJe,CAA7B,CAOA,cAAeR,CAAAA,aAAf","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { t } from '@lingui/macro';\nimport { useField } from 'formik';\nimport {\n  Button,\n  ButtonVariant,\n  TextInput,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\n\nfunction PasswordInput(props) {\n  const {\n    autocomplete,\n    id,\n    name,\n    validate,\n    isFieldGroupValid,\n    isRequired,\n    isDisabled,\n  } = props;\n  const [inputType, setInputType] = useState('password');\n  const [field, meta] = useField({ name, validate });\n\n  const isValid = !(meta.touched && meta.error);\n\n  const handlePasswordToggle = () => {\n    setInputType(inputType === 'text' ? 'password' : 'text');\n  };\n\n  return (\n    <>\n      <Tooltip content={inputType === 'password' ? t`Show` : t`Hide`}>\n        <Button\n          ouiaId={`${id}-toggle`}\n          variant={ButtonVariant.control}\n          aria-label={t`Toggle Password`}\n          onClick={handlePasswordToggle}\n          isDisabled={isDisabled}\n        >\n          {inputType === 'password' && <EyeSlashIcon />}\n          {inputType === 'text' && <EyeIcon />}\n        </Button>\n      </Tooltip>\n      <TextInput\n        autoComplete={autocomplete}\n        id={id}\n        placeholder={field.value === '$encrypted$' ? 'ENCRYPTED' : undefined}\n        {...field}\n        value={field.value === '$encrypted$' ? '' : field.value}\n        isDisabled={isDisabled}\n        isRequired={isRequired}\n        validated={isValid || isFieldGroupValid ? 'default' : 'error'}\n        type={inputType}\n        onChange={(_, event) => {\n          field.onChange(event);\n        }}\n      />\n    </>\n  );\n}\n\nPasswordInput.propTypes = {\n  autocomplete: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  validate: PropTypes.func,\n  isRequired: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n};\n\nPasswordInput.defaultProps = {\n  autocomplete: 'new-password',\n  validate: () => {},\n  isRequired: false,\n  isDisabled: false,\n};\n\nexport default PasswordInput;\n"]},"metadata":{},"sourceType":"module"}