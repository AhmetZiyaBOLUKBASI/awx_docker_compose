{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { Tr } from '../TableComposable';\nexport var TreeRowWrapper = function TreeRowWrapper(_a) {\n  var className = _a.className,\n      rowProps = _a.rowProps,\n      row = _a.row,\n      props = __rest(_a, [\"className\", \"rowProps\", \"row\"]);\n\n  var _row$props = row.props,\n      level = _row$props['aria-level'],\n      posinset = _row$props['aria-posinset'],\n      setsize = _row$props['aria-setsize'],\n      isExpanded = _row$props.isExpanded,\n      isDetailsExpanded = _row$props.isDetailsExpanded,\n      isHidden = _row$props.isHidden;\n  return React.createElement(Tr, Object.assign({\n    \"aria-level\": level,\n    \"aria-posinset\": posinset,\n    \"aria-setsize\": setsize,\n    \"aria-expanded\": !!isExpanded,\n    isHidden: isHidden,\n    className: css(className, isExpanded && styles.modifiers.expanded, isDetailsExpanded && stylesTreeView.modifiers.treeViewDetailsExpanded)\n  }, props));\n};\nTreeRowWrapper.displayName = 'TreeRowWrapper';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/TreeRowWrapper.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,qDAAnB;AACA,OAAO,cAAP,MAA2B,+DAA3B;AAEA,SAAS,EAAT,QAAmB,oBAAnB;AAEA,OAAO,IAAM,cAAc,GAA6C,SAA3D,cAA2D,CAAC,EAAD,EAMlD;AANmD,MACvE,SADuE,GAIpE,EAJoE,CACvE,SADuE;AAAA,MAGvE,QAHuE,GAIpE,EAJoE,CAGvE,QAHuE;AAAA,MAIvE,GAJuE,GAIpE,EAJoE,CAIvE,GAJuE;AAAA,MAKpE,KALoE,GAK/D,MAAA,CAAA,EAAA,EAL+D,CAAA,WAAA,EAAA,UAAA,EAAA,KAAA,CAK/D,CAL+D;;AAOvE,mBAOI,GAAG,CAAC,KAPR;AAAA,MACgB,KADhB,cACE,YADF;AAAA,MAEmB,QAFnB,cAEE,eAFF;AAAA,MAGkB,OAHlB,cAGE,cAHF;AAAA,MAIE,UAJF,cAIE,UAJF;AAAA,MAKE,iBALF,cAKE,iBALF;AAAA,MAME,QANF,cAME,QANF;AAQA,SACE,KAAA,CAAA,aAAA,CAAC,EAAD,EAAG,MAAA,CAAA,MAAA,CAAA;AAAA,kBACW,KADX;AACgB,qBACF,QAFd;AAEsB,oBACT,OAHb;AAGoB,qBACN,CAAC,CAAC,UAJhB;AAKD,IAAA,QAAQ,EAAE,QALT;AAMD,IAAA,SAAS,EAAE,GAAG,CACZ,SADY,EAEZ,UAAU,IAAI,MAAM,CAAC,SAAP,CAAiB,QAFnB,EAGZ,iBAAiB,IAAI,cAAc,CAAC,SAAf,CAAyB,uBAHlC;AANb,GAAA,EAWG,KAXH,CAAH,CADF;AAeD,CA9BM;AA+BP,cAAc,CAAC,WAAf,GAA6B,gBAA7B","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { RowWrapperProps } from './RowWrapper';\nimport { Tr } from '../TableComposable';\n\nexport const TreeRowWrapper: React.FunctionComponent<RowWrapperProps> = ({\n  className,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  rowProps,\n  row,\n  ...props\n}: RowWrapperProps) => {\n  const {\n    'aria-level': level,\n    'aria-posinset': posinset,\n    'aria-setsize': setsize,\n    isExpanded,\n    isDetailsExpanded,\n    isHidden\n  } = row.props;\n  return (\n    <Tr\n      aria-level={level}\n      aria-posinset={posinset}\n      aria-setsize={setsize}\n      aria-expanded={!!isExpanded}\n      isHidden={isHidden}\n      className={css(\n        className,\n        isExpanded && styles.modifiers.expanded,\n        isDetailsExpanded && stylesTreeView.modifiers.treeViewDetailsExpanded\n      )}\n      {...props}\n    />\n  );\n};\nTreeRowWrapper.displayName = 'TreeRowWrapper';\n"]},"metadata":{},"sourceType":"module"}