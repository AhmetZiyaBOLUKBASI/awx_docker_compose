{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport heightToken from '@patternfly/react-tokens/dist/esm/c_form_control_textarea_Height';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\nexport var TextAreResizeOrientation;\n\n(function (TextAreResizeOrientation) {\n  TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n  TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n  TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));\n\nexport var TextAreaBase = /*#__PURE__*/function (_React$Component) {\n  _inherits(TextAreaBase, _React$Component);\n\n  var _super = _createSuper(TextAreaBase);\n\n  function TextAreaBase(props) {\n    var _this;\n\n    _classCallCheck(this, TextAreaBase);\n\n    _this = _super.call(this, props);\n\n    _this.handleChange = function (event) {\n      // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n      var field = event.currentTarget;\n\n      if (_this.props.autoResize && canUseDOM) {\n        field.style.setProperty(heightToken.name, 'inherit');\n        var computed = window.getComputedStyle(field); // Calculate the height\n\n        var height = parseInt(computed.getPropertyValue('border-top-width')) + parseInt(computed.getPropertyValue('padding-top')) + field.scrollHeight + parseInt(computed.getPropertyValue('padding-bottom')) + parseInt(computed.getPropertyValue('border-bottom-width'));\n        field.style.setProperty(heightToken.name, \"\".concat(height, \"px\"));\n      }\n\n      if (_this.props.onChange) {\n        _this.props.onChange(field.value, event);\n      }\n    };\n\n    if (!props.id && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n\n    return _this;\n  }\n\n  _createClass(TextAreaBase, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          value = _a.value,\n          validated = _a.validated,\n          isRequired = _a.isRequired,\n          isDisabled = _a.isDisabled,\n          isIconSprite = _a.isIconSprite,\n          isReadOnly = _a.isReadOnly,\n          resizeOrientation = _a.resizeOrientation,\n          innerRef = _a.innerRef,\n          readOnly = _a.readOnly,\n          disabled = _a.disabled,\n          autoResize = _a.autoResize,\n          onChange = _a.onChange,\n          props = __rest(_a, [\"className\", \"value\", \"validated\", \"isRequired\", \"isDisabled\", \"isIconSprite\", \"isReadOnly\", \"resizeOrientation\", \"innerRef\", \"readOnly\", \"disabled\", \"autoResize\", \"onChange\"]);\n\n      var orientation = \"resize\".concat(capitalize(resizeOrientation));\n      return React.createElement(\"textarea\", Object.assign({\n        className: css(styles.formControl, isIconSprite && styles.modifiers.iconSprite, className, resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation], validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning),\n        onChange: this.handleChange\n      }, typeof this.props.defaultValue !== 'string' && {\n        value: value\n      }, {\n        \"aria-invalid\": validated === ValidatedOptions.error,\n        required: isRequired,\n        disabled: isDisabled || disabled,\n        readOnly: isReadOnly || readOnly,\n        ref: innerRef\n      }, props));\n    }\n  }]);\n\n  return TextAreaBase;\n}(React.Component);\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n  innerRef: React.createRef(),\n  className: '',\n  isRequired: false,\n  isDisabled: false,\n  isIconSprite: false,\n  validated: 'default',\n  resizeOrientation: 'both',\n  'aria-label': null\n};\nexport var TextArea = React.forwardRef(function (props, ref) {\n  return React.createElement(TextAreaBase, Object.assign({}, props, {\n    innerRef: ref\n  }));\n});\nTextArea.displayName = 'TextArea';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/TextArea/TextArea.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { HTMLProps } from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport heightToken from '@patternfly/react-tokens/dist/esm/c_form_control_textarea_Height';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\n\nexport enum TextAreResizeOrientation {\n  horizontal = 'horizontal',\n  vertical = 'vertical',\n  both = 'both'\n}\n\nexport interface TextAreaProps extends Omit<HTMLProps<HTMLTextAreaElement>, 'onChange' | 'ref'> {\n  /** Additional classes added to the TextArea. */\n  className?: string;\n  /** Flag to show if the TextArea is required. */\n  isRequired?: boolean;\n  /** Flag to show if the TextArea is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the TextArea is read only. */\n  isReadOnly?: boolean;\n  /** Use the external file instead of a data URI */\n  isIconSprite?: boolean;\n  /** Flag to modify height based on contents. */\n  autoResize?: boolean;\n  /** Value to indicate if the textarea is modified to show that validation state.\n   * If set to success, textarea will be modified to indicate valid state.\n   * If set to error, textarea will be modified to indicate error state.\n   */\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  /** Value of the TextArea. */\n  value?: string | number;\n  /** A callback for when the TextArea value changes. */\n  onChange?: (value: string, event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  /** Sets the orientation to limit the resize to */\n  resizeOrientation?: 'horizontal' | 'vertical' | 'both';\n  /** Custom flag to show that the TextArea requires an associated id or aria-label. */\n  'aria-label'?: string;\n  /** A reference object to attach to the textarea. */\n  innerRef?: React.RefObject<any>;\n}\n\nexport class TextAreaBase extends React.Component<TextAreaProps> {\n  static displayName = 'TextArea';\n  static defaultProps: TextAreaProps = {\n    innerRef: React.createRef<HTMLTextAreaElement>(),\n    className: '',\n    isRequired: false,\n    isDisabled: false,\n    isIconSprite: false,\n    validated: 'default',\n    resizeOrientation: 'both',\n    'aria-label': null as string\n  };\n\n  constructor(props: TextAreaProps) {\n    super(props);\n    if (!props.id && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n  }\n\n  private handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n    const field = event.currentTarget;\n    if (this.props.autoResize && canUseDOM) {\n      field.style.setProperty(heightToken.name, 'inherit');\n      const computed = window.getComputedStyle(field);\n      // Calculate the height\n      const height =\n        parseInt(computed.getPropertyValue('border-top-width')) +\n        parseInt(computed.getPropertyValue('padding-top')) +\n        field.scrollHeight +\n        parseInt(computed.getPropertyValue('padding-bottom')) +\n        parseInt(computed.getPropertyValue('border-bottom-width'));\n      field.style.setProperty(heightToken.name, `${height}px`);\n    }\n    if (this.props.onChange) {\n      this.props.onChange(field.value, event);\n    }\n  };\n\n  render() {\n    const {\n      className,\n      value,\n      validated,\n      isRequired,\n      isDisabled,\n      isIconSprite,\n      isReadOnly,\n      resizeOrientation,\n      innerRef,\n      readOnly,\n      disabled,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      autoResize,\n      onChange,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    const orientation = `resize${capitalize(resizeOrientation)}` as 'resizeVertical' | 'resizeHorizontal';\n    return (\n      <textarea\n        className={css(\n          styles.formControl,\n          isIconSprite && styles.modifiers.iconSprite,\n          className,\n          resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation],\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning\n        )}\n        onChange={this.handleChange}\n        {...(typeof this.props.defaultValue !== 'string' && { value })}\n        aria-invalid={validated === ValidatedOptions.error}\n        required={isRequired}\n        disabled={isDisabled || disabled}\n        readOnly={isReadOnly || readOnly}\n        ref={innerRef}\n        {...props}\n      />\n    );\n  }\n}\n\nexport const TextArea = React.forwardRef<HTMLTextAreaElement, TextAreaProps>((props, ref) => (\n  <TextAreaBase {...props} innerRef={ref as React.MutableRefObject<any>} />\n));\nTextArea.displayName = 'TextArea';\n"]},"metadata":{},"sourceType":"module"}