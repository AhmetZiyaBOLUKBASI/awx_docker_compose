{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport { Tooltip } from '../Tooltip';\nexport var DualListSelectorControlBase = function DualListSelectorControlBase(_a) {\n  var innerRef = _a.innerRef,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      className = _a.className,\n      ariaLabel = _a['aria-label'],\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? true : _a$isDisabled,\n      _a$onClick = _a.onClick,\n      onClick = _a$onClick === void 0 ? function () {} : _a$onClick,\n      tooltipContent = _a.tooltipContent,\n      _a$tooltipProps = _a.tooltipProps,\n      tooltipProps = _a$tooltipProps === void 0 ? {} : _a$tooltipProps,\n      props = __rest(_a, [\"innerRef\", \"children\", \"className\", 'aria-label', \"isDisabled\", \"onClick\", \"tooltipContent\", \"tooltipProps\"]);\n\n  var ref = innerRef || React.useRef(null);\n  return React.createElement(\"div\", Object.assign({\n    className: css('pf-c-dual-list-selector__controls-item', className)\n  }, props), React.createElement(Button, {\n    isDisabled: isDisabled,\n    \"aria-disabled\": isDisabled,\n    variant: ButtonVariant.plain,\n    onClick: onClick,\n    \"aria-label\": ariaLabel,\n    tabIndex: -1,\n    ref: ref\n  }, children), tooltipContent && React.createElement(Tooltip, Object.assign({\n    content: tooltipContent,\n    position: \"left\",\n    reference: ref\n  }, tooltipProps)));\n};\nDualListSelectorControlBase.displayName = 'DualListSelectorControlBase';\nexport var DualListSelectorControl = React.forwardRef(function (props, ref) {\n  return React.createElement(DualListSelectorControlBase, Object.assign({\n    innerRef: ref\n  }, props));\n});\nDualListSelectorControl.displayName = 'DualListSelectorControl';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorControl.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,MAAT,EAAiB,aAAjB,QAAsC,WAAtC;AACA,SAAS,OAAT,QAAwB,YAAxB;AAqBA,OAAO,IAAM,2BAA2B,GAA0D,SAArF,2BAAqF,CAAC,EAAD,EAU/D;AAVgE,MACjG,QADiG,GAQzE,EARyE,CACjG,QADiG;AAAA,oBAQzE,EARyE,CAEjG,QAFiG;AAAA,MAEjG,QAFiG,4BAEtF,IAFsF;AAAA,MAGjG,SAHiG,GAQzE,EARyE,CAGjG,SAHiG;AAAA,MAInF,SAJmF,GAQzE,EARyE,CAIjG,YAJiG;AAAA,sBAQzE,EARyE,CAKjG,UALiG;AAAA,MAKjG,UALiG,8BAKpF,IALoF;AAAA,mBAQzE,EARyE,CAMjG,OANiG;AAAA,MAMjG,OANiG,2BAMvF,YAAK,CAAG,CAN+E;AAAA,MAOjG,cAPiG,GAQzE,EARyE,CAOjG,cAPiG;AAAA,wBAQzE,EARyE,CAQjG,YARiG;AAAA,MAQjG,YARiG,gCAQlF,EARkF;AAAA,MAS9F,KAT8F,GASzF,MAAA,CAAA,EAAA,EATyF,CAAA,UAAA,EAAA,UAAA,EAAA,WAAA,EAAA,YAAA,EAAA,YAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,cAAA,CASzF,CATyF;;AAWjG,MAAM,GAAG,GAAG,QAAQ,IAAI,KAAK,CAAC,MAAN,CAAa,IAAb,CAAxB;AACA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,wCAAD,EAA2C,SAA3C;AAAnB,GAAA,EAA8E,KAA9E,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AACL,IAAA,UAAU,EAAE,UADP;AACiB,qBACP,UAFV;AAGL,IAAA,OAAO,EAAE,aAAa,CAAC,KAHlB;AAIL,IAAA,OAAO,EAAE,OAJJ;AAIW,kBACJ,SALP;AAML,IAAA,QAAQ,EAAE,CAAC,CANN;AAOL,IAAA,GAAG,EAAE;AAPA,GAAP,EASG,QATH,CADF,EAYG,cAAc,IAAI,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,OAAO,EAAE,cAAV;AAA0B,IAAA,QAAQ,EAAC,MAAnC;AAA0C,IAAA,SAAS,EAAE;AAArD,GAAA,EAA8D,YAA9D,CAAR,CAZrB,CADF;AAgBD,CA5BM;AA6BP,2BAA2B,CAAC,WAA5B,GAA0C,6BAA1C;AAEA,OAAO,IAAM,uBAAuB,GAAG,KAAK,CAAC,UAAN,CAAiB,UAAC,KAAD,EAAsC,GAAtC;AAAA,SACtD,KAAA,CAAA,aAAA,CAAC,2BAAD,EAA4B,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,QAAQ,EAAE;AAAX,GAAA,EAAoB,KAApB,CAA5B,CADsD;AAAA,CAAjB,CAAhC;AAIP,uBAAuB,CAAC,WAAxB,GAAsC,yBAAtC","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport { Tooltip } from '../Tooltip';\n\nexport interface DualListSelectorControlProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onClick'> {\n  /** Content to be rendered in the dual list selector control. */\n  children?: React.ReactNode;\n  /** @hide forwarded ref */\n  innerRef?: React.Ref<any>;\n  /** Flag indicating the control is disabled. */\n  isDisabled?: boolean;\n  /** Additional classes applied to the dual list selector control. */\n  className?: string;\n  /** Callback fired when dual list selector control is selected. */\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  /** Accessible label for the dual list selector control. */\n  'aria-label'?: string;\n  /** Content to be displayed in a tooltip on hover of control. */\n  tooltipContent?: React.ReactNode;\n  /** Additional tooltip properties passed to the tooltip. */\n  tooltipProps?: any;\n}\n\nexport const DualListSelectorControlBase: React.FunctionComponent<DualListSelectorControlProps> = ({\n  innerRef,\n  children = null,\n  className,\n  'aria-label': ariaLabel,\n  isDisabled = true,\n  onClick = () => {},\n  tooltipContent,\n  tooltipProps = {} as any,\n  ...props\n}: DualListSelectorControlProps) => {\n  const ref = innerRef || React.useRef(null);\n  return (\n    <div className={css('pf-c-dual-list-selector__controls-item', className)} {...props}>\n      <Button\n        isDisabled={isDisabled}\n        aria-disabled={isDisabled}\n        variant={ButtonVariant.plain}\n        onClick={onClick}\n        aria-label={ariaLabel}\n        tabIndex={-1}\n        ref={ref}\n      >\n        {children}\n      </Button>\n      {tooltipContent && <Tooltip content={tooltipContent} position=\"left\" reference={ref} {...tooltipProps} />}\n    </div>\n  );\n};\nDualListSelectorControlBase.displayName = 'DualListSelectorControlBase';\n\nexport const DualListSelectorControl = React.forwardRef((props: DualListSelectorControlProps, ref: React.Ref<any>) => (\n  <DualListSelectorControlBase innerRef={ref} {...props} />\n));\n\nDualListSelectorControl.displayName = 'DualListSelectorControl';\n"]},"metadata":{},"sourceType":"module"}