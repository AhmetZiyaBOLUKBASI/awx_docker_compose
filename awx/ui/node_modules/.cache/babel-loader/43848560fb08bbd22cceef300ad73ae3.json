{"ast":null,"code":"import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{i18n}from\"@lingui/core\";import React from'react';import{Form}from'@patternfly/react-core';import{useFormikContext}from'formik';import{PasswordField}from'../../FormField';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CredentialPasswordsStep(_ref){var launchConfig=_ref.launchConfig;var _useFormikContext=useFormikContext(),credentials=_useFormikContext.values.credentials;var vaultsThatPrompt=[];var showcredentialPasswordSsh=false;var showcredentialPasswordPrivilegeEscalation=false;var showcredentialPasswordPrivateKeyPassphrase=false;if(!launchConfig.ask_credential_on_launch&&launchConfig.passwords_needed_to_start){launchConfig.passwords_needed_to_start.forEach(function(password){if(password==='ssh_password'){showcredentialPasswordSsh=true;}else if(password==='become_password'){showcredentialPasswordPrivilegeEscalation=true;}else if(password==='ssh_key_unlock'){showcredentialPasswordPrivateKeyPassphrase=true;}else if(password.startsWith('vault_password')){var vaultId=password.split(/\\.(.+)/)[1]||'';vaultsThatPrompt.push(vaultId);}});}else if(credentials){credentials.forEach(function(credential){if(!credential.inputs){var launchConfigCredential=launchConfig.defaults.credentials.find(function(defaultCred){return defaultCred.id===credential.id;});if((launchConfigCredential===null||launchConfigCredential===void 0?void 0:launchConfigCredential.passwords_needed.length)>0){if(launchConfigCredential.passwords_needed.includes('ssh_password')){showcredentialPasswordSsh=true;}if(launchConfigCredential.passwords_needed.includes('become_password')){showcredentialPasswordPrivilegeEscalation=true;}if(launchConfigCredential.passwords_needed.includes('ssh_key_unlock')){showcredentialPasswordPrivateKeyPassphrase=true;}var vaultPasswordIds=launchConfigCredential.passwords_needed.filter(function(passwordNeeded){return passwordNeeded.startsWith('vault_password');}).map(function(vaultPassword){return vaultPassword.split(/\\.(.+)/)[1]||'';});vaultsThatPrompt.push.apply(vaultsThatPrompt,_toConsumableArray(vaultPasswordIds));}}else{var _credential$inputs,_credential$inputs2,_credential$inputs3,_credential$inputs4;if((credential===null||credential===void 0?void 0:(_credential$inputs=credential.inputs)===null||_credential$inputs===void 0?void 0:_credential$inputs.password)==='ASK'){showcredentialPasswordSsh=true;}if((credential===null||credential===void 0?void 0:(_credential$inputs2=credential.inputs)===null||_credential$inputs2===void 0?void 0:_credential$inputs2.become_password)==='ASK'){showcredentialPasswordPrivilegeEscalation=true;}if((credential===null||credential===void 0?void 0:(_credential$inputs3=credential.inputs)===null||_credential$inputs3===void 0?void 0:_credential$inputs3.ssh_key_unlock)==='ASK'){showcredentialPasswordPrivateKeyPassphrase=true;}if((credential===null||credential===void 0?void 0:(_credential$inputs4=credential.inputs)===null||_credential$inputs4===void 0?void 0:_credential$inputs4.vault_password)==='ASK'){vaultsThatPrompt.push(credential.inputs.vault_id);}}});}return/*#__PURE__*/_jsxs(Form,{onSubmit:function onSubmit(e){e.preventDefault();},children:[showcredentialPasswordSsh&&/*#__PURE__*/_jsx(PasswordField,{id:\"launch-ssh-password\",label:/*i18n*/i18n._(\"SSH password\"),name:\"credential_passwords.ssh_password\",isRequired:true}),showcredentialPasswordPrivateKeyPassphrase&&/*#__PURE__*/_jsx(PasswordField,{id:\"launch-private-key-passphrase\",label:/*i18n*/i18n._(\"Private key passphrase\"),name:\"credential_passwords.ssh_key_unlock\",isRequired:true}),showcredentialPasswordPrivilegeEscalation&&/*#__PURE__*/_jsx(PasswordField,{id:\"launch-privilege-escalation-password\",label:/*i18n*/i18n._(\"Privilege escalation password\"),name:\"credential_passwords.become_password\",isRequired:true}),vaultsThatPrompt.map(function(credId){return/*#__PURE__*/_jsx(PasswordField,{id:\"launch-vault-password-\".concat(credId),label:credId===''?/*i18n*/i18n._(\"Vault password\"):/*i18n*/i18n._(\"Vault password | {credId}\",{credId:credId}),name:\"credential_passwords['vault_password\".concat(credId!==''?\".\".concat(credId):'',\"']\"),isRequired:true},credId);})]});}export default CredentialPasswordsStep;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/LaunchPrompt/steps/CredentialPasswordsStep.js"],"names":["React","Form","useFormikContext","PasswordField","CredentialPasswordsStep","launchConfig","credentials","values","vaultsThatPrompt","showcredentialPasswordSsh","showcredentialPasswordPrivilegeEscalation","showcredentialPasswordPrivateKeyPassphrase","ask_credential_on_launch","passwords_needed_to_start","forEach","password","startsWith","vaultId","split","push","credential","inputs","launchConfigCredential","defaults","find","defaultCred","id","passwords_needed","length","includes","vaultPasswordIds","filter","passwordNeeded","map","vaultPassword","become_password","ssh_key_unlock","vault_password","vault_id","e","preventDefault","credId"],"mappings":"8IAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAGA,OAASC,IAAT,KAAqB,wBAArB,CACA,OAASC,gBAAT,KAAiC,QAAjC,CACA,OAASC,aAAT,KAA8B,iBAA9B,C,wFAEA,QAASC,CAAAA,uBAAT,MAAmD,IAAhBC,CAAAA,YAAgB,MAAhBA,YAAgB,CACjD,sBAEIH,gBAAgB,EAFpB,CACYI,WADZ,mBACEC,MADF,CACYD,WADZ,CAIA,GAAME,CAAAA,gBAAgB,CAAG,EAAzB,CACA,GAAIC,CAAAA,yBAAyB,CAAG,KAAhC,CACA,GAAIC,CAAAA,yCAAyC,CAAG,KAAhD,CACA,GAAIC,CAAAA,0CAA0C,CAAG,KAAjD,CAEA,GACE,CAACN,YAAY,CAACO,wBAAd,EACAP,YAAY,CAACQ,yBAFf,CAGE,CACAR,YAAY,CAACQ,yBAAb,CAAuCC,OAAvC,CAA+C,SAACC,QAAD,CAAc,CAC3D,GAAIA,QAAQ,GAAK,cAAjB,CAAiC,CAC/BN,yBAAyB,CAAG,IAA5B,CACD,CAFD,IAEO,IAAIM,QAAQ,GAAK,iBAAjB,CAAoC,CACzCL,yCAAyC,CAAG,IAA5C,CACD,CAFM,IAEA,IAAIK,QAAQ,GAAK,gBAAjB,CAAmC,CACxCJ,0CAA0C,CAAG,IAA7C,CACD,CAFM,IAEA,IAAII,QAAQ,CAACC,UAAT,CAAoB,gBAApB,CAAJ,CAA2C,CAChD,GAAMC,CAAAA,OAAO,CAAGF,QAAQ,CAACG,KAAT,CAAe,QAAf,EAAyB,CAAzB,GAA+B,EAA/C,CACAV,gBAAgB,CAACW,IAAjB,CAAsBF,OAAtB,EACD,CACF,CAXD,EAYD,CAhBD,IAgBO,IAAIX,WAAJ,CAAiB,CACtBA,WAAW,CAACQ,OAAZ,CAAoB,SAACM,UAAD,CAAgB,CAClC,GAAI,CAACA,UAAU,CAACC,MAAhB,CAAwB,CACtB,GAAMC,CAAAA,sBAAsB,CAAGjB,YAAY,CAACkB,QAAb,CAAsBjB,WAAtB,CAAkCkB,IAAlC,CAC7B,SAACC,WAAD,QAAiBA,CAAAA,WAAW,CAACC,EAAZ,GAAmBN,UAAU,CAACM,EAA/C,EAD6B,CAA/B,CAIA,GAAI,CAAAJ,sBAAsB,OAAtB,EAAAA,sBAAsB,SAAtB,QAAAA,sBAAsB,CAAEK,gBAAxB,CAAyCC,MAAzC,EAAkD,CAAtD,CAAyD,CACvD,GACEN,sBAAsB,CAACK,gBAAvB,CAAwCE,QAAxC,CAAiD,cAAjD,CADF,CAEE,CACApB,yBAAyB,CAAG,IAA5B,CACD,CACD,GACEa,sBAAsB,CAACK,gBAAvB,CAAwCE,QAAxC,CAAiD,iBAAjD,CADF,CAEE,CACAnB,yCAAyC,CAAG,IAA5C,CACD,CACD,GACEY,sBAAsB,CAACK,gBAAvB,CAAwCE,QAAxC,CAAiD,gBAAjD,CADF,CAEE,CACAlB,0CAA0C,CAAG,IAA7C,CACD,CAED,GAAMmB,CAAAA,gBAAgB,CAAGR,sBAAsB,CAACK,gBAAvB,CACtBI,MADsB,CACf,SAACC,cAAD,QACNA,CAAAA,cAAc,CAAChB,UAAf,CAA0B,gBAA1B,CADM,EADe,EAItBiB,GAJsB,CAIlB,SAACC,aAAD,QAAmBA,CAAAA,aAAa,CAAChB,KAAd,CAAoB,QAApB,EAA8B,CAA9B,GAAoC,EAAvD,EAJkB,CAAzB,CAMAV,gBAAgB,CAACW,IAAjB,OAAAX,gBAAgB,oBAASsB,gBAAT,EAAhB,CACD,CACF,CA9BD,IA8BO,oFACL,GAAI,CAAAV,UAAU,OAAV,EAAAA,UAAU,SAAV,4BAAAA,UAAU,CAAEC,MAAZ,gEAAoBN,QAApB,IAAiC,KAArC,CAA4C,CAC1CN,yBAAyB,CAAG,IAA5B,CACD,CAED,GAAI,CAAAW,UAAU,OAAV,EAAAA,UAAU,SAAV,6BAAAA,UAAU,CAAEC,MAAZ,kEAAoBc,eAApB,IAAwC,KAA5C,CAAmD,CACjDzB,yCAAyC,CAAG,IAA5C,CACD,CAED,GAAI,CAAAU,UAAU,OAAV,EAAAA,UAAU,SAAV,6BAAAA,UAAU,CAAEC,MAAZ,kEAAoBe,cAApB,IAAuC,KAA3C,CAAkD,CAChDzB,0CAA0C,CAAG,IAA7C,CACD,CAED,GAAI,CAAAS,UAAU,OAAV,EAAAA,UAAU,SAAV,6BAAAA,UAAU,CAAEC,MAAZ,kEAAoBgB,cAApB,IAAuC,KAA3C,CAAkD,CAChD7B,gBAAgB,CAACW,IAAjB,CAAsBC,UAAU,CAACC,MAAX,CAAkBiB,QAAxC,EACD,CACF,CACF,CAhDD,EAiDD,CAED,mBACE,MAAC,IAAD,EACE,QAAQ,CAAE,kBAACC,CAAD,CAAO,CACfA,CAAC,CAACC,cAAF,GACD,CAHH,WAKG/B,yBAAyB,eACxB,KAAC,aAAD,EACE,EAAE,CAAC,qBADL,CAEE,KAAK,SAAE,sBAFT,CAGE,IAAI,CAAC,mCAHP,CAIE,UAAU,KAJZ,EANJ,CAaGE,0CAA0C,eACzC,KAAC,aAAD,EACE,EAAE,CAAC,+BADL,CAEE,KAAK,SAAE,gCAFT,CAGE,IAAI,CAAC,qCAHP,CAIE,UAAU,KAJZ,EAdJ,CAqBGD,yCAAyC,eACxC,KAAC,aAAD,EACE,EAAE,CAAC,sCADL,CAEE,KAAK,SAAE,uCAFT,CAGE,IAAI,CAAC,sCAHP,CAIE,UAAU,KAJZ,EAtBJ,CA6BGF,gBAAgB,CAACyB,GAAjB,CAAqB,SAACQ,MAAD,qBACpB,KAAC,aAAD,EACE,EAAE,iCAA2BA,MAA3B,CADJ,CAGE,KAAK,CACHA,MAAM,GAAK,EAAX,SAAgB,wBAAhB,SAAoC,2CAAqBA,MAArB,EAJxC,CAME,IAAI,+CACFA,MAAM,GAAK,EAAX,YAAoBA,MAApB,EAA+B,EAD7B,MANN,CASE,UAAU,KATZ,EAEOA,MAFP,CADoB,EAArB,CA7BH,GADF,CA6CD,CAED,cAAerC,CAAAA,uBAAf","sourcesContent":["import React from 'react';\n\nimport { t } from '@lingui/macro';\nimport { Form } from '@patternfly/react-core';\nimport { useFormikContext } from 'formik';\nimport { PasswordField } from '../../FormField';\n\nfunction CredentialPasswordsStep({ launchConfig }) {\n  const {\n    values: { credentials },\n  } = useFormikContext();\n\n  const vaultsThatPrompt = [];\n  let showcredentialPasswordSsh = false;\n  let showcredentialPasswordPrivilegeEscalation = false;\n  let showcredentialPasswordPrivateKeyPassphrase = false;\n\n  if (\n    !launchConfig.ask_credential_on_launch &&\n    launchConfig.passwords_needed_to_start\n  ) {\n    launchConfig.passwords_needed_to_start.forEach((password) => {\n      if (password === 'ssh_password') {\n        showcredentialPasswordSsh = true;\n      } else if (password === 'become_password') {\n        showcredentialPasswordPrivilegeEscalation = true;\n      } else if (password === 'ssh_key_unlock') {\n        showcredentialPasswordPrivateKeyPassphrase = true;\n      } else if (password.startsWith('vault_password')) {\n        const vaultId = password.split(/\\.(.+)/)[1] || '';\n        vaultsThatPrompt.push(vaultId);\n      }\n    });\n  } else if (credentials) {\n    credentials.forEach((credential) => {\n      if (!credential.inputs) {\n        const launchConfigCredential = launchConfig.defaults.credentials.find(\n          (defaultCred) => defaultCred.id === credential.id\n        );\n\n        if (launchConfigCredential?.passwords_needed.length > 0) {\n          if (\n            launchConfigCredential.passwords_needed.includes('ssh_password')\n          ) {\n            showcredentialPasswordSsh = true;\n          }\n          if (\n            launchConfigCredential.passwords_needed.includes('become_password')\n          ) {\n            showcredentialPasswordPrivilegeEscalation = true;\n          }\n          if (\n            launchConfigCredential.passwords_needed.includes('ssh_key_unlock')\n          ) {\n            showcredentialPasswordPrivateKeyPassphrase = true;\n          }\n\n          const vaultPasswordIds = launchConfigCredential.passwords_needed\n            .filter((passwordNeeded) =>\n              passwordNeeded.startsWith('vault_password')\n            )\n            .map((vaultPassword) => vaultPassword.split(/\\.(.+)/)[1] || '');\n\n          vaultsThatPrompt.push(...vaultPasswordIds);\n        }\n      } else {\n        if (credential?.inputs?.password === 'ASK') {\n          showcredentialPasswordSsh = true;\n        }\n\n        if (credential?.inputs?.become_password === 'ASK') {\n          showcredentialPasswordPrivilegeEscalation = true;\n        }\n\n        if (credential?.inputs?.ssh_key_unlock === 'ASK') {\n          showcredentialPasswordPrivateKeyPassphrase = true;\n        }\n\n        if (credential?.inputs?.vault_password === 'ASK') {\n          vaultsThatPrompt.push(credential.inputs.vault_id);\n        }\n      }\n    });\n  }\n\n  return (\n    <Form\n      onSubmit={(e) => {\n        e.preventDefault();\n      }}\n    >\n      {showcredentialPasswordSsh && (\n        <PasswordField\n          id=\"launch-ssh-password\"\n          label={t`SSH password`}\n          name=\"credential_passwords.ssh_password\"\n          isRequired\n        />\n      )}\n      {showcredentialPasswordPrivateKeyPassphrase && (\n        <PasswordField\n          id=\"launch-private-key-passphrase\"\n          label={t`Private key passphrase`}\n          name=\"credential_passwords.ssh_key_unlock\"\n          isRequired\n        />\n      )}\n      {showcredentialPasswordPrivilegeEscalation && (\n        <PasswordField\n          id=\"launch-privilege-escalation-password\"\n          label={t`Privilege escalation password`}\n          name=\"credential_passwords.become_password\"\n          isRequired\n        />\n      )}\n      {vaultsThatPrompt.map((credId) => (\n        <PasswordField\n          id={`launch-vault-password-${credId}`}\n          key={credId}\n          label={\n            credId === '' ? t`Vault password` : t`Vault password | ${credId}`\n          }\n          name={`credential_passwords['vault_password${\n            credId !== '' ? `.${credId}` : ''\n          }']`}\n          isRequired\n        />\n      ))}\n    </Form>\n  );\n}\n\nexport default CredentialPasswordsStep;\n"]},"metadata":{},"sourceType":"module"}