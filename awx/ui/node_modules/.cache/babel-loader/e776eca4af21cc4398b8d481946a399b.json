{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesGrid from '@patternfly/react-styles/css/components/Table/table-grid';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { css } from '@patternfly/react-styles';\nimport { toCamel } from '../Table/utils/utils';\nimport { useOUIAProps, handleArrows, setTabIndex } from '@patternfly/react-core';\nimport { TableGridBreakpoint } from '../Table/TableTypes';\nexport var TableComposableContext = React.createContext({\n  registerSelectableRow: function registerSelectableRow() {}\n});\n\nvar TableComposableBase = function TableComposableBase(_a) {\n  var _b, _c;\n\n  var children = _a.children,\n      className = _a.className,\n      variant = _a.variant,\n      _a$borders = _a.borders,\n      borders = _a$borders === void 0 ? true : _a$borders,\n      _a$isStickyHeader = _a.isStickyHeader,\n      isStickyHeader = _a$isStickyHeader === void 0 ? false : _a$isStickyHeader,\n      _a$gridBreakPoint = _a.gridBreakPoint,\n      gridBreakPoint = _a$gridBreakPoint === void 0 ? TableGridBreakpoint.gridMd : _a$gridBreakPoint,\n      ariaLabel = _a['aria-label'],\n      _a$role = _a.role,\n      role = _a$role === void 0 ? 'grid' : _a$role,\n      innerRef = _a.innerRef,\n      ouiaId = _a.ouiaId,\n      _a$ouiaSafe = _a.ouiaSafe,\n      ouiaSafe = _a$ouiaSafe === void 0 ? true : _a$ouiaSafe,\n      _a$isTreeTable = _a.isTreeTable,\n      isTreeTable = _a$isTreeTable === void 0 ? false : _a$isTreeTable,\n      _a$isNested = _a.isNested,\n      isNested = _a$isNested === void 0 ? false : _a$isNested,\n      _a$isStriped = _a.isStriped,\n      isStriped = _a$isStriped === void 0 ? false : _a$isStriped,\n      _a$isExpandable = _a.isExpandable,\n      isExpandable = _a$isExpandable === void 0 ? false : _a$isExpandable,\n      nestedHeaderColumnSpans = _a.nestedHeaderColumnSpans,\n      hasSelectableRowCaption = _a.hasSelectableRowCaption,\n      selectableRowCaptionText = _a.selectableRowCaptionText,\n      props = __rest(_a, [\"children\", \"className\", \"variant\", \"borders\", \"isStickyHeader\", \"gridBreakPoint\", 'aria-label', \"role\", \"innerRef\", \"ouiaId\", \"ouiaSafe\", \"isTreeTable\", \"isNested\", \"isStriped\", \"isExpandable\", \"nestedHeaderColumnSpans\", \"hasSelectableRowCaption\", \"selectableRowCaptionText\"]);\n\n  var tableRef = innerRef || React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      hasSelectableRows = _React$useState2[0],\n      setHasSelectableRows = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      tableCaption = _React$useState4[0],\n      setTableCaption = _React$useState4[1];\n\n  React.useEffect(function () {\n    document.addEventListener('keydown', handleKeys); // sets up roving tab-index to tree tables only\n\n    if (tableRef && tableRef.current && tableRef.current.classList.contains('pf-m-tree-view')) {\n      var tbody = tableRef.current.querySelector('tbody');\n      tbody && setTabIndex(Array.from(tbody.querySelectorAll('button, a, input')));\n    }\n\n    return function cleanup() {\n      document.removeEventListener('keydown', handleKeys);\n    };\n  }, [tableRef, tableRef.current]);\n  React.useEffect(function () {\n    if (selectableRowCaptionText) {\n      setTableCaption(React.createElement(\"caption\", null, selectableRowCaptionText, React.createElement(\"div\", {\n        className: \"pf-screen-reader\"\n      }, \"This table has selectable rows. It can be navigated by row using tab, and each row can be selected using space or enter.\")));\n    } else {\n      setTableCaption(React.createElement(\"caption\", {\n        className: \"pf-screen-reader\"\n      }, \"This table has selectable rows. It can be navigated by row using tab, and each row can be selected using space or enter.\"));\n    }\n  }, [selectableRowCaptionText]);\n  var ouiaProps = useOUIAProps('Table', ouiaId, ouiaSafe);\n  var grid = (_b = stylesGrid.modifiers) === null || _b === void 0 ? void 0 : _b[toCamel(gridBreakPoint || '').replace(/-?2xl/, '_2xl')];\n  var breakPointPrefix = \"treeView\".concat(gridBreakPoint.charAt(0).toUpperCase() + gridBreakPoint.slice(1));\n  var treeGrid = (_c = stylesTreeView.modifiers) === null || _c === void 0 ? void 0 : _c[toCamel(breakPointPrefix || '').replace(/-?2xl/, '_2xl')];\n\n  var handleKeys = function handleKeys(event) {\n    if (isNested || !(tableRef && tableRef.current && tableRef.current.classList.contains('pf-m-tree-view')) || // implements roving tab-index to tree tables only\n    tableRef && tableRef.current !== event.target.closest('.pf-c-table:not(.pf-m-nested)')) {\n      return;\n    }\n\n    var activeElement = document.activeElement;\n    var key = event.key;\n    var rows = Array.from(tableRef.current.querySelectorAll('tbody tr')).filter(function (el) {\n      return !el.classList.contains('pf-m-disabled') && !el.hidden;\n    });\n\n    if (key === 'Space' || key === 'Enter') {\n      activeElement.click();\n      event.preventDefault();\n    }\n\n    var getFocusableElement = function getFocusableElement(element) {\n      return element.querySelectorAll('button:not(:disabled), input:not(:disabled), a:not(:disabled)')[0];\n    };\n\n    handleArrows(event, rows, function (element) {\n      return element === activeElement.closest('tr');\n    }, getFocusableElement, ['button', 'input', 'a'], undefined, false, true, false);\n  };\n\n  var registerSelectableRow = function registerSelectableRow() {\n    !hasSelectableRows && setHasSelectableRows(true);\n  };\n\n  return React.createElement(TableComposableContext.Provider, {\n    value: {\n      registerSelectableRow: registerSelectableRow\n    }\n  }, React.createElement(\"table\", Object.assign({\n    \"aria-label\": ariaLabel,\n    role: role,\n    className: css(className, styles.table, isTreeTable ? treeGrid : grid, styles.modifiers[variant], !borders && styles.modifiers.noBorderRows, isStickyHeader && styles.modifiers.stickyHeader, isTreeTable && stylesTreeView.modifiers.treeView, isStriped && styles.modifiers.striped, isExpandable && styles.modifiers.expandable, isNested && 'pf-m-nested'),\n    ref: tableRef\n  }, isTreeTable && {\n    role: 'treegrid'\n  }, ouiaProps, props), hasSelectableRowCaption && hasSelectableRows && tableCaption, children));\n};\n\nexport var TableComposable = React.forwardRef(function (props, ref) {\n  return React.createElement(TableComposableBase, Object.assign({}, props, {\n    innerRef: ref\n  }));\n});\nTableComposable.displayName = 'TableComposable';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/TableComposable/TableComposable.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesGrid from '@patternfly/react-styles/css/components/Table/table-grid';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { css } from '@patternfly/react-styles';\nimport { toCamel } from '../Table/utils/utils';\nimport { IVisibility } from '../Table/utils/decorators/classNames';\nimport { useOUIAProps, OUIAProps, handleArrows, setTabIndex } from '@patternfly/react-core';\nimport { TableGridBreakpoint, TableVariant } from '../Table/TableTypes';\n\nexport interface BaseCellProps {\n  /** Content rendered inside the cell */\n  children?: React.ReactNode;\n  /** Additional classes added to the cell  */\n  className?: string;\n  /** Element to render */\n  component?: React.ReactNode;\n  /** Modifies cell to center its contents. */\n  textCenter?: boolean;\n  /** Style modifier to apply */\n  modifier?: 'breakWord' | 'fitContent' | 'nowrap' | 'truncate' | 'wrap';\n  /** Width percentage modifier */\n  width?: 10 | 15 | 20 | 25 | 30 | 35 | 40 | 45 | 50 | 60 | 70 | 80 | 90 | 100;\n  /** Visibility breakpoint modifiers */\n  visibility?: (keyof IVisibility)[];\n  /** Forwarded ref */\n  innerRef?: React.Ref<any>;\n}\n\nexport interface TableComposableProps extends React.HTMLProps<HTMLTableElement>, OUIAProps {\n  /** Adds an accessible name for the Table */\n  'aria-label'?: string;\n  /** Content rendered inside the Table */\n  children?: React.ReactNode;\n  /** Additional classes added to the Table  */\n  className?: string;\n  /**\n   * Style variant for the Table\n   * compact: Reduces spacing and makes the table more compact\n   */\n  variant?: TableVariant | 'compact';\n  /** Render borders */\n  borders?: boolean;\n  /** Specifies the grid breakpoints  */\n  gridBreakPoint?: '' | 'grid' | 'grid-md' | 'grid-lg' | 'grid-xl' | 'grid-2xl';\n  /** A valid WAI-ARIA role to be applied to the table element */\n  role?: string;\n  /** If set to true, the table header sticks to the top of its container */\n  isStickyHeader?: boolean;\n  /** Forwarded ref */\n  innerRef?: React.RefObject<any>;\n  /** Flag indicating table is a tree table */\n  isTreeTable?: boolean;\n  /** Flag indicating this table is nested within another table */\n  isNested?: boolean;\n  /** Flag indicating this table should be striped. This property works best for a single <tbody> table. Striping may also be done manually by applying this property to Tbody and Tr components. */\n  isStriped?: boolean;\n  /** Flag indicating this table contains expandable rows to maintain proper striping */\n  isExpandable?: boolean;\n  /** Collection of column spans for nested headers. Deprecated: see https://github.com/patternfly/patternfly/issues/4584 */\n  nestedHeaderColumnSpans?: number[];\n  /** Flag to apply a caption element with visually hidden instructions that improves a11y for tables with selectable rows. If this prop is set to true other caption elements should not be passed as children of this table, and you should instead use the selectableRowCaptionText prop. */\n  hasSelectableRowCaption?: boolean;\n  /** Visible text to add alongside the hidden a11y caption for tables with selectable rows. This prop must be used to add custom caption content to the table when the hasSelectableRowCaption prop is set to true. */\n  selectableRowCaptionText?: string;\n}\n\ninterface TableComposableContextProps {\n  registerSelectableRow?: () => void;\n}\n\nexport const TableComposableContext = React.createContext<TableComposableContextProps>({\n  registerSelectableRow: () => {}\n});\n\nconst TableComposableBase: React.FunctionComponent<TableComposableProps> = ({\n  children,\n  className,\n  variant,\n  borders = true,\n  isStickyHeader = false,\n  gridBreakPoint = TableGridBreakpoint.gridMd,\n  'aria-label': ariaLabel,\n  role = 'grid',\n  innerRef,\n  ouiaId,\n  ouiaSafe = true,\n  isTreeTable = false,\n  isNested = false,\n  isStriped = false,\n  isExpandable = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  nestedHeaderColumnSpans,\n  hasSelectableRowCaption,\n  selectableRowCaptionText,\n  ...props\n}: TableComposableProps) => {\n  const tableRef = innerRef || React.useRef(null);\n\n  const [hasSelectableRows, setHasSelectableRows] = React.useState(false);\n  const [tableCaption, setTableCaption] = React.useState<JSX.Element | undefined>();\n\n  React.useEffect(() => {\n    document.addEventListener('keydown', handleKeys);\n\n    // sets up roving tab-index to tree tables only\n    if (tableRef && tableRef.current && tableRef.current.classList.contains('pf-m-tree-view')) {\n      const tbody = tableRef.current.querySelector('tbody');\n      tbody && setTabIndex(Array.from(tbody.querySelectorAll('button, a, input')));\n    }\n\n    return function cleanup() {\n      document.removeEventListener('keydown', handleKeys);\n    };\n  }, [tableRef, tableRef.current]);\n\n  React.useEffect(() => {\n    if (selectableRowCaptionText) {\n      setTableCaption(\n        <caption>\n          {selectableRowCaptionText}\n          <div className=\"pf-screen-reader\">\n            This table has selectable rows. It can be navigated by row using tab, and each row can be selected using\n            space or enter.\n          </div>\n        </caption>\n      );\n    } else {\n      setTableCaption(\n        <caption className=\"pf-screen-reader\">\n          This table has selectable rows. It can be navigated by row using tab, and each row can be selected using space\n          or enter.\n        </caption>\n      );\n    }\n  }, [selectableRowCaptionText]);\n\n  const ouiaProps = useOUIAProps('Table', ouiaId, ouiaSafe);\n  const grid =\n    stylesGrid.modifiers?.[\n      toCamel(gridBreakPoint || '').replace(/-?2xl/, '_2xl') as 'grid' | 'gridMd' | 'gridLg' | 'gridXl' | 'grid_2xl'\n    ];\n  const breakPointPrefix = `treeView${gridBreakPoint.charAt(0).toUpperCase() + gridBreakPoint.slice(1)}`;\n  const treeGrid =\n    stylesTreeView.modifiers?.[\n      toCamel(breakPointPrefix || '').replace(/-?2xl/, '_2xl') as\n        | 'treeViewGrid'\n        | 'treeViewGridMd'\n        | 'treeViewGridLg'\n        | 'treeViewGridXl'\n        | 'treeViewGrid_2xl'\n    ];\n\n  const handleKeys = (event: KeyboardEvent) => {\n    if (\n      isNested ||\n      !(tableRef && tableRef.current && tableRef.current.classList.contains('pf-m-tree-view')) || // implements roving tab-index to tree tables only\n      (tableRef && tableRef.current !== (event.target as HTMLElement).closest('.pf-c-table:not(.pf-m-nested)'))\n    ) {\n      return;\n    }\n    const activeElement = document.activeElement;\n    const key = event.key;\n    const rows = (Array.from(tableRef.current.querySelectorAll('tbody tr')) as Element[]).filter(\n      el => !el.classList.contains('pf-m-disabled') && !(el as HTMLElement).hidden\n    );\n    if (key === 'Space' || key === 'Enter') {\n      (activeElement as HTMLElement).click();\n      event.preventDefault();\n    }\n\n    const getFocusableElement = (element: Element) =>\n      element.querySelectorAll('button:not(:disabled), input:not(:disabled), a:not(:disabled)')[0];\n\n    handleArrows(\n      event,\n      rows,\n      (element: Element) => element === activeElement.closest('tr'),\n      getFocusableElement,\n      ['button', 'input', 'a'],\n      undefined,\n      false,\n      true,\n      false\n    );\n  };\n\n  const registerSelectableRow = () => {\n    !hasSelectableRows && setHasSelectableRows(true);\n  };\n\n  return (\n    <TableComposableContext.Provider value={{ registerSelectableRow }}>\n      <table\n        aria-label={ariaLabel}\n        role={role}\n        className={css(\n          className,\n          styles.table,\n          isTreeTable ? treeGrid : grid,\n          styles.modifiers[variant],\n          !borders && styles.modifiers.noBorderRows,\n          isStickyHeader && styles.modifiers.stickyHeader,\n          isTreeTable && stylesTreeView.modifiers.treeView,\n          isStriped && styles.modifiers.striped,\n          isExpandable && styles.modifiers.expandable,\n          isNested && 'pf-m-nested'\n        )}\n        ref={tableRef}\n        {...(isTreeTable && { role: 'treegrid' })}\n        {...ouiaProps}\n        {...props}\n      >\n        {hasSelectableRowCaption && hasSelectableRows && tableCaption}\n        {children}\n      </table>\n    </TableComposableContext.Provider>\n  );\n};\n\nexport const TableComposable = React.forwardRef((props: TableComposableProps, ref: React.Ref<HTMLTableElement>) => (\n  <TableComposableBase {...props} innerRef={ref as React.MutableRefObject<any>} />\n));\nTableComposable.displayName = 'TableComposable';\n"]},"metadata":{},"sourceType":"module"}