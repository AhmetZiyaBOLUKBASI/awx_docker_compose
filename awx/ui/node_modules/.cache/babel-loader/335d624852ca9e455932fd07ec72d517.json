{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Select } from '@patternfly/react-core';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nexport var EditableSelectInputCell = function EditableSelectInputCell(_ref) {\n  var value = _ref.value,\n      rowIndex = _ref.rowIndex,\n      cellIndex = _ref.cellIndex,\n      _ref$onSelect = _ref.onSelect,\n      onSelect = _ref$onSelect === void 0 ? function () {} : _ref$onSelect,\n      clearSelection = _ref.clearSelection,\n      _ref$isOpen = _ref.isOpen,\n      isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,\n      _ref$onToggle = _ref.onToggle,\n      onToggle = _ref$onToggle === void 0 ? function () {} : _ref$onToggle,\n      _ref$selections = _ref.selections,\n      selections = _ref$selections === void 0 ? [''] : _ref$selections,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? [] : _ref$options,\n      props = _ref.props;\n\n  var onSelectHandler = function onSelectHandler(event, newValue, isPlaceholder) {\n    onSelect(newValue, event, rowIndex, cellIndex, isPlaceholder);\n  };\n\n  var onClear = function onClear(event) {\n    clearSelection(rowIndex, cellIndex, event);\n  };\n\n  var select = React.createElement(Select, Object.assign({}, props.editableSelectProps, {\n    onSelect: onSelectHandler\n  }, clearSelection && {\n    onClear: onClear\n  }, {\n    isOpen: isOpen,\n    onToggle: onToggle,\n    selections: selections\n  }), options);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: inlineStyles.inlineEditValue\n  }, Array.isArray(value) ? value.join(', ') : value), React.createElement(\"div\", {\n    className: inlineStyles.inlineEditInput\n  }, select, React.createElement(\"div\", {\n    className: css(formStyles.formHelperText, formStyles.modifiers.error),\n    \"aria-live\": \"polite\"\n  }, props.errorText)));\n};\nEditableSelectInputCell.displayName = 'EditableSelectInputCell';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/EditableSelectInputCell.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,MAAT,QAA2C,wBAA3C;AACA,OAAO,YAAP,MAAyB,gEAAzB;AACA,OAAO,UAAP,MAAuB,mDAAvB;AAgCA,OAAO,IAAM,uBAAuB,GAAsD,SAA7E,uBAA6E,OAW3D;AAAA,MAV7B,KAU6B,QAV7B,KAU6B;AAAA,MAT7B,QAS6B,QAT7B,QAS6B;AAAA,MAR7B,SAQ6B,QAR7B,SAQ6B;AAAA,2BAP7B,QAO6B;AAAA,MAP7B,QAO6B,8BAPlB,YAAK,CAAG,CAOU;AAAA,MAN7B,cAM6B,QAN7B,cAM6B;AAAA,yBAL7B,MAK6B;AAAA,MAL7B,MAK6B,4BALpB,KAKoB;AAAA,2BAJ7B,QAI6B;AAAA,MAJ7B,QAI6B,8BAJlB,YAAK,CAAG,CAIU;AAAA,6BAH7B,UAG6B;AAAA,MAH7B,UAG6B,gCAHhB,CAAC,EAAD,CAGgB;AAAA,0BAF7B,OAE6B;AAAA,MAF7B,OAE6B,6BAFnB,EAEmB;AAAA,MAD7B,KAC6B,QAD7B,KAC6B;;AAC7B,MAAM,eAAe,GAAG,SAAlB,eAAkB,CACtB,KADsB,EAEtB,QAFsB,EAGtB,aAHsB,EAIpB;AACF,IAAA,QAAQ,CAAC,QAAD,EAAW,KAAX,EAAkB,QAAlB,EAA4B,SAA5B,EAAuC,aAAvC,CAAR;AACD,GAND;;AAQA,MAAM,OAAO,GAAG,SAAV,OAAU,CAAC,KAAD,EAA4B;AAC1C,IAAA,cAAc,CAAC,QAAD,EAAW,SAAX,EAAsB,KAAtB,CAAd;AACD,GAFD;;AAIA,MAAM,MAAM,GACV,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,KAAK,CAAC,mBADL,EACwB;AAC7B,IAAA,QAAQ,EAAE;AADmB,GADxB,EAGA,cAAc,IAAI;AAAE,IAAA,OAAO,EAAP;AAAF,GAHlB,EAG8B;AACnC,IAAA,MAAM,EAAE,MAD2B;AAEnC,IAAA,QAAQ,EAAE,QAFyB;AAGnC,IAAA,UAAU,EAAE;AAHuB,GAH9B,CAAP,EAQG,OARH,CADF;AAaA,SACE,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAP,EAAe,IAAf,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,YAAY,CAAC;AAA7B,GAAA,EAA+C,KAAK,CAAC,OAAN,CAAc,KAAd,IAAuB,KAAK,CAAC,IAAN,CAAW,IAAX,CAAvB,GAA0C,KAAzF,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,YAAY,CAAC;AAA7B,GAAA,EACG,MADH,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,UAAU,CAAC,cAAZ,EAA4B,UAAU,CAAC,SAAX,CAAqB,KAAjD,CAAnB;AAA0E,iBAAY;AAAtF,GAAA,EACG,KAAK,CAAC,SADT,CAFF,CAFF,CADF;AAWD,CAhDM;AAiDP,uBAAuB,CAAC,WAAxB,GAAsC,yBAAtC","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Select, SelectOptionObject } from '@patternfly/react-core';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { EditableSelectInputProps } from './base';\n\nexport interface IEditableSelectInputCell extends Omit<React.HTMLProps<HTMLElement | HTMLDivElement>, 'onSelect'> {\n  /** Row index of this select input cell */\n  rowIndex: number;\n  /** Cell index of this select input cell */\n  cellIndex: number;\n  /** Props to build the select component */\n  props: EditableSelectInputProps;\n  /** Event handler which fires when user selects an option in this cell */\n  onSelect: (\n    newValue: string | SelectOptionObject,\n    event: React.MouseEvent | React.ChangeEvent,\n    rowIndex: number,\n    cellIndex: number,\n    isPlaceholder?: boolean\n  ) => void;\n  /** Options to display in the expandable select menu */\n  options?: React.ReactElement[];\n  /** Flag indicating the select input is disabled */\n  isDisabled?: boolean;\n  /** Current selected options to display as the read only value of the table cell */\n  selections?: string | SelectOptionObject | (string | SelectOptionObject)[];\n  /** Flag indicating the select menu is open */\n  isOpen?: boolean;\n  /** Event handler which fires when the select toggle is toggled */\n  onToggle?: (isExpanded: boolean) => void;\n  /** Event handler which fires when the user clears the selections */\n  clearSelection?: (rowIndex: number, cellIndex: number, event?: React.MouseEvent) => void;\n}\n\nexport const EditableSelectInputCell: React.FunctionComponent<IEditableSelectInputCell> = ({\n  value,\n  rowIndex,\n  cellIndex,\n  onSelect = () => {},\n  clearSelection,\n  isOpen = false,\n  onToggle = () => {},\n  selections = [''],\n  options = [] as React.ReactElement[],\n  props\n}: IEditableSelectInputCell) => {\n  const onSelectHandler = (\n    event: React.MouseEvent | React.ChangeEvent,\n    newValue: string | SelectOptionObject,\n    isPlaceholder: boolean\n  ) => {\n    onSelect(newValue, event, rowIndex, cellIndex, isPlaceholder);\n  };\n\n  const onClear = (event: React.MouseEvent) => {\n    clearSelection(rowIndex, cellIndex, event);\n  };\n\n  const select = (\n    <Select\n      {...props.editableSelectProps}\n      onSelect={onSelectHandler}\n      {...(clearSelection && { onClear })}\n      isOpen={isOpen}\n      onToggle={onToggle}\n      selections={selections}\n    >\n      {options}\n    </Select>\n  );\n\n  return (\n    <React.Fragment>\n      <div className={inlineStyles.inlineEditValue}>{Array.isArray(value) ? value.join(', ') : value}</div>\n      <div className={inlineStyles.inlineEditInput}>\n        {select}\n        <div className={css(formStyles.formHelperText, formStyles.modifiers.error)} aria-live=\"polite\">\n          {props.errorText}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\nEditableSelectInputCell.displayName = 'EditableSelectInputCell';\n"]},"metadata":{},"sourceType":"module"}