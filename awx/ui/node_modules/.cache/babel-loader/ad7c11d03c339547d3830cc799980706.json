{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/LabelGroup/label-group';\nimport labelStyles from '@patternfly/react-styles/css/components/Label/label';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Label } from '../Label';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport var LabelGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(LabelGroup, _React$Component);\n\n  var _super = _createSuper(LabelGroup);\n\n  function LabelGroup(props) {\n    var _this;\n\n    _classCallCheck(this, LabelGroup);\n\n    _this = _super.call(this, props);\n    _this.headingRef = React.createRef();\n\n    _this.toggleCollapse = function () {\n      _this.setState(function (prevState) {\n        return {\n          isOpen: !prevState.isOpen,\n          isTooltipVisible: Boolean(_this.headingRef.current && _this.headingRef.current.offsetWidth < _this.headingRef.current.scrollWidth)\n        };\n      });\n    };\n\n    _this.state = {\n      isOpen: _this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(LabelGroup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n      });\n    }\n  }, {\n    key: \"renderLabel\",\n    value: function renderLabel(id) {\n      var _this$props = this.props,\n          categoryName = _this$props.categoryName,\n          tooltipPosition = _this$props.tooltipPosition;\n      var isTooltipVisible = this.state.isTooltipVisible;\n      return isTooltipVisible ? React.createElement(Tooltip, {\n        position: tooltipPosition,\n        content: categoryName\n      }, React.createElement(\"span\", {\n        tabIndex: 0,\n        ref: this.headingRef,\n        className: css(styles.labelGroupLabel)\n      }, React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        id: id\n      }, categoryName))) : React.createElement(\"span\", {\n        ref: this.headingRef,\n        className: css(styles.labelGroupLabel),\n        \"aria-hidden\": \"true\",\n        id: id\n      }, categoryName);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          categoryName = _a.categoryName,\n          children = _a.children,\n          className = _a.className,\n          isClosable = _a.isClosable,\n          isCompact = _a.isCompact,\n          closeBtnAriaLabel = _a.closeBtnAriaLabel,\n          ariaLabel = _a['aria-label'],\n          onClick = _a.onClick,\n          numLabels = _a.numLabels,\n          expandedText = _a.expandedText,\n          collapsedText = _a.collapsedText,\n          defaultIsOpen = _a.defaultIsOpen,\n          tooltipPosition = _a.tooltipPosition,\n          isVertical = _a.isVertical,\n          isEditable = _a.isEditable,\n          hasEditableTextArea = _a.hasEditableTextArea,\n          editableTextAreaProps = _a.editableTextAreaProps,\n          addLabelControl = _a.addLabelControl,\n          rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"isCompact\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"numLabels\", \"expandedText\", \"collapsedText\", \"defaultIsOpen\", \"tooltipPosition\", \"isVertical\", \"isEditable\", \"hasEditableTextArea\", \"editableTextAreaProps\", \"addLabelControl\"]);\n\n      var isOpen = this.state.isOpen;\n      var numChildren = React.Children.count(children);\n      var collapsedTextResult = fillTemplate(collapsedText, {\n        remaining: React.Children.count(children) - numLabels\n      });\n\n      var renderLabelGroup = function renderLabelGroup(id) {\n        var labelArray = !isOpen ? React.Children.toArray(children).slice(0, numLabels) : React.Children.toArray(children);\n        var content = React.createElement(React.Fragment, null, categoryName && _this2.renderLabel(id), React.createElement(\"ul\", Object.assign({\n          className: css(styles.labelGroupList)\n        }, categoryName && {\n          'aria-labelledby': id\n        }, !categoryName && {\n          'aria-label': ariaLabel\n        }, {\n          role: \"list\"\n        }, rest), labelArray.map(function (child, i) {\n          return React.createElement(\"li\", {\n            className: css(styles.labelGroupListItem),\n            key: i\n          }, child);\n        }), numChildren > numLabels && React.createElement(\"li\", {\n          className: css(styles.labelGroupListItem)\n        }, React.createElement(Label, {\n          isOverflowLabel: true,\n          onClick: _this2.toggleCollapse,\n          className: css(isCompact && labelStyles.modifiers.compact)\n        }, isOpen ? expandedText : collapsedTextResult)), addLabelControl && React.createElement(\"li\", {\n          className: css(styles.labelGroupListItem)\n        }, addLabelControl), isEditable && hasEditableTextArea && React.createElement(\"li\", {\n          className: css(styles.labelGroupListItem, styles.modifiers.textarea)\n        }, React.createElement(\"textarea\", Object.assign({\n          className: css(styles.labelGroupTextarea),\n          rows: 1,\n          tabIndex: 0\n        }, editableTextAreaProps)))));\n        var close = React.createElement(\"div\", {\n          className: css(styles.labelGroupClose)\n        }, React.createElement(Button, {\n          variant: \"plain\",\n          \"aria-label\": closeBtnAriaLabel,\n          onClick: onClick,\n          id: \"remove_group_\".concat(id),\n          \"aria-labelledby\": \"remove_group_\".concat(id, \" \").concat(id)\n        }, React.createElement(TimesCircleIcon, {\n          \"aria-hidden\": \"true\"\n        })));\n        return React.createElement(\"div\", {\n          className: css(styles.labelGroup, className, categoryName && styles.modifiers.category, isVertical && styles.modifiers.vertical, isEditable && styles.modifiers.editable)\n        }, React.createElement(\"div\", {\n          className: css(styles.labelGroupMain)\n        }, content), isClosable && close);\n      };\n\n      return numChildren === 0 && addLabelControl === undefined ? null : React.createElement(GenerateId, null, function (randomId) {\n        return renderLabelGroup(_this2.props.id || randomId);\n      });\n    }\n  }]);\n\n  return LabelGroup;\n}(React.Component);\nLabelGroup.displayName = 'LabelGroup';\nLabelGroup.defaultProps = {\n  expandedText: 'Show Less',\n  collapsedText: '${remaining} more',\n  categoryName: '',\n  defaultIsOpen: false,\n  numLabels: 3,\n  isClosable: false,\n  isCompact: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: function onClick(_e) {\n    return undefined;\n  },\n  closeBtnAriaLabel: 'Close label group',\n  tooltipPosition: 'top',\n  'aria-label': 'Label group category',\n  isVertical: false,\n  isEditable: false,\n  hasEditableTextArea: false\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/LabelGroup/LabelGroup.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/LabelGroup/label-group';\nimport labelStyles from '@patternfly/react-styles/css/components/Label/label';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Label } from '../Label';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport interface LabelGroupProps extends React.HTMLProps<HTMLUListElement> {\n  /** Content rendered inside the label group. Should be <Label> elements. */\n  children?: React.ReactNode;\n  /** Additional classes added to the label item */\n  className?: string;\n  /** Flag for having the label group default to expanded */\n  defaultIsOpen?: boolean;\n  /** Customizable \"Show Less\" text string */\n  expandedText?: string;\n  /** Customizeable template string. Use variable \"${remaining}\" for the overflow label count. */\n  collapsedText?: string;\n  /** Category name text for the label group category.  If this prop is supplied the label group with have a label and category styling applied */\n  categoryName?: string;\n  /** Aria label for label group that does not have a category name */\n  'aria-label'?: string;\n  /** Set number of labels to show before overflow */\n  numLabels?: number;\n  /** Flag if label group can be closed */\n  isClosable?: boolean;\n  /** Flag indicating the labels in the group are compact */\n  isCompact?: boolean;\n  /** Aria label for close button */\n  closeBtnAriaLabel?: string;\n  /** Function that is called when clicking on the label group close button */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Position of the tooltip which is displayed if the category name text is longer */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** Flag to implement a vertical layout */\n  isVertical?: boolean;\n  /** @beta Flag indicating contained labels are editable. Allows spacing for a text input after the labels. */\n  isEditable?: boolean;\n  /** @beta Flag indicating the editable label group should be appended with a textarea. */\n  hasEditableTextArea?: boolean;\n  /** @beta Additional props passed to the editable textarea. */\n  editableTextAreaProps?: any;\n  /** @beta Control for adding new labels */\n  addLabelControl?: React.ReactNode;\n}\n\ninterface LabelGroupState {\n  isOpen: boolean;\n  isTooltipVisible: boolean;\n}\n\nexport class LabelGroup extends React.Component<LabelGroupProps, LabelGroupState> {\n  static displayName = 'LabelGroup';\n  constructor(props: LabelGroupProps) {\n    super(props);\n    this.state = {\n      isOpen: this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n  }\n  private headingRef = React.createRef<HTMLSpanElement>();\n\n  static defaultProps: LabelGroupProps = {\n    expandedText: 'Show Less',\n    collapsedText: '${remaining} more',\n    categoryName: '',\n    defaultIsOpen: false,\n    numLabels: 3,\n    isClosable: false,\n    isCompact: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e: React.MouseEvent) => undefined as any,\n    closeBtnAriaLabel: 'Close label group',\n    tooltipPosition: 'top',\n    'aria-label': 'Label group category',\n    isVertical: false,\n    isEditable: false,\n    hasEditableTextArea: false\n  };\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(\n        this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth\n      )\n    });\n  }\n\n  toggleCollapse = () => {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen,\n      isTooltipVisible: Boolean(\n        this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth\n      )\n    }));\n  };\n\n  renderLabel(id: string) {\n    const { categoryName, tooltipPosition } = this.props;\n    const { isTooltipVisible } = this.state;\n    return isTooltipVisible ? (\n      <Tooltip position={tooltipPosition} content={categoryName}>\n        <span tabIndex={0} ref={this.headingRef} className={css(styles.labelGroupLabel)}>\n          <span aria-hidden=\"true\" id={id}>\n            {categoryName}\n          </span>\n        </span>\n      </Tooltip>\n    ) : (\n      <span ref={this.headingRef} className={css(styles.labelGroupLabel)} aria-hidden=\"true\" id={id}>\n        {categoryName}\n      </span>\n    );\n  }\n\n  render() {\n    const {\n      categoryName,\n      children,\n      className,\n      isClosable,\n      isCompact,\n      closeBtnAriaLabel,\n      'aria-label': ariaLabel,\n      onClick,\n      numLabels,\n      expandedText,\n      collapsedText,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      defaultIsOpen,\n      tooltipPosition,\n      isVertical,\n      isEditable,\n      hasEditableTextArea,\n      editableTextAreaProps,\n      addLabelControl,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n    const { isOpen } = this.state;\n    const numChildren = React.Children.count(children);\n    const collapsedTextResult = fillTemplate(collapsedText as string, {\n      remaining: React.Children.count(children) - numLabels\n    });\n\n    const renderLabelGroup = (id: string) => {\n      const labelArray = !isOpen\n        ? React.Children.toArray(children).slice(0, numLabels)\n        : React.Children.toArray(children);\n\n      const content = (\n        <React.Fragment>\n          {categoryName && this.renderLabel(id)}\n          <ul\n            className={css(styles.labelGroupList)}\n            {...(categoryName && { 'aria-labelledby': id })}\n            {...(!categoryName && { 'aria-label': ariaLabel })}\n            role=\"list\"\n            {...rest}\n          >\n            {labelArray.map((child, i) => (\n              <li className={css(styles.labelGroupListItem)} key={i}>\n                {child}\n              </li>\n            ))}\n            {numChildren > numLabels && (\n              <li className={css(styles.labelGroupListItem)}>\n                <Label\n                  isOverflowLabel\n                  onClick={this.toggleCollapse}\n                  className={css(isCompact && labelStyles.modifiers.compact)}\n                >\n                  {isOpen ? expandedText : collapsedTextResult}\n                </Label>\n              </li>\n            )}\n            {addLabelControl && <li className={css(styles.labelGroupListItem)}>{addLabelControl}</li>}\n            {isEditable && hasEditableTextArea && (\n              <li className={css(styles.labelGroupListItem, styles.modifiers.textarea)}>\n                <textarea className={css(styles.labelGroupTextarea)} rows={1} tabIndex={0} {...editableTextAreaProps} />\n              </li>\n            )}\n          </ul>\n        </React.Fragment>\n      );\n\n      const close = (\n        <div className={css(styles.labelGroupClose)}>\n          <Button\n            variant=\"plain\"\n            aria-label={closeBtnAriaLabel}\n            onClick={onClick}\n            id={`remove_group_${id}`}\n            aria-labelledby={`remove_group_${id} ${id}`}\n          >\n            <TimesCircleIcon aria-hidden=\"true\" />\n          </Button>\n        </div>\n      );\n\n      return (\n        <div\n          className={css(\n            styles.labelGroup,\n            className,\n            categoryName && styles.modifiers.category,\n            isVertical && styles.modifiers.vertical,\n            isEditable && styles.modifiers.editable\n          )}\n        >\n          {<div className={css(styles.labelGroupMain)}>{content}</div>}\n          {isClosable && close}\n        </div>\n      );\n    };\n\n    return numChildren === 0 && addLabelControl === undefined ? null : (\n      <GenerateId>{randomId => renderLabelGroup(this.props.id || randomId)}</GenerateId>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}