{"ast":null,"code":"import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{i18n}from\"@lingui/core\";import React,{useCallback}from'react';import{Button,Tooltip}from'@patternfly/react-core';import{SyncIcon}from'@patternfly/react-icons';import useRequest,{useDismissableError}from'hooks/useRequest';import AlertModal from'components/AlertModal/AlertModal';import ErrorDetail from'components/ErrorDetail/ErrorDetail';import{InventorySourcesAPI}from'api';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function InventorySourceSyncButton(_ref){var source=_ref.source,icon=_ref.icon;var _useRequest=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$InventorySourc,status;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return InventorySourcesAPI.createSyncStart(source.id);case 2:_yield$InventorySourc=_context.sent;status=_yield$InventorySourc.data.status;return _context.abrupt(\"return\",status);case 5:case\"end\":return _context.stop();}}},_callee);})),[source.id]),{}),startSyncLoading=_useRequest.isLoading,startSyncError=_useRequest.error,startSyncProcess=_useRequest.request;var _useDismissableError=useDismissableError(startSyncError),startError=_useDismissableError.error,dismissStartError=_useDismissableError.dismissError;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Tooltip,{content:/*i18n*/i18n._(\"Start sync process\"),position:\"top\",children:/*#__PURE__*/_jsx(Button,{ouiaId:\"\".concat(source,\"-sync-button\"),isDisabled:startSyncLoading,\"aria-label\":/*i18n*/i18n._(\"Start sync source\"),variant:icon?'plain':'secondary',onClick:startSyncProcess,children:icon?/*#__PURE__*/_jsx(SyncIcon,{}):/*i18n*/i18n._(\"Sync\")})}),startError&&/*#__PURE__*/_jsxs(AlertModal,{isOpen:startError,variant:\"error\",title:/*i18n*/i18n._(\"Error!\"),onClose:dismissStartError,children:[/*i18n*/i18n._(\"Failed to sync inventory source.\"),/*#__PURE__*/_jsx(ErrorDetail,{error:startError})]})]});}InventorySourceSyncButton.defaultProps={source:{},icon:true};export default InventorySourceSyncButton;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Inventory/shared/InventorySourceSyncButton.js"],"names":["React","useCallback","Button","Tooltip","SyncIcon","useRequest","useDismissableError","AlertModal","ErrorDetail","InventorySourcesAPI","InventorySourceSyncButton","source","icon","createSyncStart","id","status","data","startSyncLoading","isLoading","startSyncError","error","startSyncProcess","request","startError","dismissStartError","dismissError","defaultProps"],"mappings":"gPAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,KAAmC,OAAnC,CAIA,OAASC,MAAT,CAAiBC,OAAjB,KAAgC,wBAAhC,CACA,OAASC,QAAT,KAAyB,yBAAzB,CACA,MAAOC,CAAAA,UAAP,EAAqBC,mBAArB,KAAgD,kBAAhD,CACA,MAAOC,CAAAA,UAAP,KAAuB,kCAAvB,CACA,MAAOC,CAAAA,WAAP,KAAwB,oCAAxB,CACA,OAASC,mBAAT,KAAoC,KAApC,C,6IAEA,QAASC,CAAAA,yBAAT,MAAqD,IAAhBC,CAAAA,MAAgB,MAAhBA,MAAgB,CAARC,IAAQ,MAARA,IAAQ,CACnD,gBAIIP,UAAU,CACZJ,WAAW,sEAAC,0LAGAQ,CAAAA,mBAAmB,CAACI,eAApB,CAAoCF,MAAM,CAACG,EAA3C,CAHA,4CAEAC,MAFA,uBAERC,IAFQ,CAEAD,MAFA,iCAKHA,MALG,wDAAD,GAMR,CAACJ,MAAM,CAACG,EAAR,CANQ,CADC,CAQZ,EARY,CAJd,CACaG,gBADb,aACEC,SADF,CAESC,cAFT,aAEEC,KAFF,CAGWC,gBAHX,aAGEC,OAHF,CAeA,yBACEhB,mBAAmB,CAACa,cAAD,CADrB,CAAeI,UAAf,sBAAQH,KAAR,CAAyCI,iBAAzC,sBAA2BC,YAA3B,CAGA,mBACE,wCACE,KAAC,OAAD,EAAS,OAAO,SAAE,4BAAlB,CAAyC,QAAQ,CAAC,KAAlD,uBACE,KAAC,MAAD,EACE,MAAM,WAAKd,MAAL,gBADR,CAEE,UAAU,CAAEM,gBAFd,CAGE,qBAAY,2BAHd,CAIE,OAAO,CAAEL,IAAI,CAAG,OAAH,CAAa,WAJ5B,CAKE,OAAO,CAAES,gBALX,UAOGT,IAAI,cAAG,KAAC,QAAD,IAAH,SAAkB,cAPzB,EADF,EADF,CAaGW,UAAU,eACT,MAAC,UAAD,EACE,MAAM,CAAEA,UADV,CAEE,OAAO,CAAC,OAFV,CAGE,KAAK,SAAE,gBAHT,CAIE,OAAO,CAAEC,iBAJX,mBAMG,0CANH,cAOE,KAAC,WAAD,EAAa,KAAK,CAAED,UAApB,EAPF,GAdJ,GADF,CA2BD,CAEDb,yBAAyB,CAACgB,YAA1B,CAAyC,CACvCf,MAAM,CAAE,EAD+B,CAEvCC,IAAI,CAAE,IAFiC,CAAzC,CAUA,cAAeF,CAAAA,yBAAf","sourcesContent":["import React, { useCallback } from 'react';\n\nimport { t } from '@lingui/macro';\nimport PropTypes from 'prop-types';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { SyncIcon } from '@patternfly/react-icons';\nimport useRequest, { useDismissableError } from 'hooks/useRequest';\nimport AlertModal from 'components/AlertModal/AlertModal';\nimport ErrorDetail from 'components/ErrorDetail/ErrorDetail';\nimport { InventorySourcesAPI } from 'api';\n\nfunction InventorySourceSyncButton({ source, icon }) {\n  const {\n    isLoading: startSyncLoading,\n    error: startSyncError,\n    request: startSyncProcess,\n  } = useRequest(\n    useCallback(async () => {\n      const {\n        data: { status },\n      } = await InventorySourcesAPI.createSyncStart(source.id);\n\n      return status;\n    }, [source.id]),\n    {}\n  );\n\n  const { error: startError, dismissError: dismissStartError } =\n    useDismissableError(startSyncError);\n\n  return (\n    <>\n      <Tooltip content={t`Start sync process`} position=\"top\">\n        <Button\n          ouiaId={`${source}-sync-button`}\n          isDisabled={startSyncLoading}\n          aria-label={t`Start sync source`}\n          variant={icon ? 'plain' : 'secondary'}\n          onClick={startSyncProcess}\n        >\n          {icon ? <SyncIcon /> : t`Sync`}\n        </Button>\n      </Tooltip>\n\n      {startError && (\n        <AlertModal\n          isOpen={startError}\n          variant=\"error\"\n          title={t`Error!`}\n          onClose={dismissStartError}\n        >\n          {t`Failed to sync inventory source.`}\n          <ErrorDetail error={startError} />\n        </AlertModal>\n      )}\n    </>\n  );\n}\n\nInventorySourceSyncButton.defaultProps = {\n  source: {},\n  icon: true,\n};\n\nInventorySourceSyncButton.propTypes = {\n  source: PropTypes.shape({}),\n  icon: PropTypes.bool,\n};\n\nexport default InventorySourceSyncButton;\n"]},"metadata":{},"sourceType":"module"}