{"ast":null,"code":"import _classCallCheck from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";var NotificationsMixin=function NotificationsMixin(parent){return/*#__PURE__*/function(_parent){_inherits(_class,_parent);var _super=_createSuper(_class);function _class(){_classCallCheck(this,_class);return _super.apply(this,arguments);}_createClass(_class,[{key:\"readOptionsNotificationTemplates\",value:function readOptionsNotificationTemplates(id){return this.http.options(\"\".concat(this.baseUrl).concat(id,\"/notification_templates/\"));}},{key:\"readNotificationTemplates\",value:function readNotificationTemplates(id,params){return this.http.get(\"\".concat(this.baseUrl).concat(id,\"/notification_templates/\"),params);}},{key:\"readNotificationTemplatesStarted\",value:function readNotificationTemplatesStarted(id,params){return this.http.get(\"\".concat(this.baseUrl).concat(id,\"/notification_templates_started/\"),{params:params});}},{key:\"readNotificationTemplatesSuccess\",value:function readNotificationTemplatesSuccess(id,params){return this.http.get(\"\".concat(this.baseUrl).concat(id,\"/notification_templates_success/\"),{params:params});}},{key:\"readNotificationTemplatesError\",value:function readNotificationTemplatesError(id,params){return this.http.get(\"\".concat(this.baseUrl).concat(id,\"/notification_templates_error/\"),{params:params});}},{key:\"associateNotificationTemplatesStarted\",value:function associateNotificationTemplatesStarted(resourceId,notificationId){return this.http.post(\"\".concat(this.baseUrl).concat(resourceId,\"/notification_templates_started/\"),{id:notificationId});}},{key:\"disassociateNotificationTemplatesStarted\",value:function disassociateNotificationTemplatesStarted(resourceId,notificationId){return this.http.post(\"\".concat(this.baseUrl).concat(resourceId,\"/notification_templates_started/\"),{id:notificationId,disassociate:true});}},{key:\"associateNotificationTemplatesSuccess\",value:function associateNotificationTemplatesSuccess(resourceId,notificationId){return this.http.post(\"\".concat(this.baseUrl).concat(resourceId,\"/notification_templates_success/\"),{id:notificationId});}},{key:\"disassociateNotificationTemplatesSuccess\",value:function disassociateNotificationTemplatesSuccess(resourceId,notificationId){return this.http.post(\"\".concat(this.baseUrl).concat(resourceId,\"/notification_templates_success/\"),{id:notificationId,disassociate:true});}},{key:\"associateNotificationTemplatesError\",value:function associateNotificationTemplatesError(resourceId,notificationId){return this.http.post(\"\".concat(this.baseUrl).concat(resourceId,\"/notification_templates_error/\"),{id:notificationId});}},{key:\"disassociateNotificationTemplatesError\",value:function disassociateNotificationTemplatesError(resourceId,notificationId){return this.http.post(\"\".concat(this.baseUrl).concat(resourceId,\"/notification_templates_error/\"),{id:notificationId,disassociate:true});}/**\n     * This is a helper method meant to simplify setting the \"on\" status of\n     * a related notification.\n     *\n     * @param[resourceId] - id of the base resource\n     * @param[notificationId] - id of the notification\n     * @param[notificationType] - the type of notification, options are \"success\" and \"error\"\n     */},{key:\"associateNotificationTemplate\",value:function associateNotificationTemplate(resourceId,notificationId,notificationType){if(notificationType==='approvals'){return this.associateNotificationTemplatesApprovals(resourceId,notificationId);}if(notificationType==='started'){return this.associateNotificationTemplatesStarted(resourceId,notificationId);}if(notificationType==='success'){return this.associateNotificationTemplatesSuccess(resourceId,notificationId);}if(notificationType==='error'){return this.associateNotificationTemplatesError(resourceId,notificationId);}throw new Error(\"Unsupported notificationType for association: \".concat(notificationType));}/**\n     * This is a helper method meant to simplify setting the \"off\" status of\n     * a related notification.\n     *\n     * @param[resourceId] - id of the base resource\n     * @param[notificationId] - id of the notification\n     * @param[notificationType] - the type of notification, options are \"success\" and \"error\"\n     */},{key:\"disassociateNotificationTemplate\",value:function disassociateNotificationTemplate(resourceId,notificationId,notificationType){if(notificationType==='approvals'){return this.disassociateNotificationTemplatesApprovals(resourceId,notificationId);}if(notificationType==='started'){return this.disassociateNotificationTemplatesStarted(resourceId,notificationId);}if(notificationType==='success'){return this.disassociateNotificationTemplatesSuccess(resourceId,notificationId);}if(notificationType==='error'){return this.disassociateNotificationTemplatesError(resourceId,notificationId);}throw new Error(\"Unsupported notificationType for disassociation: \".concat(notificationType));}}]);return _class;}(parent);};export default NotificationsMixin;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/api/mixins/Notifications.mixin.js"],"names":["NotificationsMixin","parent","id","http","options","baseUrl","params","get","resourceId","notificationId","post","disassociate","notificationType","associateNotificationTemplatesApprovals","associateNotificationTemplatesStarted","associateNotificationTemplatesSuccess","associateNotificationTemplatesError","Error","disassociateNotificationTemplatesApprovals","disassociateNotificationTemplatesStarted","disassociateNotificationTemplatesSuccess","disassociateNotificationTemplatesError"],"mappings":"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","sourcesContent":["const NotificationsMixin = (parent) =>\n  class extends parent {\n    readOptionsNotificationTemplates(id) {\n      return this.http.options(`${this.baseUrl}${id}/notification_templates/`);\n    }\n\n    readNotificationTemplates(id, params) {\n      return this.http.get(\n        `${this.baseUrl}${id}/notification_templates/`,\n        params\n      );\n    }\n\n    readNotificationTemplatesStarted(id, params) {\n      return this.http.get(\n        `${this.baseUrl}${id}/notification_templates_started/`,\n        { params }\n      );\n    }\n\n    readNotificationTemplatesSuccess(id, params) {\n      return this.http.get(\n        `${this.baseUrl}${id}/notification_templates_success/`,\n        { params }\n      );\n    }\n\n    readNotificationTemplatesError(id, params) {\n      return this.http.get(\n        `${this.baseUrl}${id}/notification_templates_error/`,\n        { params }\n      );\n    }\n\n    associateNotificationTemplatesStarted(resourceId, notificationId) {\n      return this.http.post(\n        `${this.baseUrl}${resourceId}/notification_templates_started/`,\n        { id: notificationId }\n      );\n    }\n\n    disassociateNotificationTemplatesStarted(resourceId, notificationId) {\n      return this.http.post(\n        `${this.baseUrl}${resourceId}/notification_templates_started/`,\n        { id: notificationId, disassociate: true }\n      );\n    }\n\n    associateNotificationTemplatesSuccess(resourceId, notificationId) {\n      return this.http.post(\n        `${this.baseUrl}${resourceId}/notification_templates_success/`,\n        { id: notificationId }\n      );\n    }\n\n    disassociateNotificationTemplatesSuccess(resourceId, notificationId) {\n      return this.http.post(\n        `${this.baseUrl}${resourceId}/notification_templates_success/`,\n        { id: notificationId, disassociate: true }\n      );\n    }\n\n    associateNotificationTemplatesError(resourceId, notificationId) {\n      return this.http.post(\n        `${this.baseUrl}${resourceId}/notification_templates_error/`,\n        { id: notificationId }\n      );\n    }\n\n    disassociateNotificationTemplatesError(resourceId, notificationId) {\n      return this.http.post(\n        `${this.baseUrl}${resourceId}/notification_templates_error/`,\n        { id: notificationId, disassociate: true }\n      );\n    }\n\n    /**\n     * This is a helper method meant to simplify setting the \"on\" status of\n     * a related notification.\n     *\n     * @param[resourceId] - id of the base resource\n     * @param[notificationId] - id of the notification\n     * @param[notificationType] - the type of notification, options are \"success\" and \"error\"\n     */\n    associateNotificationTemplate(\n      resourceId,\n      notificationId,\n      notificationType\n    ) {\n      if (notificationType === 'approvals') {\n        return this.associateNotificationTemplatesApprovals(\n          resourceId,\n          notificationId\n        );\n      }\n\n      if (notificationType === 'started') {\n        return this.associateNotificationTemplatesStarted(\n          resourceId,\n          notificationId\n        );\n      }\n\n      if (notificationType === 'success') {\n        return this.associateNotificationTemplatesSuccess(\n          resourceId,\n          notificationId\n        );\n      }\n\n      if (notificationType === 'error') {\n        return this.associateNotificationTemplatesError(\n          resourceId,\n          notificationId\n        );\n      }\n\n      throw new Error(\n        `Unsupported notificationType for association: ${notificationType}`\n      );\n    }\n\n    /**\n     * This is a helper method meant to simplify setting the \"off\" status of\n     * a related notification.\n     *\n     * @param[resourceId] - id of the base resource\n     * @param[notificationId] - id of the notification\n     * @param[notificationType] - the type of notification, options are \"success\" and \"error\"\n     */\n    disassociateNotificationTemplate(\n      resourceId,\n      notificationId,\n      notificationType\n    ) {\n      if (notificationType === 'approvals') {\n        return this.disassociateNotificationTemplatesApprovals(\n          resourceId,\n          notificationId\n        );\n      }\n\n      if (notificationType === 'started') {\n        return this.disassociateNotificationTemplatesStarted(\n          resourceId,\n          notificationId\n        );\n      }\n\n      if (notificationType === 'success') {\n        return this.disassociateNotificationTemplatesSuccess(\n          resourceId,\n          notificationId\n        );\n      }\n\n      if (notificationType === 'error') {\n        return this.disassociateNotificationTemplatesError(\n          resourceId,\n          notificationId\n        );\n      }\n\n      throw new Error(\n        `Unsupported notificationType for disassociation: ${notificationType}`\n      );\n    }\n  };\n\nexport default NotificationsMixin;\n"]},"metadata":{},"sourceType":"module"}