{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { AccordionContext } from './AccordionContext';\nexport var AccordionToggle = function AccordionToggle(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      id = _a.id,\n      _a$isExpanded = _a.isExpanded,\n      isExpanded = _a$isExpanded === void 0 ? false : _a$isExpanded,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      component = _a.component,\n      props = __rest(_a, [\"className\", \"id\", \"isExpanded\", \"children\", \"component\"]);\n\n  return React.createElement(AccordionContext.Consumer, null, function (_ref) {\n    var ToggleContainer = _ref.ToggleContainer;\n    var Container = component || ToggleContainer;\n    return React.createElement(Container, null, React.createElement(\"button\", Object.assign({\n      id: id,\n      className: css(styles.accordionToggle, isExpanded && styles.modifiers.expanded, className),\n      \"aria-expanded\": isExpanded,\n      type: \"button\"\n    }, props), React.createElement(\"span\", {\n      className: css(styles.accordionToggleText)\n    }, children), React.createElement(\"span\", {\n      className: css(styles.accordionToggleIcon)\n    }, React.createElement(AngleRightIcon, null))));\n  });\n};\nAccordionToggle.displayName = 'AccordionToggle';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Accordion/AccordionToggle.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,6DAAnB;AACA,OAAO,cAAP,MAA2B,yDAA3B;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AAgBA,OAAO,IAAM,eAAe,GAAkD,SAAjE,eAAiE,CAAC,EAAD,EAOnD;AAPoD,qBAKpE,EALoE,CAC7E,SAD6E;AAAA,MAC7E,SAD6E,6BACjE,EADiE;AAAA,MAE7E,EAF6E,GAKpE,EALoE,CAE7E,EAF6E;AAAA,sBAKpE,EALoE,CAG7E,UAH6E;AAAA,MAG7E,UAH6E,8BAGhE,KAHgE;AAAA,oBAKpE,EALoE,CAI7E,QAJ6E;AAAA,MAI7E,QAJ6E,4BAIlE,IAJkE;AAAA,MAK7E,SAL6E,GAKpE,EALoE,CAK7E,SAL6E;AAAA,MAM1E,KAN0E,GAMrE,MAAA,CAAA,EAAA,EANqE,CAAA,WAAA,EAAA,IAAA,EAAA,YAAA,EAAA,UAAA,EAAA,WAAA,CAMrE,CANqE;;AAOnD,SAC1B,KAAA,CAAA,aAAA,CAAC,gBAAgB,CAAC,QAAlB,EAA0B,IAA1B,EACG,gBAAwB;AAAA,QAArB,eAAqB,QAArB,eAAqB;AACvB,QAAM,SAAS,GAAG,SAAS,IAAI,eAA/B;AACA,WACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,IAAV,EACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,MAAA,EAAE,EAAE,EADN;AAEE,MAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAR,EAAyB,UAAU,IAAI,MAAM,CAAC,SAAP,CAAiB,QAAxD,EAAkE,SAAlE,CAFhB;AAE4F,uBAC3E,UAHjB;AAIE,MAAA,IAAI,EAAC;AAJP,KAAA,EAKM,KALN,CAAA,EAOE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,MAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,mBAAR;AAApB,KAAA,EAAmD,QAAnD,CAPF,EAQE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,MAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,mBAAR;AAApB,KAAA,EACE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe,IAAf,CADF,CARF,CADF,CADF;AAgBD,GAnBH,CAD0B;AAsB3B,CA7BM;AA8BP,eAAe,CAAC,WAAhB,GAA8B,iBAA9B","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { AccordionContext } from './AccordionContext';\n\nexport interface AccordionToggleProps\n  extends React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> {\n  /** Content rendered inside the Accordion toggle  */\n  children?: React.ReactNode;\n  /** Additional classes added to the Accordion Toggle  */\n  className?: string;\n  /** Flag to show if the expanded content of the Accordion item is visible  */\n  isExpanded?: boolean;\n  /** Identify the Accordion toggle number  */\n  id: string;\n  /** Container to override the default for toggle */\n  component?: React.ElementType;\n}\n\nexport const AccordionToggle: React.FunctionComponent<AccordionToggleProps> = ({\n  className = '',\n  id,\n  isExpanded = false,\n  children = null,\n  component,\n  ...props\n}: AccordionToggleProps) => (\n  <AccordionContext.Consumer>\n    {({ ToggleContainer }) => {\n      const Container = component || ToggleContainer;\n      return (\n        <Container>\n          <button\n            id={id}\n            className={css(styles.accordionToggle, isExpanded && styles.modifiers.expanded, className)}\n            aria-expanded={isExpanded}\n            type=\"button\"\n            {...props}\n          >\n            <span className={css(styles.accordionToggleText)}>{children}</span>\n            <span className={css(styles.accordionToggleIcon)}>\n              <AngleRightIcon />\n            </span>\n          </button>\n        </Container>\n      );\n    }}\n  </AccordionContext.Consumer>\n);\nAccordionToggle.displayName = 'AccordionToggle';\n"]},"metadata":{},"sourceType":"module"}