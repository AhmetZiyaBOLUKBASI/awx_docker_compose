{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { DropdownWithContext } from './DropdownWithContext';\nimport { useOUIAId } from '../../helpers';\nexport var Dropdown = function Dropdown(_a) {\n  var _onSelect = _a.onSelect,\n      ref = _a.ref,\n      ouiaId = _a.ouiaId,\n      ouiaSafe = _a.ouiaSafe,\n      alignments = _a.alignments,\n      contextProps = _a.contextProps,\n      _a$menuAppendTo = _a.menuAppendTo,\n      menuAppendTo = _a$menuAppendTo === void 0 ? 'inline' : _a$menuAppendTo,\n      _a$isFlipEnabled = _a.isFlipEnabled,\n      isFlipEnabled = _a$isFlipEnabled === void 0 ? false : _a$isFlipEnabled,\n      props = __rest(_a, [\"onSelect\", \"ref\", \"ouiaId\", \"ouiaSafe\", \"alignments\", \"contextProps\", \"menuAppendTo\", \"isFlipEnabled\"]);\n\n  return React.createElement(DropdownContext.Provider, {\n    value: Object.assign({\n      onSelect: function onSelect(event) {\n        return _onSelect && _onSelect(event);\n      },\n      toggleTextClass: styles.dropdownToggleText,\n      toggleIconClass: styles.dropdownToggleImage,\n      toggleIndicatorClass: styles.dropdownToggleIcon,\n      menuClass: styles.dropdownMenu,\n      itemClass: styles.dropdownMenuItem,\n      toggleClass: styles.dropdownToggle,\n      baseClass: styles.dropdown,\n      baseComponent: 'div',\n      sectionClass: styles.dropdownGroup,\n      sectionTitleClass: styles.dropdownGroupTitle,\n      sectionComponent: 'section',\n      disabledClass: styles.modifiers.disabled,\n      plainTextClass: styles.modifiers.text,\n      ouiaId: useOUIAId(Dropdown.displayName, ouiaId),\n      ouiaSafe: ouiaSafe,\n      ouiaComponentType: Dropdown.displayName,\n      alignments: alignments\n    }, contextProps)\n  }, React.createElement(DropdownWithContext, Object.assign({\n    menuAppendTo: menuAppendTo,\n    isFlipEnabled: isFlipEnabled\n  }, props)));\n};\nDropdown.displayName = 'Dropdown';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Dropdown/Dropdown.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,2DAAnB;AACA,SAA8C,eAA9C,QAAqE,qBAArE;AACA,SAAS,mBAAT,QAAoC,uBAApC;AAEA,SAAoB,SAApB,QAAqC,eAArC;AA2DA,OAAO,IAAM,QAAQ,GAA2C,SAAnD,QAAmD,CAAC,EAAD,EAW5C;AAX6C,MAC/D,SAD+D,GAS1C,EAT0C,CAC/D,QAD+D;AAAA,MAG/D,GAH+D,GAS1C,EAT0C,CAG/D,GAH+D;AAAA,MAI/D,MAJ+D,GAS1C,EAT0C,CAI/D,MAJ+D;AAAA,MAK/D,QAL+D,GAS1C,EAT0C,CAK/D,QAL+D;AAAA,MAM/D,UAN+D,GAS1C,EAT0C,CAM/D,UAN+D;AAAA,MAO/D,YAP+D,GAS1C,EAT0C,CAO/D,YAP+D;AAAA,wBAS1C,EAT0C,CAQ/D,YAR+D;AAAA,MAQ/D,YAR+D,gCAQhD,QARgD;AAAA,yBAS1C,EAT0C,CAS/D,aAT+D;AAAA,MAS/D,aAT+D,iCAS/C,KAT+C;AAAA,MAU5D,KAV4D,GAUvD,MAAA,CAAA,EAAA,EAVuD,CAAA,UAAA,EAAA,KAAA,EAAA,QAAA,EAAA,UAAA,EAAA,YAAA,EAAA,cAAA,EAAA,cAAA,EAAA,eAAA,CAUvD,CAVuD;;AAW5C,SACnB,KAAA,CAAA,aAAA,CAAC,eAAe,CAAC,QAAjB,EAAyB;AACvB,IAAA,KAAK,EAAA,MAAA,CAAA,MAAA,CAAA;AACH,MAAA,QAAQ,EAAE,kBAAA,KAAK;AAAA,eAAI,SAAQ,IAAI,SAAQ,CAAC,KAAD,CAAxB;AAAA,OADZ;AAEH,MAAA,eAAe,EAAE,MAAM,CAAC,kBAFrB;AAGH,MAAA,eAAe,EAAE,MAAM,CAAC,mBAHrB;AAIH,MAAA,oBAAoB,EAAE,MAAM,CAAC,kBAJ1B;AAKH,MAAA,SAAS,EAAE,MAAM,CAAC,YALf;AAMH,MAAA,SAAS,EAAE,MAAM,CAAC,gBANf;AAOH,MAAA,WAAW,EAAE,MAAM,CAAC,cAPjB;AAQH,MAAA,SAAS,EAAE,MAAM,CAAC,QARf;AASH,MAAA,aAAa,EAAE,KATZ;AAUH,MAAA,YAAY,EAAE,MAAM,CAAC,aAVlB;AAWH,MAAA,iBAAiB,EAAE,MAAM,CAAC,kBAXvB;AAYH,MAAA,gBAAgB,EAAE,SAZf;AAaH,MAAA,aAAa,EAAE,MAAM,CAAC,SAAP,CAAiB,QAb7B;AAcH,MAAA,cAAc,EAAE,MAAM,CAAC,SAAP,CAAiB,IAd9B;AAeH,MAAA,MAAM,EAAE,SAAS,CAAC,QAAQ,CAAC,WAAV,EAAuB,MAAvB,CAfd;AAgBH,MAAA,QAAQ,EAAR,QAhBG;AAiBH,MAAA,iBAAiB,EAAE,QAAQ,CAAC,WAjBzB;AAkBH,MAAA,UAAU,EAAV;AAlBG,KAAA,EAmBA,YAnBA;AADkB,GAAzB,EAuBE,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,YAAY,EAAE,YAAf;AAA6B,IAAA,aAAa,EAAE;AAA5C,GAAA,EAA+D,KAA/D,CAApB,CAvBF,CADmB;AA0BpB,CArCM;AAsCP,QAAQ,CAAC,WAAT,GAAuB,UAAvB","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownPosition, DropdownDirection, DropdownContext } from './dropdownConstants';\nimport { DropdownWithContext } from './DropdownWithContext';\nimport { ToggleMenuBaseProps } from '../../helpers/Popper/Popper';\nimport { OUIAProps, useOUIAId } from '../../helpers';\n\nexport interface DropdownProps\n  extends Omit<ToggleMenuBaseProps, 'menuAppendTo'>,\n    React.HTMLProps<HTMLDivElement>,\n    OUIAProps {\n  /** Anything which can be rendered in a dropdown */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown */\n  className?: string;\n  /** Array of DropdownItem nodes that will be rendered in the dropdown Menu list */\n  dropdownItems?: any[];\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Display the toggle in text only mode */\n  isText?: boolean;\n  /** Flag indicating that the dropdown should expand to full height */\n  isFullHeight?: boolean;\n  /** Indicates where menu will be aligned horizontally */\n  position?: DropdownPosition | 'right' | 'left';\n  /** Indicates how the menu will align at screen size breakpoints. Default alignment is set via the position property. */\n  alignments?: {\n    sm?: 'right' | 'left';\n    md?: 'right' | 'left';\n    lg?: 'right' | 'left';\n    xl?: 'right' | 'left';\n    '2xl'?: 'right' | 'left';\n  };\n  /** Display menu above or below dropdown toggle */\n  direction?: DropdownDirection | 'up' | 'down';\n  /** The container to append the menu to. Defaults to 'inline'.\n   * If your menu is being cut off you can append it to an element higher up the DOM tree.\n   * Some examples:\n   * menuAppendTo=\"parent\"\n   * menuAppendTo={() => document.body}\n   * menuAppendTo={document.getElementById('target')}\n   */\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'inline' | 'parent';\n  /** Flag to indicate if dropdown has groups */\n  isGrouped?: boolean;\n  /** Toggle for the dropdown, examples: <DropdownToggle> or <DropdownToggleCheckbox> */\n  toggle: React.ReactElement<any>;\n  /** Function callback called when user selects item */\n  onSelect?: (event?: React.SyntheticEvent<HTMLDivElement>) => void;\n  /** Flag to indicate if the first dropdown item should gain initial focus, set false when adding\n   * a specific auto-focus item (like a current selection) otherwise leave as true\n   */\n  autoFocus?: boolean;\n  /** Props for extreme customization of dropdown */\n  contextProps?: typeof DropdownContext;\n  /** Flag for indicating that the dropdown menu should automatically flip vertically when\n   * it reaches the boundary. This prop can only be used when the dropdown component is not\n   * appended inline, e.g. `menuAppendTo=\"parent\"`\n   */\n  isFlipEnabled?: boolean;\n}\n\nexport const Dropdown: React.FunctionComponent<DropdownProps> = ({\n  onSelect,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ref, // Types of Ref are different for React.FunctionComponent vs React.Component\n  ouiaId,\n  ouiaSafe,\n  alignments,\n  contextProps,\n  menuAppendTo = 'inline',\n  isFlipEnabled = false,\n  ...props\n}: DropdownProps) => (\n  <DropdownContext.Provider\n    value={{\n      onSelect: event => onSelect && onSelect(event),\n      toggleTextClass: styles.dropdownToggleText,\n      toggleIconClass: styles.dropdownToggleImage,\n      toggleIndicatorClass: styles.dropdownToggleIcon,\n      menuClass: styles.dropdownMenu,\n      itemClass: styles.dropdownMenuItem,\n      toggleClass: styles.dropdownToggle,\n      baseClass: styles.dropdown,\n      baseComponent: 'div',\n      sectionClass: styles.dropdownGroup,\n      sectionTitleClass: styles.dropdownGroupTitle,\n      sectionComponent: 'section',\n      disabledClass: styles.modifiers.disabled,\n      plainTextClass: styles.modifiers.text,\n      ouiaId: useOUIAId(Dropdown.displayName, ouiaId),\n      ouiaSafe,\n      ouiaComponentType: Dropdown.displayName,\n      alignments,\n      ...contextProps\n    }}\n  >\n    <DropdownWithContext menuAppendTo={menuAppendTo} isFlipEnabled={isFlipEnabled} {...props} />\n  </DropdownContext.Provider>\n);\nDropdown.displayName = 'Dropdown';\n"]},"metadata":{},"sourceType":"module"}