{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { InternalFormFieldGroup } from './InternalFormFieldGroup';\nexport var FormFieldGroupExpandable = function FormFieldGroupExpandable(_a) {\n  var children = _a.children,\n      className = _a.className,\n      header = _a.header,\n      _a$isExpanded = _a.isExpanded,\n      isExpanded = _a$isExpanded === void 0 ? false : _a$isExpanded,\n      toggleAriaLabel = _a.toggleAriaLabel,\n      props = __rest(_a, [\"children\", \"className\", \"header\", \"isExpanded\", \"toggleAriaLabel\"]);\n\n  var _useState = useState(isExpanded),\n      _useState2 = _slicedToArray(_useState, 2),\n      localIsExpanded = _useState2[0],\n      setIsExpanded = _useState2[1];\n\n  return React.createElement(InternalFormFieldGroup, Object.assign({\n    className: className,\n    header: header,\n    isExpandable: true,\n    isExpanded: localIsExpanded,\n    toggleAriaLabel: toggleAriaLabel,\n    onToggle: function onToggle() {\n      return setIsExpanded(!localIsExpanded);\n    }\n  }, props), children);\n};\nFormFieldGroupExpandable.displayName = 'FormFieldGroupExpandable';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Form/FormFieldGroupExpandable.tsx"],"names":[],"mappings":";;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,QAAT,QAAyB,OAAzB;AACA,SAAS,sBAAT,QAAuC,0BAAvC;AAeA,OAAO,IAAM,wBAAwB,GAA2D,SAAnF,wBAAmF,CAAC,EAAD,EAO5D;AAP6D,MAC/F,QAD+F,GAKhF,EALgF,CAC/F,QAD+F;AAAA,MAE/F,SAF+F,GAKhF,EALgF,CAE/F,SAF+F;AAAA,MAG/F,MAH+F,GAKhF,EALgF,CAG/F,MAH+F;AAAA,sBAKhF,EALgF,CAI/F,UAJ+F;AAAA,MAI/F,UAJ+F,8BAIlF,KAJkF;AAAA,MAK/F,eAL+F,GAKhF,EALgF,CAK/F,eAL+F;AAAA,MAM5F,KAN4F,GAMvF,MAAA,CAAA,EAAA,EANuF,CAAA,UAAA,EAAA,WAAA,EAAA,QAAA,EAAA,YAAA,EAAA,iBAAA,CAMvF,CANuF;;AAQ/F,kBAAyC,QAAQ,CAAC,UAAD,CAAjD;AAAA;AAAA,MAAO,eAAP;AAAA,MAAwB,aAAxB;;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,sBAAD,EAAuB,MAAA,CAAA,MAAA,CAAA;AACrB,IAAA,SAAS,EAAE,SADU;AAErB,IAAA,MAAM,EAAE,MAFa;AAGrB,IAAA,YAAY,EAAA,IAHS;AAIrB,IAAA,UAAU,EAAE,eAJS;AAKrB,IAAA,eAAe,EAAE,eALI;AAMrB,IAAA,QAAQ,EAAE;AAAA,aAAM,aAAa,CAAC,CAAC,eAAF,CAAnB;AAAA;AANW,GAAA,EAOjB,KAPiB,CAAvB,EASG,QATH,CADF;AAaD,CAvBM;AAwBP,wBAAwB,CAAC,WAAzB,GAAuC,0BAAvC","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport { InternalFormFieldGroup } from './InternalFormFieldGroup';\n\nexport interface FormFieldGroupExpandableProps extends React.HTMLProps<HTMLDivElement> {\n  /** Anything that can be rendered as form field group content. */\n  children?: React.ReactNode;\n  /** Additional classes added to the form field group. */\n  className?: string;\n  /** Form field group header */\n  header?: React.ReactNode;\n  /** Flag indicating if the form field group is initially expanded */\n  isExpanded?: boolean;\n  /** Aria-label to use on the form field group toggle button */\n  toggleAriaLabel?: string;\n}\n\nexport const FormFieldGroupExpandable: React.FunctionComponent<FormFieldGroupExpandableProps> = ({\n  children,\n  className,\n  header,\n  isExpanded = false,\n  toggleAriaLabel,\n  ...props\n}: FormFieldGroupExpandableProps) => {\n  const [localIsExpanded, setIsExpanded] = useState(isExpanded);\n\n  return (\n    <InternalFormFieldGroup\n      className={className}\n      header={header}\n      isExpandable\n      isExpanded={localIsExpanded}\n      toggleAriaLabel={toggleAriaLabel}\n      onToggle={() => setIsExpanded(!localIsExpanded)}\n      {...props}\n    >\n      {children}\n    </InternalFormFieldGroup>\n  );\n};\nFormFieldGroupExpandable.displayName = 'FormFieldGroupExpandable';\n"]},"metadata":{},"sourceType":"module"}