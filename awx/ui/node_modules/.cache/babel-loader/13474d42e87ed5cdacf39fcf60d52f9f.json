{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nvar buttonVariantStyles = {\n  default: '',\n  primary: styles.modifiers.primary,\n  secondary: styles.modifiers.secondary\n};\nexport var Toggle = /*#__PURE__*/function (_React$Component) {\n  _inherits(Toggle, _React$Component);\n\n  var _super = _createSuper(Toggle);\n\n  function Toggle() {\n    var _this;\n\n    _classCallCheck(this, Toggle);\n\n    _this = _super.apply(this, arguments);\n    _this.buttonRef = React.createRef();\n\n    _this.componentDidMount = function () {\n      document.addEventListener('click', _this.onDocClick);\n      document.addEventListener('touchstart', _this.onDocClick);\n      document.addEventListener('keydown', _this.onEscPress);\n    };\n\n    _this.componentWillUnmount = function () {\n      document.removeEventListener('click', _this.onDocClick);\n      document.removeEventListener('touchstart', _this.onDocClick);\n      document.removeEventListener('keydown', _this.onEscPress);\n    };\n\n    _this.onDocClick = function (event) {\n      var _this$props = _this.props,\n          isOpen = _this$props.isOpen,\n          parentRef = _this$props.parentRef,\n          onToggle = _this$props.onToggle,\n          getMenuRef = _this$props.getMenuRef;\n      var menuRef = getMenuRef && getMenuRef();\n      var clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      var clickedWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target);\n\n      if (isOpen && !(clickedOnToggle || clickedWithinMenu)) {\n        onToggle(false, event);\n      }\n    };\n\n    _this.onEscPress = function (event) {\n      var _this$props2 = _this.props,\n          parentRef = _this$props2.parentRef,\n          getMenuRef = _this$props2.getMenuRef;\n      var keyCode = event.keyCode || event.which;\n      var menuRef = getMenuRef && getMenuRef();\n      var escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      var escFromWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target);\n\n      if (_this.props.isOpen && (keyCode === KEY_CODES.ESCAPE_KEY || event.key === 'Tab') && (escFromToggle || escFromWithinMenu)) {\n        _this.props.onToggle(false, event);\n\n        _this.buttonRef.current.focus();\n      }\n    };\n\n    _this.onKeyDown = function (event) {\n      if (event.key === 'Tab' && !_this.props.isOpen) {\n        return;\n      }\n\n      if ((event.key === 'Tab' || event.key === 'Enter' || event.key === ' ') && _this.props.isOpen) {\n        if (!_this.props.bubbleEvent) {\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n\n        _this.props.onToggle(!_this.props.isOpen, event);\n      } else if ((event.key === 'Enter' || event.key === ' ') && !_this.props.isOpen) {\n        if (!_this.props.bubbleEvent) {\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n\n        _this.props.onToggle(!_this.props.isOpen, event);\n\n        _this.props.onEnter();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Toggle, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          className = _a.className,\n          children = _a.children,\n          isOpen = _a.isOpen,\n          isDisabled = _a.isDisabled,\n          isPlain = _a.isPlain,\n          isText = _a.isText,\n          isPrimary = _a.isPrimary,\n          isSplitButton = _a.isSplitButton,\n          toggleVariant = _a.toggleVariant,\n          onToggle = _a.onToggle,\n          ariaHasPopup = _a['aria-haspopup'],\n          isActive = _a.isActive,\n          bubbleEvent = _a.bubbleEvent,\n          onEnter = _a.onEnter,\n          parentRef = _a.parentRef,\n          getMenuRef = _a.getMenuRef,\n          id = _a.id,\n          type = _a.type,\n          props = __rest(_a, [\"className\", \"children\", \"isOpen\", \"isDisabled\", \"isPlain\", \"isText\", \"isPrimary\", \"isSplitButton\", \"toggleVariant\", \"onToggle\", 'aria-haspopup', \"isActive\", \"bubbleEvent\", \"onEnter\", \"parentRef\", \"getMenuRef\", \"id\", \"type\"]);\n\n      return React.createElement(DropdownContext.Consumer, null, function (_ref) {\n        var toggleClass = _ref.toggleClass;\n        return React.createElement(\"button\", Object.assign({}, props, {\n          id: id,\n          ref: _this2.buttonRef,\n          className: css(isSplitButton ? styles.dropdownToggleButton : toggleClass || styles.dropdownToggle, isActive && styles.modifiers.active, isPlain && styles.modifiers.plain, isText && styles.modifiers.text, isPrimary && styles.modifiers.primary, buttonVariantStyles[toggleVariant], className),\n          type: type || 'button',\n          onClick: function onClick(event) {\n            return onToggle(!isOpen, event);\n          },\n          \"aria-expanded\": isOpen,\n          \"aria-haspopup\": ariaHasPopup,\n          onKeyDown: function onKeyDown(event) {\n            return _this2.onKeyDown(event);\n          },\n          disabled: isDisabled\n        }), children);\n      });\n    }\n  }]);\n\n  return Toggle;\n}(React.Component);\nToggle.displayName = 'Toggle';\nToggle.defaultProps = {\n  className: '',\n  isOpen: false,\n  isActive: false,\n  isDisabled: false,\n  isPlain: false,\n  isText: false,\n  isPrimary: false,\n  isSplitButton: false,\n  onToggle: function onToggle() {},\n  onEnter: function onEnter() {},\n  bubbleEvent: false\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Dropdown/Toggle.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToggleProps {\n  /** HTML ID of dropdown toggle */\n  id: string;\n  /** Type to put on the button */\n  type?: 'button' | 'submit' | 'reset';\n  /** Anything which can be rendered as dropdown toggle */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown toggle */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (\n    isOpen: boolean,\n    event: MouseEvent | TouchEvent | KeyboardEvent | React.KeyboardEvent<any> | React.MouseEvent<HTMLButtonElement>\n  ) => void;\n  /** Callback called when the Enter key is pressed */\n  onEnter?: () => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** The menu element */\n  getMenuRef?: () => HTMLElement;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Disables the dropdown toggle */\n  isDisabled?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Display the toggle in text only mode */\n  isText?: boolean;\n  /** @deprecated Use `toggleVariant` instead. Display the toggle with a primary button style */\n  isPrimary?: boolean;\n  /** Style the toggle as a child of a split button */\n  isSplitButton?: boolean;\n  /** Alternate styles for the dropdown toggle button */\n  toggleVariant?: 'primary' | 'secondary' | 'default';\n  /** Flag for aria popup */\n  'aria-haspopup'?: boolean | 'listbox' | 'menu' | 'dialog' | 'grid' | 'tree';\n  /** Allows selecting toggle to select parent */\n  bubbleEvent?: boolean;\n}\n\nconst buttonVariantStyles = {\n  default: '',\n  primary: styles.modifiers.primary,\n  secondary: styles.modifiers.secondary\n};\n\nexport class Toggle extends React.Component<ToggleProps> {\n  static displayName = 'Toggle';\n  private buttonRef = React.createRef<HTMLButtonElement>();\n\n  static defaultProps: PickOptional<ToggleProps> = {\n    className: '',\n    isOpen: false,\n    isActive: false,\n    isDisabled: false,\n    isPlain: false,\n    isText: false,\n    isPrimary: false,\n    isSplitButton: false,\n    onToggle: () => {},\n    onEnter: () => {},\n    bubbleEvent: false\n  };\n\n  componentDidMount = () => {\n    document.addEventListener('click', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.onEscPress);\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener('click', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.onEscPress);\n  };\n\n  onDocClick = (event: MouseEvent | TouchEvent) => {\n    const { isOpen, parentRef, onToggle, getMenuRef } = this.props;\n    const menuRef = getMenuRef && getMenuRef();\n    const clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target as Node);\n    const clickedWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target as Node);\n    if (isOpen && !(clickedOnToggle || clickedWithinMenu)) {\n      onToggle(false, event);\n    }\n  };\n\n  onEscPress = (event: KeyboardEvent) => {\n    const { parentRef, getMenuRef } = this.props;\n    const keyCode = event.keyCode || event.which;\n    const menuRef = getMenuRef && getMenuRef();\n    const escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target as Node);\n    const escFromWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target as Node);\n    if (\n      this.props.isOpen &&\n      (keyCode === KEY_CODES.ESCAPE_KEY || event.key === 'Tab') &&\n      (escFromToggle || escFromWithinMenu)\n    ) {\n      this.props.onToggle(false, event);\n      this.buttonRef.current.focus();\n    }\n  };\n\n  onKeyDown = (event: React.KeyboardEvent<any>) => {\n    if (event.key === 'Tab' && !this.props.isOpen) {\n      return;\n    }\n    if ((event.key === 'Tab' || event.key === 'Enter' || event.key === ' ') && this.props.isOpen) {\n      if (!this.props.bubbleEvent) {\n        event.stopPropagation();\n      }\n      event.preventDefault();\n\n      this.props.onToggle(!this.props.isOpen, event);\n    } else if ((event.key === 'Enter' || event.key === ' ') && !this.props.isOpen) {\n      if (!this.props.bubbleEvent) {\n        event.stopPropagation();\n      }\n      event.preventDefault();\n\n      this.props.onToggle(!this.props.isOpen, event);\n      this.props.onEnter();\n    }\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      isOpen,\n      isDisabled,\n      isPlain,\n      isText,\n      isPrimary,\n      isSplitButton,\n      toggleVariant,\n      onToggle,\n      'aria-haspopup': ariaHasPopup,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isActive,\n      bubbleEvent,\n      onEnter,\n      parentRef,\n      getMenuRef,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      id,\n      type,\n      ...props\n    } = this.props;\n    return (\n      <DropdownContext.Consumer>\n        {({ toggleClass }) => (\n          <button\n            {...props}\n            id={id}\n            ref={this.buttonRef}\n            className={css(\n              isSplitButton ? styles.dropdownToggleButton : toggleClass || styles.dropdownToggle,\n              isActive && styles.modifiers.active,\n              isPlain && styles.modifiers.plain,\n              isText && styles.modifiers.text,\n              isPrimary && styles.modifiers.primary,\n              buttonVariantStyles[toggleVariant],\n              className\n            )}\n            type={type || 'button'}\n            onClick={event => onToggle(!isOpen, event)}\n            aria-expanded={isOpen}\n            aria-haspopup={ariaHasPopup}\n            onKeyDown={event => this.onKeyDown(event)}\n            disabled={isDisabled}\n          >\n            {children}\n          </button>\n        )}\n      </DropdownContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}