{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines';\nimport { Badge } from '../Badge';\nimport { Tooltip } from '../Tooltip';\nexport var NotificationDrawerGroup = function NotificationDrawerGroup(_a) {\n  var children = _a.children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      count = _a.count,\n      isExpanded = _a.isExpanded,\n      _a$isRead = _a.isRead,\n      isRead = _a$isRead === void 0 ? false : _a$isRead,\n      _a$onExpand = _a.onExpand,\n      onExpand = _a$onExpand === void 0 ? function (event, expanded) {\n    return undefined;\n  } : _a$onExpand,\n      title = _a.title,\n      _a$truncateTitle = _a.truncateTitle,\n      truncateTitle = _a$truncateTitle === void 0 ? 0 : _a$truncateTitle,\n      tooltipPosition = _a.tooltipPosition,\n      props = __rest(_a, [\"children\", \"className\", \"count\", \"isExpanded\", \"isRead\", \"onExpand\", \"title\", \"truncateTitle\", \"tooltipPosition\"]);\n\n  var titleRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isTooltipVisible = _React$useState2[0],\n      setIsTooltipVisible = _React$useState2[1];\n\n  React.useEffect(function () {\n    // Title will always truncate on overflow regardless of truncateTitle prop\n    var showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  var Title = React.createElement(\"div\", Object.assign({}, isTooltipVisible && {\n    tabIndex: 0\n  }, {\n    ref: titleRef,\n    className: css(styles.notificationDrawerGroupToggleTitle)\n  }), title);\n  return React.createElement(\"section\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerGroup, isExpanded && styles.modifiers.expanded, className)\n  }), React.createElement(\"h1\", null, React.createElement(\"button\", {\n    className: css(styles.notificationDrawerGroupToggle),\n    \"aria-expanded\": isExpanded,\n    onClick: function onClick(e) {\n      return onExpand(e, !isExpanded);\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        onExpand(e, !isExpanded);\n      }\n    }\n  }, isTooltipVisible ? React.createElement(Tooltip, {\n    content: title,\n    position: tooltipPosition\n  }, Title) : Title, React.createElement(\"div\", {\n    className: css(styles.notificationDrawerGroupToggleCount)\n  }, React.createElement(Badge, {\n    isRead: isRead\n  }, count)), React.createElement(\"span\", {\n    className: \"pf-c-notification-drawer__group-toggle-icon\"\n  }, React.createElement(AngleRightIcon, null)))), children);\n};\nNotificationDrawerGroup.displayName = 'NotificationDrawerGroup';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/NotificationDrawer/NotificationDrawerGroup.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines';\n\nimport { Badge } from '../Badge';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\n\nexport interface NotificationDrawerGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'title'> {\n  /**  Content rendered inside the group */\n  children?: React.ReactNode;\n  /**  Additional classes added to the group */\n  className?: string;\n  /**  Notification drawer group count */\n  count: number;\n  /**  Adds styling to the group to indicate expanded state */\n  isExpanded: boolean;\n  /**  Adds styling to the group to indicate whether it has been read */\n  isRead?: boolean;\n  /**  Callback for when group button is clicked to expand */\n  onExpand?: (event: any, value: boolean) => void;\n  /**  Notification drawer group title */\n  title: string | React.ReactNode;\n  /** Truncate title to number of lines */\n  truncateTitle?: number;\n  /** Position of the tooltip which is displayed if text is truncated */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n}\n\nexport const NotificationDrawerGroup: React.FunctionComponent<NotificationDrawerGroupProps> = ({\n  children,\n  className = '',\n  count,\n  isExpanded,\n  isRead = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onExpand = (event: any, expanded: boolean) => undefined as any,\n  title,\n  truncateTitle = 0,\n  tooltipPosition,\n  ...props\n}: NotificationDrawerGroupProps) => {\n  const titleRef = React.useRef(null);\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useEffect(() => {\n    // Title will always truncate on overflow regardless of truncateTitle prop\n    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n\n  const Title = (\n    <div\n      {...(isTooltipVisible && { tabIndex: 0 })}\n      ref={titleRef}\n      className={css(styles.notificationDrawerGroupToggleTitle)}\n    >\n      {title}\n    </div>\n  );\n\n  return (\n    <section\n      {...props}\n      className={css(styles.notificationDrawerGroup, isExpanded && styles.modifiers.expanded, className)}\n    >\n      <h1>\n        <button\n          className={css(styles.notificationDrawerGroupToggle)}\n          aria-expanded={isExpanded}\n          onClick={e => onExpand(e, !isExpanded)}\n          onKeyDown={e => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              e.preventDefault();\n              onExpand(e, !isExpanded);\n            }\n          }}\n        >\n          {isTooltipVisible ? (\n            <Tooltip content={title} position={tooltipPosition}>\n              {Title}\n            </Tooltip>\n          ) : (\n            Title\n          )}\n          <div className={css(styles.notificationDrawerGroupToggleCount)}>\n            <Badge isRead={isRead}>{count}</Badge>\n          </div>\n\n          <span className=\"pf-c-notification-drawer__group-toggle-icon\">\n            <AngleRightIcon />\n          </span>\n        </button>\n      </h1>\n      {children}\n    </section>\n  );\n};\nNotificationDrawerGroup.displayName = 'NotificationDrawerGroup';\n"]},"metadata":{},"sourceType":"module"}