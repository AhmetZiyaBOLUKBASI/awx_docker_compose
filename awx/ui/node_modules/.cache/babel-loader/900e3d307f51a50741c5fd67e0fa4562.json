{"ast":null,"code":"import _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport React, { useEffect } from 'react';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Button } from '../Button/Button';\nimport { Select, SelectOption } from '../Select';\nimport { InputGroup } from '../InputGroup';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/CalendarMonth/calendar-month';\nimport { getUniqueId } from '../../helpers/util';\nexport var Weekday;\n\n(function (Weekday) {\n  Weekday[Weekday[\"Sunday\"] = 0] = \"Sunday\";\n  Weekday[Weekday[\"Monday\"] = 1] = \"Monday\";\n  Weekday[Weekday[\"Tuesday\"] = 2] = \"Tuesday\";\n  Weekday[Weekday[\"Wednesday\"] = 3] = \"Wednesday\";\n  Weekday[Weekday[\"Thursday\"] = 4] = \"Thursday\";\n  Weekday[Weekday[\"Friday\"] = 5] = \"Friday\";\n  Weekday[Weekday[\"Saturday\"] = 6] = \"Saturday\";\n})(Weekday || (Weekday = {})); // Must be numeric given current header design\n\n\nvar yearFormat = function yearFormat(date) {\n  return date.getFullYear();\n};\n\nvar buildCalendar = function buildCalendar(year, month, weekStart, validators) {\n  var defaultDate = new Date(year, month);\n  var firstDayOfWeek = new Date(defaultDate);\n  firstDayOfWeek.setDate(firstDayOfWeek.getDate() - firstDayOfWeek.getDay() + weekStart); // We will show a maximum of 6 weeks like Google calendar\n  // Assume we just want the numbers for now...\n\n  var calendarWeeks = [];\n\n  for (var i = 0; i < 6; i++) {\n    var week = [];\n\n    var _loop = function _loop(j) {\n      var date = new Date(firstDayOfWeek);\n      week.push({\n        date: date,\n        isValid: validators.every(function (validator) {\n          return validator(date);\n        })\n      });\n      firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);\n    };\n\n    for (var j = 0; j < 7; j++) {\n      _loop(j);\n    }\n\n    calendarWeeks.push(week);\n\n    if (firstDayOfWeek.getMonth() !== defaultDate.getMonth()) {\n      break;\n    }\n  }\n\n  return calendarWeeks;\n};\n\nvar isSameDate = function isSameDate(d1, d2) {\n  return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();\n};\n\nexport var isValidDate = function isValidDate(date) {\n  return Boolean(date && !isNaN(date));\n};\nvar today = new Date();\nexport var CalendarMonth = function CalendarMonth(_a) {\n  var dateProp = _a.date,\n      _a$locale = _a.locale,\n      locale = _a$locale === void 0 ? undefined : _a$locale,\n      _a$monthFormat = _a.monthFormat,\n      monthFormat = _a$monthFormat === void 0 ? function (date) {\n    return date.toLocaleDateString(locale, {\n      month: 'long'\n    });\n  } : _a$monthFormat,\n      _a$weekdayFormat = _a.weekdayFormat,\n      weekdayFormat = _a$weekdayFormat === void 0 ? function (date) {\n    return date.toLocaleDateString(locale, {\n      weekday: 'narrow'\n    });\n  } : _a$weekdayFormat,\n      _a$longWeekdayFormat = _a.longWeekdayFormat,\n      longWeekdayFormat = _a$longWeekdayFormat === void 0 ? function (date) {\n    return date.toLocaleDateString(locale, {\n      weekday: 'long'\n    });\n  } : _a$longWeekdayFormat,\n      _a$dayFormat = _a.dayFormat,\n      dayFormat = _a$dayFormat === void 0 ? function (date) {\n    return date.getDate();\n  } : _a$dayFormat,\n      _a$weekStart = _a.weekStart,\n      weekStart = _a$weekStart === void 0 ? 0 : _a$weekStart,\n      _a$onChange = _a.onChange,\n      onChange = _a$onChange === void 0 ? function () {} : _a$onChange,\n      _a$validators = _a.validators,\n      validators = _a$validators === void 0 ? [function () {\n    return true;\n  }] : _a$validators,\n      className = _a.className,\n      _a$onSelectToggle = _a.onSelectToggle,\n      onSelectToggle = _a$onSelectToggle === void 0 ? function () {} : _a$onSelectToggle,\n      rangeStart = _a.rangeStart,\n      _a$prevMonthAriaLabel = _a.prevMonthAriaLabel,\n      prevMonthAriaLabel = _a$prevMonthAriaLabel === void 0 ? 'Previous month' : _a$prevMonthAriaLabel,\n      _a$nextMonthAriaLabel = _a.nextMonthAriaLabel,\n      nextMonthAriaLabel = _a$nextMonthAriaLabel === void 0 ? 'Next month' : _a$nextMonthAriaLabel,\n      _a$yearInputAriaLabel = _a.yearInputAriaLabel,\n      yearInputAriaLabel = _a$yearInputAriaLabel === void 0 ? 'Select year' : _a$yearInputAriaLabel,\n      cellAriaLabel = _a.cellAriaLabel,\n      _a$isDateFocused = _a.isDateFocused,\n      isDateFocused = _a$isDateFocused === void 0 ? false : _a$isDateFocused,\n      props = __rest(_a, [\"date\", \"locale\", \"monthFormat\", \"weekdayFormat\", \"longWeekdayFormat\", \"dayFormat\", \"weekStart\", \"onChange\", \"validators\", \"className\", \"onSelectToggle\", \"rangeStart\", \"prevMonthAriaLabel\", \"nextMonthAriaLabel\", \"yearInputAriaLabel\", \"cellAriaLabel\", \"isDateFocused\"]);\n\n  var longMonths = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(function (monthNum) {\n    return new Date(1990, monthNum);\n  }).map(monthFormat);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isSelectOpen = _React$useState2[0],\n      setIsSelectOpen = _React$useState2[1]; // eslint-disable-next-line prefer-const\n\n\n  var _React$useState3 = React.useState(function () {\n    var initDate = new Date(dateProp);\n\n    if (isValidDate(initDate)) {\n      return initDate;\n    } else {\n      if (isValidDate(rangeStart)) {\n        return rangeStart;\n      } else {\n        return today;\n      }\n    }\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      focusedDate = _React$useState4[0],\n      setFocusedDate = _React$useState4[1];\n\n  var _React$useState5 = React.useState(new Date(focusedDate)),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      hoveredDate = _React$useState6[0],\n      setHoveredDate = _React$useState6[1];\n\n  var focusRef = React.useRef();\n\n  var _React$useState7 = React.useState(getUniqueId('hidden-month-span')),\n      _React$useState8 = _slicedToArray(_React$useState7, 1),\n      hiddenMonthId = _React$useState8[0];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      shouldFocus = _React$useState10[0],\n      setShouldFocus = _React$useState10[1];\n\n  var isValidated = function isValidated(date) {\n    return validators.every(function (validator) {\n      return validator(date);\n    });\n  };\n\n  var focusedDateValidated = isValidated(focusedDate);\n  useEffect(function () {\n    if (isValidDate(dateProp) && !isSameDate(focusedDate, dateProp)) {\n      setFocusedDate(dateProp);\n    } else if (!dateProp) {\n      setFocusedDate(today);\n    }\n  }, [dateProp]);\n  useEffect(function () {\n    // Calendar month should not be focused on page load\n    // Datepicker should place focus in calendar month when opened\n    if ((shouldFocus || isDateFocused) && focusedDateValidated && focusRef.current) {\n      focusRef.current.focus();\n    } else {\n      setShouldFocus(true);\n    }\n  }, [focusedDate, isDateFocused, focusedDateValidated, focusRef]);\n\n  var onMonthClick = function onMonthClick(newDate) {\n    setFocusedDate(newDate);\n    setHoveredDate(newDate);\n    setShouldFocus(false);\n  };\n\n  var onKeyDown = function onKeyDown(ev) {\n    var newDate = new Date(focusedDate);\n\n    if (ev.key === 'ArrowUp') {\n      newDate.setDate(newDate.getDate() - 7);\n    } else if (ev.key === 'ArrowRight') {\n      newDate.setDate(newDate.getDate() + 1);\n    } else if (ev.key === 'ArrowDown') {\n      newDate.setDate(newDate.getDate() + 7);\n    } else if (ev.key === 'ArrowLeft') {\n      newDate.setDate(newDate.getDate() - 1);\n    }\n\n    if (newDate.getTime() !== focusedDate.getTime() && isValidated(newDate)) {\n      ev.preventDefault();\n      setFocusedDate(newDate);\n      setHoveredDate(newDate);\n      setShouldFocus(true);\n    }\n  };\n\n  var addMonth = function addMonth(toAdd) {\n    var newDate = new Date(focusedDate);\n    newDate.setMonth(newDate.getMonth() + toAdd);\n    return newDate;\n  };\n\n  var prevMonth = addMonth(-1);\n  var nextMonth = addMonth(1);\n  var focusedYear = focusedDate.getFullYear();\n  var focusedMonth = focusedDate.getMonth();\n  var calendar = React.useMemo(function () {\n    return buildCalendar(focusedYear, focusedMonth, weekStart, validators);\n  }, [focusedYear, focusedMonth, weekStart, validators]);\n\n  if (!focusedDateValidated) {\n    var toFocus = calendar.reduce(function (acc, cur) {\n      return [].concat(_toConsumableArray(acc), _toConsumableArray(cur));\n    }, []).filter(function (_ref) {\n      var date = _ref.date,\n          isValid = _ref.isValid;\n      return isValid && date.getMonth() === focusedMonth;\n    }).map(function (_ref2) {\n      var date = _ref2.date;\n      return {\n        date: date,\n        days: Math.abs(focusedDate.getTime() - date.getTime())\n      };\n    }).sort(function (o1, o2) {\n      return o1.days - o2.days;\n    }).map(function (_ref3) {\n      var date = _ref3.date;\n      return date;\n    })[0];\n\n    if (toFocus) {\n      setFocusedDate(toFocus);\n      setHoveredDate(toFocus);\n    }\n  }\n\n  var isHoveredDateValid = isValidated(hoveredDate);\n  var monthFormatted = monthFormat(focusedDate);\n  var yearFormatted = yearFormat(focusedDate);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.calendarMonth, className)\n  }, props), React.createElement(\"div\", {\n    className: styles.calendarMonthHeader\n  }, React.createElement(\"div\", {\n    className: css(styles.calendarMonthHeaderNavControl, styles.modifiers.prevMonth)\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": prevMonthAriaLabel,\n    onClick: function onClick() {\n      return onMonthClick(prevMonth);\n    }\n  }, React.createElement(AngleLeftIcon, {\n    \"aria-hidden\": true\n  }))), React.createElement(InputGroup, null, React.createElement(\"div\", {\n    className: styles.calendarMonthHeaderMonth\n  }, React.createElement(\"span\", {\n    id: hiddenMonthId,\n    hidden: true\n  }, \"Month\"), React.createElement(Select // Max width with \"September\"\n  , {\n    // Max width with \"September\"\n    width: \"140px\",\n    \"aria-labelledby\": hiddenMonthId,\n    isOpen: isSelectOpen,\n    onToggle: function onToggle() {\n      setIsSelectOpen(!isSelectOpen);\n      onSelectToggle(!isSelectOpen);\n    },\n    onSelect: function onSelect(_ev, monthNum) {\n      // When we put CalendarMonth in a Popover we want the Popover's onDocumentClick\n      // to see the SelectOption as a child so it doesn't close the Popover.\n      setTimeout(function () {\n        setIsSelectOpen(false);\n        onSelectToggle(false);\n        var newDate = new Date(focusedDate);\n        newDate.setMonth(Number(monthNum));\n        setFocusedDate(newDate);\n        setHoveredDate(newDate);\n        setShouldFocus(false);\n      }, 0);\n    },\n    variant: \"single\",\n    selections: monthFormatted\n  }, longMonths.map(function (longMonth, index) {\n    return React.createElement(SelectOption, {\n      key: index,\n      value: index,\n      isSelected: longMonth === monthFormatted\n    }, longMonth);\n  }))), React.createElement(\"div\", {\n    className: styles.calendarMonthHeaderYear\n  }, React.createElement(TextInput, {\n    \"aria-label\": yearInputAriaLabel,\n    type: \"number\",\n    value: yearFormatted,\n    onChange: function onChange(year) {\n      var newDate = new Date(focusedDate);\n      newDate.setFullYear(+year);\n      setFocusedDate(newDate);\n      setHoveredDate(newDate);\n      setShouldFocus(false);\n    }\n  }))), React.createElement(\"div\", {\n    className: css(styles.calendarMonthHeaderNavControl, styles.modifiers.nextMonth)\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": nextMonthAriaLabel,\n    onClick: function onClick() {\n      return onMonthClick(nextMonth);\n    }\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": true\n  })))), React.createElement(\"table\", {\n    className: styles.calendarMonthCalendar\n  }, React.createElement(\"thead\", {\n    className: styles.calendarMonthDays\n  }, React.createElement(\"tr\", null, calendar[0].map(function (_ref4, index) {\n    var date = _ref4.date;\n    return React.createElement(\"th\", {\n      key: index,\n      className: styles.calendarMonthDay,\n      scope: \"col\"\n    }, React.createElement(\"span\", {\n      className: \"pf-screen-reader\"\n    }, longWeekdayFormat(date)), React.createElement(\"span\", {\n      \"aria-hidden\": true\n    }, weekdayFormat(date)));\n  }))), React.createElement(\"tbody\", {\n    onKeyDown: onKeyDown\n  }, calendar.map(function (week, index) {\n    return React.createElement(\"tr\", {\n      key: index,\n      className: styles.calendarMonthDatesRow\n    }, week.map(function (_ref5, index) {\n      var date = _ref5.date,\n          isValid = _ref5.isValid;\n      var dayFormatted = dayFormat(date);\n      var isToday = isSameDate(date, today);\n      var isSelected = isValidDate(dateProp) && isSameDate(date, dateProp);\n      var isFocused = isSameDate(date, focusedDate);\n      var isAdjacentMonth = date.getMonth() !== focusedDate.getMonth();\n      var isRangeStart = isValidDate(rangeStart) && isSameDate(date, rangeStart);\n      var isInRange = false;\n      var isRangeEnd = false;\n\n      if (isValidDate(rangeStart) && isValidDate(dateProp)) {\n        isInRange = date > rangeStart && date < dateProp;\n        isRangeEnd = isSameDate(date, dateProp);\n      } else if (isValidDate(rangeStart) && isHoveredDateValid) {\n        if (hoveredDate > rangeStart || isSameDate(hoveredDate, rangeStart)) {\n          isInRange = date > rangeStart && date < hoveredDate;\n          isRangeEnd = isSameDate(date, hoveredDate);\n        } // Don't handle focused dates before start dates for now.\n        // Core would likely need new styles\n\n      }\n\n      return React.createElement(\"td\", {\n        key: index,\n        className: css(styles.calendarMonthDatesCell, isAdjacentMonth && styles.modifiers.adjacentMonth, isToday && styles.modifiers.current, (isSelected || isRangeStart) && styles.modifiers.selected, !isValid && styles.modifiers.disabled, (isInRange || isRangeStart || isRangeEnd) && styles.modifiers.inRange, isRangeStart && styles.modifiers.startRange, isRangeEnd && styles.modifiers.endRange)\n      }, React.createElement(\"button\", Object.assign({\n        className: css(styles.calendarMonthDate, isRangeEnd && styles.modifiers.hover, !isValid && styles.modifiers.disabled),\n        type: \"button\",\n        onClick: function onClick() {\n          return onChange(date);\n        },\n        onMouseOver: function onMouseOver() {\n          return setHoveredDate(date);\n        },\n        tabIndex: isFocused ? 0 : -1,\n        disabled: !isValid,\n        \"aria-label\": cellAriaLabel ? cellAriaLabel(date) : \"\".concat(dayFormatted, \" \").concat(monthFormatted, \" \").concat(yearFormatted)\n      }, isFocused && {\n        ref: focusRef\n      }), dayFormatted));\n    }));\n  }))));\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/CalendarMonth/CalendarMonth.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Button } from '../Button/Button';\nimport { Select, SelectOption } from '../Select';\nimport { InputGroup } from '../InputGroup';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/CalendarMonth/calendar-month';\nimport { getUniqueId } from '../../helpers/util';\n\nexport enum Weekday {\n  Sunday = 0,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday\n}\n\nexport interface CalendarFormat {\n  /** How to format months in Select */\n  monthFormat?: (date: Date) => React.ReactNode;\n  /** How to format week days in header */\n  weekdayFormat?: (date: Date) => React.ReactNode;\n  /** How to format days in header for screen readers */\n  longWeekdayFormat?: (date: Date) => React.ReactNode;\n  /** How to format days in buttons in table cells */\n  dayFormat?: (date: Date) => React.ReactNode;\n  /** If using the default formatters which locale to use. Undefined defaults to current locale. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation */\n  locale?: string;\n  /** Day of week that starts the week. 0 is Sunday, 6 is Saturday. */\n  weekStart?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | Weekday;\n  /** Which date to start range styles from */\n  rangeStart?: Date;\n  /** Aria-label for the previous month button */\n  prevMonthAriaLabel?: string;\n  /** Aria-label for the next month button */\n  nextMonthAriaLabel?: string;\n  /** Aria-label for the year input */\n  yearInputAriaLabel?: string;\n  /** Aria-label for the date cells */\n  cellAriaLabel?: (date: Date) => string;\n}\n\nexport interface CalendarProps extends CalendarFormat, Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Month/year to base other dates around */\n  date?: Date;\n  /** Callback when date is selected */\n  onChange?: (date: Date) => void;\n  /** Functions that returns if a date is valid and selectable */\n  validators?: ((date: Date) => boolean)[];\n  /** Classname to add to outer div */\n  className?: string;\n  /** @hide Internal prop to allow pressing escape in select menu to not close popover */\n  onSelectToggle?: (open: boolean) => void;\n  /** Flag to set browser focus on the passed date **/\n  isDateFocused?: boolean;\n}\n\n// Must be numeric given current header design\nconst yearFormat = (date: Date) => date.getFullYear();\n\nconst buildCalendar = (year: number, month: number, weekStart: number, validators: ((date: Date) => boolean)[]) => {\n  const defaultDate = new Date(year, month);\n  const firstDayOfWeek = new Date(defaultDate);\n  firstDayOfWeek.setDate(firstDayOfWeek.getDate() - firstDayOfWeek.getDay() + weekStart);\n  // We will show a maximum of 6 weeks like Google calendar\n  // Assume we just want the numbers for now...\n  const calendarWeeks = [];\n  for (let i = 0; i < 6; i++) {\n    const week = [];\n    for (let j = 0; j < 7; j++) {\n      const date = new Date(firstDayOfWeek);\n      week.push({\n        date,\n        isValid: validators.every(validator => validator(date))\n      });\n      firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);\n    }\n    calendarWeeks.push(week);\n    if (firstDayOfWeek.getMonth() !== defaultDate.getMonth()) {\n      break;\n    }\n  }\n\n  return calendarWeeks;\n};\n\nconst isSameDate = (d1: Date, d2: Date) =>\n  d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();\n\nexport const isValidDate = (date: Date) => Boolean(date && !isNaN(date as any));\n\nconst today = new Date();\n\nexport const CalendarMonth = ({\n  date: dateProp,\n  locale = undefined,\n  monthFormat = date => date.toLocaleDateString(locale, { month: 'long' }),\n  weekdayFormat = date => date.toLocaleDateString(locale, { weekday: 'narrow' }),\n  longWeekdayFormat = date => date.toLocaleDateString(locale, { weekday: 'long' }),\n  dayFormat = date => date.getDate(),\n  weekStart = 0, // Use the American Sunday as a default\n  onChange = () => {},\n  validators = [() => true],\n  className,\n  onSelectToggle = () => {},\n  rangeStart,\n  prevMonthAriaLabel = 'Previous month',\n  nextMonthAriaLabel = 'Next month',\n  yearInputAriaLabel = 'Select year',\n  cellAriaLabel,\n  isDateFocused = false,\n  ...props\n}: CalendarProps) => {\n  const longMonths = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(monthNum => new Date(1990, monthNum)).map(monthFormat);\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n  // eslint-disable-next-line prefer-const\n  const [focusedDate, setFocusedDate] = React.useState(() => {\n    const initDate = new Date(dateProp);\n    if (isValidDate(initDate)) {\n      return initDate;\n    } else {\n      if (isValidDate(rangeStart)) {\n        return rangeStart;\n      } else {\n        return today;\n      }\n    }\n  });\n  const [hoveredDate, setHoveredDate] = React.useState(new Date(focusedDate));\n  const focusRef = React.useRef<HTMLButtonElement>();\n  const [hiddenMonthId] = React.useState(getUniqueId('hidden-month-span'));\n  const [shouldFocus, setShouldFocus] = React.useState(false);\n\n  const isValidated = (date: Date) => validators.every(validator => validator(date));\n  const focusedDateValidated = isValidated(focusedDate);\n  useEffect(() => {\n    if (isValidDate(dateProp) && !isSameDate(focusedDate, dateProp)) {\n      setFocusedDate(dateProp);\n    } else if (!dateProp) {\n      setFocusedDate(today);\n    }\n  }, [dateProp]);\n\n  useEffect(() => {\n    // Calendar month should not be focused on page load\n    // Datepicker should place focus in calendar month when opened\n    if ((shouldFocus || isDateFocused) && focusedDateValidated && focusRef.current) {\n      focusRef.current.focus();\n    } else {\n      setShouldFocus(true);\n    }\n  }, [focusedDate, isDateFocused, focusedDateValidated, focusRef]);\n\n  const onMonthClick = (newDate: Date) => {\n    setFocusedDate(newDate);\n    setHoveredDate(newDate);\n    setShouldFocus(false);\n  };\n\n  const onKeyDown = (ev: React.KeyboardEvent<HTMLTableSectionElement>) => {\n    const newDate = new Date(focusedDate);\n    if (ev.key === 'ArrowUp') {\n      newDate.setDate(newDate.getDate() - 7);\n    } else if (ev.key === 'ArrowRight') {\n      newDate.setDate(newDate.getDate() + 1);\n    } else if (ev.key === 'ArrowDown') {\n      newDate.setDate(newDate.getDate() + 7);\n    } else if (ev.key === 'ArrowLeft') {\n      newDate.setDate(newDate.getDate() - 1);\n    }\n    if (newDate.getTime() !== focusedDate.getTime() && isValidated(newDate)) {\n      ev.preventDefault();\n      setFocusedDate(newDate);\n      setHoveredDate(newDate);\n      setShouldFocus(true);\n    }\n  };\n\n  const addMonth = (toAdd: -1 | 1) => {\n    const newDate = new Date(focusedDate);\n    newDate.setMonth(newDate.getMonth() + toAdd);\n    return newDate;\n  };\n\n  const prevMonth = addMonth(-1);\n  const nextMonth = addMonth(1);\n  const focusedYear = focusedDate.getFullYear();\n  const focusedMonth = focusedDate.getMonth();\n  const calendar = React.useMemo(() => buildCalendar(focusedYear, focusedMonth, weekStart, validators), [\n    focusedYear,\n    focusedMonth,\n    weekStart,\n    validators\n  ]);\n  if (!focusedDateValidated) {\n    const toFocus = calendar\n      .reduce((acc, cur) => [...acc, ...cur], [])\n      .filter(({ date, isValid }) => isValid && date.getMonth() === focusedMonth)\n      .map(({ date }) => ({ date, days: Math.abs(focusedDate.getTime() - date.getTime()) }))\n      .sort((o1, o2) => o1.days - o2.days)\n      .map(({ date }) => date)[0];\n    if (toFocus) {\n      setFocusedDate(toFocus);\n      setHoveredDate(toFocus);\n    }\n  }\n  const isHoveredDateValid = isValidated(hoveredDate);\n  const monthFormatted = monthFormat(focusedDate);\n  const yearFormatted = yearFormat(focusedDate);\n  return (\n    <div className={css(styles.calendarMonth, className)} {...props}>\n      <div className={styles.calendarMonthHeader}>\n        <div className={css(styles.calendarMonthHeaderNavControl, styles.modifiers.prevMonth)}>\n          <Button variant=\"plain\" aria-label={prevMonthAriaLabel} onClick={() => onMonthClick(prevMonth)}>\n            <AngleLeftIcon aria-hidden={true} />\n          </Button>\n        </div>\n        <InputGroup>\n          <div className={styles.calendarMonthHeaderMonth}>\n            <span id={hiddenMonthId} hidden>\n              Month\n            </span>\n            <Select\n              // Max width with \"September\"\n              width=\"140px\"\n              aria-labelledby={hiddenMonthId}\n              isOpen={isSelectOpen}\n              onToggle={() => {\n                setIsSelectOpen(!isSelectOpen);\n                onSelectToggle(!isSelectOpen);\n              }}\n              onSelect={(_ev, monthNum) => {\n                // When we put CalendarMonth in a Popover we want the Popover's onDocumentClick\n                // to see the SelectOption as a child so it doesn't close the Popover.\n                setTimeout(() => {\n                  setIsSelectOpen(false);\n                  onSelectToggle(false);\n                  const newDate = new Date(focusedDate);\n                  newDate.setMonth(Number(monthNum as string));\n                  setFocusedDate(newDate);\n                  setHoveredDate(newDate);\n                  setShouldFocus(false);\n                }, 0);\n              }}\n              variant=\"single\"\n              selections={monthFormatted}\n            >\n              {longMonths.map((longMonth, index) => (\n                <SelectOption key={index} value={index} isSelected={longMonth === monthFormatted}>\n                  {longMonth}\n                </SelectOption>\n              ))}\n            </Select>\n          </div>\n          <div className={styles.calendarMonthHeaderYear}>\n            <TextInput\n              aria-label={yearInputAriaLabel}\n              type=\"number\"\n              value={yearFormatted}\n              onChange={year => {\n                const newDate = new Date(focusedDate);\n                newDate.setFullYear(+year);\n                setFocusedDate(newDate);\n                setHoveredDate(newDate);\n                setShouldFocus(false);\n              }}\n            />\n          </div>\n        </InputGroup>\n        <div className={css(styles.calendarMonthHeaderNavControl, styles.modifiers.nextMonth)}>\n          <Button variant=\"plain\" aria-label={nextMonthAriaLabel} onClick={() => onMonthClick(nextMonth)}>\n            <AngleRightIcon aria-hidden={true} />\n          </Button>\n        </div>\n      </div>\n      <table className={styles.calendarMonthCalendar}>\n        <thead className={styles.calendarMonthDays}>\n          <tr>\n            {calendar[0].map(({ date }, index) => (\n              <th key={index} className={styles.calendarMonthDay} scope=\"col\">\n                <span className=\"pf-screen-reader\">{longWeekdayFormat(date)}</span>\n                <span aria-hidden>{weekdayFormat(date)}</span>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody onKeyDown={onKeyDown}>\n          {calendar.map((week, index) => (\n            <tr key={index} className={styles.calendarMonthDatesRow}>\n              {week.map(({ date, isValid }, index) => {\n                const dayFormatted = dayFormat(date);\n                const isToday = isSameDate(date, today);\n                const isSelected = isValidDate(dateProp) && isSameDate(date, dateProp);\n                const isFocused = isSameDate(date, focusedDate);\n                const isAdjacentMonth = date.getMonth() !== focusedDate.getMonth();\n                const isRangeStart = isValidDate(rangeStart) && isSameDate(date, rangeStart);\n                let isInRange = false;\n                let isRangeEnd = false;\n                if (isValidDate(rangeStart) && isValidDate(dateProp)) {\n                  isInRange = date > rangeStart && date < dateProp;\n                  isRangeEnd = isSameDate(date, dateProp);\n                } else if (isValidDate(rangeStart) && isHoveredDateValid) {\n                  if (hoveredDate > rangeStart || isSameDate(hoveredDate, rangeStart)) {\n                    isInRange = date > rangeStart && date < hoveredDate;\n                    isRangeEnd = isSameDate(date, hoveredDate);\n                  }\n                  // Don't handle focused dates before start dates for now.\n                  // Core would likely need new styles\n                }\n\n                return (\n                  <td\n                    key={index}\n                    className={css(\n                      styles.calendarMonthDatesCell,\n                      isAdjacentMonth && styles.modifiers.adjacentMonth,\n                      isToday && styles.modifiers.current,\n                      (isSelected || isRangeStart) && styles.modifiers.selected,\n                      !isValid && styles.modifiers.disabled,\n                      (isInRange || isRangeStart || isRangeEnd) && styles.modifiers.inRange,\n                      isRangeStart && styles.modifiers.startRange,\n                      isRangeEnd && styles.modifiers.endRange\n                    )}\n                  >\n                    <button\n                      className={css(\n                        styles.calendarMonthDate,\n                        isRangeEnd && styles.modifiers.hover,\n                        !isValid && styles.modifiers.disabled\n                      )}\n                      type=\"button\"\n                      onClick={() => onChange(date)}\n                      onMouseOver={() => setHoveredDate(date)}\n                      tabIndex={isFocused ? 0 : -1}\n                      disabled={!isValid}\n                      aria-label={\n                        cellAriaLabel ? cellAriaLabel(date) : `${dayFormatted} ${monthFormatted} ${yearFormatted}`\n                      }\n                      {...(isFocused && { ref: focusRef })}\n                    >\n                      {dayFormatted}\n                    </button>\n                  </td>\n                );\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}