{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport var ExpandableSectionToggle = function ExpandableSectionToggle(_a) {\n  var children = _a.children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$isExpanded = _a.isExpanded,\n      isExpanded = _a$isExpanded === void 0 ? false : _a$isExpanded,\n      onToggle = _a.onToggle,\n      contentId = _a.contentId,\n      _a$direction = _a.direction,\n      direction = _a$direction === void 0 ? 'down' : _a$direction,\n      props = __rest(_a, [\"children\", \"className\", \"isExpanded\", \"onToggle\", \"contentId\", \"direction\"]);\n\n  return React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.expandableSection, isExpanded && styles.modifiers.expanded, styles.modifiers.detached, className)\n  }), React.createElement(\"button\", {\n    className: css(styles.expandableSectionToggle),\n    type: \"button\",\n    \"aria-expanded\": isExpanded,\n    \"aria-controls\": contentId,\n    onClick: function onClick() {\n      return onToggle(!isExpanded);\n    }\n  }, React.createElement(\"span\", {\n    className: css(styles.expandableSectionToggleIcon, isExpanded && direction === 'up' && styles.modifiers.expandTop)\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": true\n  })), React.createElement(\"span\", {\n    className: css(styles.expandableSectionToggleText)\n  }, children)));\n};\nExpandableSectionToggle.displayName = 'ExpandableSectionToggle';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/ExpandableSection/ExpandableSectionToggle.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,8EAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,cAAP,MAA2B,yDAA3B;AAiBA,OAAO,IAAM,uBAAuB,GAA0D,SAAjF,uBAAiF,CAAC,EAAD,EAQ3D;AAR4D,MAC7F,QAD6F,GAM3E,EAN2E,CAC7F,QAD6F;AAAA,qBAM3E,EAN2E,CAE7F,SAF6F;AAAA,MAE7F,SAF6F,6BAEjF,EAFiF;AAAA,sBAM3E,EAN2E,CAG7F,UAH6F;AAAA,MAG7F,UAH6F,8BAGhF,KAHgF;AAAA,MAI7F,QAJ6F,GAM3E,EAN2E,CAI7F,QAJ6F;AAAA,MAK7F,SAL6F,GAM3E,EAN2E,CAK7F,SAL6F;AAAA,qBAM3E,EAN2E,CAM7F,SAN6F;AAAA,MAM7F,SAN6F,6BAMjF,MANiF;AAAA,MAO1F,KAP0F,GAOrF,MAAA,CAAA,EAAA,EAPqF,CAAA,UAAA,EAAA,WAAA,EAAA,YAAA,EAAA,UAAA,EAAA,WAAA,EAAA,WAAA,CAOrF,CAPqF;;AAQ3D,SAClC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACM,KADN,EACW;AACT,IAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,iBADK,EAEZ,UAAU,IAAI,MAAM,CAAC,SAAP,CAAiB,QAFnB,EAGZ,MAAM,CAAC,SAAP,CAAiB,QAHL,EAIZ,SAJY;AADL,GADX,CAAA,EASE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACE,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,uBAAR,CADhB;AAEE,IAAA,IAAI,EAAC,QAFP;AAEe,qBACE,UAHjB;AAG2B,qBACV,SAJjB;AAKE,IAAA,OAAO,EAAE;AAAA,aAAM,QAAQ,CAAC,CAAC,UAAF,CAAd;AAAA;AALX,GAAA,EAOE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACE,IAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,2BADK,EAEZ,UAAU,IAAI,SAAS,KAAK,IAA5B,IAAoC,MAAM,CAAC,SAAP,CAAiB,SAFzC;AADhB,GAAA,EAME,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AAAA,mBAAA;AAAA,GAAf,CANF,CAPF,EAeE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,2BAAR;AAApB,GAAA,EAA2D,QAA3D,CAfF,CATF,CADkC;AA4BnC,CApCM;AAsCP,uBAAuB,CAAC,WAAxB,GAAsC,yBAAtC","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\n\nexport interface ExpandableSectionToggleProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the expandable toggle. */\n  children?: React.ReactNode;\n  /** Additional classes added to the expandable toggle. */\n  className?: string;\n  /** Flag indicating if the expandable section is expanded. */\n  isExpanded?: boolean;\n  /** Callback function to toggle the expandable content. */\n  onToggle?: (isExpanded: boolean) => void;\n  /** ID of the toggle's respective expandable section content. */\n  contentId?: string;\n  /** Direction the toggle arrow should point when the expandable section is expanded. */\n  direction?: 'up' | 'down';\n}\n\nexport const ExpandableSectionToggle: React.FunctionComponent<ExpandableSectionToggleProps> = ({\n  children,\n  className = '',\n  isExpanded = false,\n  onToggle,\n  contentId,\n  direction = 'down',\n  ...props\n}: ExpandableSectionToggleProps) => (\n  <div\n    {...props}\n    className={css(\n      styles.expandableSection,\n      isExpanded && styles.modifiers.expanded,\n      styles.modifiers.detached,\n      className\n    )}\n  >\n    <button\n      className={css(styles.expandableSectionToggle)}\n      type=\"button\"\n      aria-expanded={isExpanded}\n      aria-controls={contentId}\n      onClick={() => onToggle(!isExpanded)}\n    >\n      <span\n        className={css(\n          styles.expandableSectionToggleIcon,\n          isExpanded && direction === 'up' && styles.modifiers.expandTop\n        )}\n      >\n        <AngleRightIcon aria-hidden />\n      </span>\n      <span className={css(styles.expandableSectionToggleText)}>{children}</span>\n    </button>\n  </div>\n);\n\nExpandableSectionToggle.displayName = 'ExpandableSectionToggle';\n"]},"metadata":{},"sourceType":"module"}