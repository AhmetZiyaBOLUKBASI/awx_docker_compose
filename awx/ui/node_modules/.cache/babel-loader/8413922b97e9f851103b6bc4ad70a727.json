{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tile/tile';\nimport { css } from '@patternfly/react-styles';\nexport var Tile = function Tile(_a) {\n  var children = _a.children,\n      title = _a.title,\n      icon = _a.icon,\n      isStacked = _a.isStacked,\n      isSelected = _a.isSelected,\n      isDisabled = _a.isDisabled,\n      isDisplayLarge = _a.isDisplayLarge,\n      className = _a.className,\n      props = __rest(_a, [\"children\", \"title\", \"icon\", \"isStacked\", \"isSelected\", \"isDisabled\", \"isDisplayLarge\", \"className\"]);\n\n  return React.createElement(\"div\", Object.assign({\n    role: \"option\",\n    \"aria-selected\": isSelected\n  }, isDisabled && {\n    'aria-disabled': isDisabled\n  }, {\n    className: css(styles.tile, isSelected && styles.modifiers.selected, isDisabled && styles.modifiers.disabled, isDisplayLarge && styles.modifiers.displayLg, className),\n    tabIndex: 0\n  }, props), React.createElement(\"div\", {\n    className: css(styles.tileHeader, isStacked && styles.modifiers.stacked)\n  }, icon && React.createElement(\"div\", {\n    className: css(styles.tileIcon)\n  }, icon), React.createElement(\"div\", {\n    className: css(styles.tileTitle)\n  }, title)), children && React.createElement(\"div\", {\n    className: css(styles.tileBody)\n  }, children));\n};\nTile.displayName = 'Tile';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Tile/Tile.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,mDAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AAqBA,OAAO,IAAM,IAAI,GAAuC,SAA3C,IAA2C,CAAC,EAAD,EAUxC;AAVyC,MACvD,QADuD,GAQ9C,EAR8C,CACvD,QADuD;AAAA,MAEvD,KAFuD,GAQ9C,EAR8C,CAEvD,KAFuD;AAAA,MAGvD,IAHuD,GAQ9C,EAR8C,CAGvD,IAHuD;AAAA,MAIvD,SAJuD,GAQ9C,EAR8C,CAIvD,SAJuD;AAAA,MAKvD,UALuD,GAQ9C,EAR8C,CAKvD,UALuD;AAAA,MAMvD,UANuD,GAQ9C,EAR8C,CAMvD,UANuD;AAAA,MAOvD,cAPuD,GAQ9C,EAR8C,CAOvD,cAPuD;AAAA,MAQvD,SARuD,GAQ9C,EAR8C,CAQvD,SARuD;AAAA,MASpD,KAToD,GAS/C,MAAA,CAAA,EAAA,EAT+C,CAAA,UAAA,EAAA,OAAA,EAAA,MAAA,EAAA,WAAA,EAAA,YAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,WAAA,CAS/C,CAT+C;;AAUxC,SACf,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,IAAI,EAAC,QADP;AACe,qBACE;AAFjB,GAAA,EAGO,UAAU,IAAI;AAAE,qBAAiB;AAAnB,GAHrB,EAGqD;AACnD,IAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,IADK,EAEZ,UAAU,IAAI,MAAM,CAAC,SAAP,CAAiB,QAFnB,EAGZ,UAAU,IAAI,MAAM,CAAC,SAAP,CAAiB,QAHnB,EAIZ,cAAc,IAAI,MAAM,CAAC,SAAP,CAAiB,SAJvB,EAKZ,SALY,CADqC;AAQnD,IAAA,QAAQ,EAAE;AARyC,GAHrD,EAYM,KAZN,CAAA,EAcE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,UAAR,EAAoB,SAAS,IAAI,MAAM,CAAC,SAAP,CAAiB,OAAlD;AAAnB,GAAA,EACG,IAAI,IAAI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,QAAR;AAAnB,GAAA,EAAuC,IAAvC,CADX,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,SAAR;AAAnB,GAAA,EAAwC,KAAxC,CAFF,CAdF,EAkBG,QAAQ,IAAI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,QAAR;AAAnB,GAAA,EAAuC,QAAvC,CAlBf,CADe;AAqBhB,CA/BM;AAgCP,IAAI,CAAC,WAAL,GAAmB,MAAnB","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tile/tile';\nimport { css } from '@patternfly/react-styles';\n\nexport interface TileProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the banner */\n  children?: React.ReactNode;\n  /** Additional classes added to the banner */\n  className?: string;\n  /** Title of the tile */\n  title: string;\n  /** Icon in the tile title */\n  icon?: React.ReactNode;\n  /** Flag indicating if the tile is selected */\n  isSelected?: boolean;\n  /** Flag indicating if the tile is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating if the tile header is stacked */\n  isStacked?: boolean;\n  /** Flag indicating if the stacked tile icon is large */\n  isDisplayLarge?: boolean;\n}\n\nexport const Tile: React.FunctionComponent<TileProps> = ({\n  children,\n  title,\n  icon,\n  isStacked,\n  isSelected,\n  isDisabled,\n  isDisplayLarge,\n  className,\n  ...props\n}: TileProps) => (\n  <div\n    role=\"option\"\n    aria-selected={isSelected}\n    {...(isDisabled && { 'aria-disabled': isDisabled })}\n    className={css(\n      styles.tile,\n      isSelected && styles.modifiers.selected,\n      isDisabled && styles.modifiers.disabled,\n      isDisplayLarge && styles.modifiers.displayLg,\n      className\n    )}\n    tabIndex={0}\n    {...props}\n  >\n    <div className={css(styles.tileHeader, isStacked && styles.modifiers.stacked)}>\n      {icon && <div className={css(styles.tileIcon)}>{icon}</div>}\n      <div className={css(styles.tileTitle)}>{title}</div>\n    </div>\n    {children && <div className={css(styles.tileBody)}>{children}</div>}\n  </div>\n);\nTile.displayName = 'Tile';\n"]},"metadata":{},"sourceType":"module"}