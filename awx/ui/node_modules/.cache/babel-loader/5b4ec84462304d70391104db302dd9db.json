{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _styled from\"styled-components\";import{i18n}from\"@lingui/core\";import React from'react';import{useField}from'formik';import{FormGroup,Alert}from'@patternfly/react-core';import{required}from'util/validators';import AnsibleSelect from'components/AnsibleSelect';import FormField from'components/FormField';import Popover from'components/Popover';import useBrandName from'hooks/useBrandName';import projectHelpStrings from'../Project.helptext';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var _StyledAlert=_styled(Alert).withConfig({displayName:\"ManualSubForm___StyledAlert\",componentId:\"sc-1c5mnvn-0\"})([\"grid-column:1/-1\"]);var ManualSubForm=function ManualSubForm(_ref){var localPath=_ref.localPath,project_base_dir=_ref.project_base_dir,project_local_paths=_ref.project_local_paths;var brandName=useBrandName();var localPaths=_toConsumableArray(new Set([].concat(_toConsumableArray(project_local_paths),[localPath])));var options=[{value:'',key:'',label:/*i18n*/i18n._(\"Choose a Playbook Directory\")}].concat(_toConsumableArray(localPaths.filter(function(path){return path;}).map(function(path){return{value:path,key:path,label:path};})));var _useField=useField({name:'local_path',validate:required(/*i18n*/i18n._(\"Select a value for this field\"))}),_useField2=_slicedToArray(_useField,3),pathField=_useField2[0],pathMeta=_useField2[1],pathHelpers=_useField2[2];return/*#__PURE__*/_jsxs(_Fragment,{children:[options.length===1&&/*#__PURE__*/_jsx(_StyledAlert,{title:/*i18n*/i18n._(\"WARNING:\"),variant:\"warning\",isInline:true,ouiaId:\"project-manual-subform-alert\",children:/*i18n*/i18n._(\"There are no available playbook directories in {project_base_dir}.\\nEither that directory is empty, or all of the contents are already\\nassigned to other projects. Create a new directory there and make\\nsure the playbook files can be read by the \\\"awx\\\" system user,\\nor have {brandName} directly retrieve your playbooks from\\nsource control using the Source Control Type option above.\",{project_base_dir:project_base_dir,brandName:brandName})}),/*#__PURE__*/_jsx(FormField,{id:\"project-base-dir\",label:/*i18n*/i18n._(\"Project Base Path\"),name:\"base_dir\",type:\"text\",isReadOnly:true,tooltip:projectHelpStrings.projectBasePath(brandName)}),/*#__PURE__*/_jsx(FormGroup,{fieldId:\"project-local-path\",helperTextInvalid:pathMeta.error,isRequired:true,validated:!pathMeta.touched||!pathMeta.error?'default':'error',label:/*i18n*/i18n._(\"Playbook Directory\"),labelIcon:/*#__PURE__*/_jsx(Popover,{content:projectHelpStrings.projectLocalPath}),children:/*#__PURE__*/_jsx(AnsibleSelect,_objectSpread(_objectSpread({},pathField),{},{id:\"local_path\",data:options,onChange:function onChange(event,value){pathHelpers.setValue(value);}}))})]});};export default ManualSubForm;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Project/shared/ProjectSubForms/ManualSubForm.js"],"names":["React","useField","FormGroup","Alert","required","AnsibleSelect","FormField","Popover","useBrandName","projectHelpStrings","ManualSubForm","localPath","project_base_dir","project_local_paths","brandName","localPaths","Set","options","value","key","label","filter","path","map","name","validate","pathField","pathMeta","pathHelpers","length","projectBasePath","error","touched","projectLocalPath","event","setValue"],"mappings":"kYACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,QAAT,KAAyB,QAAzB,CACA,OAASC,SAAT,CAAoBC,KAApB,KAAiC,wBAAjC,CACA,OAASC,QAAT,KAAyB,iBAAzB,CACA,MAAOC,CAAAA,aAAP,KAA0B,0BAA1B,CACA,MAAOC,CAAAA,SAAP,KAAsB,sBAAtB,CACA,MAAOC,CAAAA,OAAP,KAAoB,oBAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,oBAAzB,CACA,MAAOC,CAAAA,kBAAP,KAA+B,qBAA/B,C,sRAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAIhB,IAHJC,CAAAA,SAGI,MAHJA,SAGI,CAFJC,gBAEI,MAFJA,gBAEI,CADJC,mBACI,MADJA,mBACI,CACJ,GAAMC,CAAAA,SAAS,CAAGN,YAAY,EAA9B,CACA,GAAMO,CAAAA,UAAU,oBAAO,GAAIC,CAAAA,GAAJ,8BAAYH,mBAAZ,GAAiCF,SAAjC,GAAP,CAAhB,CACA,GAAMM,CAAAA,OAAO,EACX,CACEC,KAAK,CAAE,EADT,CAEEC,GAAG,CAAE,EAFP,CAGEC,KAAK,SAAE,qCAHT,CADW,4BAMRL,UAAU,CACVM,MADA,CACO,SAACC,IAAD,QAAUA,CAAAA,IAAV,EADP,EAEAC,GAFA,CAEI,SAACD,IAAD,QAAW,CACdJ,KAAK,CAAEI,IADO,CAEdH,GAAG,CAAEG,IAFS,CAGdF,KAAK,CAAEE,IAHO,CAAX,EAFJ,CANQ,EAAb,CAcA,cAA2CrB,QAAQ,CAAC,CAClDuB,IAAI,CAAE,YAD4C,CAElDC,QAAQ,CAAErB,QAAQ,SAAC,uCAAD,CAFgC,CAAD,CAAnD,wCAAOsB,SAAP,eAAkBC,QAAlB,eAA4BC,WAA5B,eAKA,mBACE,2BACGX,OAAO,CAACY,MAAR,GAAmB,CAAnB,eACC,mBACE,KAAK,SAAE,kBADT,CAGE,OAAO,CAAC,SAHV,CAIE,QAAQ,KAJV,CAKE,MAAM,CAAC,8BALT,kBAOG,6ZACkDjB,gBADlD,WAKWE,SALX,EAPH,EAFJ,cAkBE,KAAC,SAAD,EACE,EAAE,CAAC,kBADL,CAEE,KAAK,SAAE,2BAFT,CAGE,IAAI,CAAC,UAHP,CAIE,IAAI,CAAC,MAJP,CAKE,UAAU,KALZ,CAME,OAAO,CAAEL,kBAAkB,CAACqB,eAAnB,CAAmChB,SAAnC,CANX,EAlBF,cA0BE,KAAC,SAAD,EACE,OAAO,CAAC,oBADV,CAEE,iBAAiB,CAAEa,QAAQ,CAACI,KAF9B,CAGE,UAAU,KAHZ,CAIE,SAAS,CAAE,CAACJ,QAAQ,CAACK,OAAV,EAAqB,CAACL,QAAQ,CAACI,KAA/B,CAAuC,SAAvC,CAAmD,OAJhE,CAKE,KAAK,SAAE,4BALT,CAME,SAAS,cAAE,KAAC,OAAD,EAAS,OAAO,CAAEtB,kBAAkB,CAACwB,gBAArC,EANb,uBAQE,KAAC,aAAD,gCACMP,SADN,MAEE,EAAE,CAAC,YAFL,CAGE,IAAI,CAAET,OAHR,CAIE,QAAQ,CAAE,kBAACiB,KAAD,CAAQhB,KAAR,CAAkB,CAC1BU,WAAW,CAACO,QAAZ,CAAqBjB,KAArB,EACD,CANH,GARF,EA1BF,GADF,CA8CD,CAxED,CA0EA,cAAeR,CAAAA,aAAf","sourcesContent":["import 'styled-components/macro';\nimport React from 'react';\nimport { t } from '@lingui/macro';\nimport { useField } from 'formik';\nimport { FormGroup, Alert } from '@patternfly/react-core';\nimport { required } from 'util/validators';\nimport AnsibleSelect from 'components/AnsibleSelect';\nimport FormField from 'components/FormField';\nimport Popover from 'components/Popover';\nimport useBrandName from 'hooks/useBrandName';\nimport projectHelpStrings from '../Project.helptext';\n\nconst ManualSubForm = ({\n  localPath,\n  project_base_dir,\n  project_local_paths,\n}) => {\n  const brandName = useBrandName();\n  const localPaths = [...new Set([...project_local_paths, localPath])];\n  const options = [\n    {\n      value: '',\n      key: '',\n      label: t`Choose a Playbook Directory`,\n    },\n    ...localPaths\n      .filter((path) => path)\n      .map((path) => ({\n        value: path,\n        key: path,\n        label: path,\n      })),\n  ];\n  const [pathField, pathMeta, pathHelpers] = useField({\n    name: 'local_path',\n    validate: required(t`Select a value for this field`),\n  });\n\n  return (\n    <>\n      {options.length === 1 && (\n        <Alert\n          title={t`WARNING: `}\n          css=\"grid-column: 1/-1\"\n          variant=\"warning\"\n          isInline\n          ouiaId=\"project-manual-subform-alert\"\n        >\n          {t`\n            There are no available playbook directories in ${project_base_dir}.\n            Either that directory is empty, or all of the contents are already\n            assigned to other projects. Create a new directory there and make\n            sure the playbook files can be read by the \"awx\" system user,\n            or have ${brandName} directly retrieve your playbooks from\n            source control using the Source Control Type option above.`}\n        </Alert>\n      )}\n      <FormField\n        id=\"project-base-dir\"\n        label={t`Project Base Path`}\n        name=\"base_dir\"\n        type=\"text\"\n        isReadOnly\n        tooltip={projectHelpStrings.projectBasePath(brandName)}\n      />\n      <FormGroup\n        fieldId=\"project-local-path\"\n        helperTextInvalid={pathMeta.error}\n        isRequired\n        validated={!pathMeta.touched || !pathMeta.error ? 'default' : 'error'}\n        label={t`Playbook Directory`}\n        labelIcon={<Popover content={projectHelpStrings.projectLocalPath} />}\n      >\n        <AnsibleSelect\n          {...pathField}\n          id=\"local_path\"\n          data={options}\n          onChange={(event, value) => {\n            pathHelpers.setValue(value);\n          }}\n        />\n      </FormGroup>\n    </>\n  );\n};\n\nexport default ManualSubForm;\n"]},"metadata":{},"sourceType":"module"}