{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _taggedTemplateLiteral from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject;import{i18n}from\"@lingui/core\";import React from'react';import{useField}from'formik';import{DatePicker,isValidDate,yyyyMMddFormat,TimePicker,FormGroup}from'@patternfly/react-core';import styled from'styled-components';import{required,validateTime,combine}from'util/validators';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var DateTimeGroup=styled.span(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n\"])));function DateTimePicker(_ref){var dateFieldName=_ref.dateFieldName,timeFieldName=_ref.timeFieldName,label=_ref.label;var _useField=useField({name:dateFieldName,validate:combine([required(null),isValidDate])}),_useField2=_slicedToArray(_useField,3),dateField=_useField2[0],dateMeta=_useField2[1],dateHelpers=_useField2[2];var _useField3=useField({name:timeFieldName,validate:combine([required(null),validateTime()])}),_useField4=_slicedToArray(_useField3,3),timeField=_useField4[0],timeMeta=_useField4[1],timeHelpers=_useField4[2];var onDateChange=function onDateChange(inputDate,newDate){dateHelpers.setTouched();if(isValidDate(newDate)&&inputDate===yyyyMMddFormat(newDate)){dateHelpers.setValue(inputDate);}};return/*#__PURE__*/_jsx(FormGroup,{fieldId:\"schedule-\".concat(label),\"data-cy\":\"schedule-\".concat(label),helperTextInvalid:dateMeta.error||timeMeta.error,isRequired:true,validated:(!dateMeta.touched||!dateMeta.error)&&(!timeMeta.touched||!timeMeta.error)?'default':'error',label:label,children:/*#__PURE__*/_jsxs(DateTimeGroup,{children:[/*#__PURE__*/_jsx(DatePicker,_objectSpread(_objectSpread({\"aria-label\":dateFieldName.startsWith('start')?/*i18n*/i18n._(\"Start date\"):/*i18n*/i18n._(\"End date\")},dateField),{},{value:dateField.value.split('T')[0],onChange:onDateChange})),/*#__PURE__*/_jsx(TimePicker,_objectSpread(_objectSpread({placeholder:\"hh:mm AM/PM\",stepMinutes:15,\"aria-label\":timeFieldName.startsWith('start')?/*i18n*/i18n._(\"Start time\"):/*i18n*/i18n._(\"End time\"),time:timeField.value},timeField),{},{onChange:function onChange(time){return timeHelpers.setValue(time);}}))]})});}export default DateTimePicker;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/Schedule/shared/DateTimePicker.js"],"names":["React","useField","DatePicker","isValidDate","yyyyMMddFormat","TimePicker","FormGroup","styled","required","validateTime","combine","DateTimeGroup","span","DateTimePicker","dateFieldName","timeFieldName","label","name","validate","dateField","dateMeta","dateHelpers","timeField","timeMeta","timeHelpers","onDateChange","inputDate","newDate","setTouched","setValue","error","touched","startsWith","value","split","time"],"mappings":"uXAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,QAAT,KAAyB,QAAzB,CACA,OACEC,UADF,CAEEC,WAFF,CAGEC,cAHF,CAIEC,UAJF,CAKEC,SALF,KAMO,wBANP,CAOA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,QAAT,CAAmBC,YAAnB,CAAiCC,OAAjC,KAAgD,iBAAhD,C,wFAEA,GAAMC,CAAAA,aAAa,CAAGJ,MAAM,CAACK,IAAV,qFAAnB,CAGA,QAASC,CAAAA,cAAT,MAAiE,IAAvCC,CAAAA,aAAuC,MAAvCA,aAAuC,CAAxBC,aAAwB,MAAxBA,aAAwB,CAATC,KAAS,MAATA,KAAS,CAC/D,cAA2Cf,QAAQ,CAAC,CAClDgB,IAAI,CAAEH,aAD4C,CAElDI,QAAQ,CAAER,OAAO,CAAC,CAACF,QAAQ,CAAC,IAAD,CAAT,CAAiBL,WAAjB,CAAD,CAFiC,CAAD,CAAnD,wCAAOgB,SAAP,eAAkBC,QAAlB,eAA4BC,WAA5B,eAIA,eAA2CpB,QAAQ,CAAC,CAClDgB,IAAI,CAAEF,aAD4C,CAElDG,QAAQ,CAAER,OAAO,CAAC,CAACF,QAAQ,CAAC,IAAD,CAAT,CAAiBC,YAAY,EAA7B,CAAD,CAFiC,CAAD,CAAnD,yCAAOa,SAAP,eAAkBC,QAAlB,eAA4BC,WAA5B,eAKA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,SAAD,CAAYC,OAAZ,CAAwB,CAC3CN,WAAW,CAACO,UAAZ,GACA,GAAIzB,WAAW,CAACwB,OAAD,CAAX,EAAwBD,SAAS,GAAKtB,cAAc,CAACuB,OAAD,CAAxD,CAAmE,CACjEN,WAAW,CAACQ,QAAZ,CAAqBH,SAArB,EACD,CACF,CALD,CAOA,mBACE,KAAC,SAAD,EACE,OAAO,oBAAcV,KAAd,CADT,CAEE,6BAAqBA,KAArB,CAFF,CAGE,iBAAiB,CAAEI,QAAQ,CAACU,KAAT,EAAkBP,QAAQ,CAACO,KAHhD,CAIE,UAAU,KAJZ,CAKE,SAAS,CACP,CAAC,CAACV,QAAQ,CAACW,OAAV,EAAqB,CAACX,QAAQ,CAACU,KAAhC,IACC,CAACP,QAAQ,CAACQ,OAAV,EAAqB,CAACR,QAAQ,CAACO,KADhC,EAEI,SAFJ,CAGI,OATR,CAWE,KAAK,CAAEd,KAXT,uBAaE,MAAC,aAAD,yBACE,KAAC,UAAD,8BACE,aACEF,aAAa,CAACkB,UAAd,CAAyB,OAAzB,UAAoC,oBAApC,SAAoD,kBAFxD,EAIMb,SAJN,MAKE,KAAK,CAAEA,SAAS,CAACc,KAAV,CAAgBC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CALT,CAME,QAAQ,CAAET,YANZ,GADF,cASE,KAAC,UAAD,8BACE,WAAW,CAAC,aADd,CAEE,WAAW,CAAE,EAFf,CAGE,aACEV,aAAa,CAACiB,UAAd,CAAyB,OAAzB,UAAoC,oBAApC,SAAoD,kBAJxD,CAME,IAAI,CAAEV,SAAS,CAACW,KANlB,EAOMX,SAPN,MAQE,QAAQ,CAAE,kBAACa,IAAD,QAAUX,CAAAA,WAAW,CAACK,QAAZ,CAAqBM,IAArB,CAAV,EARZ,GATF,GAbF,EADF,CAoCD,CAED,cAAetB,CAAAA,cAAf","sourcesContent":["import React from 'react';\nimport { t } from '@lingui/macro';\nimport { useField } from 'formik';\nimport {\n  DatePicker,\n  isValidDate,\n  yyyyMMddFormat,\n  TimePicker,\n  FormGroup,\n} from '@patternfly/react-core';\nimport styled from 'styled-components';\nimport { required, validateTime, combine } from 'util/validators';\n\nconst DateTimeGroup = styled.span`\n  display: flex;\n`;\nfunction DateTimePicker({ dateFieldName, timeFieldName, label }) {\n  const [dateField, dateMeta, dateHelpers] = useField({\n    name: dateFieldName,\n    validate: combine([required(null), isValidDate]),\n  });\n  const [timeField, timeMeta, timeHelpers] = useField({\n    name: timeFieldName,\n    validate: combine([required(null), validateTime()]),\n  });\n\n  const onDateChange = (inputDate, newDate) => {\n    dateHelpers.setTouched();\n    if (isValidDate(newDate) && inputDate === yyyyMMddFormat(newDate)) {\n      dateHelpers.setValue(inputDate);\n    }\n  };\n\n  return (\n    <FormGroup\n      fieldId={`schedule-${label}`}\n      data-cy={`schedule-${label}`}\n      helperTextInvalid={dateMeta.error || timeMeta.error}\n      isRequired\n      validated={\n        (!dateMeta.touched || !dateMeta.error) &&\n        (!timeMeta.touched || !timeMeta.error)\n          ? 'default'\n          : 'error'\n      }\n      label={label}\n    >\n      <DateTimeGroup>\n        <DatePicker\n          aria-label={\n            dateFieldName.startsWith('start') ? t`Start date` : t`End date`\n          }\n          {...dateField}\n          value={dateField.value.split('T')[0]}\n          onChange={onDateChange}\n        />\n        <TimePicker\n          placeholder=\"hh:mm AM/PM\"\n          stepMinutes={15}\n          aria-label={\n            timeFieldName.startsWith('start') ? t`Start time` : t`End time`\n          }\n          time={timeField.value}\n          {...timeField}\n          onChange={(time) => timeHelpers.setValue(time)}\n        />\n      </DateTimeGroup>\n    </FormGroup>\n  );\n}\n\nexport default DateTimePicker;\n"]},"metadata":{},"sourceType":"module"}