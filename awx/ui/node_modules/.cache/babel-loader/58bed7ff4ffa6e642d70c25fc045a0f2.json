{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { getUniqueId } from '../../helpers/util';\nimport { NavContext } from './Nav';\nimport { PageSidebarContext } from '../Page/PageSidebar';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nexport var NavExpandable = /*#__PURE__*/function (_React$Component) {\n  _inherits(NavExpandable, _React$Component);\n\n  var _super = _createSuper(NavExpandable);\n\n  function NavExpandable() {\n    var _this;\n\n    _classCallCheck(this, NavExpandable);\n\n    _this = _super.apply(this, arguments);\n    _this.id = _this.props.id || getUniqueId();\n    _this.state = {\n      expandedState: _this.props.isExpanded,\n      ouiaStateId: getDefaultOUIAId(NavExpandable.displayName)\n    };\n\n    _this.onExpand = function (e, onToggle) {\n      var expandedState = _this.state.expandedState;\n\n      if (_this.props.onExpand) {\n        _this.props.onExpand(e, !expandedState);\n      } else {\n        _this.setState(function (prevState) {\n          return {\n            expandedState: !prevState.expandedState\n          };\n        });\n\n        var groupId = _this.props.groupId;\n        onToggle(e, groupId, !expandedState);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(NavExpandable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        expandedState: this.props.isExpanded\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.isExpanded !== prevProps.isExpanded) {\n        this.setState({\n          expandedState: this.props.isExpanded\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          title = _a.title,\n          srText = _a.srText,\n          children = _a.children,\n          className = _a.className,\n          isActive = _a.isActive,\n          ouiaId = _a.ouiaId,\n          groupId = _a.groupId,\n          id = _a.id,\n          isExpanded = _a.isExpanded,\n          buttonProps = _a.buttonProps,\n          onExpand = _a.onExpand,\n          props = __rest(_a, [\"title\", \"srText\", \"children\", \"className\", \"isActive\", \"ouiaId\", \"groupId\", \"id\", \"isExpanded\", \"buttonProps\", \"onExpand\"]);\n\n      var _this$state = this.state,\n          expandedState = _this$state.expandedState,\n          ouiaStateId = _this$state.ouiaStateId;\n      return React.createElement(NavContext.Consumer, null, function (context) {\n        return React.createElement(\"li\", Object.assign({\n          className: css(styles.navItem, styles.modifiers.expandable, expandedState && styles.modifiers.expanded, isActive && styles.modifiers.current, className)\n        }, getOUIAProps(NavExpandable.displayName, ouiaId !== undefined ? ouiaId : ouiaStateId), props), React.createElement(PageSidebarContext.Consumer, null, function (_ref) {\n          var isNavOpen = _ref.isNavOpen;\n          return React.createElement(\"button\", Object.assign({\n            className: styles.navLink,\n            id: srText ? null : _this2.id,\n            onClick: function onClick(e) {\n              return _this2.onExpand(e, context.onToggle);\n            },\n            \"aria-expanded\": expandedState,\n            tabIndex: isNavOpen ? null : -1\n          }, buttonProps), title, React.createElement(\"span\", {\n            className: css(styles.navToggle)\n          }, React.createElement(\"span\", {\n            className: css(styles.navToggleIcon)\n          }, React.createElement(AngleRightIcon, {\n            \"aria-hidden\": \"true\"\n          }))));\n        }), React.createElement(\"section\", {\n          className: css(styles.navSubnav),\n          \"aria-labelledby\": _this2.id,\n          hidden: expandedState ? null : true\n        }, srText && React.createElement(\"h2\", {\n          className: css(a11yStyles.screenReader),\n          id: _this2.id\n        }, srText), React.createElement(\"ul\", {\n          className: css(styles.navList)\n        }, children)));\n      });\n    }\n  }]);\n\n  return NavExpandable;\n}(React.Component);\nNavExpandable.displayName = 'NavExpandable';\nNavExpandable.defaultProps = {\n  srText: '',\n  isExpanded: false,\n  children: '',\n  className: '',\n  groupId: null,\n  isActive: false,\n  id: ''\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Nav/NavExpandable.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { getUniqueId } from '../../helpers/util';\nimport { NavContext } from './Nav';\nimport { PageSidebarContext } from '../Page/PageSidebar';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { getOUIAProps, OUIAProps, getDefaultOUIAId } from '../../helpers';\n\nexport interface NavExpandableProps\n  extends React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>,\n    OUIAProps {\n  /** Title shown for the expandable list */\n  title: string;\n  /** If defined, screen readers will read this text instead of the list title */\n  srText?: string;\n  /** Boolean to programatically expand or collapse section */\n  isExpanded?: boolean;\n  /** Anything that can be rendered inside of the expandable list */\n  children?: React.ReactNode;\n  /** Additional classes added to the container */\n  className?: string;\n  /** Group identifier, will be returned with the onToggle and onSelect callback passed to the Nav component */\n  groupId?: string | number;\n  /** If true makes the expandable list title active */\n  isActive?: boolean;\n  /** Identifier to use for the section aria label */\n  id?: string;\n  /** allow consumer to optionally override this callback and manage expand state externally. if passed will not call Nav's onToggle. */\n  onExpand?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, val: boolean) => void;\n  /** Additional props added to the NavExpandable <button> */\n  buttonProps?: any;\n}\n\ninterface NavExpandableState {\n  expandedState: boolean;\n  ouiaStateId: string;\n}\n\nexport class NavExpandable extends React.Component<NavExpandableProps, NavExpandableState> {\n  static displayName = 'NavExpandable';\n  static defaultProps: PickOptional<NavExpandableProps> = {\n    srText: '',\n    isExpanded: false,\n    children: '',\n    className: '',\n    groupId: null as string,\n    isActive: false,\n    id: ''\n  };\n\n  id = this.props.id || getUniqueId();\n\n  state = {\n    expandedState: this.props.isExpanded,\n    ouiaStateId: getDefaultOUIAId(NavExpandable.displayName)\n  };\n\n  componentDidMount() {\n    this.setState({ expandedState: this.props.isExpanded });\n  }\n\n  componentDidUpdate(prevProps: NavExpandableProps) {\n    if (this.props.isExpanded !== prevProps.isExpanded) {\n      this.setState({ expandedState: this.props.isExpanded });\n    }\n  }\n\n  onExpand = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    onToggle: (\n      event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n      groupId: string | number,\n      expandedState: boolean\n    ) => void\n  ) => {\n    const { expandedState } = this.state;\n    if (this.props.onExpand) {\n      this.props.onExpand(e, !expandedState);\n    } else {\n      this.setState(prevState => ({ expandedState: !prevState.expandedState }));\n      const { groupId } = this.props;\n      onToggle(e, groupId, !expandedState);\n    }\n  };\n\n  render() {\n    const {\n      title,\n      srText,\n      children,\n      className,\n      isActive,\n      ouiaId,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      groupId,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      id,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isExpanded,\n      buttonProps,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onExpand,\n      ...props\n    } = this.props;\n\n    const { expandedState, ouiaStateId } = this.state;\n\n    return (\n      <NavContext.Consumer>\n        {context => (\n          <li\n            className={css(\n              styles.navItem,\n              styles.modifiers.expandable,\n              expandedState && styles.modifiers.expanded,\n              isActive && styles.modifiers.current,\n              className\n            )}\n            {...getOUIAProps(NavExpandable.displayName, ouiaId !== undefined ? ouiaId : ouiaStateId)}\n            {...props}\n          >\n            <PageSidebarContext.Consumer>\n              {({ isNavOpen }) => (\n                <button\n                  className={styles.navLink}\n                  id={srText ? null : this.id}\n                  onClick={e => this.onExpand(e, context.onToggle)}\n                  aria-expanded={expandedState}\n                  tabIndex={isNavOpen ? null : -1}\n                  {...buttonProps}\n                >\n                  {title}\n                  <span className={css(styles.navToggle)}>\n                    <span className={css(styles.navToggleIcon)}>\n                      <AngleRightIcon aria-hidden=\"true\" />\n                    </span>\n                  </span>\n                </button>\n              )}\n            </PageSidebarContext.Consumer>\n            <section className={css(styles.navSubnav)} aria-labelledby={this.id} hidden={expandedState ? null : true}>\n              {srText && (\n                <h2 className={css(a11yStyles.screenReader)} id={this.id}>\n                  {srText}\n                </h2>\n              )}\n              <ul className={css(styles.navList)}>{children}</ul>\n            </section>\n          </li>\n        )}\n      </NavContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}