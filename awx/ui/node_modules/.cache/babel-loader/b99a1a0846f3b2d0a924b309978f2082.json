{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport styles from '@patternfly/react-styles/css/components/Slider/slider';\nimport { css } from '@patternfly/react-styles';\nimport { SliderStep } from './SliderStep';\nimport { InputGroup, InputGroupText } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Tooltip } from '../Tooltip';\n\nvar getPercentage = function getPercentage(current, max) {\n  return 100 * current / max;\n};\n\nexport var Slider = function Slider(_a) {\n  var className = _a.className,\n      _a$value = _a.value,\n      value = _a$value === void 0 ? 0 : _a$value,\n      customSteps = _a.customSteps,\n      _a$areCustomStepsCont = _a.areCustomStepsContinuous,\n      areCustomStepsContinuous = _a$areCustomStepsCont === void 0 ? false : _a$areCustomStepsCont,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      _a$isInputVisible = _a.isInputVisible,\n      isInputVisible = _a$isInputVisible === void 0 ? false : _a$isInputVisible,\n      _a$inputValue = _a.inputValue,\n      inputValue = _a$inputValue === void 0 ? 0 : _a$inputValue,\n      inputLabel = _a.inputLabel,\n      _a$inputAriaLabel = _a.inputAriaLabel,\n      inputAriaLabel = _a$inputAriaLabel === void 0 ? 'Slider value input' : _a$inputAriaLabel,\n      _a$thumbAriaLabel = _a.thumbAriaLabel,\n      thumbAriaLabel = _a$thumbAriaLabel === void 0 ? 'Value' : _a$thumbAriaLabel,\n      _a$hasTooltipOverThum = _a.hasTooltipOverThumb,\n      hasTooltipOverThumb = _a$hasTooltipOverThum === void 0 ? false : _a$hasTooltipOverThum,\n      _a$inputPosition = _a.inputPosition,\n      inputPosition = _a$inputPosition === void 0 ? 'right' : _a$inputPosition,\n      onChange = _a.onChange,\n      leftActions = _a.leftActions,\n      rightActions = _a.rightActions,\n      _a$step = _a.step,\n      step = _a$step === void 0 ? 1 : _a$step,\n      _a$min = _a.min,\n      min = _a$min === void 0 ? 0 : _a$min,\n      _a$max = _a.max,\n      max = _a$max === void 0 ? 100 : _a$max,\n      _a$showTicks = _a.showTicks,\n      showTicks = _a$showTicks === void 0 ? false : _a$showTicks,\n      _a$showBoundaries = _a.showBoundaries,\n      showBoundaries = _a$showBoundaries === void 0 ? true : _a$showBoundaries,\n      ariaDescribedby = _a['aria-describedby'],\n      ariaLabelledby = _a['aria-labelledby'],\n      props = __rest(_a, [\"className\", \"value\", \"customSteps\", \"areCustomStepsContinuous\", \"isDisabled\", \"isInputVisible\", \"inputValue\", \"inputLabel\", \"inputAriaLabel\", \"thumbAriaLabel\", \"hasTooltipOverThumb\", \"inputPosition\", \"onChange\", \"leftActions\", \"rightActions\", \"step\", \"min\", \"max\", \"showTicks\", \"showBoundaries\", 'aria-describedby', 'aria-labelledby']);\n\n  var sliderRailRef = React.useRef();\n  var thumbRef = React.useRef();\n\n  var _useState = useState(value),\n      _useState2 = _slicedToArray(_useState, 2),\n      localValue = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(inputValue),\n      _useState4 = _slicedToArray(_useState3, 2),\n      localInputValue = _useState4[0],\n      setLocalInputValue = _useState4[1];\n\n  React.useEffect(function () {\n    setValue(value);\n  }, [value]);\n  React.useEffect(function () {\n    setLocalInputValue(inputValue);\n  }, [inputValue]);\n  var diff = 0;\n  var snapValue; // calculate style value percentage\n\n  var stylePercent = (localValue - min) * 100 / (max - min);\n  var style = {\n    '--pf-c-slider--value': \"\".concat(stylePercent, \"%\")\n  };\n  var widthChars = React.useMemo(function () {\n    return localInputValue.toString().length;\n  }, [localInputValue]);\n  var inputStyle = {\n    '--pf-c-slider__value--c-form-control--width-chars': widthChars\n  };\n\n  var onChangeHandler = function onChangeHandler(value) {\n    setLocalInputValue(Number(value));\n  };\n\n  var handleKeyPressOnInput = function handleKeyPressOnInput(event) {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n\n      if (onChange) {\n        onChange(localValue, localInputValue, setLocalInputValue);\n      }\n    }\n  };\n\n  var onInputFocus = function onInputFocus(e) {\n    e.stopPropagation();\n  };\n\n  var onThumbClick = function onThumbClick() {\n    thumbRef.current.focus();\n  };\n\n  var onBlur = function onBlur() {\n    if (onChange) {\n      onChange(localValue, localInputValue, setLocalInputValue);\n    }\n  };\n\n  var findAriaTextValue = function findAriaTextValue() {\n    if (!areCustomStepsContinuous && customSteps) {\n      var matchingStep = customSteps.find(function (stepObj) {\n        return stepObj.value === localValue;\n      });\n\n      if (matchingStep) {\n        return matchingStep.label;\n      }\n    } // For continuous steps default to showing 2 decimals in tooltip\n    // Consider making it configurable via a property\n\n\n    return Number(Number(localValue).toFixed(2)).toString();\n  };\n\n  var handleThumbDragEnd = function handleThumbDragEnd() {\n    document.removeEventListener('mousemove', callbackThumbMove);\n    document.removeEventListener('mouseup', callbackThumbUp);\n    document.removeEventListener('touchmove', callbackThumbMove);\n    document.removeEventListener('touchend', callbackThumbUp);\n    document.removeEventListener('touchcancel', callbackThumbUp);\n  };\n\n  var handleMouseDown = function handleMouseDown(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    diff = e.clientX - thumbRef.current.getBoundingClientRect().left;\n    document.addEventListener('mousemove', callbackThumbMove);\n    document.addEventListener('mouseup', callbackThumbUp);\n  };\n\n  var handleTouchStart = function handleTouchStart(e) {\n    e.stopPropagation();\n    diff = e.touches[0].clientX - thumbRef.current.getBoundingClientRect().left;\n    document.addEventListener('touchmove', callbackThumbMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', callbackThumbUp);\n    document.addEventListener('touchcancel', callbackThumbUp);\n  };\n\n  var onSliderRailClick = function onSliderRailClick(e) {\n    handleThumbMove(e);\n\n    if (snapValue && !areCustomStepsContinuous) {\n      thumbRef.current.style.setProperty('--pf-c-slider--value', \"\".concat(snapValue, \"%\"));\n      setValue(snapValue);\n\n      if (onChange) {\n        onChange(snapValue);\n      }\n    }\n  };\n\n  var handleThumbMove = function handleThumbMove(e) {\n    if (e.type === 'touchmove') {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n\n    var clientPosition = e.touches && e.touches.length ? e.touches[0].clientX : e.clientX;\n    var newPosition = clientPosition - diff - sliderRailRef.current.getBoundingClientRect().left;\n    var end = sliderRailRef.current.offsetWidth - thumbRef.current.offsetWidth;\n    var start = 0;\n\n    if (newPosition < start) {\n      newPosition = 0;\n    }\n\n    if (newPosition > end) {\n      newPosition = end;\n    }\n\n    var newPercentage = getPercentage(newPosition, end);\n    thumbRef.current.style.setProperty('--pf-c-slider--value', \"\".concat(newPercentage, \"%\")); // convert percentage to value\n\n    var newValue = Math.round((newPercentage * (max - min) / 100 + min) * 100) / 100;\n    setValue(newValue);\n\n    if (!customSteps) {\n      // snap to new value if not custom steps\n      snapValue = Math.round((Math.round((newValue - min) / step) * step + min) * 100) / 100;\n      thumbRef.current.style.setProperty('--pf-c-slider--value', \"\".concat(snapValue, \"%\"));\n      setValue(snapValue);\n    }\n    /* If custom steps are discrete, snap to closest step value */\n\n\n    if (!areCustomStepsContinuous && customSteps) {\n      var percentage = newPercentage;\n\n      if (customSteps[customSteps.length - 1].value !== 100) {\n        percentage = newPercentage * (max - min) / 100 + min;\n      }\n\n      var stepIndex = customSteps.findIndex(function (stepObj) {\n        return stepObj.value >= percentage;\n      });\n\n      if (customSteps[stepIndex].value === percentage) {\n        snapValue = customSteps[stepIndex].value;\n      } else {\n        var midpoint = (customSteps[stepIndex].value + customSteps[stepIndex - 1].value) / 2;\n\n        if (midpoint > percentage) {\n          snapValue = customSteps[stepIndex - 1].value;\n        } else {\n          snapValue = customSteps[stepIndex].value;\n        }\n      }\n\n      setValue(snapValue);\n    } // Call onchange callback\n\n\n    if (onChange) {\n      if (snapValue !== undefined) {\n        onChange(snapValue);\n      } else {\n        onChange(newValue);\n      }\n    }\n  };\n\n  var callbackThumbMove = React.useCallback(handleThumbMove, [min, max, customSteps, onChange]);\n  var callbackThumbUp = React.useCallback(handleThumbDragEnd, [min, max, customSteps, onChange]);\n\n  var handleThumbKeys = function handleThumbKeys(e) {\n    var key = e.key;\n\n    if (key !== 'ArrowLeft' && key !== 'ArrowRight') {\n      return;\n    }\n\n    e.preventDefault();\n    var newValue = localValue;\n\n    if (!areCustomStepsContinuous && customSteps) {\n      var stepIndex = customSteps.findIndex(function (stepObj) {\n        return stepObj.value === localValue;\n      });\n\n      if (key === 'ArrowRight') {\n        if (stepIndex + 1 < customSteps.length) {\n          {\n            newValue = customSteps[stepIndex + 1].value;\n          }\n        }\n      } else if (key === 'ArrowLeft') {\n        if (stepIndex - 1 >= 0) {\n          newValue = customSteps[stepIndex - 1].value;\n        }\n      }\n    } else {\n      if (key === 'ArrowRight') {\n        newValue = localValue + step <= max ? localValue + step : max;\n      } else if (key === 'ArrowLeft') {\n        newValue = localValue - step >= min ? localValue - step : min;\n      }\n    }\n\n    if (newValue !== localValue) {\n      thumbRef.current.style.setProperty('--pf-c-slider--value', \"\".concat(newValue, \"%\"));\n      setValue(newValue);\n\n      if (onChange) {\n        onChange(newValue);\n      }\n    }\n  };\n\n  var displayInput = function displayInput() {\n    var textInput = React.createElement(TextInput, {\n      className: css(styles.formControl),\n      isDisabled: isDisabled,\n      type: \"number\",\n      value: localInputValue,\n      \"aria-label\": inputAriaLabel,\n      onKeyDown: handleKeyPressOnInput,\n      onChange: onChangeHandler,\n      onClick: onInputFocus,\n      onFocus: onInputFocus,\n      onBlur: onBlur\n    });\n\n    if (inputLabel) {\n      return React.createElement(InputGroup, null, textInput, React.createElement(InputGroupText, {\n        variant: \"plain\"\n      }, \" \", inputLabel));\n    } else {\n      return textInput;\n    }\n  };\n\n  var getStepValue = function getStepValue(val, min, max) {\n    return (val - min) * 100 / (max - min);\n  };\n\n  var buildSteps = function buildSteps() {\n    var builtSteps = [];\n\n    for (var i = min; i <= max; i = i + step) {\n      var stepValue = getStepValue(i, min, max); // If we boundaries but not ticks just generate the needed steps\n      // so that we don't pullute them DOM with empty divs\n\n      if (!showTicks && showBoundaries && i !== min && i !== max) {\n        continue;\n      }\n\n      builtSteps.push(React.createElement(SliderStep, {\n        key: i,\n        value: stepValue,\n        label: i.toString(),\n        isTickHidden: !showTicks,\n        isLabelHidden: (i === min || i === max) && showBoundaries ? false : true,\n        isActive: i <= localValue\n      }));\n    }\n\n    return builtSteps;\n  };\n\n  var thumbComponent = React.createElement(\"div\", {\n    className: css(styles.sliderThumb),\n    ref: thumbRef,\n    tabIndex: isDisabled ? -1 : 0,\n    role: \"slider\",\n    \"aria-valuemin\": customSteps ? customSteps[0].value : min,\n    \"aria-valuemax\": customSteps ? customSteps[customSteps.length - 1].value : max,\n    \"aria-valuenow\": localValue,\n    \"aria-valuetext\": findAriaTextValue(),\n    \"aria-label\": thumbAriaLabel,\n    \"aria-disabled\": isDisabled,\n    \"aria-describedby\": ariaDescribedby,\n    \"aria-labelledby\": ariaLabelledby,\n    onMouseDown: !isDisabled ? handleMouseDown : null,\n    onTouchStart: !isDisabled ? handleTouchStart : null,\n    onKeyDown: !isDisabled ? handleThumbKeys : null,\n    onClick: !isDisabled ? onThumbClick : null\n  });\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.slider, className, isDisabled && styles.modifiers.disabled),\n    style: Object.assign(Object.assign({}, style), inputStyle)\n  }, props), leftActions && React.createElement(\"div\", {\n    className: css(styles.sliderActions)\n  }, leftActions), React.createElement(\"div\", {\n    className: css(styles.sliderMain)\n  }, React.createElement(\"div\", {\n    className: css(styles.sliderRail),\n    ref: sliderRailRef,\n    onClick: !isDisabled ? onSliderRailClick : null\n  }, React.createElement(\"div\", {\n    className: css(styles.sliderRailTrack)\n  })), customSteps && React.createElement(\"div\", {\n    className: css(styles.sliderSteps),\n    \"aria-hidden\": \"true\"\n  }, customSteps.map(function (stepObj) {\n    var minValue = customSteps[0].value;\n    var maxValue = customSteps[customSteps.length - 1].value;\n    var stepValue = getStepValue(stepObj.value, minValue, maxValue);\n    return React.createElement(SliderStep, {\n      key: stepObj.value,\n      value: stepValue,\n      label: stepObj.label,\n      isLabelHidden: stepObj.isLabelHidden,\n      isActive: stepObj.value <= localValue\n    });\n  })), !customSteps && (showTicks || showBoundaries) && React.createElement(\"div\", {\n    className: css(styles.sliderSteps),\n    \"aria-hidden\": \"true\"\n  }, buildSteps()), hasTooltipOverThumb ? React.createElement(Tooltip, {\n    entryDelay: 0,\n    content: findAriaTextValue()\n  }, thumbComponent) : thumbComponent, isInputVisible && inputPosition === 'aboveThumb' && React.createElement(\"div\", {\n    className: css(styles.sliderValue, styles.modifiers.floating)\n  }, displayInput())), isInputVisible && inputPosition === 'right' && React.createElement(\"div\", {\n    className: css(styles.sliderValue)\n  }, displayInput()), rightActions && React.createElement(\"div\", {\n    className: css(styles.sliderActions)\n  }, rightActions));\n};\nSlider.displayName = 'Slider';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Slider/Slider.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport styles from '@patternfly/react-styles/css/components/Slider/slider';\nimport { css } from '@patternfly/react-styles';\nimport { SliderStep } from './SliderStep';\nimport { InputGroup, InputGroupText } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Tooltip } from '../Tooltip';\n\nexport interface SliderStepObject {\n  /** Value of the step. This value is a percentage of the slider where the  tick is drawn. */\n  value: number;\n  /** The display label for the step value. This is also used for the aria-valuetext */\n  label: string;\n  /** Flag to hide the label */\n  isLabelHidden?: boolean;\n}\n\nexport interface SliderProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Additional classes added to the spinner. */\n  className?: string;\n  /** Current value  */\n  value?: number;\n  /** Flag indicating if the slider is is discrete for custom steps.  This will cause the slider to snap to the closest value. */\n  areCustomStepsContinuous?: boolean;\n  /** Adds disabled styling and disables the slider and the input component is present */\n  isDisabled?: boolean;\n  /** The step interval*/\n  step?: number;\n  /** Minimum permitted value */\n  min?: number;\n  /** The maximum permitted value */\n  max?: number;\n  /** Flag to indicate if boundaries should be shown for slider that does not have custom steps */\n  showBoundaries?: boolean;\n  /** Flag to indicate if ticks should be shown for slider that does not have custom steps  */\n  showTicks?: boolean;\n  /** Array of custom slider step objects (value and label of each step) for the slider. */\n  customSteps?: SliderStepObject[];\n  /** Flag to show value input field */\n  isInputVisible?: boolean;\n  /** Value displayed in the input field */\n  inputValue?: number;\n  /** Aria label for the input field */\n  inputAriaLabel?: string;\n  /* Aria label for the thumb */\n  thumbAriaLabel?: string;\n  /* Adds a tooltip over the thumb containing the current value */\n  hasTooltipOverThumb?: boolean;\n  /** Label that is place after the input field */\n  inputLabel?: string | number;\n  /** Position of the input */\n  inputPosition?: 'aboveThumb' | 'right';\n  /** Value change callback. This is called when the slider value changes */\n  onChange?: (\n    value: number,\n    inputValue?: number,\n    setLocalInputValue?: React.Dispatch<React.SetStateAction<number>>\n  ) => void;\n  /** Actions placed to the left of the slider */\n  leftActions?: React.ReactNode;\n  /** Actions placed to the right of the slider */\n  rightActions?: React.ReactNode;\n  /** One or more id's to use for the slider thumb description */\n  'aria-describedby'?: string;\n  /** One or more id's to use for the slider thumb label */\n  'aria-labelledby'?: string;\n}\n\nconst getPercentage = (current: number, max: number) => (100 * current) / max;\n\nexport const Slider: React.FunctionComponent<SliderProps> = ({\n  className,\n  value = 0,\n  customSteps,\n  areCustomStepsContinuous = false,\n  isDisabled = false,\n  isInputVisible = false,\n  inputValue = 0,\n  inputLabel,\n  inputAriaLabel = 'Slider value input',\n  thumbAriaLabel = 'Value',\n  hasTooltipOverThumb = false,\n  inputPosition = 'right',\n  onChange,\n  leftActions,\n  rightActions,\n  step = 1,\n  min = 0,\n  max = 100,\n  showTicks = false,\n  showBoundaries = true,\n  'aria-describedby': ariaDescribedby,\n  'aria-labelledby': ariaLabelledby,\n  ...props\n}: SliderProps) => {\n  const sliderRailRef = React.useRef<HTMLDivElement>();\n  const thumbRef = React.useRef<HTMLDivElement>();\n\n  const [localValue, setValue] = useState(value);\n  const [localInputValue, setLocalInputValue] = useState(inputValue);\n\n  React.useEffect(() => {\n    setValue(value);\n  }, [value]);\n\n  React.useEffect(() => {\n    setLocalInputValue(inputValue);\n  }, [inputValue]);\n\n  let diff = 0;\n  let snapValue: number;\n\n  // calculate style value percentage\n  const stylePercent = ((localValue - min) * 100) / (max - min);\n  const style = { '--pf-c-slider--value': `${stylePercent}%` } as React.CSSProperties;\n  const widthChars = React.useMemo(() => localInputValue.toString().length, [localInputValue]);\n  const inputStyle = { '--pf-c-slider__value--c-form-control--width-chars': widthChars } as React.CSSProperties;\n\n  const onChangeHandler = (value: string) => {\n    setLocalInputValue(Number(value));\n  };\n\n  const handleKeyPressOnInput = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      if (onChange) {\n        onChange(localValue, localInputValue, setLocalInputValue);\n      }\n    }\n  };\n\n  const onInputFocus = (e: any) => {\n    e.stopPropagation();\n  };\n\n  const onThumbClick = () => {\n    thumbRef.current.focus();\n  };\n\n  const onBlur = () => {\n    if (onChange) {\n      onChange(localValue, localInputValue, setLocalInputValue);\n    }\n  };\n\n  const findAriaTextValue = () => {\n    if (!areCustomStepsContinuous && customSteps) {\n      const matchingStep = customSteps.find(stepObj => stepObj.value === localValue);\n      if (matchingStep) {\n        return matchingStep.label;\n      }\n    }\n    // For continuous steps default to showing 2 decimals in tooltip\n    // Consider making it configurable via a property\n    return Number(Number(localValue).toFixed(2)).toString();\n  };\n\n  const handleThumbDragEnd = () => {\n    document.removeEventListener('mousemove', callbackThumbMove);\n    document.removeEventListener('mouseup', callbackThumbUp);\n    document.removeEventListener('touchmove', callbackThumbMove);\n    document.removeEventListener('touchend', callbackThumbUp);\n    document.removeEventListener('touchcancel', callbackThumbUp);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    diff = e.clientX - thumbRef.current.getBoundingClientRect().left;\n\n    document.addEventListener('mousemove', callbackThumbMove);\n    document.addEventListener('mouseup', callbackThumbUp);\n  };\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    e.stopPropagation();\n\n    diff = e.touches[0].clientX - thumbRef.current.getBoundingClientRect().left;\n\n    document.addEventListener('touchmove', callbackThumbMove, { passive: false });\n    document.addEventListener('touchend', callbackThumbUp);\n    document.addEventListener('touchcancel', callbackThumbUp);\n  };\n\n  const onSliderRailClick = (e: any) => {\n    handleThumbMove(e);\n    if (snapValue && !areCustomStepsContinuous) {\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${snapValue}%`);\n      setValue(snapValue);\n      if (onChange) {\n        onChange(snapValue);\n      }\n    }\n  };\n\n  const handleThumbMove = (e: any) => {\n    if (e.type === 'touchmove') {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n\n    const clientPosition = e.touches && e.touches.length ? e.touches[0].clientX : e.clientX;\n\n    let newPosition = clientPosition - diff - sliderRailRef.current.getBoundingClientRect().left;\n\n    const end = sliderRailRef.current.offsetWidth - thumbRef.current.offsetWidth;\n\n    const start = 0;\n\n    if (newPosition < start) {\n      newPosition = 0;\n    }\n\n    if (newPosition > end) {\n      newPosition = end;\n    }\n\n    const newPercentage = getPercentage(newPosition, end);\n\n    thumbRef.current.style.setProperty('--pf-c-slider--value', `${newPercentage}%`);\n    // convert percentage to value\n    const newValue = Math.round(((newPercentage * (max - min)) / 100 + min) * 100) / 100;\n    setValue(newValue);\n\n    if (!customSteps) {\n      // snap to new value if not custom steps\n      snapValue = Math.round((Math.round((newValue - min) / step) * step + min) * 100) / 100;\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${snapValue}%`);\n      setValue(snapValue);\n    }\n\n    /* If custom steps are discrete, snap to closest step value */\n    if (!areCustomStepsContinuous && customSteps) {\n      let percentage = newPercentage;\n      if (customSteps[customSteps.length - 1].value !== 100) {\n        percentage = (newPercentage * (max - min)) / 100 + min;\n      }\n      const stepIndex = customSteps.findIndex(stepObj => stepObj.value >= percentage);\n      if (customSteps[stepIndex].value === percentage) {\n        snapValue = customSteps[stepIndex].value;\n      } else {\n        const midpoint = (customSteps[stepIndex].value + customSteps[stepIndex - 1].value) / 2;\n        if (midpoint > percentage) {\n          snapValue = customSteps[stepIndex - 1].value;\n        } else {\n          snapValue = customSteps[stepIndex].value;\n        }\n      }\n      setValue(snapValue);\n    }\n\n    // Call onchange callback\n    if (onChange) {\n      if (snapValue !== undefined) {\n        onChange(snapValue);\n      } else {\n        onChange(newValue);\n      }\n    }\n  };\n\n  const callbackThumbMove = React.useCallback(handleThumbMove, [min, max, customSteps, onChange]);\n  const callbackThumbUp = React.useCallback(handleThumbDragEnd, [min, max, customSteps, onChange]);\n\n  const handleThumbKeys = (e: React.KeyboardEvent) => {\n    const key = e.key;\n    if (key !== 'ArrowLeft' && key !== 'ArrowRight') {\n      return;\n    }\n    e.preventDefault();\n    let newValue: number = localValue;\n    if (!areCustomStepsContinuous && customSteps) {\n      const stepIndex = customSteps.findIndex(stepObj => stepObj.value === localValue);\n      if (key === 'ArrowRight') {\n        if (stepIndex + 1 < customSteps.length) {\n          {\n            newValue = customSteps[stepIndex + 1].value;\n          }\n        }\n      } else if (key === 'ArrowLeft') {\n        if (stepIndex - 1 >= 0) {\n          newValue = customSteps[stepIndex - 1].value;\n        }\n      }\n    } else {\n      if (key === 'ArrowRight') {\n        newValue = localValue + step <= max ? localValue + step : max;\n      } else if (key === 'ArrowLeft') {\n        newValue = localValue - step >= min ? localValue - step : min;\n      }\n    }\n\n    if (newValue !== localValue) {\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${newValue}%`);\n      setValue(newValue);\n      if (onChange) {\n        onChange(newValue);\n      }\n    }\n  };\n\n  const displayInput = () => {\n    const textInput = (\n      <TextInput\n        className={css(styles.formControl)}\n        isDisabled={isDisabled}\n        type=\"number\"\n        value={localInputValue}\n        aria-label={inputAriaLabel}\n        onKeyDown={handleKeyPressOnInput}\n        onChange={onChangeHandler}\n        onClick={onInputFocus}\n        onFocus={onInputFocus}\n        onBlur={onBlur}\n      />\n    );\n    if (inputLabel) {\n      return (\n        <InputGroup>\n          {textInput}\n          <InputGroupText variant=\"plain\"> {inputLabel}</InputGroupText>\n        </InputGroup>\n      );\n    } else {\n      return textInput;\n    }\n  };\n\n  const getStepValue = (val: number, min: number, max: number) => ((val - min) * 100) / (max - min);\n  const buildSteps = () => {\n    const builtSteps = [];\n    for (let i = min; i <= max; i = i + step) {\n      const stepValue = getStepValue(i, min, max);\n\n      // If we boundaries but not ticks just generate the needed steps\n      // so that we don't pullute them DOM with empty divs\n      if (!showTicks && showBoundaries && i !== min && i !== max) {\n        continue;\n      }\n\n      builtSteps.push(\n        <SliderStep\n          key={i}\n          value={stepValue}\n          label={i.toString()}\n          isTickHidden={!showTicks}\n          isLabelHidden={(i === min || i === max) && showBoundaries ? false : true}\n          isActive={i <= localValue}\n        />\n      );\n    }\n    return builtSteps;\n  };\n\n  const thumbComponent = (\n    <div\n      className={css(styles.sliderThumb)}\n      ref={thumbRef}\n      tabIndex={isDisabled ? -1 : 0}\n      role=\"slider\"\n      aria-valuemin={customSteps ? customSteps[0].value : min}\n      aria-valuemax={customSteps ? customSteps[customSteps.length - 1].value : max}\n      aria-valuenow={localValue}\n      aria-valuetext={findAriaTextValue()}\n      aria-label={thumbAriaLabel}\n      aria-disabled={isDisabled}\n      aria-describedby={ariaDescribedby}\n      aria-labelledby={ariaLabelledby}\n      onMouseDown={!isDisabled ? handleMouseDown : null}\n      onTouchStart={!isDisabled ? handleTouchStart : null}\n      onKeyDown={!isDisabled ? handleThumbKeys : null}\n      onClick={!isDisabled ? onThumbClick : null}\n    />\n  );\n\n  return (\n    <div\n      className={css(styles.slider, className, isDisabled && styles.modifiers.disabled)}\n      style={{ ...style, ...inputStyle }}\n      {...props}\n    >\n      {leftActions && <div className={css(styles.sliderActions)}>{leftActions}</div>}\n      <div className={css(styles.sliderMain)}>\n        <div className={css(styles.sliderRail)} ref={sliderRailRef} onClick={!isDisabled ? onSliderRailClick : null}>\n          <div className={css(styles.sliderRailTrack)} />\n        </div>\n        {customSteps && (\n          <div className={css(styles.sliderSteps)} aria-hidden=\"true\">\n            {customSteps.map(stepObj => {\n              const minValue = customSteps[0].value;\n              const maxValue = customSteps[customSteps.length - 1].value;\n              const stepValue = getStepValue(stepObj.value, minValue, maxValue);\n\n              return (\n                <SliderStep\n                  key={stepObj.value}\n                  value={stepValue}\n                  label={stepObj.label}\n                  isLabelHidden={stepObj.isLabelHidden}\n                  isActive={stepObj.value <= localValue}\n                />\n              );\n            })}\n          </div>\n        )}\n        {!customSteps && (showTicks || showBoundaries) && (\n          <div className={css(styles.sliderSteps)} aria-hidden=\"true\">\n            {buildSteps()}\n          </div>\n        )}\n        {hasTooltipOverThumb ? (\n          <Tooltip entryDelay={0} content={findAriaTextValue()}>\n            {thumbComponent}\n          </Tooltip>\n        ) : (\n          thumbComponent\n        )}\n        {isInputVisible && inputPosition === 'aboveThumb' && (\n          <div className={css(styles.sliderValue, styles.modifiers.floating)}>{displayInput()}</div>\n        )}\n      </div>\n      {isInputVisible && inputPosition === 'right' && <div className={css(styles.sliderValue)}>{displayInput()}</div>}\n      {rightActions && <div className={css(styles.sliderActions)}>{rightActions}</div>}\n    </div>\n  );\n};\nSlider.displayName = 'Slider';\n"]},"metadata":{},"sourceType":"module"}