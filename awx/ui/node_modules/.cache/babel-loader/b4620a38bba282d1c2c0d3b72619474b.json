{"ast":null,"code":"import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{i18n}from\"@lingui/core\";import React,{useState}from'react';import{useField}from'formik';import{FormGroup,Select,SelectOption,SelectVariant}from'@patternfly/react-core';import Popover from'components/Popover';import{jsx as _jsx}from\"react/jsx-runtime\";function BecomeMethodField(_ref){var fieldOptions=_ref.fieldOptions,isRequired=_ref.isRequired;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isOpen=_useState2[0],setIsOpen=_useState2[1];var _useState3=useState(['sudo','su','pbrun','pfexec','dzdo','pmrun','runas','enable','doas','ksu','machinectl','sesu'].map(function(val){return{value:val};})),_useState4=_slicedToArray(_useState3,2),options=_useState4[0],setOptions=_useState4[1];var _useField=useField({name:\"inputs.\".concat(fieldOptions.id)}),_useField2=_slicedToArray(_useField,3),becomeMethodField=_useField2[0],meta=_useField2[1],helpers=_useField2[2];return/*#__PURE__*/_jsx(FormGroup,{fieldId:\"credential-\".concat(fieldOptions.id),helperTextInvalid:meta.error,label:fieldOptions.label,labelIcon:fieldOptions.help_text&&/*#__PURE__*/_jsx(Popover,{content:fieldOptions.help_text}),isRequired:isRequired,validated:!(meta.touched&&meta.error)?'default':'error',children:/*#__PURE__*/_jsx(Select,{ouiaId:\"CredentialForm-\".concat(fieldOptions.id),typeAheadAriaLabel:fieldOptions.label,maxHeight:200,variant:SelectVariant.typeahead,onToggle:setIsOpen,onClear:function onClear(){helpers.setValue('');},onSelect:function onSelect(event,option){helpers.setValue(option);setIsOpen(false);},isOpen:isOpen,id:\"privilege-escalation-methods\",selections:becomeMethodField.value,isCreatable:true,onCreateOption:function onCreateOption(option){setOptions([].concat(_toConsumableArray(options),[{value:option}]));},noResultsFoundText:/*i18n*/i18n._(\"No results found\"),createText:/*i18n*/i18n._(\"Create\"),children:options.map(function(option){return/*#__PURE__*/_jsx(SelectOption,{value:option.value},option.value);})})});}BecomeMethodField.defaultProps={isRequired:false};export default BecomeMethodField;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Credential/shared/CredentialFormFields/BecomeMethodField.js"],"names":["React","useState","useField","FormGroup","Select","SelectOption","SelectVariant","Popover","BecomeMethodField","fieldOptions","isRequired","isOpen","setIsOpen","map","val","value","options","setOptions","name","id","becomeMethodField","meta","helpers","error","label","help_text","touched","typeahead","setValue","event","option","defaultProps"],"mappings":"qPAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,QAAT,KAAyB,QAAzB,CAGA,OACEC,SADF,CAEEC,MAFF,CAGEC,YAHF,CAIEC,aAJF,KAKO,wBALP,CAMA,MAAOC,CAAAA,OAAP,KAAoB,oBAApB,C,2CAEA,QAASC,CAAAA,iBAAT,MAAyD,IAA5BC,CAAAA,YAA4B,MAA5BA,YAA4B,CAAdC,UAAc,MAAdA,UAAc,CACvD,cAA4BT,QAAQ,CAAC,KAAD,CAApC,wCAAOU,MAAP,eAAeC,SAAf,eACA,eAA8BX,QAAQ,CACpC,CACE,MADF,CAEE,IAFF,CAGE,OAHF,CAIE,QAJF,CAKE,MALF,CAME,OANF,CAOE,OAPF,CAQE,QARF,CASE,MATF,CAUE,KAVF,CAWE,YAXF,CAYE,MAZF,EAaEY,GAbF,CAaM,SAACC,GAAD,QAAU,CAAEC,KAAK,CAAED,GAAT,CAAV,EAbN,CADoC,CAAtC,yCAAOE,OAAP,eAAgBC,UAAhB,eAgBA,cAA2Cf,QAAQ,CAAC,CAClDgB,IAAI,kBAAYT,YAAY,CAACU,EAAzB,CAD8C,CAAD,CAAnD,wCAAOC,iBAAP,eAA0BC,IAA1B,eAAgCC,OAAhC,eAGA,mBACE,KAAC,SAAD,EACE,OAAO,sBAAgBb,YAAY,CAACU,EAA7B,CADT,CAEE,iBAAiB,CAAEE,IAAI,CAACE,KAF1B,CAGE,KAAK,CAAEd,YAAY,CAACe,KAHtB,CAIE,SAAS,CACPf,YAAY,CAACgB,SAAb,eAA0B,KAAC,OAAD,EAAS,OAAO,CAAEhB,YAAY,CAACgB,SAA/B,EAL9B,CAOE,UAAU,CAAEf,UAPd,CAQE,SAAS,CAAE,EAAEW,IAAI,CAACK,OAAL,EAAgBL,IAAI,CAACE,KAAvB,EAAgC,SAAhC,CAA4C,OARzD,uBAUE,KAAC,MAAD,EACE,MAAM,0BAAoBd,YAAY,CAACU,EAAjC,CADR,CAEE,kBAAkB,CAAEV,YAAY,CAACe,KAFnC,CAGE,SAAS,CAAE,GAHb,CAIE,OAAO,CAAElB,aAAa,CAACqB,SAJzB,CAKE,QAAQ,CAAEf,SALZ,CAME,OAAO,CAAE,kBAAM,CACbU,OAAO,CAACM,QAAR,CAAiB,EAAjB,EACD,CARH,CASE,QAAQ,CAAE,kBAACC,KAAD,CAAQC,MAAR,CAAmB,CAC3BR,OAAO,CAACM,QAAR,CAAiBE,MAAjB,EACAlB,SAAS,CAAC,KAAD,CAAT,CACD,CAZH,CAaE,MAAM,CAAED,MAbV,CAcE,EAAE,CAAC,8BAdL,CAeE,UAAU,CAAES,iBAAiB,CAACL,KAfhC,CAgBE,WAAW,KAhBb,CAiBE,cAAc,CAAE,wBAACe,MAAD,CAAY,CAC1Bb,UAAU,8BAAKD,OAAL,GAAc,CAAED,KAAK,CAAEe,MAAT,CAAd,GAAV,CACD,CAnBH,CAoBE,kBAAkB,SAAE,0BApBtB,CAqBE,UAAU,SAAE,gBArBd,UAuBGd,OAAO,CAACH,GAAR,CAAY,SAACiB,MAAD,qBACX,KAAC,YAAD,EAAiC,KAAK,CAAEA,MAAM,CAACf,KAA/C,EAAmBe,MAAM,CAACf,KAA1B,CADW,EAAZ,CAvBH,EAVF,EADF,CAwCD,CAQDP,iBAAiB,CAACuB,YAAlB,CAAiC,CAC/BrB,UAAU,CAAE,KADmB,CAAjC,CAIA,cAAeF,CAAAA,iBAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useField } from 'formik';\nimport { bool, shape, string } from 'prop-types';\nimport { t } from '@lingui/macro';\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from '@patternfly/react-core';\nimport Popover from 'components/Popover';\n\nfunction BecomeMethodField({ fieldOptions, isRequired }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [options, setOptions] = useState(\n    [\n      'sudo',\n      'su',\n      'pbrun',\n      'pfexec',\n      'dzdo',\n      'pmrun',\n      'runas',\n      'enable',\n      'doas',\n      'ksu',\n      'machinectl',\n      'sesu',\n    ].map((val) => ({ value: val }))\n  );\n  const [becomeMethodField, meta, helpers] = useField({\n    name: `inputs.${fieldOptions.id}`,\n  });\n  return (\n    <FormGroup\n      fieldId={`credential-${fieldOptions.id}`}\n      helperTextInvalid={meta.error}\n      label={fieldOptions.label}\n      labelIcon={\n        fieldOptions.help_text && <Popover content={fieldOptions.help_text} />\n      }\n      isRequired={isRequired}\n      validated={!(meta.touched && meta.error) ? 'default' : 'error'}\n    >\n      <Select\n        ouiaId={`CredentialForm-${fieldOptions.id}`}\n        typeAheadAriaLabel={fieldOptions.label}\n        maxHeight={200}\n        variant={SelectVariant.typeahead}\n        onToggle={setIsOpen}\n        onClear={() => {\n          helpers.setValue('');\n        }}\n        onSelect={(event, option) => {\n          helpers.setValue(option);\n          setIsOpen(false);\n        }}\n        isOpen={isOpen}\n        id=\"privilege-escalation-methods\"\n        selections={becomeMethodField.value}\n        isCreatable\n        onCreateOption={(option) => {\n          setOptions([...options, { value: option }]);\n        }}\n        noResultsFoundText={t`No results found`}\n        createText={t`Create`}\n      >\n        {options.map((option) => (\n          <SelectOption key={option.value} value={option.value} />\n        ))}\n      </Select>\n    </FormGroup>\n  );\n}\nBecomeMethodField.propTypes = {\n  fieldOptions: shape({\n    id: string.isRequired,\n    label: string.isRequired,\n  }).isRequired,\n  isRequired: bool,\n};\nBecomeMethodField.defaultProps = {\n  isRequired: false,\n};\n\nexport default BecomeMethodField;\n"]},"metadata":{},"sourceType":"module"}