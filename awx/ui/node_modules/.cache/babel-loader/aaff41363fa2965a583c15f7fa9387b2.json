{"ast":null,"code":"import _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport stylesGrid from '@patternfly/react-styles/css/components/DataList/data-list-grid';\nvar gridBreakpointClasses = {\n  none: stylesGrid.modifiers.gridNone,\n  always: 'pf-m-grid',\n  sm: stylesGrid.modifiers.gridSm,\n  md: stylesGrid.modifiers.gridMd,\n  lg: stylesGrid.modifiers.gridLg,\n  xl: stylesGrid.modifiers.gridXl,\n  '2xl': stylesGrid.modifiers.grid_2xl\n};\nexport var DataListWrapModifier;\n\n(function (DataListWrapModifier) {\n  DataListWrapModifier[\"nowrap\"] = \"nowrap\";\n  DataListWrapModifier[\"truncate\"] = \"truncate\";\n  DataListWrapModifier[\"breakWord\"] = \"breakWord\";\n})(DataListWrapModifier || (DataListWrapModifier = {}));\n\nexport var DataListContext = React.createContext({\n  isSelectable: false\n});\n\nvar moveItem = function moveItem(arr, i1, toIndex) {\n  var fromIndex = arr.indexOf(i1);\n\n  if (fromIndex === toIndex) {\n    return arr;\n  }\n\n  var temp = arr.splice(fromIndex, 1);\n  arr.splice(toIndex, 0, temp[0]);\n  return arr;\n};\n\nexport var DataList = /*#__PURE__*/function (_React$Component) {\n  _inherits(DataList, _React$Component);\n\n  var _super = _createSuper(DataList);\n\n  function DataList(props) {\n    var _this;\n\n    _classCallCheck(this, DataList);\n\n    _this = _super.call(this, props);\n    _this.dragFinished = false;\n    _this.html5DragDrop = false;\n    _this.arrayCopy = React.Children.toArray(_this.props.children);\n    _this.ref = React.createRef();\n    _this.state = {\n      tempItemOrder: [],\n      draggedItemId: null,\n      draggingToItemIndex: null,\n      dragging: false\n    };\n\n    _this.getIndex = function (id) {\n      return Array.from(_this.ref.current.children).findIndex(function (item) {\n        return item.id === id;\n      });\n    };\n\n    _this.move = function (itemOrder) {\n      var ulNode = _this.ref.current;\n      var nodes = Array.from(ulNode.children);\n\n      if (nodes.map(function (node) {\n        return node.id;\n      }).every(function (id, i) {\n        return id === itemOrder[i];\n      })) {\n        return;\n      }\n\n      while (ulNode.firstChild) {\n        ulNode.removeChild(ulNode.lastChild);\n      }\n\n      itemOrder.forEach(function (id) {\n        ulNode.appendChild(nodes.find(function (n) {\n          return n.id === id;\n        }));\n      });\n    };\n\n    _this.dragStart0 = function (el) {\n      var onDragStart = _this.props.onDragStart;\n      var draggedItemId = el.id;\n      el.classList.add(styles.modifiers.ghostRow);\n      el.setAttribute('aria-pressed', 'true');\n\n      _this.setState({\n        draggedItemId: draggedItemId,\n        dragging: true\n      });\n\n      onDragStart && onDragStart(draggedItemId);\n    };\n\n    _this.dragStart = function (evt) {\n      evt.dataTransfer.effectAllowed = 'move';\n      evt.dataTransfer.setData('text/plain', evt.currentTarget.id);\n\n      _this.dragStart0(evt.currentTarget);\n    };\n\n    _this.onDragCancel = function () {\n      _this.move(_this.props.itemOrder);\n\n      Array.from(_this.ref.current.children).forEach(function (el) {\n        el.classList.remove(styles.modifiers.ghostRow);\n        el.classList.remove(styles.modifiers.dragOver);\n        el.setAttribute('aria-pressed', 'false');\n      });\n\n      _this.setState({\n        draggedItemId: null,\n        draggingToItemIndex: null,\n        dragging: false\n      });\n\n      if (_this.props.onDragCancel) {\n        _this.props.onDragCancel();\n      }\n    };\n\n    _this.dragLeave = function (evt) {\n      // This event false fires when we call `this.move()`, so double check we're out of zone\n      if (!_this.isValidDrop(evt)) {\n        _this.move(_this.props.itemOrder);\n\n        _this.setState({\n          draggingToItemIndex: null\n        });\n      }\n    };\n\n    _this.dragEnd0 = function (el) {\n      el.classList.remove(styles.modifiers.ghostRow);\n      el.classList.remove(styles.modifiers.dragOver);\n      el.setAttribute('aria-pressed', 'false');\n\n      _this.setState({\n        draggedItemId: null,\n        draggingToItemIndex: null,\n        dragging: false\n      });\n    };\n\n    _this.dragEnd = function (evt) {\n      _this.dragEnd0(evt.target);\n    };\n\n    _this.isValidDrop = function (evt) {\n      var ulRect = _this.ref.current.getBoundingClientRect();\n\n      return evt.clientX > ulRect.x && evt.clientX < ulRect.x + ulRect.width && evt.clientY > ulRect.y && evt.clientY < ulRect.y + ulRect.height;\n    };\n\n    _this.drop = function (evt) {\n      if (_this.isValidDrop(evt)) {\n        _this.props.onDragFinish(_this.state.tempItemOrder);\n      } else {\n        _this.onDragCancel();\n      }\n    };\n\n    _this.dragOver0 = function (id) {\n      var draggingToItemIndex = Array.from(_this.ref.current.children).findIndex(function (item) {\n        return item.id === id;\n      });\n\n      if (draggingToItemIndex !== _this.state.draggingToItemIndex) {\n        var tempItemOrder = moveItem(_toConsumableArray(_this.props.itemOrder), _this.state.draggedItemId, draggingToItemIndex);\n\n        _this.move(tempItemOrder);\n\n        _this.setState({\n          draggingToItemIndex: draggingToItemIndex,\n          tempItemOrder: tempItemOrder\n        });\n      }\n    };\n\n    _this.dragOver = function (evt) {\n      evt.preventDefault();\n      var curListItem = evt.target.closest('li');\n\n      if (!curListItem || !_this.ref.current.contains(curListItem) || curListItem.id === _this.state.draggedItemId) {\n        // We're going nowhere, don't bother calling `dragOver0`\n        return null;\n      } else {\n        _this.dragOver0(curListItem.id);\n      }\n    };\n\n    _this.handleDragButtonKeys = function (evt) {\n      var dragging = _this.state.dragging;\n\n      if (![' ', 'Escape', 'Enter', 'ArrowUp', 'ArrowDown'].includes(evt.key) || !_this.html5DragDrop) {\n        if (dragging) {\n          evt.preventDefault();\n        }\n\n        return;\n      }\n\n      evt.preventDefault();\n      var dragItem = evt.target.closest('li');\n\n      if (evt.key === ' ' || evt.key === 'Enter' && !dragging) {\n        _this.dragStart0(dragItem);\n      } else if (dragging) {\n        if (evt.key === 'Escape' || evt.key === 'Enter') {\n          _this.setState({\n            dragging: false\n          });\n\n          _this.dragFinished = true;\n\n          if (evt.key === 'Enter') {\n            _this.dragEnd0(dragItem);\n\n            _this.props.onDragFinish(_this.state.tempItemOrder);\n          } else {\n            _this.onDragCancel();\n          }\n        } else if (evt.key === 'ArrowUp') {\n          var nextSelection = dragItem.previousSibling;\n\n          if (nextSelection) {\n            _this.dragOver0(nextSelection.id);\n\n            dragItem.querySelector(\".\".concat(styles.dataListItemDraggableButton)).focus();\n          }\n        } else if (evt.key === 'ArrowDown') {\n          var _nextSelection = dragItem.nextSibling;\n\n          if (_nextSelection) {\n            _this.dragOver0(_nextSelection.id);\n\n            dragItem.querySelector(\".\".concat(styles.dataListItemDraggableButton)).focus();\n          }\n        }\n      }\n    };\n\n    _this.html5DragDrop = Boolean(props.onDragFinish || props.onDragStart || props.onDragMove || props.onDragCancel);\n\n    if (_this.html5DragDrop) {\n      // eslint-disable-next-line no-console\n      console.warn(\"DataList's onDrag API is deprecated. Use DragDrop instead.\");\n    }\n\n    return _this;\n  }\n\n  _createClass(DataList, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(oldProps) {\n      if (this.dragFinished) {\n        this.dragFinished = false;\n        this.setState({\n          tempItemOrder: _toConsumableArray(this.props.itemOrder),\n          draggedItemId: null,\n          dragging: false\n        });\n      }\n\n      if (oldProps.itemOrder !== this.props.itemOrder) {\n        this.move(this.props.itemOrder);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          children = _a.children,\n          onSelectDataListItem = _a.onSelectDataListItem,\n          selectedDataListItemId = _a.selectedDataListItemId,\n          isCompact = _a.isCompact,\n          wrapModifier = _a.wrapModifier,\n          onDragStart = _a.onDragStart,\n          onDragMove = _a.onDragMove,\n          onDragCancel = _a.onDragCancel,\n          onDragFinish = _a.onDragFinish,\n          gridBreakpoint = _a.gridBreakpoint,\n          itemOrder = _a.itemOrder,\n          selectableRow = _a.selectableRow,\n          props = __rest(_a, [\"className\", \"children\", \"onSelectDataListItem\", \"selectedDataListItemId\", \"isCompact\", \"wrapModifier\", \"onDragStart\", \"onDragMove\", \"onDragCancel\", \"onDragFinish\", \"gridBreakpoint\", \"itemOrder\", \"selectableRow\"]);\n\n      var dragging = this.state.dragging;\n      var isSelectable = onSelectDataListItem !== undefined;\n\n      var updateSelectedDataListItem = function updateSelectedDataListItem(id) {\n        onSelectDataListItem(id);\n      };\n\n      var dragProps = this.html5DragDrop && {\n        onDragOver: this.dragOver,\n        onDrop: this.dragOver,\n        onDragLeave: this.dragLeave\n      };\n      return React.createElement(DataListContext.Provider, {\n        value: {\n          isSelectable: isSelectable,\n          selectedDataListItemId: selectedDataListItemId,\n          updateSelectedDataListItem: updateSelectedDataListItem,\n          selectableRow: selectableRow,\n          isDraggable: this.html5DragDrop,\n          dragStart: this.dragStart,\n          dragEnd: this.dragEnd,\n          drop: this.drop,\n          dragKeyHandler: this.handleDragButtonKeys\n        }\n      }, React.createElement(\"ul\", Object.assign({\n        className: css(styles.dataList, isCompact && styles.modifiers.compact, gridBreakpointClasses[gridBreakpoint], wrapModifier && styles.modifiers[wrapModifier], dragging && styles.modifiers.dragOver, className),\n        style: props.style\n      }, props, dragProps, {\n        ref: this.ref\n      }), children));\n    }\n  }]);\n\n  return DataList;\n}(React.Component);\nDataList.displayName = 'DataList';\nDataList.defaultProps = {\n  children: null,\n  className: '',\n  selectedDataListItemId: '',\n  isCompact: false,\n  gridBreakpoint: 'md',\n  wrapModifier: null\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DataList/DataList.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport stylesGrid from '@patternfly/react-styles/css/components/DataList/data-list-grid';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nconst gridBreakpointClasses = {\n  none: stylesGrid.modifiers.gridNone,\n  always: 'pf-m-grid', // Placeholder per https://github.com/patternfly/patternfly-react/issues/4965#issuecomment-704984236\n  sm: stylesGrid.modifiers.gridSm,\n  md: stylesGrid.modifiers.gridMd,\n  lg: stylesGrid.modifiers.gridLg,\n  xl: stylesGrid.modifiers.gridXl,\n  '2xl': stylesGrid.modifiers.grid_2xl\n};\n\nexport enum DataListWrapModifier {\n  nowrap = 'nowrap',\n  truncate = 'truncate',\n  breakWord = 'breakWord'\n}\n\nexport interface SelectableRowObject {\n  /** Determines if only one of the selectable rows should be selectable at a time */\n  type: 'multiple' | 'single';\n  /** Callback that executes when the screen reader accessible element receives a change event */\n  onChange: (id: string, event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nexport interface DataListProps extends Omit<React.HTMLProps<HTMLUListElement>, 'onDragStart' | 'ref'> {\n  /** Content rendered inside the DataList list */\n  children?: React.ReactNode;\n  /** Additional classes added to the DataList list */\n  className?: string;\n  /** Adds accessible text to the DataList list */\n  'aria-label': string;\n  /** Optional callback to make DataList selectable, fired when DataListItem selected */\n  onSelectDataListItem?: (id: string) => void;\n  /** @deprecated Optional callback to make DataList draggable, fired when dragging ends */\n  onDragFinish?: (newItemOrder: string[]) => void;\n  /** @deprecated Optional informational callback for dragging, fired when dragging starts */\n  onDragStart?: (id: string) => void;\n  /** @deprecated Optional informational callback for dragging, fired when an item moves */\n  onDragMove?: (oldIndex: number, newIndex: number) => void;\n  /** @deprecated Optional informational callback for dragging, fired when dragging is cancelled */\n  onDragCancel?: () => void;\n  /** Id of DataList item currently selected */\n  selectedDataListItemId?: string;\n  /** Flag indicating if DataList should have compact styling */\n  isCompact?: boolean;\n  /** Specifies the grid breakpoints  */\n  gridBreakpoint?: 'none' | 'always' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Determines which wrapping modifier to apply to the DataList */\n  wrapModifier?: DataListWrapModifier | 'nowrap' | 'truncate' | 'breakWord';\n  /** @deprecated Order of items in a draggable DataList */\n  itemOrder?: string[];\n  /** @beta Object that causes the data list to render hidden inputs which improve selectable item a11y */\n  selectableRow?: SelectableRowObject;\n}\n\ninterface DataListState {\n  draggedItemId: string;\n  draggingToItemIndex: number;\n  dragging: boolean;\n  tempItemOrder: string[];\n}\n\ninterface DataListContextProps {\n  isSelectable: boolean;\n  selectedDataListItemId: string;\n  updateSelectedDataListItem: (id: string) => void;\n  selectableRow?: SelectableRowObject;\n  isDraggable: boolean;\n  dragStart: (e: React.DragEvent) => void;\n  dragEnd: (e: React.DragEvent) => void;\n  drop: (e: React.DragEvent) => void;\n  dragKeyHandler: (e: React.KeyboardEvent) => void;\n}\n\nexport const DataListContext = React.createContext<Partial<DataListContextProps>>({\n  isSelectable: false\n});\n\nconst moveItem = (arr: string[], i1: string, toIndex: number) => {\n  const fromIndex = arr.indexOf(i1);\n  if (fromIndex === toIndex) {\n    return arr;\n  }\n  const temp = arr.splice(fromIndex, 1);\n  arr.splice(toIndex, 0, temp[0]);\n\n  return arr;\n};\n\nexport class DataList extends React.Component<DataListProps, DataListState> {\n  static displayName = 'DataList';\n  static defaultProps: PickOptional<DataListProps> = {\n    children: null,\n    className: '',\n    selectedDataListItemId: '',\n    isCompact: false,\n    gridBreakpoint: 'md',\n    wrapModifier: null\n  };\n  dragFinished: boolean = false;\n  html5DragDrop: boolean = false;\n  arrayCopy: React.ReactElement[] = React.Children.toArray(this.props.children) as React.ReactElement[];\n  ref = React.createRef<HTMLUListElement>();\n\n  state: DataListState = {\n    tempItemOrder: [],\n    draggedItemId: null,\n    draggingToItemIndex: null,\n    dragging: false\n  };\n\n  constructor(props: DataListProps) {\n    super(props);\n\n    this.html5DragDrop = Boolean(props.onDragFinish || props.onDragStart || props.onDragMove || props.onDragCancel);\n    if (this.html5DragDrop) {\n      // eslint-disable-next-line no-console\n      console.warn(\"DataList's onDrag API is deprecated. Use DragDrop instead.\");\n    }\n  }\n\n  componentDidUpdate(oldProps: DataListProps) {\n    if (this.dragFinished) {\n      this.dragFinished = false;\n\n      this.setState({\n        tempItemOrder: [...this.props.itemOrder],\n        draggedItemId: null,\n        dragging: false\n      });\n    }\n    if (oldProps.itemOrder !== this.props.itemOrder) {\n      this.move(this.props.itemOrder);\n    }\n  }\n\n  getIndex = (id: string) => Array.from(this.ref.current.children).findIndex(item => item.id === id);\n\n  move = (itemOrder: string[]) => {\n    const ulNode = this.ref.current;\n    const nodes = Array.from(ulNode.children);\n    if (nodes.map(node => node.id).every((id, i) => id === itemOrder[i])) {\n      return;\n    }\n    while (ulNode.firstChild) {\n      ulNode.removeChild(ulNode.lastChild);\n    }\n\n    itemOrder.forEach(id => {\n      ulNode.appendChild(nodes.find(n => n.id === id));\n    });\n  };\n\n  dragStart0 = (el: HTMLElement) => {\n    const { onDragStart } = this.props;\n    const draggedItemId = el.id;\n\n    el.classList.add(styles.modifiers.ghostRow);\n    el.setAttribute('aria-pressed', 'true');\n    this.setState({\n      draggedItemId,\n      dragging: true\n    });\n    onDragStart && onDragStart(draggedItemId);\n  };\n\n  dragStart = (evt: React.DragEvent) => {\n    evt.dataTransfer.effectAllowed = 'move';\n    evt.dataTransfer.setData('text/plain', evt.currentTarget.id);\n    this.dragStart0(evt.currentTarget as HTMLElement);\n  };\n\n  onDragCancel = () => {\n    this.move(this.props.itemOrder);\n    Array.from(this.ref.current.children).forEach(el => {\n      el.classList.remove(styles.modifiers.ghostRow);\n      el.classList.remove(styles.modifiers.dragOver);\n      el.setAttribute('aria-pressed', 'false');\n    });\n    this.setState({\n      draggedItemId: null,\n      draggingToItemIndex: null,\n      dragging: false\n    });\n\n    if (this.props.onDragCancel) {\n      this.props.onDragCancel();\n    }\n  };\n\n  dragLeave = (evt: React.DragEvent) => {\n    // This event false fires when we call `this.move()`, so double check we're out of zone\n    if (!this.isValidDrop(evt)) {\n      this.move(this.props.itemOrder);\n      this.setState({\n        draggingToItemIndex: null\n      });\n    }\n  };\n\n  dragEnd0 = (el: HTMLElement) => {\n    el.classList.remove(styles.modifiers.ghostRow);\n    el.classList.remove(styles.modifiers.dragOver);\n    el.setAttribute('aria-pressed', 'false');\n    this.setState({\n      draggedItemId: null,\n      draggingToItemIndex: null,\n      dragging: false\n    });\n  };\n\n  dragEnd = (evt: React.DragEvent) => {\n    this.dragEnd0(evt.target as HTMLElement);\n  };\n\n  isValidDrop = (evt: React.DragEvent) => {\n    const ulRect = this.ref.current.getBoundingClientRect();\n    return (\n      evt.clientX > ulRect.x &&\n      evt.clientX < ulRect.x + ulRect.width &&\n      evt.clientY > ulRect.y &&\n      evt.clientY < ulRect.y + ulRect.height\n    );\n  };\n\n  drop = (evt: React.DragEvent) => {\n    if (this.isValidDrop(evt)) {\n      this.props.onDragFinish(this.state.tempItemOrder);\n    } else {\n      this.onDragCancel();\n    }\n  };\n\n  dragOver0 = (id: string) => {\n    const draggingToItemIndex = Array.from(this.ref.current.children).findIndex(item => item.id === id);\n    if (draggingToItemIndex !== this.state.draggingToItemIndex) {\n      const tempItemOrder = moveItem([...this.props.itemOrder], this.state.draggedItemId, draggingToItemIndex);\n      this.move(tempItemOrder);\n\n      this.setState({\n        draggingToItemIndex,\n        tempItemOrder\n      });\n    }\n  };\n\n  dragOver = (evt: React.DragEvent): string | null => {\n    evt.preventDefault();\n\n    const curListItem = (evt.target as HTMLElement).closest('li');\n    if (!curListItem || !this.ref.current.contains(curListItem) || curListItem.id === this.state.draggedItemId) {\n      // We're going nowhere, don't bother calling `dragOver0`\n      return null;\n    } else {\n      this.dragOver0(curListItem.id);\n    }\n  };\n\n  handleDragButtonKeys = (evt: React.KeyboardEvent) => {\n    const { dragging } = this.state;\n    if (![' ', 'Escape', 'Enter', 'ArrowUp', 'ArrowDown'].includes(evt.key) || !this.html5DragDrop) {\n      if (dragging) {\n        evt.preventDefault();\n      }\n      return;\n    }\n    evt.preventDefault();\n\n    const dragItem = (evt.target as Element).closest('li');\n\n    if (evt.key === ' ' || (evt.key === 'Enter' && !dragging)) {\n      this.dragStart0(dragItem);\n    } else if (dragging) {\n      if (evt.key === 'Escape' || evt.key === 'Enter') {\n        this.setState({\n          dragging: false\n        });\n        this.dragFinished = true;\n        if (evt.key === 'Enter') {\n          this.dragEnd0(dragItem);\n          this.props.onDragFinish(this.state.tempItemOrder);\n        } else {\n          this.onDragCancel();\n        }\n      } else if (evt.key === 'ArrowUp') {\n        const nextSelection = dragItem.previousSibling as HTMLElement;\n        if (nextSelection) {\n          this.dragOver0(nextSelection.id);\n          (dragItem.querySelector(`.${styles.dataListItemDraggableButton}`) as HTMLElement).focus();\n        }\n      } else if (evt.key === 'ArrowDown') {\n        const nextSelection = dragItem.nextSibling as HTMLElement;\n        if (nextSelection) {\n          this.dragOver0(nextSelection.id);\n          (dragItem.querySelector(`.${styles.dataListItemDraggableButton}`) as HTMLElement).focus();\n        }\n      }\n    }\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      onSelectDataListItem,\n      selectedDataListItemId,\n      isCompact,\n      wrapModifier,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onDragStart,\n      onDragMove,\n      onDragCancel,\n      onDragFinish,\n      gridBreakpoint,\n      itemOrder,\n      selectableRow,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    const { dragging } = this.state;\n    const isSelectable = onSelectDataListItem !== undefined;\n\n    const updateSelectedDataListItem = (id: string) => {\n      onSelectDataListItem(id);\n    };\n\n    const dragProps = this.html5DragDrop && {\n      onDragOver: this.dragOver,\n      onDrop: this.dragOver,\n      onDragLeave: this.dragLeave\n    };\n\n    return (\n      <DataListContext.Provider\n        value={{\n          isSelectable,\n          selectedDataListItemId,\n          updateSelectedDataListItem,\n          selectableRow,\n          isDraggable: this.html5DragDrop,\n          dragStart: this.dragStart,\n          dragEnd: this.dragEnd,\n          drop: this.drop,\n          dragKeyHandler: this.handleDragButtonKeys\n        }}\n      >\n        <ul\n          className={css(\n            styles.dataList,\n            isCompact && styles.modifiers.compact,\n            gridBreakpointClasses[gridBreakpoint],\n            wrapModifier && styles.modifiers[wrapModifier],\n            dragging && styles.modifiers.dragOver,\n            className\n          )}\n          style={props.style}\n          {...props}\n          {...dragProps}\n          ref={this.ref}\n        >\n          {children}\n        </ul>\n      </DataListContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}