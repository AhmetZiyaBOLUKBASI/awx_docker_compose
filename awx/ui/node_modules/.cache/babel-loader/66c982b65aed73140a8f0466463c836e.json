{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nvar TreeViewListItemBase = function TreeViewListItemBase(_ref) {\n  var name = _ref.name,\n      title = _ref.title,\n      id = _ref.id,\n      isExpanded = _ref.isExpanded,\n      _ref$defaultExpanded = _ref.defaultExpanded,\n      defaultExpanded = _ref$defaultExpanded === void 0 ? false : _ref$defaultExpanded,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? null : _ref$children,\n      onSelect = _ref.onSelect,\n      onCheck = _ref.onCheck,\n      _ref$hasCheck = _ref.hasCheck,\n      hasCheck = _ref$hasCheck === void 0 ? false : _ref$hasCheck,\n      _ref$checkProps = _ref.checkProps,\n      checkProps = _ref$checkProps === void 0 ? {\n    checked: false\n  } : _ref$checkProps,\n      _ref$hasBadge = _ref.hasBadge,\n      hasBadge = _ref$hasBadge === void 0 ? false : _ref$hasBadge,\n      customBadgeContent = _ref.customBadgeContent,\n      _ref$badgeProps = _ref.badgeProps,\n      badgeProps = _ref$badgeProps === void 0 ? {\n    isRead: true\n  } : _ref$badgeProps,\n      isCompact = _ref.isCompact,\n      _ref$activeItems = _ref.activeItems,\n      activeItems = _ref$activeItems === void 0 ? [] : _ref$activeItems,\n      itemData = _ref.itemData,\n      parentItem = _ref.parentItem,\n      icon = _ref.icon,\n      expandedIcon = _ref.expandedIcon,\n      action = _ref.action,\n      compareItems = _ref.compareItems,\n      useMemo = _ref.useMemo;\n\n  var _useState = useState(defaultExpanded),\n      _useState2 = _slicedToArray(_useState, 2),\n      internalIsExpanded = _useState2[0],\n      setIsExpanded = _useState2[1];\n\n  useEffect(function () {\n    if (isExpanded !== undefined && isExpanded !== null) {\n      setIsExpanded(isExpanded);\n    } else if (defaultExpanded !== undefined && defaultExpanded !== null) {\n      setIsExpanded(internalIsExpanded || defaultExpanded);\n    }\n  }, [isExpanded, defaultExpanded]);\n  var Component = hasCheck ? 'div' : 'button';\n  var ToggleComponent = hasCheck ? 'button' : 'div';\n\n  var renderToggle = function renderToggle(randomId) {\n    return React.createElement(ToggleComponent, Object.assign({\n      className: css(styles.treeViewNodeToggle),\n      onClick: function onClick() {\n        if (hasCheck) {\n          setIsExpanded(!internalIsExpanded);\n        }\n      }\n    }, hasCheck && {\n      'aria-labelledby': \"label-\".concat(randomId)\n    }, {\n      tabIndex: -1\n    }), React.createElement(\"span\", {\n      className: css(styles.treeViewNodeToggleIcon)\n    }, React.createElement(AngleRightIcon, {\n      \"aria-hidden\": \"true\"\n    })));\n  };\n\n  var renderCheck = function renderCheck(randomId) {\n    return React.createElement(\"span\", {\n      className: css(styles.treeViewNodeCheck)\n    }, React.createElement(\"input\", Object.assign({\n      type: \"checkbox\",\n      onChange: function onChange(evt) {\n        return onCheck && onCheck(evt, itemData, parentItem);\n      },\n      onClick: function onClick(evt) {\n        return evt.stopPropagation();\n      },\n      ref: function ref(elem) {\n        return elem && (elem.indeterminate = checkProps.checked === null);\n      }\n    }, checkProps, {\n      checked: checkProps.checked === null ? false : checkProps.checked,\n      id: randomId,\n      tabIndex: -1\n    })));\n  };\n\n  var iconRendered = React.createElement(\"span\", {\n    className: css(styles.treeViewNodeIcon)\n  }, !internalIsExpanded && icon, internalIsExpanded && (expandedIcon || icon));\n\n  var renderNodeContent = function renderNodeContent(randomId) {\n    var content = React.createElement(React.Fragment, null, isCompact && title && React.createElement(\"span\", {\n      className: css(styles.treeViewNodeTitle)\n    }, title), hasCheck ? React.createElement(\"label\", {\n      className: css(styles.treeViewNodeText),\n      htmlFor: randomId,\n      id: \"label-\".concat(randomId)\n    }, name) : React.createElement(\"span\", {\n      className: css(styles.treeViewNodeText)\n    }, name));\n    return isCompact ? React.createElement(\"div\", {\n      className: css(styles.treeViewNodeContent)\n    }, content) : content;\n  };\n\n  var badgeRendered = React.createElement(React.Fragment, null, hasBadge && children && React.createElement(\"span\", {\n    className: css(styles.treeViewNodeCount)\n  }, React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent ? customBadgeContent : children.props.data.length)), hasBadge && !children && customBadgeContent !== undefined && React.createElement(\"span\", {\n    className: css(styles.treeViewNodeCount)\n  }, React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent)));\n  return React.createElement(\"li\", Object.assign({\n    id: id,\n    className: css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded)\n  }, internalIsExpanded && {\n    'aria-expanded': 'true'\n  }, {\n    role: \"treeitem\",\n    tabIndex: -1\n  }), React.createElement(\"div\", {\n    className: css(styles.treeViewContent)\n  }, React.createElement(GenerateId, {\n    prefix: \"checkbox-id\"\n  }, function (randomId) {\n    return React.createElement(Component, {\n      className: css(styles.treeViewNode, !children && activeItems && activeItems.length > 0 && activeItems.some(function (item) {\n        return compareItems && item && compareItems(item, itemData);\n      }) ? styles.modifiers.current : ''),\n      onClick: function onClick(evt) {\n        if (!hasCheck) {\n          onSelect && onSelect(evt, itemData, parentItem);\n\n          if (children && evt.isDefaultPrevented() !== true) {\n            setIsExpanded(!internalIsExpanded);\n          }\n        }\n      },\n      tabIndex: -1\n    }, React.createElement(\"div\", {\n      className: css(styles.treeViewNodeContainer)\n    }, children && renderToggle(randomId), hasCheck && renderCheck(randomId), icon && iconRendered, renderNodeContent(randomId), badgeRendered));\n  }), action && React.createElement(\"div\", {\n    className: css(styles.treeViewAction)\n  }, action)), internalIsExpanded && children);\n};\n\nexport var TreeViewListItem = React.memo(TreeViewListItemBase, function (prevProps, nextProps) {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n\n  var prevIncludes = prevProps.activeItems && prevProps.activeItems.length > 0 && prevProps.activeItems.some(function (item) {\n    return prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData);\n  });\n  var nextIncludes = nextProps.activeItems && nextProps.activeItems.length > 0 && nextProps.activeItems.some(function (item) {\n    return nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData);\n  });\n\n  if (prevIncludes || nextIncludes) {\n    return false;\n  }\n\n  if (prevProps.name !== nextProps.name || prevProps.title !== nextProps.title || prevProps.id !== nextProps.id || prevProps.isExpanded !== nextProps.isExpanded || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.onSelect !== nextProps.onSelect || prevProps.onCheck !== nextProps.onCheck || prevProps.hasCheck !== nextProps.hasCheck || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.customBadgeContent !== nextProps.customBadgeContent || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isCompact !== nextProps.isCompact || prevProps.icon !== nextProps.icon || prevProps.expandedIcon !== nextProps.expandedIcon || prevProps.action !== nextProps.action || prevProps.parentItem !== nextProps.parentItem || prevProps.itemData !== nextProps.itemData) {\n    return false;\n  }\n\n  return true;\n});\nTreeViewListItem.displayName = 'TreeViewListItem';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/TreeView/TreeViewListItem.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { TreeViewDataItem } from './TreeView';\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport interface TreeViewCheckProps extends Partial<React.InputHTMLAttributes<HTMLInputElement>> {\n  checked?: boolean | null;\n}\n\nexport interface TreeViewListItemProps {\n  /** Internal content of a tree view item */\n  name: React.ReactNode;\n  /** Title a tree view item */\n  title: React.ReactNode;\n  /** ID of a tree view item */\n  id?: string;\n  /** Flag indicating if the node is expanded, overrides internal state */\n  isExpanded?: boolean;\n  /** Flag indicating if node is expanded by default */\n  defaultExpanded?: boolean;\n  /** Child nodes of a tree view item */\n  children?: React.ReactNode;\n  /** Callback for item selection. Note: calling event.preventDefault() will prevent the node from toggling. */\n  onSelect?: (event: React.MouseEvent, item: TreeViewDataItem, parent: TreeViewDataItem) => void;\n  /** Callback for item checkbox selection */\n  onCheck?: (event: React.ChangeEvent, item: TreeViewDataItem, parent: TreeViewDataItem) => void;\n  /** Flag indicating if a tree view item has a checkbox */\n  hasCheck?: boolean;\n  /** Additional properties of the tree view item checkbox */\n  checkProps?: TreeViewCheckProps;\n  /** Flag indicating if a tree view item has a badge */\n  hasBadge?: boolean;\n  /** Optional prop for custom badge */\n  customBadgeContent?: React.ReactNode;\n  /** Additional properties of the tree view item badge */\n  badgeProps?: any;\n  /** Flag indicating if the tree view is using a compact variation. */\n  isCompact?: boolean;\n  /** Active items of tree view */\n  activeItems?: TreeViewDataItem[];\n  /** Data structure of tree view item */\n  itemData?: TreeViewDataItem;\n  /** Parent item of tree view item */\n  parentItem?: TreeViewDataItem;\n  /** Default icon of a tree view item */\n  icon?: React.ReactNode;\n  /** Expanded icon of a tree view item */\n  expandedIcon?: React.ReactNode;\n  /** Action of a tree view item, can be a Button or Dropdown */\n  action?: React.ReactNode;\n  /** Callback for item comparison function */\n  compareItems?: (item: TreeViewDataItem, itemToCheck: TreeViewDataItem) => boolean;\n  /** Flag indicating the TreeView should utilize memoization to help render large data sets. Setting this property requires that `activeItems` pass in an array containing every node in the selected item's path. */\n  useMemo?: boolean;\n}\n\nconst TreeViewListItemBase: React.FunctionComponent<TreeViewListItemProps> = ({\n  name,\n  title,\n  id,\n  isExpanded,\n  defaultExpanded = false,\n  children = null,\n  onSelect,\n  onCheck,\n  hasCheck = false,\n  checkProps = {\n    checked: false\n  },\n  hasBadge = false,\n  customBadgeContent,\n  badgeProps = { isRead: true },\n  isCompact,\n  activeItems = [],\n  itemData,\n  parentItem,\n  icon,\n  expandedIcon,\n  action,\n  compareItems,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  useMemo\n}: TreeViewListItemProps) => {\n  const [internalIsExpanded, setIsExpanded] = useState(defaultExpanded);\n  useEffect(() => {\n    if (isExpanded !== undefined && isExpanded !== null) {\n      setIsExpanded(isExpanded);\n    } else if (defaultExpanded !== undefined && defaultExpanded !== null) {\n      setIsExpanded(internalIsExpanded || defaultExpanded);\n    }\n  }, [isExpanded, defaultExpanded]);\n\n  const Component = hasCheck ? 'div' : 'button';\n  const ToggleComponent = hasCheck ? 'button' : 'div';\n  const renderToggle = (randomId: string) => (\n    <ToggleComponent\n      className={css(styles.treeViewNodeToggle)}\n      onClick={() => {\n        if (hasCheck) {\n          setIsExpanded(!internalIsExpanded);\n        }\n      }}\n      {...(hasCheck && { 'aria-labelledby': `label-${randomId}` })}\n      tabIndex={-1}\n    >\n      <span className={css(styles.treeViewNodeToggleIcon)}>\n        <AngleRightIcon aria-hidden=\"true\" />\n      </span>\n    </ToggleComponent>\n  );\n  const renderCheck = (randomId: string) => (\n    <span className={css(styles.treeViewNodeCheck)}>\n      <input\n        type=\"checkbox\"\n        onChange={(evt: React.ChangeEvent) => onCheck && onCheck(evt, itemData, parentItem)}\n        onClick={(evt: React.MouseEvent) => evt.stopPropagation()}\n        ref={elem => elem && (elem.indeterminate = checkProps.checked === null)}\n        {...checkProps}\n        checked={checkProps.checked === null ? false : checkProps.checked}\n        id={randomId}\n        tabIndex={-1}\n      />\n    </span>\n  );\n  const iconRendered = (\n    <span className={css(styles.treeViewNodeIcon)}>\n      {!internalIsExpanded && icon}\n      {internalIsExpanded && (expandedIcon || icon)}\n    </span>\n  );\n  const renderNodeContent = (randomId: string) => {\n    const content = (\n      <>\n        {isCompact && title && <span className={css(styles.treeViewNodeTitle)}>{title}</span>}\n        {hasCheck ? (\n          <label className={css(styles.treeViewNodeText)} htmlFor={randomId} id={`label-${randomId}`}>\n            {name}\n          </label>\n        ) : (\n          <span className={css(styles.treeViewNodeText)}>{name}</span>\n        )}\n      </>\n    );\n    return isCompact ? <div className={css(styles.treeViewNodeContent)}>{content}</div> : content;\n  };\n  const badgeRendered = (\n    <>\n      {hasBadge && children && (\n        <span className={css(styles.treeViewNodeCount)}>\n          <Badge {...badgeProps}>\n            {customBadgeContent ? customBadgeContent : (children as React.ReactElement).props.data.length}\n          </Badge>\n        </span>\n      )}\n      {hasBadge && !children && customBadgeContent !== undefined && (\n        <span className={css(styles.treeViewNodeCount)}>\n          <Badge {...badgeProps}>{customBadgeContent}</Badge>\n        </span>\n      )}\n    </>\n  );\n  return (\n    <li\n      id={id}\n      className={css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded)}\n      {...(internalIsExpanded && { 'aria-expanded': 'true' })}\n      role=\"treeitem\"\n      tabIndex={-1}\n    >\n      <div className={css(styles.treeViewContent)}>\n        <GenerateId prefix=\"checkbox-id\">\n          {randomId => (\n            <Component\n              className={css(\n                styles.treeViewNode,\n                !children &&\n                  activeItems &&\n                  activeItems.length > 0 &&\n                  activeItems.some(item => compareItems && item && compareItems(item, itemData))\n                  ? styles.modifiers.current\n                  : ''\n              )}\n              onClick={(evt: React.MouseEvent) => {\n                if (!hasCheck) {\n                  onSelect && onSelect(evt, itemData, parentItem);\n                  if (children && evt.isDefaultPrevented() !== true) {\n                    setIsExpanded(!internalIsExpanded);\n                  }\n                }\n              }}\n              tabIndex={-1}\n            >\n              <div className={css(styles.treeViewNodeContainer)}>\n                {children && renderToggle(randomId)}\n                {hasCheck && renderCheck(randomId)}\n                {icon && iconRendered}\n                {renderNodeContent(randomId)}\n                {badgeRendered}\n              </div>\n            </Component>\n          )}\n        </GenerateId>\n        {action && <div className={css(styles.treeViewAction)}>{action}</div>}\n      </div>\n      {internalIsExpanded && children}\n    </li>\n  );\n};\n\nexport const TreeViewListItem = React.memo(TreeViewListItemBase, (prevProps, nextProps) => {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n\n  const prevIncludes =\n    prevProps.activeItems &&\n    prevProps.activeItems.length > 0 &&\n    prevProps.activeItems.some(\n      item => prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData)\n    );\n  const nextIncludes =\n    nextProps.activeItems &&\n    nextProps.activeItems.length > 0 &&\n    nextProps.activeItems.some(\n      item => nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData)\n    );\n\n  if (prevIncludes || nextIncludes) {\n    return false;\n  }\n\n  if (\n    prevProps.name !== nextProps.name ||\n    prevProps.title !== nextProps.title ||\n    prevProps.id !== nextProps.id ||\n    prevProps.isExpanded !== nextProps.isExpanded ||\n    prevProps.defaultExpanded !== nextProps.defaultExpanded ||\n    prevProps.onSelect !== nextProps.onSelect ||\n    prevProps.onCheck !== nextProps.onCheck ||\n    prevProps.hasCheck !== nextProps.hasCheck ||\n    prevProps.checkProps !== nextProps.checkProps ||\n    prevProps.hasBadge !== nextProps.hasBadge ||\n    prevProps.customBadgeContent !== nextProps.customBadgeContent ||\n    prevProps.badgeProps !== nextProps.badgeProps ||\n    prevProps.isCompact !== nextProps.isCompact ||\n    prevProps.icon !== nextProps.icon ||\n    prevProps.expandedIcon !== nextProps.expandedIcon ||\n    prevProps.action !== nextProps.action ||\n    prevProps.parentItem !== nextProps.parentItem ||\n    prevProps.itemData !== nextProps.itemData\n  ) {\n    return false;\n  }\n\n  return true;\n});\n\nTreeViewListItem.displayName = 'TreeViewListItem';\n"]},"metadata":{},"sourceType":"module"}