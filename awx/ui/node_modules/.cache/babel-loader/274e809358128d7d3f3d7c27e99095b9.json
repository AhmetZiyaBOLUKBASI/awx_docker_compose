{"ast":null,"code":"import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";/* eslint-disable react/jsx-no-useless-fragment */import React,{useCallback,useEffect}from'react';import{useField,useFormikContext}from'formik';import{Form,FormGroup}from'@patternfly/react-core';import{CredentialTypesAPI}from'api';import AnsibleSelect from'components/AnsibleSelect';import ContentError from'components/ContentError';import ContentLoading from'components/ContentLoading';import FormField from'components/FormField';import{FormFullWidthLayout}from'components/FormLayout';import Popover from'components/Popover';import useRequest from'hooks/useRequest';import{required}from'util/validators';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function MetadataStep(){var form=useFormikContext();var _useField=useField('credential'),_useField2=_slicedToArray(_useField,1),selectedCredential=_useField2[0];var _useField3=useField('inputs'),_useField4=_slicedToArray(_useField3,1),inputValues=_useField4[0];var _useRequest=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$CredentialType,_yield$CredentialType2,requiredFields,metadata;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return CredentialTypesAPI.readDetail(selectedCredential.value.credential_type||selectedCredential.value.credential_type_id);case 2:_yield$CredentialType=_context.sent;_yield$CredentialType2=_yield$CredentialType.data.inputs;requiredFields=_yield$CredentialType2.required;metadata=_yield$CredentialType2.metadata;metadata.forEach(function(field){if(inputValues.value[field.id]){form.initialValues.inputs[field.id]=inputValues.value[field.id];}else if(field.type==='string'&&field.choices){form.initialValues.inputs[field.id]=field.default||field.choices[0];}else{form.initialValues.inputs[field.id]='';}if(requiredFields&&requiredFields.includes(field.id)){field.required=true;}});return _context.abrupt(\"return\",metadata);case 8:case\"end\":return _context.stop();}}},_callee);})),[]),[]),fields=_useRequest.result,error=_useRequest.error,isLoading=_useRequest.isLoading,fetchMetadataOptions=_useRequest.request;useEffect(function(){fetchMetadataOptions();},[fetchMetadataOptions]);if(isLoading){return/*#__PURE__*/_jsx(ContentLoading,{});}if(error){return/*#__PURE__*/_jsx(ContentError,{error:error});}return/*#__PURE__*/_jsx(_Fragment,{children:fields.length>0&&/*#__PURE__*/_jsx(Form,{children:/*#__PURE__*/_jsx(FormFullWidthLayout,{children:fields.map(function(field){if(field.type==='string'){if(field.choices){return/*#__PURE__*/_jsx(FormGroup,{fieldId:\"credential-\".concat(field.id),label:field.label,isRequired:field.required,labelIcon:field.help_text&&/*#__PURE__*/_jsx(Popover,{content:field.help_text}),children:/*#__PURE__*/_jsx(AnsibleSelect,{name:\"inputs.\".concat(field.id),value:form.values.inputs[field.id],id:\"credential-\".concat(field.id),data:field.choices.map(function(choice){return{value:choice,key:choice,label:choice};}),onChange:function onChange(event,value){form.setFieldValue(\"inputs.\".concat(field.id),value);},validate:field.required?required(null):null})},field.id);}return/*#__PURE__*/_jsx(FormField,{id:\"credential-\".concat(field.id),label:field.label,tooltip:field.help_text,name:\"inputs.\".concat(field.id),type:field.multiline?'textarea':'text',isRequired:field.required,validate:field.required?required(null):null},field.id);}return null;})})})});}export default MetadataStep;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Credential/shared/CredentialPlugins/CredentialPluginPrompt/MetadataStep.js"],"names":["React","useCallback","useEffect","useField","useFormikContext","Form","FormGroup","CredentialTypesAPI","AnsibleSelect","ContentError","ContentLoading","FormField","FormFullWidthLayout","Popover","useRequest","required","MetadataStep","form","selectedCredential","inputValues","readDetail","value","credential_type","credential_type_id","data","inputs","requiredFields","metadata","forEach","field","id","initialValues","type","choices","default","includes","fields","result","error","isLoading","fetchMetadataOptions","request","length","map","label","help_text","values","choice","key","event","setFieldValue","multiline"],"mappings":"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","sourcesContent":["/* eslint-disable react/jsx-no-useless-fragment */\nimport React, { useCallback, useEffect } from 'react';\n\nimport { useField, useFormikContext } from 'formik';\nimport { Form, FormGroup } from '@patternfly/react-core';\nimport { CredentialTypesAPI } from 'api';\nimport AnsibleSelect from 'components/AnsibleSelect';\nimport ContentError from 'components/ContentError';\nimport ContentLoading from 'components/ContentLoading';\nimport FormField from 'components/FormField';\nimport { FormFullWidthLayout } from 'components/FormLayout';\nimport Popover from 'components/Popover';\nimport useRequest from 'hooks/useRequest';\nimport { required } from 'util/validators';\n\nfunction MetadataStep() {\n  const form = useFormikContext();\n  const [selectedCredential] = useField('credential');\n  const [inputValues] = useField('inputs');\n\n  const {\n    result: fields,\n    error,\n    isLoading,\n    request: fetchMetadataOptions,\n  } = useRequest(\n    useCallback(async () => {\n      const {\n        data: {\n          inputs: { required: requiredFields, metadata },\n        },\n      } = await CredentialTypesAPI.readDetail(\n        selectedCredential.value.credential_type ||\n          selectedCredential.value.credential_type_id\n      );\n      metadata.forEach((field) => {\n        if (inputValues.value[field.id]) {\n          form.initialValues.inputs[field.id] = inputValues.value[field.id];\n        } else if (field.type === 'string' && field.choices) {\n          form.initialValues.inputs[field.id] =\n            field.default || field.choices[0];\n        } else {\n          form.initialValues.inputs[field.id] = '';\n        }\n        if (requiredFields && requiredFields.includes(field.id)) {\n          field.required = true;\n        }\n      });\n      return metadata;\n      /* eslint-disable-next-line react-hooks/exhaustive-deps */\n    }, []),\n    []\n  );\n\n  useEffect(() => {\n    fetchMetadataOptions();\n  }, [fetchMetadataOptions]);\n\n  if (isLoading) {\n    return <ContentLoading />;\n  }\n\n  if (error) {\n    return <ContentError error={error} />;\n  }\n\n  return (\n    <>\n      {fields.length > 0 && (\n        <Form>\n          <FormFullWidthLayout>\n            {fields.map((field) => {\n              if (field.type === 'string') {\n                if (field.choices) {\n                  return (\n                    <FormGroup\n                      key={field.id}\n                      fieldId={`credential-${field.id}`}\n                      label={field.label}\n                      isRequired={field.required}\n                      labelIcon={\n                        field.help_text && <Popover content={field.help_text} />\n                      }\n                    >\n                      <AnsibleSelect\n                        name={`inputs.${field.id}`}\n                        value={form.values.inputs[field.id]}\n                        id={`credential-${field.id}`}\n                        data={field.choices.map((choice) => ({\n                          value: choice,\n                          key: choice,\n                          label: choice,\n                        }))}\n                        onChange={(event, value) => {\n                          form.setFieldValue(`inputs.${field.id}`, value);\n                        }}\n                        validate={field.required ? required(null) : null}\n                      />\n                    </FormGroup>\n                  );\n                }\n\n                return (\n                  <FormField\n                    key={field.id}\n                    id={`credential-${field.id}`}\n                    label={field.label}\n                    tooltip={field.help_text}\n                    name={`inputs.${field.id}`}\n                    type={field.multiline ? 'textarea' : 'text'}\n                    isRequired={field.required}\n                    validate={field.required ? required(null) : null}\n                  />\n                );\n              }\n\n              return null;\n            })}\n          </FormFullWidthLayout>\n        </Form>\n      )}\n    </>\n  );\n}\n\nexport default MetadataStep;\n"]},"metadata":{},"sourceType":"module"}