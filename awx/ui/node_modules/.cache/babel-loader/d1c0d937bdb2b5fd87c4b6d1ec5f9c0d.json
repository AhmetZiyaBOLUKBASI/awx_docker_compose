{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { getUniqueId, handleArrows } from '../../helpers';\nimport { DualListSelectorList } from './DualListSelectorList';\nimport { DualListSelectorContext, DualListSelectorListContext } from './DualListSelectorContext';\nexport var DualListSelectorListWrapperBase = function DualListSelectorListWrapperBase(_a) {\n  var className = _a.className,\n      children = _a.children,\n      ariaLabelledBy = _a['aria-labelledby'],\n      innerRef = _a.innerRef,\n      _a$options = _a.options,\n      options = _a$options === void 0 ? [] : _a$options,\n      _a$selectedOptions = _a.selectedOptions,\n      selectedOptions = _a$selectedOptions === void 0 ? [] : _a$selectedOptions,\n      onOptionSelect = _a.onOptionSelect,\n      displayOption = _a.displayOption,\n      _a$id = _a.id,\n      id = _a$id === void 0 ? getUniqueId('dual-list-selector-list') : _a$id,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      props = __rest(_a, [\"className\", \"children\", 'aria-labelledby', \"innerRef\", \"options\", \"selectedOptions\", \"onOptionSelect\", \"displayOption\", \"id\", \"isDisabled\"]);\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focusedOption = _React$useState2[0],\n      setFocusedOption = _React$useState2[1];\n\n  var menuRef = innerRef || React.useRef(null);\n\n  var _React$useContext = React.useContext(DualListSelectorContext),\n      isTree = _React$useContext.isTree; // sets up keyboard focus handling for the dual list selector menu child of the pane. This keyboard\n  // handling is applied whether the pane is dynamically built or passed via the children prop.\n\n\n  var handleKeys = function handleKeys(event) {\n    if (!menuRef.current || menuRef.current !== event.target.closest('.pf-c-dual-list-selector__menu') && !Array.from(menuRef.current.getElementsByClassName('pf-c-dual-list-selector__menu')).includes(event.target.closest('.pf-c-dual-list-selector__menu'))) {\n      return;\n    }\n\n    event.stopImmediatePropagation();\n    var validOptions = isTree ? Array.from(menuRef.current.querySelectorAll('.pf-c-dual-list-selector__item-toggle, .pf-c-dual-list-selector__item-check > input')) : Array.from(menuRef.current.getElementsByTagName('LI')).filter(function (el) {\n      return !el.classList.contains('pf-m-disabled');\n    });\n    var activeElement = document.activeElement;\n    handleArrows(event, validOptions, function (element) {\n      return activeElement.contains(element);\n    }, function (element) {\n      if (element.classList.contains('.pf-c-dual-list-selector__list-item')) {\n        setFocusedOption(element.id);\n      } else {\n        setFocusedOption(element.closest('.pf-c-dual-list-selector__list-item').id);\n      }\n\n      return element;\n    }, ['.pf-c-dual-list-selector__item-toggle', '.pf-c-dual-list-selector__item-check > input'], undefined, false, false, false);\n  };\n\n  React.useEffect(function () {\n    window.addEventListener('keydown', handleKeys);\n    return function () {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [menuRef.current]);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dualListSelectorMenu, className),\n    ref: menuRef,\n    tabIndex: 0\n  }, props), React.createElement(DualListSelectorListContext.Provider, {\n    value: {\n      setFocusedOption: setFocusedOption,\n      isTree: isTree,\n      focusedOption: focusedOption,\n      ariaLabelledBy: ariaLabelledBy,\n      displayOption: displayOption,\n      selectedOptions: selectedOptions,\n      id: id,\n      options: options,\n      onOptionSelect: onOptionSelect,\n      isDisabled: isDisabled\n    }\n  }, children ? children : React.createElement(DualListSelectorList, null)));\n};\nDualListSelectorListWrapperBase.displayName = 'DualListSelectorListWrapperBase';\nexport var DualListSelectorListWrapper = React.forwardRef(function (props, ref) {\n  return React.createElement(DualListSelectorListWrapperBase, Object.assign({\n    innerRef: ref\n  }, props));\n});\nDualListSelectorListWrapper.displayName = 'DualListSelectorListWrapper';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorListWrapper.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { getUniqueId, handleArrows } from '../../helpers';\nimport { DualListSelectorList } from './DualListSelectorList';\nimport { DualListSelectorContext, DualListSelectorListContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorListWrapperProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Anything that can be rendered inside of the list */\n  children?: React.ReactNode;\n  /** Id of the dual list selector list */\n  id?: string;\n  /** Accessibly label for the list */\n  'aria-labelledby': string;\n  /** @hide forwarded ref */\n  innerRef?: React.RefObject<HTMLDivElement>;\n  /** @hide Options to list in the pane. */\n  options?: React.ReactNode[];\n  /** @hide Options currently selected in the pane. */\n  selectedOptions?: string[] | number[];\n  /** @hide Callback for when an option is selected. Optionally used only when options prop is provided. */\n  onOptionSelect?: (e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent, index: number, id: string) => void;\n  /** @hide Function to determine if an option should be displayed depending on a dynamically built filter value */\n  displayOption?: (option: React.ReactNode) => boolean;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n}\n\nexport const DualListSelectorListWrapperBase: React.FunctionComponent<DualListSelectorListWrapperProps> = ({\n  className,\n  children,\n  'aria-labelledby': ariaLabelledBy,\n  innerRef,\n  options = [],\n  selectedOptions = [],\n  onOptionSelect,\n  displayOption,\n  id = getUniqueId('dual-list-selector-list'),\n  isDisabled = false,\n  ...props\n}: DualListSelectorListWrapperProps) => {\n  const [focusedOption, setFocusedOption] = React.useState('');\n  const menuRef = innerRef || React.useRef(null);\n  const { isTree } = React.useContext(DualListSelectorContext);\n\n  // sets up keyboard focus handling for the dual list selector menu child of the pane. This keyboard\n  // handling is applied whether the pane is dynamically built or passed via the children prop.\n  const handleKeys = (event: KeyboardEvent) => {\n    if (\n      !menuRef.current ||\n      (menuRef.current !== (event.target as HTMLElement).closest('.pf-c-dual-list-selector__menu') &&\n        !Array.from(menuRef.current.getElementsByClassName('pf-c-dual-list-selector__menu')).includes(\n          (event.target as HTMLElement).closest('.pf-c-dual-list-selector__menu')\n        ))\n    ) {\n      return;\n    }\n    event.stopImmediatePropagation();\n    const validOptions = isTree\n      ? (Array.from(\n          menuRef.current.querySelectorAll(\n            '.pf-c-dual-list-selector__item-toggle, .pf-c-dual-list-selector__item-check > input'\n          )\n        ) as Element[])\n      : (Array.from(menuRef.current.getElementsByTagName('LI')) as Element[]).filter(\n          el => !el.classList.contains('pf-m-disabled')\n        );\n    const activeElement = document.activeElement;\n    handleArrows(\n      event,\n      validOptions,\n      (element: Element) => activeElement.contains(element),\n      (element: Element) => {\n        if (element.classList.contains('.pf-c-dual-list-selector__list-item')) {\n          setFocusedOption(element.id);\n        } else {\n          setFocusedOption(element.closest('.pf-c-dual-list-selector__list-item').id);\n        }\n        return element;\n      },\n      ['.pf-c-dual-list-selector__item-toggle', '.pf-c-dual-list-selector__item-check > input'],\n      undefined,\n      false,\n      false,\n      false\n    );\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeys);\n    return () => {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [menuRef.current]);\n\n  return (\n    <div className={css(styles.dualListSelectorMenu, className)} ref={menuRef} tabIndex={0} {...props}>\n      <DualListSelectorListContext.Provider\n        value={{\n          setFocusedOption,\n          isTree,\n          focusedOption,\n          ariaLabelledBy,\n          displayOption,\n          selectedOptions,\n          id,\n          options,\n          onOptionSelect,\n          isDisabled\n        }}\n      >\n        {children ? children : <DualListSelectorList />}\n      </DualListSelectorListContext.Provider>\n    </div>\n  );\n};\nDualListSelectorListWrapperBase.displayName = 'DualListSelectorListWrapperBase';\n\nexport const DualListSelectorListWrapper = React.forwardRef(\n  (props: DualListSelectorListWrapperProps, ref: React.Ref<HTMLDivElement>) => (\n    <DualListSelectorListWrapperBase innerRef={ref as React.MutableRefObject<any>} {...props} />\n  )\n);\n\nDualListSelectorListWrapper.displayName = 'DualListSelectorListWrapper';\n"]},"metadata":{},"sourceType":"module"}