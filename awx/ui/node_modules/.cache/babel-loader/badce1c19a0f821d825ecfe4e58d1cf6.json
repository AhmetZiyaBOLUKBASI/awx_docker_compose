{"ast":null,"code":"import * as React from 'react';\nimport { ApplicationLauncherSeparator } from '../components/ApplicationLauncher/ApplicationLauncherSeparator';\nimport { Divider } from '../components/Divider/Divider';\n/**\n * This function is a helper for creating an array of renderable favorite items for the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n * @param {boolean} isEnterTriggersArrowDown Flag indicating if we should add isEnterTriggersArrowDown to favorited item\n */\n\nexport var createRenderableFavorites = function createRenderableFavorites(items, isGrouped, favorites, isEnterTriggersArrowDown) {\n  if (isGrouped) {\n    var favoriteItems = [];\n    items.forEach(function (group) {\n      if (favorites.length > 0) {\n        return group.props.children && group.props.children.filter(function (item) {\n          return favorites.includes(item.props.id);\n        }).map(function (item) {\n          if (isEnterTriggersArrowDown) {\n            return favoriteItems.push(React.cloneElement(item, {\n              isFavorite: true,\n              enterTriggersArrowDown: isEnterTriggersArrowDown,\n              id: \"favorite-\".concat(item.props.id)\n            }));\n          } else {\n            return favoriteItems.push(React.cloneElement(item, {\n              isFavorite: true,\n              id: \"favorite-\".concat(item.props.id)\n            }));\n          }\n        });\n      }\n    });\n    return favoriteItems;\n  }\n\n  return items.filter(function (item) {\n    return favorites.includes(item.props.id);\n  }).map(function (item) {\n    return React.cloneElement(item, {\n      isFavorite: true,\n      enterTriggersArrowDown: isEnterTriggersArrowDown\n    });\n  });\n};\n/**\n * This function is a helper for extending the array of renderable favorite with the select/application launcher items to  render in the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n */\n\nexport var extendItemsWithFavorite = function extendItemsWithFavorite(items, isGrouped, favorites) {\n  if (isGrouped) {\n    return items.map(function (group) {\n      return React.cloneElement(group, {\n        children: React.Children.map(group.props.children, function (item) {\n          if (item.type === ApplicationLauncherSeparator || item.type === Divider) {\n            return item;\n          }\n\n          return React.cloneElement(item, {\n            isFavorite: favorites.some(function (favoriteId) {\n              return favoriteId === item.props.id || \"favorite-\".concat(favoriteId) === item.props.id;\n            })\n          });\n        })\n      });\n    });\n  }\n\n  return items.map(function (item) {\n    return React.cloneElement(item, {\n      isFavorite: favorites.some(function (favoriteId) {\n        return favoriteId === item.props.id;\n      })\n    });\n  });\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/helpers/favorites.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ApplicationLauncherSeparator } from '../components/ApplicationLauncher/ApplicationLauncherSeparator';\nimport { Divider } from '../components/Divider/Divider';\n\n/**\n * This function is a helper for creating an array of renderable favorite items for the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n * @param {boolean} isEnterTriggersArrowDown Flag indicating if we should add isEnterTriggersArrowDown to favorited item\n */\nexport const createRenderableFavorites = (\n  items: object,\n  isGrouped: boolean,\n  favorites: any[],\n  isEnterTriggersArrowDown?: boolean\n) => {\n  if (isGrouped) {\n    const favoriteItems: React.ReactNode[] = [];\n    (items as React.ReactElement[]).forEach(group => {\n      if (favorites.length > 0) {\n        return (\n          group.props.children &&\n          (group.props.children as React.ReactElement[])\n            .filter(item => favorites.includes(item.props.id))\n            .map(item => {\n              if (isEnterTriggersArrowDown) {\n                return favoriteItems.push(\n                  React.cloneElement(item, {\n                    isFavorite: true,\n                    enterTriggersArrowDown: isEnterTriggersArrowDown,\n                    id: `favorite-${item.props.id}`\n                  })\n                );\n              } else {\n                return favoriteItems.push(\n                  React.cloneElement(item, { isFavorite: true, id: `favorite-${item.props.id}` })\n                );\n              }\n            })\n        );\n      }\n    });\n    return favoriteItems;\n  }\n  return (items as React.ReactElement[])\n    .filter(item => favorites.includes(item.props.id))\n    .map(item => React.cloneElement(item, { isFavorite: true, enterTriggersArrowDown: isEnterTriggersArrowDown }));\n};\n\n/**\n * This function is a helper for extending the array of renderable favorite with the select/application launcher items to  render in the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n */\nexport const extendItemsWithFavorite = (items: object, isGrouped: boolean, favorites: any[]) => {\n  if (isGrouped) {\n    return (items as React.ReactElement[]).map(group =>\n      React.cloneElement(group, {\n        children: React.Children.map(group.props.children as React.ReactElement[], item => {\n          if (item.type === ApplicationLauncherSeparator || item.type === Divider) {\n            return item;\n          }\n          return React.cloneElement(item, {\n            isFavorite: favorites.some(\n              favoriteId => favoriteId === item.props.id || `favorite-${favoriteId}` === item.props.id\n            )\n          });\n        })\n      })\n    );\n  }\n  return (items as React.ReactElement[]).map(item =>\n    React.cloneElement(item, {\n      isFavorite: favorites.some(favoriteId => favoriteId === item.props.id)\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}