{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { DropdownContext } from '../Dropdown';\nimport { DropdownWithContext } from '../Dropdown/DropdownWithContext';\nimport { useOUIAId } from '../../helpers';\nexport var OptionsMenuPosition;\n\n(function (OptionsMenuPosition) {\n  OptionsMenuPosition[\"right\"] = \"right\";\n  OptionsMenuPosition[\"left\"] = \"left\";\n})(OptionsMenuPosition || (OptionsMenuPosition = {}));\n\nexport var OptionsMenuDirection;\n\n(function (OptionsMenuDirection) {\n  OptionsMenuDirection[\"up\"] = \"up\";\n  OptionsMenuDirection[\"down\"] = \"down\";\n})(OptionsMenuDirection || (OptionsMenuDirection = {}));\n\nexport var OptionsMenu = function OptionsMenu(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      menuItems = _a.menuItems,\n      toggle = _a.toggle,\n      _a$isText = _a.isText,\n      isText = _a$isText === void 0 ? false : _a$isText,\n      _a$isGrouped = _a.isGrouped,\n      isGrouped = _a$isGrouped === void 0 ? false : _a$isGrouped,\n      id = _a.id,\n      ref = _a.ref,\n      _a$menuAppendTo = _a.menuAppendTo,\n      menuAppendTo = _a$menuAppendTo === void 0 ? 'inline' : _a$menuAppendTo,\n      ouiaId = _a.ouiaId,\n      _a$ouiaSafe = _a.ouiaSafe,\n      ouiaSafe = _a$ouiaSafe === void 0 ? true : _a$ouiaSafe,\n      props = __rest(_a, [\"className\", \"menuItems\", \"toggle\", \"isText\", \"isGrouped\", \"id\", \"ref\", \"menuAppendTo\", \"ouiaId\", \"ouiaSafe\"]);\n\n  return React.createElement(DropdownContext.Provider, {\n    value: {\n      id: id,\n      onSelect: function onSelect() {\n        return undefined;\n      },\n      toggleIndicatorClass: styles.optionsMenuToggleIcon,\n      toggleTextClass: styles.optionsMenuToggleText,\n      menuClass: styles.optionsMenuMenu,\n      itemClass: styles.optionsMenuMenuItem,\n      toggleClass: isText ? styles.optionsMenuToggleButton : styles.optionsMenuToggle,\n      baseClass: styles.optionsMenu,\n      disabledClass: styles.modifiers.disabled,\n      menuComponent: isGrouped ? 'div' : 'ul',\n      baseComponent: 'div',\n      ouiaId: useOUIAId(OptionsMenu.displayName, ouiaId),\n      ouiaSafe: ouiaSafe,\n      ouiaComponentType: OptionsMenu.displayName\n    }\n  }, React.createElement(DropdownWithContext, Object.assign({\n    id: id,\n    dropdownItems: menuItems,\n    className: className,\n    isGrouped: isGrouped,\n    toggle: toggle,\n    menuAppendTo: menuAppendTo\n  }, props)));\n};\nOptionsMenu.displayName = 'OptionsMenu';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/OptionsMenu/OptionsMenu.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,kEAAnB;AACA,SAAS,eAAT,QAAgC,aAAhC;AACA,SAAS,mBAAT,QAAoC,iCAApC;AACA,SAAoB,SAApB,QAAqC,eAArC;AAGA,OAAA,IAAY,mBAAZ;;AAAA,CAAA,UAAY,mBAAZ,EAA+B;AAC7B,EAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA,EAAA,mBAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACD,CAHD,EAAY,mBAAmB,KAAnB,mBAAmB,GAAA,EAAA,CAA/B;;AAKA,OAAA,IAAY,oBAAZ;;AAAA,CAAA,UAAY,oBAAZ,EAAgC;AAC9B,EAAA,oBAAA,CAAA,IAAA,CAAA,GAAA,IAAA;AACA,EAAA,oBAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACD,CAHD,EAAY,oBAAoB,KAApB,oBAAoB,GAAA,EAAA,CAAhC;;AAuCA,OAAO,IAAM,WAAW,GAA8C,SAAzD,WAAyD,CAAC,EAAD,EAa/C;AAbgD,qBAWtD,EAXsD,CACrE,SADqE;AAAA,MACrE,SADqE,6BACzD,EADyD;AAAA,MAErE,SAFqE,GAWtD,EAXsD,CAErE,SAFqE;AAAA,MAGrE,MAHqE,GAWtD,EAXsD,CAGrE,MAHqE;AAAA,kBAWtD,EAXsD,CAIrE,MAJqE;AAAA,MAIrE,MAJqE,0BAI5D,KAJ4D;AAAA,qBAWtD,EAXsD,CAKrE,SALqE;AAAA,MAKrE,SALqE,6BAKzD,KALyD;AAAA,MAMrE,EANqE,GAWtD,EAXsD,CAMrE,EANqE;AAAA,MAQrE,GARqE,GAWtD,EAXsD,CAQrE,GARqE;AAAA,wBAWtD,EAXsD,CASrE,YATqE;AAAA,MASrE,YATqE,gCAStD,QATsD;AAAA,MAUrE,MAVqE,GAWtD,EAXsD,CAUrE,MAVqE;AAAA,oBAWtD,EAXsD,CAWrE,QAXqE;AAAA,MAWrE,QAXqE,4BAW1D,IAX0D;AAAA,MAYlE,KAZkE,GAY7D,MAAA,CAAA,EAAA,EAZ6D,CAAA,WAAA,EAAA,WAAA,EAAA,QAAA,EAAA,QAAA,EAAA,WAAA,EAAA,IAAA,EAAA,KAAA,EAAA,cAAA,EAAA,QAAA,EAAA,UAAA,CAY7D,CAZ6D;;AAa/C,SACtB,KAAA,CAAA,aAAA,CAAC,eAAe,CAAC,QAAjB,EAAyB;AACvB,IAAA,KAAK,EAAE;AACL,MAAA,EAAE,EAAF,EADK;AAEL,MAAA,QAAQ,EAAE;AAAA,eAAM,SAAN;AAAA,OAFL;AAGL,MAAA,oBAAoB,EAAE,MAAM,CAAC,qBAHxB;AAIL,MAAA,eAAe,EAAE,MAAM,CAAC,qBAJnB;AAKL,MAAA,SAAS,EAAE,MAAM,CAAC,eALb;AAML,MAAA,SAAS,EAAE,MAAM,CAAC,mBANb;AAOL,MAAA,WAAW,EAAE,MAAM,GAAG,MAAM,CAAC,uBAAV,GAAoC,MAAM,CAAC,iBAPzD;AAQL,MAAA,SAAS,EAAE,MAAM,CAAC,WARb;AASL,MAAA,aAAa,EAAE,MAAM,CAAC,SAAP,CAAiB,QAT3B;AAUL,MAAA,aAAa,EAAE,SAAS,GAAG,KAAH,GAAW,IAV9B;AAWL,MAAA,aAAa,EAAE,KAXV;AAYL,MAAA,MAAM,EAAE,SAAS,CAAC,WAAW,CAAC,WAAb,EAA0B,MAA1B,CAZZ;AAaL,MAAA,QAAQ,EAAR,QAbK;AAcL,MAAA,iBAAiB,EAAE,WAAW,CAAC;AAd1B;AADgB,GAAzB,EAkBE,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB,MAAA,CAAA,MAAA,CAAA;AAClB,IAAA,EAAE,EAAE,EADc;AAElB,IAAA,aAAa,EAAE,SAFG;AAGlB,IAAA,SAAS,EAAE,SAHO;AAIlB,IAAA,SAAS,EAAE,SAJO;AAKlB,IAAA,MAAM,EAAE,MALU;AAMlB,IAAA,YAAY,EAAE;AANI,GAAA,EAOd,KAPc,CAApB,CAlBF,CADsB;AA6BvB,CA1CM;AA2CP,WAAW,CAAC,WAAZ,GAA0B,aAA1B","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { DropdownContext } from '../Dropdown';\nimport { DropdownWithContext } from '../Dropdown/DropdownWithContext';\nimport { OUIAProps, useOUIAId } from '../../helpers';\nimport { ToggleMenuBaseProps } from '../../helpers/Popper/Popper';\n\nexport enum OptionsMenuPosition {\n  right = 'right',\n  left = 'left'\n}\n\nexport enum OptionsMenuDirection {\n  up = 'up',\n  down = 'down'\n}\n\nexport interface OptionsMenuProps\n  extends Omit<ToggleMenuBaseProps, 'menuAppendTo'>,\n    React.HTMLProps<HTMLDivElement>,\n    OUIAProps {\n  /** Classes applied to root element of the options menu */\n  className?: string;\n  /** Id of the root element of the options menu */\n  id: string;\n  /** Array of OptionsMenuItem and/or OptionMenuGroup nodes that will be rendered in the options menu list */\n  menuItems: React.ReactNode[];\n  /** Either an OptionsMenuToggle or an OptionsMenuToggleWithText to use to toggle the options menu */\n  toggle: React.ReactElement;\n  /** Flag to indicate the toggle has no border or background */\n  isPlain?: boolean;\n  /** Flag to indicate if menu is open */\n  isOpen?: boolean;\n  /** Flag to indicate if toggle is textual toggle */\n  isText?: boolean;\n  /** Flag to indicate if menu is groupped */\n  isGrouped?: boolean;\n  /** Indicates where menu will be aligned horizontally */\n  position?: 'right' | 'left';\n  /** Menu will open up or open down from the options menu toggle */\n  direction?: 'up' | 'down';\n  /** The container to append the menu to. Defaults to 'inline'.\n   * If your menu is being cut off you can append it to an element higher up the DOM tree.\n   * Some examples:\n   * menuAppendTo=\"parent\"\n   * menuAppendTo={() => document.body}\n   * menuAppendTo={document.getElementById('target')}\n   */\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'inline' | 'parent';\n}\n\nexport const OptionsMenu: React.FunctionComponent<OptionsMenuProps> = ({\n  className = '',\n  menuItems,\n  toggle,\n  isText = false,\n  isGrouped = false,\n  id,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ref,\n  menuAppendTo = 'inline',\n  ouiaId,\n  ouiaSafe = true,\n  ...props\n}: OptionsMenuProps) => (\n  <DropdownContext.Provider\n    value={{\n      id,\n      onSelect: () => undefined,\n      toggleIndicatorClass: styles.optionsMenuToggleIcon,\n      toggleTextClass: styles.optionsMenuToggleText,\n      menuClass: styles.optionsMenuMenu,\n      itemClass: styles.optionsMenuMenuItem,\n      toggleClass: isText ? styles.optionsMenuToggleButton : styles.optionsMenuToggle,\n      baseClass: styles.optionsMenu,\n      disabledClass: styles.modifiers.disabled,\n      menuComponent: isGrouped ? 'div' : 'ul',\n      baseComponent: 'div',\n      ouiaId: useOUIAId(OptionsMenu.displayName, ouiaId),\n      ouiaSafe,\n      ouiaComponentType: OptionsMenu.displayName\n    }}\n  >\n    <DropdownWithContext\n      id={id}\n      dropdownItems={menuItems}\n      className={className}\n      isGrouped={isGrouped}\n      toggle={toggle}\n      menuAppendTo={menuAppendTo}\n      {...props}\n    />\n  </DropdownContext.Provider>\n);\nOptionsMenu.displayName = 'OptionsMenu';\n"]},"metadata":{},"sourceType":"module"}