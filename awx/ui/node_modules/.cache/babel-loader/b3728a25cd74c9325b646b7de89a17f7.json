{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { SelectColumn, RowSelectVariant } from '../../SelectColumn';\nimport checkStyles from '@patternfly/react-styles/css/components/Check/check';\nexport var selectable = function selectable(label, _ref) {\n  var rowIndex = _ref.rowIndex,\n      columnIndex = _ref.columnIndex,\n      rowData = _ref.rowData,\n      column = _ref.column,\n      property = _ref.property;\n  var _column$extraParams = column.extraParams,\n      onSelect = _column$extraParams.onSelect,\n      selectVariant = _column$extraParams.selectVariant,\n      allRowsSelected = _column$extraParams.allRowsSelected,\n      isHeaderSelectDisabled = _column$extraParams.isHeaderSelectDisabled;\n  var extraData = {\n    rowIndex: rowIndex,\n    columnIndex: columnIndex,\n    column: column,\n    property: property\n  };\n\n  if (rowData && rowData.hasOwnProperty('parent') && !rowData.showSelect && !rowData.fullWidth) {\n    return {\n      component: 'td',\n      isVisible: true\n    };\n  }\n\n  var rowId = rowIndex !== undefined ? rowIndex : -1;\n  /**\n   * @param {React.FormEvent} event - React form event\n   */\n\n  function selectClick(event) {\n    var selected = rowIndex === undefined ? event.currentTarget.checked : rowData && !rowData.selected; // tslint:disable-next-line:no-unused-expression\n\n    onSelect && onSelect(event, selected, rowId, rowData, extraData);\n  }\n\n  var customProps = Object.assign(Object.assign(Object.assign({}, rowId !== -1 ? {\n    checked: rowData && !!rowData.selected,\n    'aria-label': \"Select row \".concat(rowIndex)\n  } : {\n    checked: allRowsSelected,\n    'aria-label': 'Select all rows'\n  }), rowData && (rowData.disableCheckbox || rowData.disableSelection) && {\n    disabled: true,\n    className: checkStyles.checkInput\n  }), !rowData && isHeaderSelectDisabled && {\n    disabled: true\n  });\n  var selectName = 'check-all';\n\n  if (rowId !== -1 && selectVariant === RowSelectVariant.checkbox) {\n    selectName = \"checkrow\".concat(rowIndex);\n  } else if (rowId !== -1) {\n    selectName = 'radioGroup';\n  }\n\n  return {\n    className: css(styles.tableCheck),\n    component: 'td',\n    isVisible: !rowData || !rowData.fullWidth,\n    children: React.createElement(SelectColumn, Object.assign({}, customProps, {\n      selectVariant: selectVariant,\n      onSelect: selectClick,\n      name: selectName\n    }), label)\n  };\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/utils/decorators/selectable.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { IExtra, IFormatterValueType, ITransform } from '../../TableTypes';\nimport { SelectColumn, RowSelectVariant } from '../../SelectColumn';\nimport checkStyles from '@patternfly/react-styles/css/components/Check/check';\n\nexport const selectable: ITransform = (\n  label: IFormatterValueType,\n  { rowIndex, columnIndex, rowData, column, property }: IExtra\n) => {\n  const {\n    extraParams: { onSelect, selectVariant, allRowsSelected, isHeaderSelectDisabled }\n  } = column;\n  const extraData = {\n    rowIndex,\n    columnIndex,\n    column,\n    property\n  };\n\n  if (rowData && rowData.hasOwnProperty('parent') && !rowData.showSelect && !rowData.fullWidth) {\n    return {\n      component: 'td',\n      isVisible: true\n    };\n  }\n  const rowId = rowIndex !== undefined ? rowIndex : -1;\n\n  /**\n   * @param {React.FormEvent} event - React form event\n   */\n  function selectClick(event: React.FormEvent<HTMLInputElement>) {\n    const selected = rowIndex === undefined ? event.currentTarget.checked : rowData && !rowData.selected;\n    // tslint:disable-next-line:no-unused-expression\n    onSelect && onSelect(event, selected, rowId, rowData, extraData);\n  }\n  const customProps = {\n    ...(rowId !== -1\n      ? {\n          checked: rowData && !!rowData.selected,\n          'aria-label': `Select row ${rowIndex}`\n        }\n      : {\n          checked: allRowsSelected,\n          'aria-label': 'Select all rows'\n        }),\n    ...(rowData &&\n      (rowData.disableCheckbox || rowData.disableSelection) && {\n        disabled: true,\n        className: checkStyles.checkInput\n      }),\n    ...(!rowData && isHeaderSelectDisabled && { disabled: true })\n  };\n  let selectName = 'check-all';\n  if (rowId !== -1 && selectVariant === RowSelectVariant.checkbox) {\n    selectName = `checkrow${rowIndex}`;\n  } else if (rowId !== -1) {\n    selectName = 'radioGroup';\n  }\n\n  return {\n    className: css(styles.tableCheck),\n    component: 'td',\n    isVisible: !rowData || !rowData.fullWidth,\n    children: (\n      <SelectColumn\n        {...customProps}\n        selectVariant={selectVariant as RowSelectVariant}\n        onSelect={selectClick}\n        name={selectName}\n      >\n        {label as React.ReactNode}\n      </SelectColumn>\n    )\n  };\n};\n"]},"metadata":{},"sourceType":"module"}