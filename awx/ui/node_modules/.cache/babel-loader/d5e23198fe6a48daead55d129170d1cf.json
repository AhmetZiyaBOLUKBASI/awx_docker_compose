{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { Button } from '../Button';\nimport { ActionGroup, Form, FormGroup } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { GenerateId, KEY_CODES } from '../../helpers';\nimport { Panel, PanelMain, PanelMainBody } from '../Panel';\nimport { css } from '@patternfly/react-styles';\nexport var AdvancedSearchMenu = function AdvancedSearchMenu(_ref) {\n  var className = _ref.className,\n      parentRef = _ref.parentRef,\n      parentInputRef = _ref.parentInputRef,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? '' : _ref$value,\n      _ref$attributes = _ref.attributes,\n      attributes = _ref$attributes === void 0 ? [] : _ref$attributes,\n      formAdditionalItems = _ref.formAdditionalItems,\n      _ref$hasWordsAttrLabe = _ref.hasWordsAttrLabel,\n      hasWordsAttrLabel = _ref$hasWordsAttrLabe === void 0 ? 'Has words' : _ref$hasWordsAttrLabe,\n      advancedSearchDelimiter = _ref.advancedSearchDelimiter,\n      getAttrValueMap = _ref.getAttrValueMap,\n      onChange = _ref.onChange,\n      onSearch = _ref.onSearch,\n      onClear = _ref.onClear,\n      _ref$resetButtonLabel = _ref.resetButtonLabel,\n      resetButtonLabel = _ref$resetButtonLabel === void 0 ? 'Reset' : _ref$resetButtonLabel,\n      _ref$submitSearchButt = _ref.submitSearchButtonLabel,\n      submitSearchButtonLabel = _ref$submitSearchButt === void 0 ? 'Search' : _ref$submitSearchButt,\n      isSearchMenuOpen = _ref.isSearchMenuOpen,\n      onToggleAdvancedMenu = _ref.onToggleAdvancedMenu;\n  var firstAttrRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      putFocusBackOnInput = _React$useState2[0],\n      setPutFocusBackOnInput = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error('AdvancedSearchMenu: An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop');\n    }\n  });\n  React.useEffect(function () {\n    if (isSearchMenuOpen && firstAttrRef && firstAttrRef.current) {\n      firstAttrRef.current.focus();\n      setPutFocusBackOnInput(true);\n    } else if (!isSearchMenuOpen && putFocusBackOnInput && parentInputRef && parentInputRef.current) {\n      parentInputRef.current.focus();\n    }\n  }, [isSearchMenuOpen]);\n  React.useEffect(function () {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n    return function cleanup() {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n\n  var onDocClick = function onDocClick(event) {\n    var clickedWithinSearchInput = parentRef && parentRef.current.contains(event.target);\n\n    if (isSearchMenuOpen && !clickedWithinSearchInput) {\n      onToggleAdvancedMenu(event);\n    }\n  };\n\n  var onEscPress = function onEscPress(event) {\n    var keyCode = event.keyCode || event.which;\n\n    if (isSearchMenuOpen && keyCode === KEY_CODES.ESCAPE_KEY && parentRef && parentRef.current.contains(event.target)) {\n      onToggleAdvancedMenu(event);\n\n      if (parentInputRef) {\n        parentInputRef.current.focus();\n      }\n    }\n  };\n\n  var onSearchHandler = function onSearchHandler(event) {\n    event.preventDefault();\n\n    if (onSearch) {\n      onSearch(value, event, getAttrValueMap());\n    }\n\n    if (isSearchMenuOpen) {\n      onToggleAdvancedMenu(event);\n    }\n  };\n\n  var handleValueChange = function handleValueChange(attribute, newValue, event) {\n    var newMap = getAttrValueMap();\n    newMap[attribute] = newValue;\n    var updatedValue = '';\n    Object.entries(newMap).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          k = _ref3[0],\n          v = _ref3[1];\n\n      if (v.trim() !== '') {\n        if (k !== 'haswords') {\n          updatedValue = \"\".concat(updatedValue, \" \").concat(k).concat(advancedSearchDelimiter).concat(v);\n        } else {\n          updatedValue = \"\".concat(updatedValue, \" \").concat(v);\n        }\n      }\n    });\n    updatedValue = updatedValue.replace(/^\\s+/g, '');\n\n    if (onChange) {\n      onChange(updatedValue, event);\n    }\n  };\n\n  var getValue = function getValue(attribute) {\n    var map = getAttrValueMap();\n    return map.hasOwnProperty(attribute) ? map[attribute] : '';\n  };\n\n  var buildFormGroups = function buildFormGroups() {\n    var formGroups = [];\n    attributes.forEach(function (attribute, index) {\n      var display = typeof attribute === 'string' ? attribute : attribute.display;\n      var queryAttr = typeof attribute === 'string' ? attribute : attribute.attr;\n\n      if (index === 0) {\n        formGroups.push(React.createElement(FormGroup, {\n          label: display,\n          fieldId: \"\".concat(queryAttr, \"_\").concat(index),\n          key: \"\".concat(attribute, \"_\").concat(index)\n        }, React.createElement(TextInput, {\n          ref: firstAttrRef,\n          type: \"text\",\n          id: \"\".concat(queryAttr, \"_\").concat(index),\n          value: getValue(queryAttr),\n          onChange: function onChange(value, evt) {\n            return handleValueChange(queryAttr, value, evt);\n          }\n        })));\n      } else {\n        formGroups.push(React.createElement(FormGroup, {\n          label: display,\n          fieldId: \"\".concat(queryAttr, \"_\").concat(index),\n          key: \"\".concat(attribute, \"_\").concat(index)\n        }, React.createElement(TextInput, {\n          type: \"text\",\n          id: \"\".concat(queryAttr, \"_\").concat(index),\n          value: getValue(queryAttr),\n          onChange: function onChange(value, evt) {\n            return handleValueChange(queryAttr, value, evt);\n          }\n        })));\n      }\n    });\n    formGroups.push(React.createElement(GenerateId, {\n      key: 'hasWords'\n    }, function (randomId) {\n      return React.createElement(FormGroup, {\n        label: hasWordsAttrLabel,\n        fieldId: randomId\n      }, React.createElement(TextInput, {\n        type: \"text\",\n        id: randomId,\n        value: getValue('haswords'),\n        onChange: function onChange(value, evt) {\n          return handleValueChange('haswords', value, evt);\n        }\n      }));\n    }));\n    return formGroups;\n  };\n\n  return isSearchMenuOpen ? React.createElement(Panel, {\n    variant: \"raised\",\n    className: css(className)\n  }, React.createElement(PanelMain, null, React.createElement(PanelMainBody, null, React.createElement(Form, null, buildFormGroups(), formAdditionalItems ? formAdditionalItems : null, React.createElement(ActionGroup, null, React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: onSearchHandler,\n    isDisabled: !value\n  }, submitSearchButtonLabel), !!onClear && React.createElement(Button, {\n    variant: \"link\",\n    type: \"reset\",\n    onClick: onClear\n  }, resetButtonLabel)))))) : null;\n};\nAdvancedSearchMenu.displayName = 'SearchInput';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/SearchInput/AdvancedSearchMenu.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Button } from '../Button';\nimport { ActionGroup, Form, FormGroup } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { GenerateId, KEY_CODES } from '../../helpers';\nimport { SearchAttribute } from './SearchInput';\nimport { Panel, PanelMain, PanelMainBody } from '../Panel';\nimport { css } from '@patternfly/react-styles';\n\nexport interface AdvancedSearchMenuProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Additional classes added to the Advanced search menu */\n  className?: string;\n  /** Value of the search input */\n  value?: string;\n  /** Ref of the div wrapping the whole search input **/\n  parentRef?: React.RefObject<any>;\n  /** Ref of the input element within the search input**/\n  parentInputRef?: React.RefObject<any>;\n  /** Function which builds an attribute-value map by parsing the value in the search input */\n  getAttrValueMap?: () => { [key: string]: string };\n  /** A callback for when the search button clicked changes */\n  onSearch?: (\n    value: string,\n    event: React.SyntheticEvent<HTMLButtonElement>,\n    attrValueMap: { [key: string]: string }\n  ) => void;\n  /** A callback for when the user clicks the clear button */\n  onClear?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** A callback for when the input value changes */\n  onChange?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Function called to toggle the advanced search menu */\n  onToggleAdvancedMenu?: (e: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** Flag for toggling the open/close state of the advanced search menu */\n  isSearchMenuOpen?: boolean;\n  /** Label for the buttons which reset the advanced search form and clear the search input */\n  resetButtonLabel?: string;\n  /** Label for the buttons which called the onSearch event handler */\n  submitSearchButtonLabel?: string;\n  /** Array of attribute values used for dynamically generated advanced search */\n  attributes?: string[] | SearchAttribute[];\n  /* Additional elements added after the attributes in the form.\n   * The new form elements can be wrapped in a FormGroup component for automatic formatting */\n  formAdditionalItems?: React.ReactNode;\n  /** Attribute label for strings unassociated with one of the provided listed attributes */\n  hasWordsAttrLabel?: React.ReactNode;\n  /** Delimiter in the query string for pairing attributes with search values.\n   * Required whenever attributes are passed as props */\n  advancedSearchDelimiter?: string;\n}\n\nexport const AdvancedSearchMenu: React.FunctionComponent<AdvancedSearchMenuProps> = ({\n  className,\n  parentRef,\n  parentInputRef,\n  value = '',\n  attributes = [] as string[],\n  formAdditionalItems,\n  hasWordsAttrLabel = 'Has words',\n  advancedSearchDelimiter,\n  getAttrValueMap,\n  onChange,\n  onSearch,\n  onClear,\n  resetButtonLabel = 'Reset',\n  submitSearchButtonLabel = 'Search',\n  isSearchMenuOpen,\n  onToggleAdvancedMenu\n}: AdvancedSearchMenuProps) => {\n  const firstAttrRef = React.useRef(null);\n  const [putFocusBackOnInput, setPutFocusBackOnInput] = React.useState(false);\n\n  React.useEffect(() => {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'AdvancedSearchMenu: An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop'\n      );\n    }\n  });\n\n  React.useEffect(() => {\n    if (isSearchMenuOpen && firstAttrRef && firstAttrRef.current) {\n      firstAttrRef.current.focus();\n      setPutFocusBackOnInput(true);\n    } else if (!isSearchMenuOpen && putFocusBackOnInput && parentInputRef && parentInputRef.current) {\n      parentInputRef.current.focus();\n    }\n  }, [isSearchMenuOpen]);\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n\n    return function cleanup() {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n\n  const onDocClick = (event: Event) => {\n    const clickedWithinSearchInput = parentRef && parentRef.current.contains(event.target as Node);\n    if (isSearchMenuOpen && !clickedWithinSearchInput) {\n      onToggleAdvancedMenu(event as any);\n    }\n  };\n\n  const onEscPress = (event: KeyboardEvent) => {\n    const keyCode = event.keyCode || event.which;\n    if (\n      isSearchMenuOpen &&\n      keyCode === KEY_CODES.ESCAPE_KEY &&\n      parentRef &&\n      parentRef.current.contains(event.target as Node)\n    ) {\n      onToggleAdvancedMenu(event as any);\n      if (parentInputRef) {\n        parentInputRef.current.focus();\n      }\n    }\n  };\n\n  const onSearchHandler = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(value, event, getAttrValueMap());\n    }\n    if (isSearchMenuOpen) {\n      onToggleAdvancedMenu(event as any);\n    }\n  };\n\n  const handleValueChange = (attribute: string, newValue: string, event: React.FormEvent<HTMLInputElement>) => {\n    const newMap = getAttrValueMap();\n    newMap[attribute] = newValue;\n    let updatedValue = '';\n    Object.entries(newMap).forEach(([k, v]) => {\n      if (v.trim() !== '') {\n        if (k !== 'haswords') {\n          updatedValue = `${updatedValue} ${k}${advancedSearchDelimiter}${v}`;\n        } else {\n          updatedValue = `${updatedValue} ${v}`;\n        }\n      }\n    });\n    updatedValue = updatedValue.replace(/^\\s+/g, '');\n\n    if (onChange) {\n      onChange(updatedValue, event);\n    }\n  };\n\n  const getValue = (attribute: string) => {\n    const map = getAttrValueMap();\n    return map.hasOwnProperty(attribute) ? map[attribute] : '';\n  };\n\n  const buildFormGroups = () => {\n    const formGroups = [] as React.ReactNode[];\n    attributes.forEach((attribute: string | SearchAttribute, index: number) => {\n      const display = typeof attribute === 'string' ? attribute : attribute.display;\n      const queryAttr = typeof attribute === 'string' ? attribute : attribute.attr;\n      if (index === 0) {\n        formGroups.push(\n          <FormGroup label={display} fieldId={`${queryAttr}_${index}`} key={`${attribute}_${index}`}>\n            <TextInput\n              ref={firstAttrRef}\n              type=\"text\"\n              id={`${queryAttr}_${index}`}\n              value={getValue(queryAttr)}\n              onChange={(value, evt) => handleValueChange(queryAttr, value, evt)}\n            />\n          </FormGroup>\n        );\n      } else {\n        formGroups.push(\n          <FormGroup label={display} fieldId={`${queryAttr}_${index}`} key={`${attribute}_${index}`}>\n            <TextInput\n              type=\"text\"\n              id={`${queryAttr}_${index}`}\n              value={getValue(queryAttr)}\n              onChange={(value, evt) => handleValueChange(queryAttr, value, evt)}\n            />\n          </FormGroup>\n        );\n      }\n    });\n    formGroups.push(\n      <GenerateId key={'hasWords'}>\n        {randomId => (\n          <FormGroup label={hasWordsAttrLabel} fieldId={randomId}>\n            <TextInput\n              type=\"text\"\n              id={randomId}\n              value={getValue('haswords')}\n              onChange={(value, evt) => handleValueChange('haswords', value, evt)}\n            />\n          </FormGroup>\n        )}\n      </GenerateId>\n    );\n    return formGroups;\n  };\n\n  return isSearchMenuOpen ? (\n    <Panel variant=\"raised\" className={css(className)}>\n      <PanelMain>\n        <PanelMainBody>\n          <Form>\n            {buildFormGroups()}\n            {formAdditionalItems ? formAdditionalItems : null}\n            <ActionGroup>\n              <Button variant=\"primary\" type=\"submit\" onClick={onSearchHandler} isDisabled={!value}>\n                {submitSearchButtonLabel}\n              </Button>\n              {!!onClear && (\n                <Button variant=\"link\" type=\"reset\" onClick={onClear}>\n                  {resetButtonLabel}\n                </Button>\n              )}\n            </ActionGroup>\n          </Form>\n        </PanelMainBody>\n      </PanelMain>\n    </Panel>\n  ) : null;\n};\nAdvancedSearchMenu.displayName = 'SearchInput';\n"]},"metadata":{},"sourceType":"module"}