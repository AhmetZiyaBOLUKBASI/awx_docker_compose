{"ast":null,"code":"import _defineProperty from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DescriptionList/description-list';\nimport { formatBreakpointMods } from '../../helpers';\n\nvar setBreakpointModifiers = function setBreakpointModifiers(prefix, modifiers) {\n  var mods = modifiers;\n  return Object.keys(mods || {}).reduce(function (acc, curr) {\n    return curr === 'default' ? Object.assign(Object.assign({}, acc), _defineProperty({}, prefix, mods[curr])) : Object.assign(Object.assign({}, acc), _defineProperty({}, \"\".concat(prefix, \"-on-\").concat(curr), mods[curr]));\n  }, {});\n};\n\nexport var DescriptionList = function DescriptionList(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$isHorizontal = _a.isHorizontal,\n      isHorizontal = _a$isHorizontal === void 0 ? false : _a$isHorizontal,\n      isAutoColumnWidths = _a.isAutoColumnWidths,\n      isAutoFit = _a.isAutoFit,\n      isInlineGrid = _a.isInlineGrid,\n      isCompact = _a.isCompact,\n      isFluid = _a.isFluid,\n      isFillColumns = _a.isFillColumns,\n      columnModifier = _a.columnModifier,\n      autoFitMinModifier = _a.autoFitMinModifier,\n      horizontalTermWidthModifier = _a.horizontalTermWidthModifier,\n      orientation = _a.orientation,\n      style = _a.style,\n      props = __rest(_a, [\"className\", \"children\", \"isHorizontal\", \"isAutoColumnWidths\", \"isAutoFit\", \"isInlineGrid\", \"isCompact\", \"isFluid\", \"isFillColumns\", \"columnModifier\", \"autoFitMinModifier\", \"horizontalTermWidthModifier\", \"orientation\", \"style\"]);\n\n  if (isAutoFit && autoFitMinModifier) {\n    style = Object.assign(Object.assign({}, style), setBreakpointModifiers('--pf-c-description-list--GridTemplateColumns--min', autoFitMinModifier));\n  }\n\n  if (isHorizontal && horizontalTermWidthModifier) {\n    style = Object.assign(Object.assign({}, style), setBreakpointModifiers('--pf-c-description-list--m-horizontal__term--width', horizontalTermWidthModifier));\n  }\n\n  return React.createElement(\"dl\", Object.assign({\n    className: css(styles.descriptionList, (isHorizontal || isFluid) && styles.modifiers.horizontal, isAutoColumnWidths && styles.modifiers.autoColumnWidths, isAutoFit && styles.modifiers.autoFit, formatBreakpointMods(columnModifier, styles), formatBreakpointMods(orientation, styles), isInlineGrid && styles.modifiers.inlineGrid, isCompact && styles.modifiers.compact, isFluid && styles.modifiers.fluid, isFillColumns && styles.modifiers.fillColumns, className),\n    style: style\n  }, props), children);\n};\nDescriptionList.displayName = 'DescriptionList';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DescriptionList/DescriptionList.tsx"],"names":[],"mappings":";;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,0EAAnB;AACA,SAAS,oBAAT,QAAqC,eAArC;;AAkEA,IAAM,sBAAsB,GAAG,SAAzB,sBAAyB,CAAC,MAAD,EAAiB,SAAjB,EAAmD;AAChF,MAAM,IAAI,GAAG,SAAb;AACA,SAAO,MAAM,CAAC,IAAP,CAAY,IAAI,IAAI,EAApB,EAAwB,MAAxB,CACL,UAAC,GAAD,EAAM,IAAN;AAAA,WACE,IAAI,KAAK,SAAT,GAAoB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,GAAN,CAAA,sBAAY,MAAZ,EAAqB,IAAI,CAAC,IAAD,CAAzB,EAApB,GAAuD,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,GAAN,CAAA,gCAAe,MAAf,iBAA4B,IAA5B,GAAqC,IAAI,CAAC,IAAD,CAAzC,EADzD;AAAA,GADK,EAGL,EAHK,CAAP;AAKD,CAPD;;AASA,OAAO,IAAM,eAAe,GAAkD,SAAjE,eAAiE,CAAC,EAAD,EAgBnD;AAhBoD,qBAcxE,EAdwE,CAC7E,SAD6E;AAAA,MAC7E,SAD6E,6BACjE,EADiE;AAAA,oBAcxE,EAdwE,CAE7E,QAF6E;AAAA,MAE7E,QAF6E,4BAElE,IAFkE;AAAA,wBAcxE,EAdwE,CAG7E,YAH6E;AAAA,MAG7E,YAH6E,gCAG9D,KAH8D;AAAA,MAI7E,kBAJ6E,GAcxE,EAdwE,CAI7E,kBAJ6E;AAAA,MAK7E,SAL6E,GAcxE,EAdwE,CAK7E,SAL6E;AAAA,MAM7E,YAN6E,GAcxE,EAdwE,CAM7E,YAN6E;AAAA,MAO7E,SAP6E,GAcxE,EAdwE,CAO7E,SAP6E;AAAA,MAQ7E,OAR6E,GAcxE,EAdwE,CAQ7E,OAR6E;AAAA,MAS7E,aAT6E,GAcxE,EAdwE,CAS7E,aAT6E;AAAA,MAU7E,cAV6E,GAcxE,EAdwE,CAU7E,cAV6E;AAAA,MAW7E,kBAX6E,GAcxE,EAdwE,CAW7E,kBAX6E;AAAA,MAY7E,2BAZ6E,GAcxE,EAdwE,CAY7E,2BAZ6E;AAAA,MAa7E,WAb6E,GAcxE,EAdwE,CAa7E,WAb6E;AAAA,MAc7E,KAd6E,GAcxE,EAdwE,CAc7E,KAd6E;AAAA,MAe1E,KAf0E,GAerE,MAAA,CAAA,EAAA,EAfqE,CAAA,WAAA,EAAA,UAAA,EAAA,cAAA,EAAA,oBAAA,EAAA,WAAA,EAAA,cAAA,EAAA,WAAA,EAAA,SAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,oBAAA,EAAA,6BAAA,EAAA,aAAA,EAAA,OAAA,CAerE,CAfqE;;AAiB7E,MAAI,SAAS,IAAI,kBAAjB,EAAqC;AACnC,IAAA,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACA,KADA,CAAA,EAEA,sBAAsB,CAAC,mDAAD,EAAsD,kBAAtD,CAFtB,CAAL;AAID;;AACD,MAAI,YAAY,IAAI,2BAApB,EAAiD;AAC/C,IAAA,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACA,KADA,CAAA,EAEA,sBAAsB,CAAC,oDAAD,EAAuD,2BAAvD,CAFtB,CAAL;AAID;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,eADK,EAEZ,CAAC,YAAY,IAAI,OAAjB,KAA6B,MAAM,CAAC,SAAP,CAAiB,UAFlC,EAGZ,kBAAkB,IAAI,MAAM,CAAC,SAAP,CAAiB,gBAH3B,EAIZ,SAAS,IAAI,MAAM,CAAC,SAAP,CAAiB,OAJlB,EAKZ,oBAAoB,CAAC,cAAD,EAAiB,MAAjB,CALR,EAMZ,oBAAoB,CAAC,WAAD,EAAc,MAAd,CANR,EAOZ,YAAY,IAAI,MAAM,CAAC,SAAP,CAAiB,UAPrB,EAQZ,SAAS,IAAI,MAAM,CAAC,SAAP,CAAiB,OARlB,EASZ,OAAO,IAAI,MAAM,CAAC,SAAP,CAAiB,KAThB,EAUZ,aAAa,IAAI,MAAM,CAAC,SAAP,CAAiB,WAVtB,EAWZ,SAXY,CADhB;AAcE,IAAA,KAAK,EAAE;AAdT,GAAA,EAeM,KAfN,CAAA,EAiBG,QAjBH,CADF;AAqBD,CAnDM;AAqDP,eAAe,CAAC,WAAhB,GAA8B,iBAA9B","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DescriptionList/description-list';\nimport { formatBreakpointMods } from '../../helpers';\n\nexport interface BreakpointModifiers {\n  default?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n}\n\nexport interface DescriptionListProps extends Omit<React.HTMLProps<HTMLDListElement>, 'type'> {\n  /** Anything that can be rendered inside of the list */\n  children?: React.ReactNode;\n  /** Additional classes added to the list */\n  className?: string;\n  /** Sets the description list to auto fit. */\n  isAutoFit?: boolean;\n  /** Sets the description list component term and description pair to a horizontal layout. */\n  isHorizontal?: boolean;\n  /** Sets the description list to format automatically. */\n  isAutoColumnWidths?: boolean;\n  /** Modifies the description list display to inline-grid. */\n  isInlineGrid?: boolean;\n  /** Sets the description list to compact styling. */\n  isCompact?: boolean;\n  /** Sets a horizontal description list to have fluid styling. */\n  isFluid?: boolean;\n  /** Sets the the default placement of description list groups to fill from top to bottom. */\n  isFillColumns?: boolean;\n  /** Sets the number of columns on the description list at various breakpoints */\n  columnModifier?: {\n    default?: '1Col' | '2Col' | '3Col';\n    sm?: '1Col' | '2Col' | '3Col';\n    md?: '1Col' | '2Col' | '3Col';\n    lg?: '1Col' | '2Col' | '3Col';\n    xl?: '1Col' | '2Col' | '3Col';\n    '2xl'?: '1Col' | '2Col' | '3Col';\n  };\n  /** Indicates how the menu will align at various breakpoints. */\n  orientation?: {\n    sm?: 'vertical' | 'horizontal';\n    md?: 'vertical' | 'horizontal';\n    lg?: 'vertical' | 'horizontal';\n    xl?: 'vertical' | 'horizontal';\n    '2xl'?: 'vertical' | 'horizontal';\n  };\n  /** Sets the minimum column size for the auto-fit (isAutoFit) layout at various breakpoints. */\n  autoFitMinModifier?: {\n    default?: string;\n    sm?: string;\n    md?: string;\n    lg?: string;\n    xl?: string;\n    '2xl'?: string;\n  };\n  /** Sets the horizontal description list's term column width at various breakpoints. */\n  horizontalTermWidthModifier?: {\n    default?: string;\n    sm?: string;\n    md?: string;\n    lg?: string;\n    xl?: string;\n    '2xl'?: string;\n  };\n}\n\nconst setBreakpointModifiers = (prefix: string, modifiers: BreakpointModifiers) => {\n  const mods = modifiers as Partial<{ [k: string]: string }>;\n  return Object.keys(mods || {}).reduce(\n    (acc, curr) =>\n      curr === 'default' ? { ...acc, [prefix]: mods[curr] } : { ...acc, [`${prefix}-on-${curr}`]: mods[curr] },\n    {}\n  );\n};\n\nexport const DescriptionList: React.FunctionComponent<DescriptionListProps> = ({\n  className = '',\n  children = null,\n  isHorizontal = false,\n  isAutoColumnWidths,\n  isAutoFit,\n  isInlineGrid,\n  isCompact,\n  isFluid,\n  isFillColumns,\n  columnModifier,\n  autoFitMinModifier,\n  horizontalTermWidthModifier,\n  orientation,\n  style,\n  ...props\n}: DescriptionListProps) => {\n  if (isAutoFit && autoFitMinModifier) {\n    style = {\n      ...style,\n      ...setBreakpointModifiers('--pf-c-description-list--GridTemplateColumns--min', autoFitMinModifier)\n    };\n  }\n  if (isHorizontal && horizontalTermWidthModifier) {\n    style = {\n      ...style,\n      ...setBreakpointModifiers('--pf-c-description-list--m-horizontal__term--width', horizontalTermWidthModifier)\n    };\n  }\n\n  return (\n    <dl\n      className={css(\n        styles.descriptionList,\n        (isHorizontal || isFluid) && styles.modifiers.horizontal,\n        isAutoColumnWidths && styles.modifiers.autoColumnWidths,\n        isAutoFit && styles.modifiers.autoFit,\n        formatBreakpointMods(columnModifier, styles),\n        formatBreakpointMods(orientation, styles),\n        isInlineGrid && styles.modifiers.inlineGrid,\n        isCompact && styles.modifiers.compact,\n        isFluid && styles.modifiers.fluid,\n        isFillColumns && styles.modifiers.fillColumns,\n        className\n      )}\n      style={style}\n      {...props}\n    >\n      {children}\n    </dl>\n  );\n};\n\nDescriptionList.displayName = 'DescriptionList';\n"]},"metadata":{},"sourceType":"module"}