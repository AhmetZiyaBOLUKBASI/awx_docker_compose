{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from'react';import useIsMounted from'hooks/useIsMounted';/*\n  Hook for using PatternFly's <Select> component when a pre-existing value\n  is loaded from somewhere other than the options. Guarantees object equality\n  between objects in `value` and the corresponding objects loaded as\n  `options` (based on matched id value).\n */export default function useSyncedSelectValue(value,onChange){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),options=_useState2[0],_setOptions=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),selections=_useState4[0],setSelections=_useState4[1];var isMounted=useIsMounted();useEffect(function(){if(!isMounted.current){return;}var newOptions=[];if(value!==selections&&options.length){var syncedValue=value.map(function(item){var match=options.find(function(i){return i.id===item.id;});if(!match){newOptions.push(item);}return match||item;});setSelections(syncedValue);}if(newOptions.length>0){_setOptions(options.concat(newOptions));}/* eslint-disable-next-line react-hooks/exhaustive-deps */},[value,options]);var onSelect=function onSelect(event,item){if(selections.includes(item)){onChange(selections.filter(function(i){return i!==item;}));}else{onChange(selections.concat(item));}};return{selections:options.length?addToStringToObjects(selections):[],onSelect:onSelect,options:options,setOptions:function setOptions(newOpts){if(isMounted.current){_setOptions(addToStringToObjects(newOpts));}}};}/*\n  PF uses toString to generate React keys. This is used to ensure\n  all objects in the array have a toString method.\n */function addToStringToObjects(){var items=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];items.forEach(function(item){item.toString=toString;});return items;}function toString(){return String(this.id);}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/MultiSelect/useSyncedSelectValue.js"],"names":["useState","useEffect","useIsMounted","useSyncedSelectValue","value","onChange","options","setOptions","selections","setSelections","isMounted","current","newOptions","length","syncedValue","map","item","match","find","i","id","push","concat","onSelect","event","includes","filter","addToStringToObjects","newOpts","items","forEach","toString","String"],"mappings":"uGAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,MAAOC,CAAAA,YAAP,KAAyB,oBAAzB,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,cAAe,SAASC,CAAAA,oBAAT,CAA8BC,KAA9B,CAAqCC,QAArC,CAA+C,CAC5D,cAA8BL,QAAQ,CAAC,EAAD,CAAtC,wCAAOM,OAAP,eAAgBC,WAAhB,eACA,eAAoCP,QAAQ,CAAC,EAAD,CAA5C,yCAAOQ,UAAP,eAAmBC,aAAnB,eACA,GAAMC,CAAAA,SAAS,CAAGR,YAAY,EAA9B,CAEAD,SAAS,CAAC,UAAM,CACd,GAAI,CAACS,SAAS,CAACC,OAAf,CAAwB,CACtB,OACD,CACD,GAAMC,CAAAA,UAAU,CAAG,EAAnB,CACA,GAAIR,KAAK,GAAKI,UAAV,EAAwBF,OAAO,CAACO,MAApC,CAA4C,CAC1C,GAAMC,CAAAA,WAAW,CAAGV,KAAK,CAACW,GAAN,CAAU,SAACC,IAAD,CAAU,CACtC,GAAMC,CAAAA,KAAK,CAAGX,OAAO,CAACY,IAAR,CAAa,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,EAAF,GAASJ,IAAI,CAACI,EAArB,EAAb,CAAd,CACA,GAAI,CAACH,KAAL,CAAY,CACVL,UAAU,CAACS,IAAX,CAAgBL,IAAhB,EACD,CACD,MAAOC,CAAAA,KAAK,EAAID,IAAhB,CACD,CANmB,CAApB,CAOAP,aAAa,CAACK,WAAD,CAAb,CACD,CACD,GAAIF,UAAU,CAACC,MAAX,CAAoB,CAAxB,CAA2B,CACzBN,WAAU,CAACD,OAAO,CAACgB,MAAR,CAAeV,UAAf,CAAD,CAAV,CACD,CACD,0DACD,CAnBQ,CAmBN,CAACR,KAAD,CAAQE,OAAR,CAnBM,CAAT,CAqBA,GAAMiB,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAQR,IAAR,CAAiB,CAChC,GAAIR,UAAU,CAACiB,QAAX,CAAoBT,IAApB,CAAJ,CAA+B,CAC7BX,QAAQ,CAACG,UAAU,CAACkB,MAAX,CAAkB,SAACP,CAAD,QAAOA,CAAAA,CAAC,GAAKH,IAAb,EAAlB,CAAD,CAAR,CACD,CAFD,IAEO,CACLX,QAAQ,CAACG,UAAU,CAACc,MAAX,CAAkBN,IAAlB,CAAD,CAAR,CACD,CACF,CAND,CAOA,MAAO,CACLR,UAAU,CAAEF,OAAO,CAACO,MAAR,CAAiBc,oBAAoB,CAACnB,UAAD,CAArC,CAAoD,EAD3D,CAELe,QAAQ,CAARA,QAFK,CAGLjB,OAAO,CAAPA,OAHK,CAILC,UAAU,CAAE,oBAACqB,OAAD,CAAa,CACvB,GAAIlB,SAAS,CAACC,OAAd,CAAuB,CACrBJ,WAAU,CAACoB,oBAAoB,CAACC,OAAD,CAArB,CAAV,CACD,CACF,CARI,CAAP,CAUD,CAED;AACA;AACA;AACA,GACA,QAASD,CAAAA,oBAAT,EAA0C,IAAZE,CAAAA,KAAY,2DAAJ,EAAI,CACxCA,KAAK,CAACC,OAAN,CAAc,SAACd,IAAD,CAAU,CACtBA,IAAI,CAACe,QAAL,CAAgBA,QAAhB,CACD,CAFD,EAGA,MAAOF,CAAAA,KAAP,CACD,CAED,QAASE,CAAAA,QAAT,EAAoB,CAClB,MAAOC,CAAAA,MAAM,CAAC,KAAKZ,EAAN,CAAb,CACD","sourcesContent":["import { useState, useEffect } from 'react';\nimport useIsMounted from 'hooks/useIsMounted';\n\n/*\n  Hook for using PatternFly's <Select> component when a pre-existing value\n  is loaded from somewhere other than the options. Guarantees object equality\n  between objects in `value` and the corresponding objects loaded as\n  `options` (based on matched id value).\n */\nexport default function useSyncedSelectValue(value, onChange) {\n  const [options, setOptions] = useState([]);\n  const [selections, setSelections] = useState([]);\n  const isMounted = useIsMounted();\n\n  useEffect(() => {\n    if (!isMounted.current) {\n      return;\n    }\n    const newOptions = [];\n    if (value !== selections && options.length) {\n      const syncedValue = value.map((item) => {\n        const match = options.find((i) => i.id === item.id);\n        if (!match) {\n          newOptions.push(item);\n        }\n        return match || item;\n      });\n      setSelections(syncedValue);\n    }\n    if (newOptions.length > 0) {\n      setOptions(options.concat(newOptions));\n    }\n    /* eslint-disable-next-line react-hooks/exhaustive-deps */\n  }, [value, options]);\n\n  const onSelect = (event, item) => {\n    if (selections.includes(item)) {\n      onChange(selections.filter((i) => i !== item));\n    } else {\n      onChange(selections.concat(item));\n    }\n  };\n  return {\n    selections: options.length ? addToStringToObjects(selections) : [],\n    onSelect,\n    options,\n    setOptions: (newOpts) => {\n      if (isMounted.current) {\n        setOptions(addToStringToObjects(newOpts));\n      }\n    },\n  };\n}\n\n/*\n  PF uses toString to generate React keys. This is used to ensure\n  all objects in the array have a toString method.\n */\nfunction addToStringToObjects(items = []) {\n  items.forEach((item) => {\n    item.toString = toString;\n  });\n  return items;\n}\n\nfunction toString() {\n  return String(this.id);\n}\n"]},"metadata":{},"sourceType":"module"}