{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{i18n}from\"@lingui/core\";import React from'react';import{Formik,useField}from'formik';import{Form,FormGroup}from'@patternfly/react-core';import{FormColumnLayout}from'components/FormLayout';import FormActionGroup from'components/FormActionGroup/FormActionGroup';import FormField,{CheckboxField,PasswordField,FormSubmitError}from'components/FormField';import{useConfig}from'contexts/Config';import getDocsBaseUrl from'util/getDocsBaseUrl';import AnsibleSelect from'components/AnsibleSelect';import Popover from'components/Popover';import{required,noWhiteSpace,combine,maxLength,integer,number as numberValidator}from'util/validators';import MultipleChoiceField from'./MultipleChoiceField';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function AnswerTypeField(){var _useField=useField({name:'type',validate:required(/*i18n*/i18n._(\"Select a value for this field\"))}),_useField2=_slicedToArray(_useField,3),field=_useField2[0],meta=_useField2[1],helpers=_useField2[2];var _useField3=useField('formattedChoices'),_useField4=_slicedToArray(_useField3,3),choicesField=_useField4[0],choicesMeta=_useField4[1],choicesHelpers=_useField4[2];var singleDefault=choicesField.value.map(function(c,i){return i===0?{choice:c.choice,isDefault:true,id:c.id}:{choice:c.choice,isDefault:false,id:c.id};});return/*#__PURE__*/_jsx(FormGroup,{label:/*i18n*/i18n._(\"Answer type\"),labelIcon:/*#__PURE__*/_jsx(Popover,{content:/*i18n*/i18n._(\"Choose an answer type or format you want as the prompt for the user.\\nRefer to the Ansible Controller Documentation for more additional\\ninformation about each option.\")}),isRequired:true,fieldId:\"question-answer-type\",children:/*#__PURE__*/_jsx(AnsibleSelect,_objectSpread(_objectSpread({id:\"question-type\"},field),{},{onChange:function onChange(e,val){helpers.setValue(val);// Edit Mode: Makes the first choice the default value if\n// the type switches from multiselect, to multiple choice\nif(val==='multiplechoice'&&['multiplechoice','multiselect'].includes(meta.initialValue)&&val!==meta.initialValue){choicesHelpers.setValue(singleDefault);}// Edit Mode: Resets Multiple choice or Multiselect values if the user move type\n// back to one of those values\nif(['multiplechoice','multiselect'].includes(val)&&val===meta.initialValue){choicesHelpers.setValue(choicesMeta.initialValue);}},data:[{key:'text',value:'text',label:/*i18n*/i18n._(\"Text\")},{key:'textarea',value:'textarea',label:/*i18n*/i18n._(\"Textarea\")},{key:'password',value:'password',label:/*i18n*/i18n._(\"Password\")},{key:'multiplechoice',value:'multiplechoice',label:/*i18n*/i18n._(\"Multiple Choice (single select)\")},{key:'multiselect',value:'multiselect',label:/*i18n*/i18n._(\"Multiple Choice (multiple select)\")},{key:'integer',value:'integer',label:/*i18n*/i18n._(\"Integer\")},{key:'float',value:'float',label:/*i18n*/i18n._(\"Float\")}]}))});}function SurveyQuestionForm(_ref){var _question$default;var question=_ref.question,handleSubmit=_ref.handleSubmit,handleCancel=_ref.handleCancel,submitError=_ref.submitError;var config=useConfig();var initialValues={question_name:(question===null||question===void 0?void 0:question.question_name)||'',question_description:(question===null||question===void 0?void 0:question.question_description)||'',required:question?question===null||question===void 0?void 0:question.required:true,type:(question===null||question===void 0?void 0:question.type)||'text',variable:(question===null||question===void 0?void 0:question.variable)||'',min:(question===null||question===void 0?void 0:question.min)||0,max:(question===null||question===void 0?void 0:question.max)||1024,default:(_question$default=question===null||question===void 0?void 0:question.default)!==null&&_question$default!==void 0?_question$default:'',choices:(question===null||question===void 0?void 0:question.choices)||'',formattedChoices:[{choice:'',isDefault:false,id:0}],new_question:!question};if((question===null||question===void 0?void 0:question.type)==='multiselect'||(question===null||question===void 0?void 0:question.type)==='multiplechoice'){var choices=Array.isArray(question.choices)?question.choices:question.choices.split('\\n');var defaults=Array.isArray(question.default)?question.default:question.default.split('\\n');var formattedChoices=choices.map(function(c,i){if(defaults.includes(c)){return{choice:c,isDefault:true,id:i};}return{choice:c,isDefault:false,id:i};});initialValues={question_name:(question===null||question===void 0?void 0:question.question_name)||'',question_description:(question===null||question===void 0?void 0:question.question_description)||'',required:question?question===null||question===void 0?void 0:question.required:true,type:(question===null||question===void 0?void 0:question.type)||'text',variable:(question===null||question===void 0?void 0:question.variable)||'',min:(question===null||question===void 0?void 0:question.min)||0,max:(question===null||question===void 0?void 0:question.max)||1024,formattedChoices:formattedChoices,new_question:!question};}return/*#__PURE__*/_jsx(Formik,{enableReinitialize:true,initialValues:initialValues,onSubmit:handleSubmit,children:function children(formik){return/*#__PURE__*/_jsxs(Form,{autoComplete:\"off\",onSubmit:formik.handleSubmit,children:[/*#__PURE__*/_jsxs(FormColumnLayout,{children:[/*#__PURE__*/_jsx(FormField,{id:\"question-name\",name:\"question_name\",type:\"text\",label:/*i18n*/i18n._(\"Question\"),validate:required(null),isRequired:true}),/*#__PURE__*/_jsx(FormField,{id:\"question-description\",name:\"question_description\",type:\"text\",label:/*i18n*/i18n._(\"Description\")}),/*#__PURE__*/_jsx(FormField,{id:\"question-variable\",name:\"variable\",type:\"text\",label:/*i18n*/i18n._(\"Answer variable name\"),validate:combine([noWhiteSpace(),required(null)]),isRequired:true,tooltip:/*i18n*/i18n._(\"The suggested format for variable names is lowercase and\\nunderscore-separated (for example, foo_bar, user_id, host_name,\\netc.). Variable names with spaces are not allowed.\")}),/*#__PURE__*/_jsx(AnswerTypeField,{}),/*#__PURE__*/_jsx(CheckboxField,{id:\"question-required\",name:\"required\",label:/*i18n*/i18n._(\"Required\")})]}),/*#__PURE__*/_jsxs(FormColumnLayout,{children:[['text','textarea','password'].includes(formik.values.type)&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(FormField,{id:\"question-min\",name:\"min\",type:\"number\",label:/*i18n*/i18n._(\"Minimum length\")}),/*#__PURE__*/_jsx(FormField,{id:\"question-max\",name:\"max\",type:\"number\",label:/*i18n*/i18n._(\"Maximum length\")})]}),['integer','float'].includes(formik.values.type)&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(FormField,{id:\"question-min\",name:\"min\",type:\"number\",label:/*i18n*/i18n._(\"Minimum\")}),/*#__PURE__*/_jsx(FormField,{id:\"question-max\",name:\"max\",type:\"number\",label:/*i18n*/i18n._(\"Maximum\")})]}),['text','integer','float'].includes(formik.values.type)&&/*#__PURE__*/_jsx(FormField,{id:\"question-default\",name:\"default\",validate:{text:maxLength(formik.values.max),integer:integer(),float:numberValidator()}[formik.values.type],min:formik.values.min,max:formik.values.max,type:formik.values.type==='text'?'text':'number',label:/*i18n*/i18n._(\"Default answer\")}),formik.values.type==='textarea'&&/*#__PURE__*/_jsx(FormField,{id:\"question-default\",name:\"default\",type:\"textarea\",label:/*i18n*/i18n._(\"Default answer\")}),formik.values.type==='password'&&/*#__PURE__*/_jsx(PasswordField,{id:\"question-default\",name:\"default\",label:/*i18n*/i18n._(\"Default answer\")}),['multiplechoice','multiselect'].includes(formik.values.type)&&/*#__PURE__*/_jsx(MultipleChoiceField,{label:/*i18n*/i18n._(\"Multiple Choice Options\"),tooltip:/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"span\",{children:[/*i18n*/i18n._(\"Refer to the\"),\" \"]}),/*#__PURE__*/_jsx(\"a\",{href:\"\".concat(getDocsBaseUrl(config),\"/html/userguide/job_templates.html#surveys\"),target:\"_blank\",rel:\"noreferrer\",children:/*i18n*/i18n._(\"documentation\")}),' ',/*i18n*/i18n._(\"for more information.\")]})})]}),/*#__PURE__*/_jsx(FormSubmitError,{error:submitError}),/*#__PURE__*/_jsx(FormActionGroup,{onCancel:handleCancel,onSubmit:formik.handleSubmit})]});}});}SurveyQuestionForm.defaultProps={question:null,submitError:null};export default SurveyQuestionForm;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Template/Survey/SurveyQuestionForm.js"],"names":["React","Formik","useField","Form","FormGroup","FormColumnLayout","FormActionGroup","FormField","CheckboxField","PasswordField","FormSubmitError","useConfig","getDocsBaseUrl","AnsibleSelect","Popover","required","noWhiteSpace","combine","maxLength","integer","number","numberValidator","MultipleChoiceField","AnswerTypeField","name","validate","field","meta","helpers","choicesField","choicesMeta","choicesHelpers","singleDefault","value","map","c","i","choice","isDefault","id","e","val","setValue","includes","initialValue","key","label","SurveyQuestionForm","question","handleSubmit","handleCancel","submitError","config","initialValues","question_name","question_description","type","variable","min","max","default","choices","formattedChoices","new_question","Array","isArray","split","defaults","formik","values","text","float","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { func, string, bool, number, shape } from 'prop-types';\nimport { Formik, useField } from 'formik';\nimport { t } from '@lingui/macro';\nimport { Form, FormGroup } from '@patternfly/react-core';\nimport { FormColumnLayout } from 'components/FormLayout';\nimport FormActionGroup from 'components/FormActionGroup/FormActionGroup';\nimport FormField, {\n  CheckboxField,\n  PasswordField,\n  FormSubmitError,\n} from 'components/FormField';\nimport { useConfig } from 'contexts/Config';\nimport getDocsBaseUrl from 'util/getDocsBaseUrl';\nimport AnsibleSelect from 'components/AnsibleSelect';\nimport Popover from 'components/Popover';\nimport {\n  required,\n  noWhiteSpace,\n  combine,\n  maxLength,\n  integer,\n  number as numberValidator,\n} from 'util/validators';\nimport MultipleChoiceField from './MultipleChoiceField';\n\nfunction AnswerTypeField() {\n  const [field, meta, helpers] = useField({\n    name: 'type',\n    validate: required(t`Select a value for this field`),\n  });\n  const [choicesField, choicesMeta, choicesHelpers] =\n    useField('formattedChoices');\n\n  const singleDefault = choicesField.value.map((c, i) =>\n    i === 0\n      ? { choice: c.choice, isDefault: true, id: c.id }\n      : { choice: c.choice, isDefault: false, id: c.id }\n  );\n\n  return (\n    <FormGroup\n      label={t`Answer type`}\n      labelIcon={\n        <Popover\n          content={t`Choose an answer type or format you want as the prompt for the user.\n          Refer to the Ansible Controller Documentation for more additional\n          information about each option.`}\n        />\n      }\n      isRequired\n      fieldId=\"question-answer-type\"\n    >\n      <AnsibleSelect\n        id=\"question-type\"\n        {...field}\n        onChange={(e, val) => {\n          helpers.setValue(val);\n\n          // Edit Mode: Makes the first choice the default value if\n          // the type switches from multiselect, to multiple choice\n          if (\n            val === 'multiplechoice' &&\n            ['multiplechoice', 'multiselect'].includes(meta.initialValue) &&\n            val !== meta.initialValue\n          ) {\n            choicesHelpers.setValue(singleDefault);\n          }\n\n          // Edit Mode: Resets Multiple choice or Multiselect values if the user move type\n          // back to one of those values\n          if (\n            ['multiplechoice', 'multiselect'].includes(val) &&\n            val === meta.initialValue\n          ) {\n            choicesHelpers.setValue(choicesMeta.initialValue);\n          }\n        }}\n        data={[\n          { key: 'text', value: 'text', label: t`Text` },\n          { key: 'textarea', value: 'textarea', label: t`Textarea` },\n          { key: 'password', value: 'password', label: t`Password` },\n          {\n            key: 'multiplechoice',\n            value: 'multiplechoice',\n            label: t`Multiple Choice (single select)`,\n          },\n          {\n            key: 'multiselect',\n            value: 'multiselect',\n            label: t`Multiple Choice (multiple select)`,\n          },\n          { key: 'integer', value: 'integer', label: t`Integer` },\n          { key: 'float', value: 'float', label: t`Float` },\n        ]}\n      />\n    </FormGroup>\n  );\n}\n\nfunction SurveyQuestionForm({\n  question,\n  handleSubmit,\n  handleCancel,\n  submitError,\n}) {\n  const config = useConfig();\n\n  let initialValues = {\n    question_name: question?.question_name || '',\n    question_description: question?.question_description || '',\n    required: question ? question?.required : true,\n    type: question?.type || 'text',\n    variable: question?.variable || '',\n    min: question?.min || 0,\n    max: question?.max || 1024,\n    default: question?.default ?? '',\n    choices: question?.choices || '',\n    formattedChoices: [{ choice: '', isDefault: false, id: 0 }],\n    new_question: !question,\n  };\n  if (question?.type === 'multiselect' || question?.type === 'multiplechoice') {\n    const choices = Array.isArray(question.choices)\n      ? question.choices\n      : question.choices.split('\\n');\n    const defaults = Array.isArray(question.default)\n      ? question.default\n      : question.default.split('\\n');\n    const formattedChoices = choices.map((c, i) => {\n      if (defaults.includes(c)) {\n        return { choice: c, isDefault: true, id: i };\n      }\n\n      return { choice: c, isDefault: false, id: i };\n    });\n\n    initialValues = {\n      question_name: question?.question_name || '',\n      question_description: question?.question_description || '',\n      required: question ? question?.required : true,\n      type: question?.type || 'text',\n      variable: question?.variable || '',\n      min: question?.min || 0,\n      max: question?.max || 1024,\n      formattedChoices,\n      new_question: !question,\n    };\n  }\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n    >\n      {(formik) => (\n        <Form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\n          <FormColumnLayout>\n            <FormField\n              id=\"question-name\"\n              name=\"question_name\"\n              type=\"text\"\n              label={t`Question`}\n              validate={required(null)}\n              isRequired\n            />\n            <FormField\n              id=\"question-description\"\n              name=\"question_description\"\n              type=\"text\"\n              label={t`Description`}\n            />\n            <FormField\n              id=\"question-variable\"\n              name=\"variable\"\n              type=\"text\"\n              label={t`Answer variable name`}\n              validate={combine([noWhiteSpace(), required(null)])}\n              isRequired\n              tooltip={t`The suggested format for variable names is lowercase and\n                underscore-separated (for example, foo_bar, user_id, host_name,\n                etc.). Variable names with spaces are not allowed.`}\n            />\n            <AnswerTypeField />\n            <CheckboxField\n              id=\"question-required\"\n              name=\"required\"\n              label={t`Required`}\n            />\n          </FormColumnLayout>\n          <FormColumnLayout>\n            {['text', 'textarea', 'password'].includes(formik.values.type) && (\n              <>\n                <FormField\n                  id=\"question-min\"\n                  name=\"min\"\n                  type=\"number\"\n                  label={t`Minimum length`}\n                />\n                <FormField\n                  id=\"question-max\"\n                  name=\"max\"\n                  type=\"number\"\n                  label={t`Maximum length`}\n                />\n              </>\n            )}\n            {['integer', 'float'].includes(formik.values.type) && (\n              <>\n                <FormField\n                  id=\"question-min\"\n                  name=\"min\"\n                  type=\"number\"\n                  label={t`Minimum`}\n                />\n                <FormField\n                  id=\"question-max\"\n                  name=\"max\"\n                  type=\"number\"\n                  label={t`Maximum`}\n                />\n              </>\n            )}\n            {['text', 'integer', 'float'].includes(formik.values.type) && (\n              <FormField\n                id=\"question-default\"\n                name=\"default\"\n                validate={\n                  {\n                    text: maxLength(formik.values.max),\n                    integer: integer(),\n                    float: numberValidator(),\n                  }[formik.values.type]\n                }\n                min={formik.values.min}\n                max={formik.values.max}\n                type={formik.values.type === 'text' ? 'text' : 'number'}\n                label={t`Default answer`}\n              />\n            )}\n            {formik.values.type === 'textarea' && (\n              <FormField\n                id=\"question-default\"\n                name=\"default\"\n                type=\"textarea\"\n                label={t`Default answer`}\n              />\n            )}\n            {formik.values.type === 'password' && (\n              <PasswordField\n                id=\"question-default\"\n                name=\"default\"\n                label={t`Default answer`}\n              />\n            )}\n            {['multiplechoice', 'multiselect'].includes(formik.values.type) && (\n              <MultipleChoiceField\n                label={t`Multiple Choice Options`}\n                tooltip={\n                  <>\n                    <span>{t`Refer to the`} </span>\n                    <a\n                      href={`${getDocsBaseUrl(\n                        config\n                      )}/html/userguide/job_templates.html#surveys`}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      {t`documentation`}\n                    </a>{' '}\n                    {t`for more information.`}\n                  </>\n                }\n              />\n            )}\n          </FormColumnLayout>\n          <FormSubmitError error={submitError} />\n          <FormActionGroup\n            onCancel={handleCancel}\n            onSubmit={formik.handleSubmit}\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nSurveyQuestionForm.propTypes = {\n  question: shape({\n    question_name: string.isRequired,\n    question_description: string.isRequired,\n    required: bool,\n    type: string.isRequired,\n    min: number,\n    max: number,\n  }),\n  handleSubmit: func.isRequired,\n  handleCancel: func.isRequired,\n  submitError: shape({}),\n};\n\nSurveyQuestionForm.defaultProps = {\n  question: null,\n  submitError: null,\n};\nexport default SurveyQuestionForm;\n"]},"metadata":{},"sourceType":"module"}