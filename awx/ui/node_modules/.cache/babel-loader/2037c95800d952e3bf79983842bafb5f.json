{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListContext } from './DataList';\nimport { KeyTypes } from '../../helpers/constants';\nimport { DataListDragButton } from './DataListDragButton';\n\nfunction findDataListDragButton(node) {\n  if (!React.isValidElement(node)) {\n    return null;\n  }\n\n  if (node.type === DataListDragButton) {\n    return node;\n  }\n\n  if (node.props.children) {\n    var _iterator = _createForOfIteratorHelper(React.Children.toArray(node.props.children)),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var child = _step.value;\n        var button = findDataListDragButton(child);\n\n        if (button) {\n          return button;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return null;\n}\n\nexport var DataListItem = /*#__PURE__*/function (_React$Component) {\n  _inherits(DataListItem, _React$Component);\n\n  var _super = _createSuper(DataListItem);\n\n  function DataListItem() {\n    _classCallCheck(this, DataListItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DataListItem, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          isExpanded = _a.isExpanded,\n          className = _a.className,\n          id = _a.id,\n          ariaLabelledBy = _a['aria-labelledby'],\n          selectableInputAriaLabel = _a.selectableInputAriaLabel,\n          props = __rest(_a, [\"children\", \"isExpanded\", \"className\", \"id\", 'aria-labelledby', \"selectableInputAriaLabel\"]);\n\n      return React.createElement(DataListContext.Consumer, null, function (_ref) {\n        var isSelectable = _ref.isSelectable,\n            selectedDataListItemId = _ref.selectedDataListItemId,\n            updateSelectedDataListItem = _ref.updateSelectedDataListItem,\n            selectableRow = _ref.selectableRow,\n            isDraggable = _ref.isDraggable,\n            dragStart = _ref.dragStart,\n            dragEnd = _ref.dragEnd,\n            drop = _ref.drop;\n\n        var selectDataListItem = function selectDataListItem(event) {\n          var target = event.target;\n\n          while (event.currentTarget !== target) {\n            if ('onclick' in target && target.onclick || target.parentNode.classList.contains(styles.dataListItemAction) || target.parentNode.classList.contains(styles.dataListItemControl)) {\n              // check other event handlers are not present.\n              return;\n            } else {\n              target = target.parentNode;\n            }\n          }\n\n          updateSelectedDataListItem(id);\n        };\n\n        var onKeyDown = function onKeyDown(event) {\n          if (event.key === KeyTypes.Enter) {\n            updateSelectedDataListItem(id);\n          }\n        }; // We made the DataListDragButton determine if the entire item is draggable instead of\n        // DataListItem like we should have.\n        // Recursively search children for the DataListDragButton and see if it's disabled...\n\n\n        var dragButton = findDataListDragButton(children);\n        var dragProps = isDraggable && {\n          draggable: dragButton ? !dragButton.props.isDisabled : true,\n          onDrop: drop,\n          onDragEnd: dragEnd,\n          onDragStart: dragStart\n        };\n        var isSelected = selectedDataListItemId === id;\n        var selectableInputAriaProps = selectableInputAriaLabel ? {\n          'aria-label': selectableInputAriaLabel\n        } : {\n          'aria-labelledby': ariaLabelledBy\n        };\n        var selectableInputType = (selectableRow === null || selectableRow === void 0 ? void 0 : selectableRow.type) === 'multiple' ? 'checkbox' : 'radio';\n        return React.createElement(\"li\", Object.assign({\n          id: id,\n          className: css(styles.dataListItem, isExpanded && styles.modifiers.expanded, isSelectable && styles.modifiers.selectable, selectedDataListItemId && isSelected && styles.modifiers.selected, className),\n          \"aria-labelledby\": ariaLabelledBy\n        }, isSelectable && {\n          tabIndex: 0,\n          onClick: selectDataListItem,\n          onKeyDown: onKeyDown\n        }, isSelectable && isSelected && {\n          'aria-selected': true\n        }, props, dragProps), selectableRow && React.createElement(\"input\", Object.assign({\n          className: \"pf-screen-reader\",\n          type: selectableInputType,\n          checked: isSelected,\n          onChange: function onChange(event) {\n            return selectableRow.onChange(id, event);\n          },\n          tabIndex: -1\n        }, selectableInputAriaProps)), React.Children.map(children, function (child) {\n          return React.isValidElement(child) && React.cloneElement(child, {\n            rowid: ariaLabelledBy\n          });\n        }));\n      });\n    }\n  }]);\n\n  return DataListItem;\n}(React.Component);\nDataListItem.displayName = 'DataListItem';\nDataListItem.defaultProps = {\n  isExpanded: false,\n  className: '',\n  id: '',\n  children: null,\n  'aria-labelledby': ''\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DataList/DataListItem.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListContext } from './DataList';\nimport { KeyTypes } from '../../helpers/constants';\nimport { DataListDragButton, DataListDragButtonProps } from './DataListDragButton';\n\nexport interface DataListItemProps extends Omit<React.HTMLProps<HTMLLIElement>, 'children' | 'ref'> {\n  /** Flag to show if the expanded content of the DataList item is visible */\n  isExpanded?: boolean;\n  /** Content rendered inside the DataList item */\n  children: React.ReactNode;\n  /** Additional classes added to the DataList item should be either <DataListItemRow> or <DataListContent> */\n  className?: string;\n  /** Adds accessible text to the DataList item */\n  'aria-labelledby': string;\n  /** Unique id for the DataList item */\n  id?: string;\n  /** @beta Aria label to apply to the selectable input if one is rendered */\n  selectableInputAriaLabel?: string;\n}\n\nexport interface DataListItemChildProps {\n  /** Id for the row */\n  rowid: string;\n}\n\nfunction findDataListDragButton(node: React.ReactNode): React.ReactElement<DataListDragButtonProps> | null {\n  if (!React.isValidElement(node)) {\n    return null;\n  }\n  if (node.type === DataListDragButton) {\n    return node as React.ReactElement<DataListDragButtonProps>;\n  }\n  if (node.props.children) {\n    for (const child of React.Children.toArray(node.props.children)) {\n      const button = findDataListDragButton(child);\n      if (button) {\n        return button;\n      }\n    }\n  }\n\n  return null;\n}\n\nexport class DataListItem extends React.Component<DataListItemProps> {\n  static displayName = 'DataListItem';\n  static defaultProps: DataListItemProps = {\n    isExpanded: false,\n    className: '',\n    id: '',\n    children: null,\n    'aria-labelledby': ''\n  };\n  render() {\n    const {\n      children,\n      isExpanded,\n      className,\n      id,\n      'aria-labelledby': ariaLabelledBy,\n      selectableInputAriaLabel,\n      ...props\n    } = this.props;\n    return (\n      <DataListContext.Consumer>\n        {({\n          isSelectable,\n          selectedDataListItemId,\n          updateSelectedDataListItem,\n          selectableRow,\n          isDraggable,\n          dragStart,\n          dragEnd,\n          drop\n        }) => {\n          const selectDataListItem = (event: React.MouseEvent) => {\n            let target: any = event.target;\n            while (event.currentTarget !== target) {\n              if (\n                ('onclick' in target && target.onclick) ||\n                target.parentNode.classList.contains(styles.dataListItemAction) ||\n                target.parentNode.classList.contains(styles.dataListItemControl)\n              ) {\n                // check other event handlers are not present.\n                return;\n              } else {\n                target = target.parentNode;\n              }\n            }\n            updateSelectedDataListItem(id);\n          };\n\n          const onKeyDown = (event: React.KeyboardEvent) => {\n            if (event.key === KeyTypes.Enter) {\n              updateSelectedDataListItem(id);\n            }\n          };\n\n          // We made the DataListDragButton determine if the entire item is draggable instead of\n          // DataListItem like we should have.\n          // Recursively search children for the DataListDragButton and see if it's disabled...\n          const dragButton = findDataListDragButton(children);\n          const dragProps = isDraggable && {\n            draggable: dragButton ? !dragButton.props.isDisabled : true,\n            onDrop: drop,\n            onDragEnd: dragEnd,\n            onDragStart: dragStart\n          };\n\n          const isSelected = selectedDataListItemId === id;\n\n          const selectableInputAriaProps = selectableInputAriaLabel\n            ? { 'aria-label': selectableInputAriaLabel }\n            : { 'aria-labelledby': ariaLabelledBy };\n\n          const selectableInputType = selectableRow?.type === 'multiple' ? 'checkbox' : 'radio';\n\n          return (\n            <li\n              id={id}\n              className={css(\n                styles.dataListItem,\n                isExpanded && styles.modifiers.expanded,\n                isSelectable && styles.modifiers.selectable,\n                selectedDataListItemId && isSelected && styles.modifiers.selected,\n                className\n              )}\n              aria-labelledby={ariaLabelledBy}\n              {...(isSelectable && { tabIndex: 0, onClick: selectDataListItem, onKeyDown })}\n              {...(isSelectable && isSelected && { 'aria-selected': true })}\n              {...props}\n              {...dragProps}\n            >\n              {selectableRow && (\n                <input\n                  className=\"pf-screen-reader\"\n                  type={selectableInputType}\n                  checked={isSelected}\n                  onChange={event => selectableRow.onChange(id, event)}\n                  tabIndex={-1}\n                  {...selectableInputAriaProps}\n                />\n              )}\n              {React.Children.map(\n                children,\n                child =>\n                  React.isValidElement(child) &&\n                  React.cloneElement(child as React.ReactElement<any>, {\n                    rowid: ariaLabelledBy\n                  })\n              )}\n            </li>\n          );\n        }}\n      </DataListContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}