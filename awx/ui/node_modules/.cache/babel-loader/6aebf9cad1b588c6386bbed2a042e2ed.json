{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect,useRef}from'react';export default function useThrottle(value,limit){var _useState=useState(value),_useState2=_slicedToArray(_useState,2),throttledValue=_useState2[0],setThrottledValue=_useState2[1];var lastRan=useRef(Date.now());var initialValue=useRef(value);useEffect(function(){if(value!==initialValue.current){setThrottledValue(value);return function(){};}var handler=setTimeout(function(){if(Date.now()-lastRan.current>=limit){lastRan.current=Date.now();setThrottledValue(value);}},limit-(Date.now()-lastRan.current));return function(){clearTimeout(handler);};},[value,limit]);return throttledValue;}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/hooks/useThrottle.js"],"names":["useState","useEffect","useRef","useThrottle","value","limit","throttledValue","setThrottledValue","lastRan","Date","now","initialValue","current","handler","setTimeout","clearTimeout"],"mappings":"uGAAA,OAASA,QAAT,CAAmBC,SAAnB,CAA8BC,MAA9B,KAA4C,OAA5C,CAEA,cAAe,SAASC,CAAAA,WAAT,CAAqBC,KAArB,CAA4BC,KAA5B,CAAmC,CAChD,cAA4CL,QAAQ,CAACI,KAAD,CAApD,wCAAOE,cAAP,eAAuBC,iBAAvB,eACA,GAAMC,CAAAA,OAAO,CAAGN,MAAM,CAACO,IAAI,CAACC,GAAL,EAAD,CAAtB,CACA,GAAMC,CAAAA,YAAY,CAAGT,MAAM,CAACE,KAAD,CAA3B,CAEAH,SAAS,CAAC,UAAM,CACd,GAAIG,KAAK,GAAKO,YAAY,CAACC,OAA3B,CAAoC,CAClCL,iBAAiB,CAACH,KAAD,CAAjB,CACA,MAAO,WAAM,CAAE,CAAf,CACD,CAED,GAAMS,CAAAA,OAAO,CAAGC,UAAU,CAAC,UAAM,CAC/B,GAAIL,IAAI,CAACC,GAAL,GAAaF,OAAO,CAACI,OAArB,EAAgCP,KAApC,CAA2C,CACzCG,OAAO,CAACI,OAAR,CAAkBH,IAAI,CAACC,GAAL,EAAlB,CACAH,iBAAiB,CAACH,KAAD,CAAjB,CACD,CACF,CALyB,CAKvBC,KAAK,EAAII,IAAI,CAACC,GAAL,GAAaF,OAAO,CAACI,OAAzB,CALkB,CAA1B,CAOA,MAAO,WAAM,CACXG,YAAY,CAACF,OAAD,CAAZ,CACD,CAFD,CAGD,CAhBQ,CAgBN,CAACT,KAAD,CAAQC,KAAR,CAhBM,CAAT,CAkBA,MAAOC,CAAAA,cAAP,CACD","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nexport default function useThrottle(value, limit) {\n  const [throttledValue, setThrottledValue] = useState(value);\n  const lastRan = useRef(Date.now());\n  const initialValue = useRef(value);\n\n  useEffect(() => {\n    if (value !== initialValue.current) {\n      setThrottledValue(value);\n      return () => {};\n    }\n\n    const handler = setTimeout(() => {\n      if (Date.now() - lastRan.current >= limit) {\n        lastRan.current = Date.now();\n        setThrottledValue(value);\n      }\n    }, limit - (Date.now() - lastRan.current));\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, limit]);\n\n  return throttledValue;\n}\n"]},"metadata":{},"sourceType":"module"}