{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";var _excluded=[\"inventory\",\"frequency\",\"frequencyOptions\",\"exceptionFrequency\",\"exceptionOptions\",\"timezone\",\"credentials\"];import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState}from'react';import{useHistory,useLocation}from'react-router-dom';import{Card}from'@patternfly/react-core';import yaml from'js-yaml';import{parseVariableField}from'util/yaml';import{SchedulesAPI}from'api';import mergeExtraVars from'util/prompt/mergeExtraVars';import getSurveyValues from'util/prompt/getSurveyValues';import{getAddedAndRemoved}from'util/lists';import ScheduleForm from'../shared/ScheduleForm';import buildRuleSet from'../shared/buildRuleSet';import{CardBody}from'../../Card';import{jsx as _jsx}from\"react/jsx-runtime\";function ScheduleAdd(_ref){var resource=_ref.resource,apiModel=_ref.apiModel,launchConfig=_ref.launchConfig,surveyConfig=_ref.surveyConfig,hasDaysToKeepField=_ref.hasDaysToKeepField,resourceDefaultCredentials=_ref.resourceDefaultCredentials;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),formSubmitError=_useState2[0],setFormSubmitError=_useState2[1];var history=useHistory();var location=useLocation();var pathname=location.pathname;var pathRoot=pathname.substr(0,pathname.indexOf('schedules'));var handleSubmit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(values,launchConfiguration,surveyConfiguration){var _surveyConfiguration$;var inventory,frequency,frequencyOptions,exceptionFrequency,exceptionOptions,timezone,credentials,submitValues,_getAddedAndRemoved,added,extraVars,surveyValues,initialExtraVars,ruleSet,requestData,_yield$apiModel$creat,scheduleId;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:inventory=values.inventory,frequency=values.frequency,frequencyOptions=values.frequencyOptions,exceptionFrequency=values.exceptionFrequency,exceptionOptions=values.exceptionOptions,timezone=values.timezone,credentials=values.credentials,submitValues=_objectWithoutProperties(values,_excluded);_getAddedAndRemoved=getAddedAndRemoved(resource===null||resource===void 0?void 0:resource.summary_fields.credentials,credentials),added=_getAddedAndRemoved.added;surveyValues=getSurveyValues(values);if(!Object.values(surveyValues).length&&surveyConfiguration!==null&&surveyConfiguration!==void 0&&(_surveyConfiguration$=surveyConfiguration.spec)!==null&&_surveyConfiguration$!==void 0&&_surveyConfiguration$.length){surveyConfiguration.spec.forEach(function(q){surveyValues[q.variable]=q.default;});}initialExtraVars=(launchConfiguration===null||launchConfiguration===void 0?void 0:launchConfiguration.ask_variables_on_launch)&&(values.extra_vars||'---');if(surveyConfiguration!==null&&surveyConfiguration!==void 0&&surveyConfiguration.spec){extraVars=yaml.dump(mergeExtraVars(initialExtraVars,surveyValues));}else{extraVars=yaml.dump(mergeExtraVars(initialExtraVars,{}));}submitValues.extra_data=extraVars&&parseVariableField(extraVars);delete values.extra_vars;if(inventory){submitValues.inventory=inventory.id;}_context.prev=9;ruleSet=buildRuleSet(values);requestData=_objectSpread(_objectSpread({},submitValues),{},{rrule:ruleSet.toString().replace(/\\n/g,' ')});delete requestData.startDate;delete requestData.startTime;if(Object.keys(values).includes('daysToKeep')){if(requestData.extra_data){requestData.extra_data.days=values.daysToKeep;}else{requestData.extra_data=JSON.stringify({days:values.daysToKeep});}}_context.next=17;return apiModel.createSchedule(resource.id,requestData);case 17:_yield$apiModel$creat=_context.sent;scheduleId=_yield$apiModel$creat.data.id;if(!((credentials===null||credentials===void 0?void 0:credentials.length)>0)){_context.next=22;break;}_context.next=22;return Promise.all(added.map(function(_ref3){var credentialId=_ref3.id;return SchedulesAPI.associateCredential(scheduleId,credentialId);}));case 22:history.push(\"\".concat(pathRoot,\"schedules/\").concat(scheduleId));_context.next=28;break;case 25:_context.prev=25;_context.t0=_context[\"catch\"](9);setFormSubmitError(_context.t0);case 28:case\"end\":return _context.stop();}}},_callee,null,[[9,25]]);}));return function handleSubmit(_x,_x2,_x3){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(ScheduleForm,{hasDaysToKeepField:hasDaysToKeepField,handleCancel:function handleCancel(){return history.push(\"\".concat(pathRoot,\"schedules\"));},handleSubmit:handleSubmit,submitError:formSubmitError,launchConfig:launchConfig,surveyConfig:surveyConfig,resource:resource,resourceDefaultCredentials:resourceDefaultCredentials})})});}ScheduleAdd.defaultProps={};export default ScheduleAdd;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/Schedule/ScheduleAdd/ScheduleAdd.js"],"names":["React","useState","useHistory","useLocation","Card","yaml","parseVariableField","SchedulesAPI","mergeExtraVars","getSurveyValues","getAddedAndRemoved","ScheduleForm","buildRuleSet","CardBody","ScheduleAdd","resource","apiModel","launchConfig","surveyConfig","hasDaysToKeepField","resourceDefaultCredentials","formSubmitError","setFormSubmitError","history","location","pathname","pathRoot","substr","indexOf","handleSubmit","values","launchConfiguration","surveyConfiguration","inventory","frequency","frequencyOptions","exceptionFrequency","exceptionOptions","timezone","credentials","submitValues","summary_fields","added","surveyValues","Object","length","spec","forEach","q","variable","default","initialExtraVars","ask_variables_on_launch","extra_vars","extraVars","dump","extra_data","id","ruleSet","requestData","rrule","toString","replace","startDate","startTime","keys","includes","days","daysToKeep","JSON","stringify","createSchedule","scheduleId","data","Promise","all","map","credentialId","associateCredential","push","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { func, shape } from 'prop-types';\n\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Card } from '@patternfly/react-core';\nimport yaml from 'js-yaml';\nimport { parseVariableField } from 'util/yaml';\n\nimport { SchedulesAPI } from 'api';\nimport mergeExtraVars from 'util/prompt/mergeExtraVars';\nimport getSurveyValues from 'util/prompt/getSurveyValues';\nimport { getAddedAndRemoved } from 'util/lists';\nimport ScheduleForm from '../shared/ScheduleForm';\nimport buildRuleSet from '../shared/buildRuleSet';\nimport { CardBody } from '../../Card';\n\nfunction ScheduleAdd({\n  resource,\n  apiModel,\n  launchConfig,\n  surveyConfig,\n  hasDaysToKeepField,\n  resourceDefaultCredentials,\n}) {\n  const [formSubmitError, setFormSubmitError] = useState(null);\n  const history = useHistory();\n  const location = useLocation();\n  const { pathname } = location;\n  const pathRoot = pathname.substr(0, pathname.indexOf('schedules'));\n\n  const handleSubmit = async (\n    values,\n    launchConfiguration,\n    surveyConfiguration\n  ) => {\n    const {\n      inventory,\n      frequency,\n      frequencyOptions,\n      exceptionFrequency,\n      exceptionOptions,\n      timezone,\n      credentials,\n      ...submitValues\n    } = values;\n    const { added } = getAddedAndRemoved(\n      resource?.summary_fields.credentials,\n      credentials\n    );\n    let extraVars;\n    const surveyValues = getSurveyValues(values);\n\n    if (\n      !Object.values(surveyValues).length &&\n      surveyConfiguration?.spec?.length\n    ) {\n      surveyConfiguration.spec.forEach((q) => {\n        surveyValues[q.variable] = q.default;\n      });\n    }\n    const initialExtraVars =\n      launchConfiguration?.ask_variables_on_launch &&\n      (values.extra_vars || '---');\n    if (surveyConfiguration?.spec) {\n      extraVars = yaml.dump(mergeExtraVars(initialExtraVars, surveyValues));\n    } else {\n      extraVars = yaml.dump(mergeExtraVars(initialExtraVars, {}));\n    }\n    submitValues.extra_data = extraVars && parseVariableField(extraVars);\n    delete values.extra_vars;\n    if (inventory) {\n      submitValues.inventory = inventory.id;\n    }\n\n    try {\n      const ruleSet = buildRuleSet(values);\n      const requestData = {\n        ...submitValues,\n        rrule: ruleSet.toString().replace(/\\n/g, ' '),\n      };\n      delete requestData.startDate;\n      delete requestData.startTime;\n\n      if (Object.keys(values).includes('daysToKeep')) {\n        if (requestData.extra_data) {\n          requestData.extra_data.days = values.daysToKeep;\n        } else {\n          requestData.extra_data = JSON.stringify({\n            days: values.daysToKeep,\n          });\n        }\n      }\n\n      const {\n        data: { id: scheduleId },\n      } = await apiModel.createSchedule(resource.id, requestData);\n      if (credentials?.length > 0) {\n        await Promise.all(\n          added.map(({ id: credentialId }) =>\n            SchedulesAPI.associateCredential(scheduleId, credentialId)\n          )\n        );\n      }\n      history.push(`${pathRoot}schedules/${scheduleId}`);\n    } catch (err) {\n      setFormSubmitError(err);\n    }\n  };\n\n  return (\n    <Card>\n      <CardBody>\n        <ScheduleForm\n          hasDaysToKeepField={hasDaysToKeepField}\n          handleCancel={() => history.push(`${pathRoot}schedules`)}\n          handleSubmit={handleSubmit}\n          submitError={formSubmitError}\n          launchConfig={launchConfig}\n          surveyConfig={surveyConfig}\n          resource={resource}\n          resourceDefaultCredentials={resourceDefaultCredentials}\n        />\n      </CardBody>\n    </Card>\n  );\n}\n\nScheduleAdd.propTypes = {\n  apiModel: shape({ createSchedule: func.isRequired }).isRequired,\n};\n\nScheduleAdd.defaultProps = {};\n\nexport default ScheduleAdd;\n"]},"metadata":{},"sourceType":"module"}