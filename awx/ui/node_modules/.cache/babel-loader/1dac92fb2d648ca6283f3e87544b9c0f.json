{"ast":null,"code":"import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{i18n}from\"@lingui/core\";import React,{useState}from'react';import{useField}from'formik';import{FileUpload,FormGroup}from'@patternfly/react-core';import{jsx as _jsx}from\"react/jsx-runtime\";function GceFileUploadField(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),fileError=_useState2[0],setFileError=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),filename=_useState4[0],setFilename=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),file=_useState6[0],setFile=_useState6[1];var _useField=useField({name:'inputs.username'}),_useField2=_slicedToArray(_useField,3),inputsUsernameHelpers=_useField2[2];var _useField3=useField({name:'inputs.project'}),_useField4=_slicedToArray(_useField3,3),inputsProjectHelpers=_useField4[2];var _useField5=useField({name:'inputs.ssh_key_data'}),_useField6=_slicedToArray(_useField5,3),inputsSSHKeyDataHelpers=_useField6[2];return/*#__PURE__*/_jsx(FormGroup,{fieldId:\"credential-gce-file\",validated:!fileError?'default':'error',label:/*i18n*/i18n._(\"Service account JSON file\"),helperText:/*i18n*/i18n._(\"Select a JSON formatted service account key to autopopulate the following fields.\"),helperTextInvalid:fileError,children:/*#__PURE__*/_jsx(FileUpload,{id:\"credential-gce-file\",value:file,filename:filename,filenamePlaceholder:/*i18n*/i18n._(\"Choose a .json file\"),onChange:/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(value){var fileText,fileJSON;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!value){_context.next=16;break;}_context.prev=1;setFile(value);setFilename(value.name);_context.next=6;return value.text();case 6:fileText=_context.sent;fileJSON=JSON.parse(fileText);if(!fileJSON.client_email&&!fileJSON.project_id&&!fileJSON.private_key){setFileError(/*i18n*/i18n._(\"Expected at least one of client_email, project_id or private_key to be present in the file.\"));}else{inputsUsernameHelpers.setValue(fileJSON.client_email||'');inputsProjectHelpers.setValue(fileJSON.project_id||'');inputsSSHKeyDataHelpers.setValue(fileJSON.private_key||'');setFileError(null);}_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](1);setFileError(/*i18n*/i18n._(\"There was an error parsing the file. Please check the file formatting and try again.\"));case 14:_context.next=22;break;case 16:setFile('');setFilename('');inputsUsernameHelpers.setValue('');inputsProjectHelpers.setValue('');inputsSSHKeyDataHelpers.setValue('');setFileError(null);case 22:case\"end\":return _context.stop();}}},_callee,null,[[1,11]]);}));return function(_x){return _ref.apply(this,arguments);};}(),dropzoneProps:{accept:'.json',onDropRejected:function onDropRejected(){setFileError(/*i18n*/i18n._(\"File upload rejected. Please select a single .json file.\"));}}})});}export default GceFileUploadField;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Credential/shared/CredentialFormFields/GceFileUploadField.js"],"names":["React","useState","useField","FileUpload","FormGroup","GceFileUploadField","fileError","setFileError","filename","setFilename","file","setFile","name","inputsUsernameHelpers","inputsProjectHelpers","inputsSSHKeyDataHelpers","value","text","fileText","fileJSON","JSON","parse","client_email","project_id","private_key","setValue","accept","onDropRejected"],"mappings":"uVAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAGA,OAASC,QAAT,KAAyB,QAAzB,CACA,OAASC,UAAT,CAAqBC,SAArB,KAAsC,wBAAtC,C,2CAEA,QAASC,CAAAA,kBAAT,EAA8B,CAC5B,cAAkCJ,QAAQ,CAAC,IAAD,CAA1C,wCAAOK,SAAP,eAAkBC,YAAlB,eACA,eAAgCN,QAAQ,CAAC,EAAD,CAAxC,yCAAOO,QAAP,eAAiBC,WAAjB,eACA,eAAwBR,QAAQ,CAAC,EAAD,CAAhC,yCAAOS,IAAP,eAAaC,OAAb,eACA,cAAoCT,QAAQ,CAAC,CAC3CU,IAAI,CAAE,iBADqC,CAAD,CAA5C,wCAAWC,qBAAX,eAGA,eAAmCX,QAAQ,CAAC,CAC1CU,IAAI,CAAE,gBADoC,CAAD,CAA3C,yCAAWE,oBAAX,eAGA,eAAsCZ,QAAQ,CAAC,CAC7CU,IAAI,CAAE,qBADuC,CAAD,CAA9C,yCAAWG,uBAAX,eAGA,mBACE,KAAC,SAAD,EACE,OAAO,CAAC,qBADV,CAEE,SAAS,CAAE,CAACT,SAAD,CAAa,SAAb,CAAyB,OAFtC,CAGE,KAAK,SAAE,mCAHT,CAIE,UAAU,SAAE,2FAJd,CAKE,iBAAiB,CAAEA,SALrB,uBAOE,KAAC,UAAD,EACE,EAAE,CAAC,qBADL,CAEE,KAAK,CAAEI,IAFT,CAGE,QAAQ,CAAEF,QAHZ,CAIE,mBAAmB,SAAE,6BAJvB,CAKE,QAAQ,0FAAE,iBAAOQ,KAAP,4IACJA,KADI,0CAGJL,OAAO,CAACK,KAAD,CAAP,CACAP,WAAW,CAACO,KAAK,CAACJ,IAAP,CAAX,CAJI,sBAKmBI,CAAAA,KAAK,CAACC,IAAN,EALnB,QAKEC,QALF,eAMEC,QANF,CAMaC,IAAI,CAACC,KAAL,CAAWH,QAAX,CANb,CAOJ,GACE,CAACC,QAAQ,CAACG,YAAV,EACA,CAACH,QAAQ,CAACI,UADV,EAEA,CAACJ,QAAQ,CAACK,WAHZ,CAIE,CACAjB,YAAY,SACV,qGADU,CAAZ,CAGD,CARD,IAQO,CACLM,qBAAqB,CAACY,QAAtB,CAA+BN,QAAQ,CAACG,YAAT,EAAyB,EAAxD,EACAR,oBAAoB,CAACW,QAArB,CAA8BN,QAAQ,CAACI,UAAT,EAAuB,EAArD,EACAR,uBAAuB,CAACU,QAAxB,CAAiCN,QAAQ,CAACK,WAAT,EAAwB,EAAzD,EACAjB,YAAY,CAAC,IAAD,CAAZ,CACD,CApBG,iFAsBJA,YAAY,SACV,8FADU,CAAZ,CAtBI,uCA2BNI,OAAO,CAAC,EAAD,CAAP,CACAF,WAAW,CAAC,EAAD,CAAX,CACAI,qBAAqB,CAACY,QAAtB,CAA+B,EAA/B,EACAX,oBAAoB,CAACW,QAArB,CAA8B,EAA9B,EACAV,uBAAuB,CAACU,QAAxB,CAAiC,EAAjC,EACAlB,YAAY,CAAC,IAAD,CAAZ,CAhCM,qEAAF,8DALV,CAwCE,aAAa,CAAE,CACbmB,MAAM,CAAE,OADK,CAEbC,cAAc,CAAE,yBAAM,CACpBpB,YAAY,SACV,kEADU,CAAZ,CAGD,CANY,CAxCjB,EAPF,EADF,CA2DD,CAED,cAAeF,CAAAA,kBAAf","sourcesContent":["import React, { useState } from 'react';\n\nimport { t } from '@lingui/macro';\nimport { useField } from 'formik';\nimport { FileUpload, FormGroup } from '@patternfly/react-core';\n\nfunction GceFileUploadField() {\n  const [fileError, setFileError] = useState(null);\n  const [filename, setFilename] = useState('');\n  const [file, setFile] = useState('');\n  const [, , inputsUsernameHelpers] = useField({\n    name: 'inputs.username',\n  });\n  const [, , inputsProjectHelpers] = useField({\n    name: 'inputs.project',\n  });\n  const [, , inputsSSHKeyDataHelpers] = useField({\n    name: 'inputs.ssh_key_data',\n  });\n  return (\n    <FormGroup\n      fieldId=\"credential-gce-file\"\n      validated={!fileError ? 'default' : 'error'}\n      label={t`Service account JSON file`}\n      helperText={t`Select a JSON formatted service account key to autopopulate the following fields.`}\n      helperTextInvalid={fileError}\n    >\n      <FileUpload\n        id=\"credential-gce-file\"\n        value={file}\n        filename={filename}\n        filenamePlaceholder={t`Choose a .json file`}\n        onChange={async (value) => {\n          if (value) {\n            try {\n              setFile(value);\n              setFilename(value.name);\n              const fileText = await value.text();\n              const fileJSON = JSON.parse(fileText);\n              if (\n                !fileJSON.client_email &&\n                !fileJSON.project_id &&\n                !fileJSON.private_key\n              ) {\n                setFileError(\n                  t`Expected at least one of client_email, project_id or private_key to be present in the file.`\n                );\n              } else {\n                inputsUsernameHelpers.setValue(fileJSON.client_email || '');\n                inputsProjectHelpers.setValue(fileJSON.project_id || '');\n                inputsSSHKeyDataHelpers.setValue(fileJSON.private_key || '');\n                setFileError(null);\n              }\n            } catch {\n              setFileError(\n                t`There was an error parsing the file. Please check the file formatting and try again.`\n              );\n            }\n          } else {\n            setFile('');\n            setFilename('');\n            inputsUsernameHelpers.setValue('');\n            inputsProjectHelpers.setValue('');\n            inputsSSHKeyDataHelpers.setValue('');\n            setFileError(null);\n          }\n        }}\n        dropzoneProps={{\n          accept: '.json',\n          onDropRejected: () => {\n            setFileError(\n              t`File upload rejected. Please select a single .json file.`\n            );\n          },\n        }}\n      />\n    </FormGroup>\n  );\n}\n\nexport default GceFileUploadField;\n"]},"metadata":{},"sourceType":"module"}