{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport { Bullseye, EmptyState } from '@patternfly/react-core';\nimport { Td } from '../TableComposable/Td';\nexport var BodyCell = function BodyCell(_a) {\n  var _a$dataLabel = _a['data-label'],\n      dataLabel = _a$dataLabel === void 0 ? '' : _a$dataLabel,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      colSpan = _a.colSpan,\n      _a$component = _a.component,\n      component = _a$component === void 0 ? 'td' : _a$component,\n      isVisible = _a.isVisible,\n      parentId = _a.parentId,\n      _a$textCenter = _a.textCenter,\n      textCenter = _a$textCenter === void 0 ? false : _a$textCenter,\n      _a$tooltip = _a.tooltip,\n      tooltipProp = _a$tooltip === void 0 ? '' : _a$tooltip,\n      _a$onMouseEnter = _a.onMouseEnter,\n      onMouseEnterProp = _a$onMouseEnter === void 0 ? function () {} : _a$onMouseEnter,\n      children = _a.children,\n      errorText = _a.errorText,\n      isValid = _a.isValid,\n      isOpen = _a.isOpen,\n      ariaControls = _a.ariaControls,\n      editableValue = _a.editableValue,\n      editableSelectProps = _a.editableSelectProps,\n      options = _a.options,\n      isSelectOpen = _a.isSelectOpen,\n      value = _a.value,\n      name = _a.name,\n      props = __rest(_a, ['data-label', \"className\", \"colSpan\", \"component\", \"isVisible\", \"parentId\", \"textCenter\", \"tooltip\", \"onMouseEnter\", \"children\", \"errorText\", \"isValid\", \"isOpen\", \"ariaControls\", \"editableValue\", \"editableSelectProps\", \"options\", \"isSelectOpen\", \"value\", \"name\"]);\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tooltip = _React$useState2[0],\n      setTooltip = _React$useState2[1];\n\n  var onMouseEnter = function onMouseEnter(event) {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      if (tooltipProp) {\n        setTooltip(tooltipProp);\n      } else if (typeof children === 'string') {\n        setTooltip(children);\n      }\n    } else {\n      setTooltip('');\n    }\n\n    onMouseEnterProp(event);\n  };\n\n  var isEmptyStateCell = false;\n\n  if (children) {\n    isEmptyStateCell = children.type === Bullseye && children.props.children && children.props.children.type === EmptyState || children.type === EmptyState;\n  }\n\n  var cell = React.createElement(Td, Object.assign({\n    className: className,\n    component: component,\n    dataLabel: dataLabel && parentId == null && !isEmptyStateCell ? dataLabel : null,\n    onMouseEnter: onMouseEnter,\n    textCenter: textCenter,\n    colSpan: colSpan\n  }, props), children);\n  var bodyCell = tooltip !== '' ? React.createElement(Tooltip, {\n    content: tooltip,\n    isVisible: true\n  }, cell) : cell;\n  return parentId !== undefined && colSpan === undefined || !isVisible ? null : bodyCell;\n};\nBodyCell.displayName = 'BodyCell';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/BodyCell.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport { Bullseye, EmptyState, SelectProps } from '@patternfly/react-core';\nimport { Td } from '../TableComposable/Td';\n\nexport interface BodyCellProps {\n  'data-label'?: string;\n  className?: string;\n  colSpan?: number;\n  component?: React.ReactNode;\n  errorText?: string;\n  isVisible?: boolean;\n  parentId?: number;\n  textCenter?: boolean;\n  isOpen?: boolean;\n  ariaControls?: string;\n  editableValue?: any;\n  editableSelectProps?: SelectProps;\n  options?: React.ReactElement[];\n  isSelectOpen?: boolean;\n  value?: any;\n  isValid?: boolean;\n  name?: string;\n  tooltip?: string;\n  onMouseEnter?: (event: any) => void;\n  children: React.ReactNode;\n}\nexport const BodyCell: React.FunctionComponent<BodyCellProps> = ({\n  'data-label': dataLabel = '',\n  className = '',\n  colSpan,\n  component = 'td',\n  isVisible,\n  parentId,\n  textCenter = false,\n  tooltip: tooltipProp = '',\n  onMouseEnter: onMouseEnterProp = () => {},\n  children,\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  errorText,\n  isValid,\n  isOpen,\n  ariaControls,\n  editableValue,\n  editableSelectProps,\n  options,\n  isSelectOpen,\n  value,\n  name,\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n  ...props\n}: BodyCellProps) => {\n  const [tooltip, setTooltip] = React.useState('');\n  const onMouseEnter = (event: any) => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      if (tooltipProp) {\n        setTooltip(tooltipProp);\n      } else if (typeof children === 'string') {\n        setTooltip(children);\n      }\n    } else {\n      setTooltip('');\n    }\n    onMouseEnterProp(event);\n  };\n\n  let isEmptyStateCell = false;\n  if (children) {\n    isEmptyStateCell =\n      ((children as React.ReactElement).type === Bullseye &&\n        (children as React.ReactElement).props.children &&\n        (children as React.ReactElement).props.children.type === EmptyState) ||\n      (children as React.ReactElement).type === EmptyState;\n  }\n\n  const cell = (\n    <Td\n      className={className}\n      component={component}\n      dataLabel={dataLabel && parentId == null && !isEmptyStateCell ? dataLabel : null}\n      onMouseEnter={onMouseEnter}\n      textCenter={textCenter}\n      colSpan={colSpan}\n      {...props}\n    >\n      {children}\n    </Td>\n  );\n\n  const bodyCell =\n    tooltip !== '' ? (\n      <Tooltip content={tooltip} isVisible>\n        {cell}\n      </Tooltip>\n    ) : (\n      cell\n    );\n\n  return (parentId !== undefined && colSpan === undefined) || !isVisible ? null : bodyCell;\n};\nBodyCell.displayName = 'BodyCell';\n"]},"metadata":{},"sourceType":"module"}