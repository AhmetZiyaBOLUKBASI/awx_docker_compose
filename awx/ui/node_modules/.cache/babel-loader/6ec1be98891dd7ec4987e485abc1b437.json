{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"credentialType\",\"onSubmit\",\"onCancel\",\"submitError\"];import{i18n}from\"@lingui/core\";import React from'react';import{Formik}from'formik';import{Form}from'@patternfly/react-core';import{VariablesField}from'components/CodeEditor';import FormField,{FormSubmitError}from'components/FormField';import FormActionGroup from'components/FormActionGroup';import{required}from'util/validators';import{FormColumnLayout,FormFullWidthLayout}from'components/FormLayout';import{jsonToYaml}from'util/yaml';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CredentialTypeFormFields(){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(FormField,{id:\"credential-type-name\",label:/*i18n*/i18n._(\"Name\"),name:\"name\",type:\"text\",validate:required(null),isRequired:true}),/*#__PURE__*/_jsx(FormField,{id:\"credential-type-description\",label:/*i18n*/i18n._(\"Description\"),name:\"description\",type:\"text\"}),/*#__PURE__*/_jsx(FormFullWidthLayout,{children:/*#__PURE__*/_jsx(VariablesField,{tooltip:/*i18n*/i18n._(\"Enter inputs using either JSON or YAML syntax. Refer to the Ansible Controller documentation for example syntax.\"),id:\"credential-type-inputs-configuration\",name:\"inputs\",label:/*i18n*/i18n._(\"Input configuration\")})}),/*#__PURE__*/_jsx(FormFullWidthLayout,{children:/*#__PURE__*/_jsx(VariablesField,{tooltip:/*i18n*/i18n._(\"Enter injectors using either JSON or YAML syntax. Refer to the Ansible Controller documentation for example syntax.\"),id:\"credential-type-injectors-configuration\",name:\"injectors\",label:/*i18n*/i18n._(\"Injector configuration\")})})]});}function CredentialTypeForm(_ref){var _ref$credentialType=_ref.credentialType,credentialType=_ref$credentialType===void 0?{}:_ref$credentialType,_onSubmit=_ref.onSubmit,onCancel=_ref.onCancel,submitError=_ref.submitError,rest=_objectWithoutProperties(_ref,_excluded);var initialValues={name:credentialType.name||'',description:credentialType.description||'',inputs:credentialType.inputs?jsonToYaml(JSON.stringify(credentialType.inputs)):'---',injectors:credentialType.injectors?jsonToYaml(JSON.stringify(credentialType.injectors)):'---'};return/*#__PURE__*/_jsx(Formik,{initialValues:initialValues,onSubmit:function onSubmit(values){return _onSubmit(values);},children:function children(formik){return/*#__PURE__*/_jsx(Form,{autoComplete:\"off\",onSubmit:formik.handleSubmit,children:/*#__PURE__*/_jsxs(FormColumnLayout,{children:[/*#__PURE__*/_jsx(CredentialTypeFormFields,_objectSpread({},rest)),submitError&&/*#__PURE__*/_jsx(FormSubmitError,{error:submitError}),/*#__PURE__*/_jsx(FormActionGroup,{onCancel:onCancel,onSubmit:formik.handleSubmit})]})});}});}CredentialTypeForm.defaultProps={credentialType:{},submitError:null};export default CredentialTypeForm;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/CredentialType/shared/CredentialTypeForm.js"],"names":["React","Formik","Form","VariablesField","FormField","FormSubmitError","FormActionGroup","required","FormColumnLayout","FormFullWidthLayout","jsonToYaml","CredentialTypeFormFields","CredentialTypeForm","credentialType","onSubmit","onCancel","submitError","rest","initialValues","name","description","inputs","JSON","stringify","injectors","values","formik","handleSubmit","defaultProps"],"mappings":"qUAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,MAAT,KAAuB,QAAvB,CAIA,OAASC,IAAT,KAAqB,wBAArB,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,MAAOC,CAAAA,SAAP,EAAoBC,eAApB,KAA2C,sBAA3C,CACA,MAAOC,CAAAA,eAAP,KAA4B,4BAA5B,CACA,OAASC,QAAT,KAAyB,iBAAzB,CACA,OAASC,gBAAT,CAA2BC,mBAA3B,KAAsD,uBAAtD,CAEA,OAASC,UAAT,KAA2B,WAA3B,C,6IAEA,QAASC,CAAAA,wBAAT,EAAoC,CAClC,mBACE,wCACE,KAAC,SAAD,EACE,EAAE,CAAC,sBADL,CAEE,KAAK,SAAE,cAFT,CAGE,IAAI,CAAC,MAHP,CAIE,IAAI,CAAC,MAJP,CAKE,QAAQ,CAAEJ,QAAQ,CAAC,IAAD,CALpB,CAME,UAAU,KANZ,EADF,cASE,KAAC,SAAD,EACE,EAAE,CAAC,6BADL,CAEE,KAAK,SAAE,qBAFT,CAGE,IAAI,CAAC,aAHP,CAIE,IAAI,CAAC,MAJP,EATF,cAeE,KAAC,mBAAD,wBACE,KAAC,cAAD,EACE,OAAO,SAAE,0HADX,CAEE,EAAE,CAAC,sCAFL,CAGE,IAAI,CAAC,QAHP,CAIE,KAAK,SAAE,6BAJT,EADF,EAfF,cAuBE,KAAC,mBAAD,wBACE,KAAC,cAAD,EACE,OAAO,SAAE,6HADX,CAEE,EAAE,CAAC,yCAFL,CAGE,IAAI,CAAC,WAHP,CAIE,KAAK,SAAE,gCAJT,EADF,EAvBF,GADF,CAkCD,CAED,QAASK,CAAAA,kBAAT,MAMG,8BALDC,cAKC,CALDA,cAKC,8BALgB,EAKhB,qBAJDC,SAIC,MAJDA,QAIC,CAHDC,QAGC,MAHDA,QAGC,CAFDC,WAEC,MAFDA,WAEC,CADEC,IACF,0CACD,GAAMC,CAAAA,aAAa,CAAG,CACpBC,IAAI,CAAEN,cAAc,CAACM,IAAf,EAAuB,EADT,CAEpBC,WAAW,CAAEP,cAAc,CAACO,WAAf,EAA8B,EAFvB,CAGpBC,MAAM,CAAER,cAAc,CAACQ,MAAf,CACJX,UAAU,CAACY,IAAI,CAACC,SAAL,CAAeV,cAAc,CAACQ,MAA9B,CAAD,CADN,CAEJ,KALgB,CAMpBG,SAAS,CAAEX,cAAc,CAACW,SAAf,CACPd,UAAU,CAACY,IAAI,CAACC,SAAL,CAAeV,cAAc,CAACW,SAA9B,CAAD,CADH,CAEP,KARgB,CAAtB,CAUA,mBACE,KAAC,MAAD,EACE,aAAa,CAAEN,aADjB,CAEE,QAAQ,CAAE,kBAACO,MAAD,QAAYX,CAAAA,SAAQ,CAACW,MAAD,CAApB,EAFZ,UAIG,kBAACC,MAAD,qBACC,KAAC,IAAD,EAAM,YAAY,CAAC,KAAnB,CAAyB,QAAQ,CAAEA,MAAM,CAACC,YAA1C,uBACE,MAAC,gBAAD,yBACE,KAAC,wBAAD,kBAA8BV,IAA9B,EADF,CAEGD,WAAW,eAAI,KAAC,eAAD,EAAiB,KAAK,CAAEA,WAAxB,EAFlB,cAGE,KAAC,eAAD,EACE,QAAQ,CAAED,QADZ,CAEE,QAAQ,CAAEW,MAAM,CAACC,YAFnB,EAHF,GADF,EADD,EAJH,EADF,CAmBD,CASDf,kBAAkB,CAACgB,YAAnB,CAAkC,CAChCf,cAAc,CAAE,EADgB,CAEhCG,WAAW,CAAE,IAFmB,CAAlC,CAKA,cAAeJ,CAAAA,kBAAf","sourcesContent":["import React from 'react';\nimport { func, shape } from 'prop-types';\nimport { Formik } from 'formik';\n\nimport { t } from '@lingui/macro';\n\nimport { Form } from '@patternfly/react-core';\nimport { VariablesField } from 'components/CodeEditor';\nimport FormField, { FormSubmitError } from 'components/FormField';\nimport FormActionGroup from 'components/FormActionGroup';\nimport { required } from 'util/validators';\nimport { FormColumnLayout, FormFullWidthLayout } from 'components/FormLayout';\n\nimport { jsonToYaml } from 'util/yaml';\n\nfunction CredentialTypeFormFields() {\n  return (\n    <>\n      <FormField\n        id=\"credential-type-name\"\n        label={t`Name`}\n        name=\"name\"\n        type=\"text\"\n        validate={required(null)}\n        isRequired\n      />\n      <FormField\n        id=\"credential-type-description\"\n        label={t`Description`}\n        name=\"description\"\n        type=\"text\"\n      />\n      <FormFullWidthLayout>\n        <VariablesField\n          tooltip={t`Enter inputs using either JSON or YAML syntax. Refer to the Ansible Controller documentation for example syntax.`}\n          id=\"credential-type-inputs-configuration\"\n          name=\"inputs\"\n          label={t`Input configuration`}\n        />\n      </FormFullWidthLayout>\n      <FormFullWidthLayout>\n        <VariablesField\n          tooltip={t`Enter injectors using either JSON or YAML syntax. Refer to the Ansible Controller documentation for example syntax.`}\n          id=\"credential-type-injectors-configuration\"\n          name=\"injectors\"\n          label={t`Injector configuration`}\n        />\n      </FormFullWidthLayout>\n    </>\n  );\n}\n\nfunction CredentialTypeForm({\n  credentialType = {},\n  onSubmit,\n  onCancel,\n  submitError,\n  ...rest\n}) {\n  const initialValues = {\n    name: credentialType.name || '',\n    description: credentialType.description || '',\n    inputs: credentialType.inputs\n      ? jsonToYaml(JSON.stringify(credentialType.inputs))\n      : '---',\n    injectors: credentialType.injectors\n      ? jsonToYaml(JSON.stringify(credentialType.injectors))\n      : '---',\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={(values) => onSubmit(values)}\n    >\n      {(formik) => (\n        <Form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\n          <FormColumnLayout>\n            <CredentialTypeFormFields {...rest} />\n            {submitError && <FormSubmitError error={submitError} />}\n            <FormActionGroup\n              onCancel={onCancel}\n              onSubmit={formik.handleSubmit}\n            />\n          </FormColumnLayout>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nCredentialTypeForm.propTypes = {\n  credentialType: shape({}),\n  onCancel: func.isRequired,\n  onSubmit: func.isRequired,\n  submitError: shape({}),\n};\n\nCredentialTypeForm.defaultProps = {\n  credentialType: {},\n  submitError: null,\n};\n\nexport default CredentialTypeForm;\n"]},"metadata":{},"sourceType":"module"}