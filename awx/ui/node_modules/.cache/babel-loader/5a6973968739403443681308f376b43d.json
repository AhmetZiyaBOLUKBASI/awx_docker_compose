{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { ToggleTemplate } from './ToggleTemplate';\nimport styles from '@patternfly/react-styles/css/components/Pagination/pagination';\nimport { css } from '@patternfly/react-styles';\nimport { fillTemplate } from '../../helpers';\nimport { Navigation } from './Navigation';\nimport { PaginationOptionsMenu } from './PaginationOptionsMenu';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nimport widthChars from '@patternfly/react-tokens/dist/esm/c_pagination__nav_page_select_c_form_control_width_chars';\nexport var PaginationVariant;\n\n(function (PaginationVariant) {\n  PaginationVariant[\"top\"] = \"top\";\n  PaginationVariant[\"bottom\"] = \"bottom\";\n})(PaginationVariant || (PaginationVariant = {}));\n\nvar defaultPerPageOptions = [{\n  title: '10',\n  value: 10\n}, {\n  title: '20',\n  value: 20\n}, {\n  title: '50',\n  value: 50\n}, {\n  title: '100',\n  value: 100\n}];\n\nvar handleInputWidth = function handleInputWidth(lastPage, node) {\n  if (!node) {\n    return;\n  }\n\n  var len = String(lastPage).length;\n\n  if (len >= 3) {\n    node.style.setProperty(widthChars.name, \"\".concat(len));\n  } else {\n    node.style.setProperty(widthChars.name, '2');\n  }\n};\n\nvar paginationId = 0;\nexport var Pagination = /*#__PURE__*/function (_React$Component) {\n  _inherits(Pagination, _React$Component);\n\n  var _super = _createSuper(Pagination);\n\n  function Pagination() {\n    var _this;\n\n    _classCallCheck(this, Pagination);\n\n    _this = _super.apply(this, arguments);\n    _this.paginationRef = React.createRef();\n    _this.state = {\n      ouiaStateId: getDefaultOUIAId(Pagination.displayName, _this.props.variant)\n    };\n    return _this;\n  }\n\n  _createClass(Pagination, [{\n    key: \"getLastPage\",\n    value: function getLastPage() {\n      var _this$props = this.props,\n          itemCount = _this$props.itemCount,\n          perPage = _this$props.perPage,\n          page = _this$props.page; // when itemCount is not known let's set lastPage as page+1 as we don't know the total count\n\n      return itemCount || itemCount === 0 ? Math.ceil(itemCount / perPage) || 0 : page + 1;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var node = this.paginationRef.current;\n      handleInputWidth(this.getLastPage(), node);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var node = this.paginationRef.current;\n\n      if (prevProps.perPage !== this.props.perPage || prevProps.itemCount !== this.props.itemCount) {\n        handleInputWidth(this.getLastPage(), node);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          className = _a.className,\n          variant = _a.variant,\n          isDisabled = _a.isDisabled,\n          isCompact = _a.isCompact,\n          isStatic = _a.isStatic,\n          isSticky = _a.isSticky,\n          perPage = _a.perPage,\n          titles = _a.titles,\n          firstPage = _a.firstPage,\n          propPage = _a.page,\n          offset = _a.offset,\n          defaultToFullPage = _a.defaultToFullPage,\n          itemCount = _a.itemCount,\n          itemsStart = _a.itemsStart,\n          itemsEnd = _a.itemsEnd,\n          perPageOptions = _a.perPageOptions,\n          dropDirectionProp = _a.dropDirection,\n          widgetId = _a.widgetId,\n          toggleTemplate = _a.toggleTemplate,\n          onSetPage = _a.onSetPage,\n          onPerPageSelect = _a.onPerPageSelect,\n          onFirstClick = _a.onFirstClick,\n          onPreviousClick = _a.onPreviousClick,\n          onNextClick = _a.onNextClick,\n          onPageInput = _a.onPageInput,\n          onLastClick = _a.onLastClick,\n          ouiaId = _a.ouiaId,\n          ouiaSafe = _a.ouiaSafe,\n          perPageComponent = _a.perPageComponent,\n          props = __rest(_a, [\"children\", \"className\", \"variant\", \"isDisabled\", \"isCompact\", \"isStatic\", \"isSticky\", \"perPage\", \"titles\", \"firstPage\", \"page\", \"offset\", \"defaultToFullPage\", \"itemCount\", \"itemsStart\", \"itemsEnd\", \"perPageOptions\", \"dropDirection\", \"widgetId\", \"toggleTemplate\", \"onSetPage\", \"onPerPageSelect\", \"onFirstClick\", \"onPreviousClick\", \"onNextClick\", \"onPageInput\", \"onLastClick\", \"ouiaId\", \"ouiaSafe\", \"perPageComponent\"]);\n\n      var dropDirection = dropDirectionProp || (variant === 'bottom' && !isStatic ? 'up' : 'down');\n      var page = propPage;\n\n      if (!page && offset) {\n        page = Math.ceil(offset / perPage);\n      }\n\n      if (page === 0 && !itemCount) {\n        page = 1;\n      }\n\n      var lastPage = this.getLastPage();\n      var firstIndex = (page - 1) * perPage + 1;\n      var lastIndex = page * perPage;\n\n      if (itemCount || itemCount === 0) {\n        firstIndex = itemCount <= 0 ? 0 : (page - 1) * perPage + 1;\n\n        if (page < firstPage && itemCount > 0) {\n          page = firstPage;\n        } else if (page > lastPage) {\n          page = lastPage;\n        }\n\n        if (itemCount >= 0) {\n          lastIndex = page === lastPage || itemCount === 0 ? itemCount : page * perPage;\n        }\n      }\n\n      var toggleTemplateProps = {\n        firstIndex: firstIndex,\n        lastIndex: lastIndex,\n        itemCount: itemCount,\n        itemsTitle: titles.items,\n        ofWord: titles.ofWord\n      };\n      return React.createElement(\"div\", Object.assign({\n        ref: this.paginationRef,\n        className: css(styles.pagination, variant === PaginationVariant.bottom && styles.modifiers.bottom, isCompact && styles.modifiers.compact, isStatic && styles.modifiers.static, isSticky && styles.modifiers.sticky, className),\n        id: \"\".concat(widgetId, \"-\").concat(paginationId++)\n      }, getOUIAProps(Pagination.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), props), variant === PaginationVariant.top && React.createElement(\"div\", {\n        className: css(styles.paginationTotalItems)\n      }, toggleTemplate && typeof toggleTemplate === 'string' && fillTemplate(toggleTemplate, toggleTemplateProps), toggleTemplate && typeof toggleTemplate !== 'string' && toggleTemplate(toggleTemplateProps), !toggleTemplate && React.createElement(ToggleTemplate, {\n        firstIndex: firstIndex,\n        lastIndex: lastIndex,\n        itemCount: itemCount,\n        itemsTitle: titles.items,\n        ofWord: titles.ofWord\n      })), React.createElement(PaginationOptionsMenu, {\n        itemsPerPageTitle: titles.itemsPerPage,\n        perPageSuffix: titles.perPageSuffix,\n        itemsTitle: isCompact ? '' : titles.items,\n        optionsToggle: titles.optionsToggle,\n        perPageOptions: perPageOptions,\n        firstIndex: itemsStart !== null ? itemsStart : firstIndex,\n        lastIndex: itemsEnd !== null ? itemsEnd : lastIndex,\n        ofWord: titles.ofWord,\n        defaultToFullPage: defaultToFullPage,\n        itemCount: itemCount,\n        page: page,\n        perPage: perPage,\n        lastPage: lastPage,\n        onPerPageSelect: onPerPageSelect,\n        dropDirection: dropDirection,\n        widgetId: widgetId,\n        toggleTemplate: toggleTemplate,\n        isDisabled: isDisabled,\n        perPageComponent: perPageComponent\n      }), React.createElement(Navigation, {\n        pagesTitle: titles.page,\n        pagesTitlePlural: titles.pages,\n        toLastPage: titles.toLastPage,\n        toPreviousPage: titles.toPreviousPage,\n        toNextPage: titles.toNextPage,\n        toFirstPage: titles.toFirstPage,\n        currPage: titles.currPage,\n        paginationTitle: titles.paginationTitle,\n        ofWord: titles.ofWord,\n        page: itemCount && itemCount <= 0 ? 0 : page,\n        perPage: perPage,\n        itemCount: itemCount,\n        firstPage: itemsStart !== null ? itemsStart : 1,\n        lastPage: lastPage,\n        onSetPage: onSetPage,\n        onFirstClick: onFirstClick,\n        onPreviousClick: onPreviousClick,\n        onNextClick: onNextClick,\n        onLastClick: onLastClick,\n        onPageInput: onPageInput,\n        isDisabled: isDisabled,\n        isCompact: isCompact\n      }), children);\n    }\n  }]);\n\n  return Pagination;\n}(React.Component);\nPagination.displayName = 'Pagination';\nPagination.defaultProps = {\n  children: null,\n  className: '',\n  variant: PaginationVariant.top,\n  isDisabled: false,\n  isCompact: false,\n  isSticky: false,\n  perPage: defaultPerPageOptions[0].value,\n  titles: {\n    items: '',\n    page: '',\n    pages: '',\n    itemsPerPage: 'Items per page',\n    perPageSuffix: 'per page',\n    toFirstPage: 'Go to first page',\n    toPreviousPage: 'Go to previous page',\n    toLastPage: 'Go to last page',\n    toNextPage: 'Go to next page',\n    optionsToggle: '',\n    currPage: 'Current page',\n    paginationTitle: 'Pagination',\n    ofWord: 'of'\n  },\n  firstPage: 1,\n  page: 0,\n  offset: 0,\n  defaultToFullPage: false,\n  itemsStart: null,\n  itemsEnd: null,\n  perPageOptions: defaultPerPageOptions,\n  widgetId: 'pagination-options-menu',\n  onSetPage: function onSetPage() {\n    return undefined;\n  },\n  onPerPageSelect: function onPerPageSelect() {\n    return undefined;\n  },\n  onFirstClick: function onFirstClick() {\n    return undefined;\n  },\n  onPreviousClick: function onPreviousClick() {\n    return undefined;\n  },\n  onNextClick: function onNextClick() {\n    return undefined;\n  },\n  onPageInput: function onPageInput() {\n    return undefined;\n  },\n  onLastClick: function onLastClick() {\n    return undefined;\n  },\n  ouiaSafe: true,\n  perPageComponent: 'div'\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Pagination/Pagination.tsx"],"names":[],"mappings":";;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,cAAT,QAAoD,kBAApD;AACA,OAAO,MAAP,MAAmB,+DAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AAEA,SAAS,YAAT,QAA6B,eAA7B;AACA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,YAAT,EAAkC,gBAAlC,QAA0D,eAA1D;AACA,OAAO,UAAP,MAAuB,4FAAvB;AAGA,OAAA,IAAY,iBAAZ;;AAAA,CAAA,UAAY,iBAAZ,EAA6B;AAC3B,EAAA,iBAAA,CAAA,KAAA,CAAA,GAAA,KAAA;AACA,EAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACD,CAHD,EAAY,iBAAiB,KAAjB,iBAAiB,GAAA,EAAA,CAA7B;;AAKA,IAAM,qBAAqB,GAAG,CAC5B;AACE,EAAA,KAAK,EAAE,IADT;AAEE,EAAA,KAAK,EAAE;AAFT,CAD4B,EAK5B;AACE,EAAA,KAAK,EAAE,IADT;AAEE,EAAA,KAAK,EAAE;AAFT,CAL4B,EAS5B;AACE,EAAA,KAAK,EAAE,IADT;AAEE,EAAA,KAAK,EAAE;AAFT,CAT4B,EAa5B;AACE,EAAA,KAAK,EAAE,KADT;AAEE,EAAA,KAAK,EAAE;AAFT,CAb4B,CAA9B;;AAoIA,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,QAAD,EAAmB,IAAnB,EAA2C;AAClE,MAAI,CAAC,IAAL,EAAW;AACT;AACD;;AACD,MAAM,GAAG,GAAG,MAAM,CAAC,QAAD,CAAN,CAAiB,MAA7B;;AACA,MAAI,GAAG,IAAI,CAAX,EAAc;AACZ,IAAA,IAAI,CAAC,KAAL,CAAW,WAAX,CAAuB,UAAU,CAAC,IAAlC,YAA2C,GAA3C;AACD,GAFD,MAEO;AACL,IAAA,IAAI,CAAC,KAAL,CAAW,WAAX,CAAuB,UAAU,CAAC,IAAlC,EAAwC,GAAxC;AACD;AACF,CAVD;;AAYA,IAAI,YAAY,GAAG,CAAnB;AACA,WAAa,UAAb;AAAA;;AAAA;;AAAA,wBAAA;AAAA;;AAAA;;;AAEE,UAAA,aAAA,GAAgB,KAAK,CAAC,SAAN,EAAhB;AA2CA,UAAA,KAAA,GAAQ;AACN,MAAA,WAAW,EAAE,gBAAgB,CAAC,UAAU,CAAC,WAAZ,EAAyB,MAAK,KAAL,CAAW,OAApC;AADvB,KAAR;AA7CF;AAmNC;;AAnND;AAAA;AAAA,WAiDE,uBAAW;AACT,wBAAqC,KAAK,KAA1C;AAAA,UAAQ,SAAR,eAAQ,SAAR;AAAA,UAAmB,OAAnB,eAAmB,OAAnB;AAAA,UAA4B,IAA5B,eAA4B,IAA5B,CADS,CAET;;AACA,aAAO,SAAS,IAAI,SAAS,KAAK,CAA3B,GAA+B,IAAI,CAAC,IAAL,CAAU,SAAS,GAAG,OAAtB,KAAkC,CAAjE,GAAqE,IAAI,GAAG,CAAnF;AACD;AArDH;AAAA;AAAA,WAuDE,6BAAiB;AACf,UAAM,IAAI,GAAG,KAAK,aAAL,CAAmB,OAAhC;AACA,MAAA,gBAAgB,CAAC,KAAK,WAAL,EAAD,EAAqB,IAArB,CAAhB;AACD;AA1DH;AAAA;AAAA,WA4DE,4BAAmB,SAAnB,EAAyD;AACvD,UAAM,IAAI,GAAG,KAAK,aAAL,CAAmB,OAAhC;;AACA,UAAI,SAAS,CAAC,OAAV,KAAsB,KAAK,KAAL,CAAW,OAAjC,IAA4C,SAAS,CAAC,SAAV,KAAwB,KAAK,KAAL,CAAW,SAAnF,EAA8F;AAC5F,QAAA,gBAAgB,CAAC,KAAK,WAAL,EAAD,EAAqB,IAArB,CAAhB;AACD;AACF;AAjEH;AAAA;AAAA,WAkEE,kBAAM;AACE,UAAA,EAAA,GAgCF,KAhCE,KAAA;AAAA,UACJ,QADI,GA8BY,EA9BZ,CACJ,QADI;AAAA,UAEJ,SAFI,GA8BY,EA9BZ,CAEJ,SAFI;AAAA,UAGJ,OAHI,GA8BY,EA9BZ,CAGJ,OAHI;AAAA,UAIJ,UAJI,GA8BY,EA9BZ,CAIJ,UAJI;AAAA,UAKJ,SALI,GA8BY,EA9BZ,CAKJ,SALI;AAAA,UAMJ,QANI,GA8BY,EA9BZ,CAMJ,QANI;AAAA,UAOJ,QAPI,GA8BY,EA9BZ,CAOJ,QAPI;AAAA,UAQJ,OARI,GA8BY,EA9BZ,CAQJ,OARI;AAAA,UASJ,MATI,GA8BY,EA9BZ,CASJ,MATI;AAAA,UAUJ,SAVI,GA8BY,EA9BZ,CAUJ,SAVI;AAAA,UAWE,QAXF,GA8BY,EA9BZ,CAWJ,IAXI;AAAA,UAYJ,MAZI,GA8BY,EA9BZ,CAYJ,MAZI;AAAA,UAaJ,iBAbI,GA8BY,EA9BZ,CAaJ,iBAbI;AAAA,UAcJ,SAdI,GA8BY,EA9BZ,CAcJ,SAdI;AAAA,UAeJ,UAfI,GA8BY,EA9BZ,CAeJ,UAfI;AAAA,UAgBJ,QAhBI,GA8BY,EA9BZ,CAgBJ,QAhBI;AAAA,UAiBJ,cAjBI,GA8BY,EA9BZ,CAiBJ,cAjBI;AAAA,UAkBW,iBAlBX,GA8BY,EA9BZ,CAkBJ,aAlBI;AAAA,UAmBJ,QAnBI,GA8BY,EA9BZ,CAmBJ,QAnBI;AAAA,UAoBJ,cApBI,GA8BY,EA9BZ,CAoBJ,cApBI;AAAA,UAqBJ,SArBI,GA8BY,EA9BZ,CAqBJ,SArBI;AAAA,UAsBJ,eAtBI,GA8BY,EA9BZ,CAsBJ,eAtBI;AAAA,UAuBJ,YAvBI,GA8BY,EA9BZ,CAuBJ,YAvBI;AAAA,UAwBJ,eAxBI,GA8BY,EA9BZ,CAwBJ,eAxBI;AAAA,UAyBJ,WAzBI,GA8BY,EA9BZ,CAyBJ,WAzBI;AAAA,UA0BJ,WA1BI,GA8BY,EA9BZ,CA0BJ,WA1BI;AAAA,UA2BJ,WA3BI,GA8BY,EA9BZ,CA2BJ,WA3BI;AAAA,UA4BJ,MA5BI,GA8BY,EA9BZ,CA4BJ,MA5BI;AAAA,UA6BJ,QA7BI,GA8BY,EA9BZ,CA6BJ,QA7BI;AAAA,UA8BJ,gBA9BI,GA8BY,EA9BZ,CA8BJ,gBA9BI;AAAA,UA+BD,KA/BC,GA+BI,MAAA,CAAA,EAAA,EA/BJ,CAAA,UAAA,EAAA,WAAA,EAAA,SAAA,EAAA,YAAA,EAAA,WAAA,EAAA,UAAA,EAAA,UAAA,EAAA,SAAA,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,QAAA,EAAA,mBAAA,EAAA,WAAA,EAAA,YAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,eAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,iBAAA,EAAA,aAAA,EAAA,aAAA,EAAA,aAAA,EAAA,QAAA,EAAA,UAAA,EAAA,kBAAA,CA+BI,CA/BJ;;AAiCN,UAAM,aAAa,GAAG,iBAAiB,KAAK,OAAO,KAAK,QAAZ,IAAwB,CAAC,QAAzB,GAAoC,IAApC,GAA2C,MAAhD,CAAvC;AAEA,UAAI,IAAI,GAAG,QAAX;;AACA,UAAI,CAAC,IAAD,IAAS,MAAb,EAAqB;AACnB,QAAA,IAAI,GAAG,IAAI,CAAC,IAAL,CAAU,MAAM,GAAG,OAAnB,CAAP;AACD;;AACD,UAAI,IAAI,KAAK,CAAT,IAAc,CAAC,SAAnB,EAA8B;AAC5B,QAAA,IAAI,GAAG,CAAP;AACD;;AAED,UAAM,QAAQ,GAAG,KAAK,WAAL,EAAjB;AACA,UAAI,UAAU,GAAG,CAAC,IAAI,GAAG,CAAR,IAAa,OAAb,GAAuB,CAAxC;AACA,UAAI,SAAS,GAAG,IAAI,GAAG,OAAvB;;AAEA,UAAI,SAAS,IAAI,SAAS,KAAK,CAA/B,EAAkC;AAChC,QAAA,UAAU,GAAG,SAAS,IAAI,CAAb,GAAiB,CAAjB,GAAqB,CAAC,IAAI,GAAG,CAAR,IAAa,OAAb,GAAuB,CAAzD;;AAEA,YAAI,IAAI,GAAG,SAAP,IAAoB,SAAS,GAAG,CAApC,EAAuC;AACrC,UAAA,IAAI,GAAG,SAAP;AACD,SAFD,MAEO,IAAI,IAAI,GAAG,QAAX,EAAqB;AAC1B,UAAA,IAAI,GAAG,QAAP;AACD;;AAED,YAAI,SAAS,IAAI,CAAjB,EAAoB;AAClB,UAAA,SAAS,GAAG,IAAI,KAAK,QAAT,IAAqB,SAAS,KAAK,CAAnC,GAAuC,SAAvC,GAAmD,IAAI,GAAG,OAAtE;AACD;AACF;;AAED,UAAM,mBAAmB,GAAG;AAAE,QAAA,UAAU,EAAV,UAAF;AAAc,QAAA,SAAS,EAAT,SAAd;AAAyB,QAAA,SAAS,EAAT,SAAzB;AAAoC,QAAA,UAAU,EAAE,MAAM,CAAC,KAAvD;AAA8D,QAAA,MAAM,EAAE,MAAM,CAAC;AAA7E,OAA5B;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,QAAA,GAAG,EAAE,KAAK,aADZ;AAEE,QAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,UADK,EAEZ,OAAO,KAAK,iBAAiB,CAAC,MAA9B,IAAwC,MAAM,CAAC,SAAP,CAAiB,MAF7C,EAGZ,SAAS,IAAI,MAAM,CAAC,SAAP,CAAiB,OAHlB,EAIZ,QAAQ,IAAI,MAAM,CAAC,SAAP,CAAiB,MAJjB,EAKZ,QAAQ,IAAI,MAAM,CAAC,SAAP,CAAiB,MALjB,EAMZ,SANY,CAFhB;AAUE,QAAA,EAAE,YAAK,QAAL,cAAiB,YAAY,EAA7B;AAVJ,OAAA,EAWM,YAAY,CAAC,UAAU,CAAC,WAAZ,EAAyB,MAAM,KAAK,SAAX,GAAuB,MAAvB,GAAgC,KAAK,KAAL,CAAW,WAApE,EAAiF,QAAjF,CAXlB,EAYM,KAZN,CAAA,EAcG,OAAO,KAAK,iBAAiB,CAAC,GAA9B,IACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,oBAAR;AAAnB,OAAA,EACG,cAAc,IAAI,OAAO,cAAP,KAA0B,QAA5C,IAAwD,YAAY,CAAC,cAAD,EAAiB,mBAAjB,CADvE,EAEG,cAAc,IACb,OAAO,cAAP,KAA0B,QAD3B,IAEE,cAAqE,CAAC,mBAAD,CAJ1E,EAKG,CAAC,cAAD,IACC,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AACb,QAAA,UAAU,EAAE,UADC;AAEb,QAAA,SAAS,EAAE,SAFE;AAGb,QAAA,SAAS,EAAE,SAHE;AAIb,QAAA,UAAU,EAAE,MAAM,CAAC,KAJN;AAKb,QAAA,MAAM,EAAE,MAAM,CAAC;AALF,OAAf,CANJ,CAfJ,EA+BE,KAAA,CAAA,aAAA,CAAC,qBAAD,EAAsB;AACpB,QAAA,iBAAiB,EAAE,MAAM,CAAC,YADN;AAEpB,QAAA,aAAa,EAAE,MAAM,CAAC,aAFF;AAGpB,QAAA,UAAU,EAAE,SAAS,GAAG,EAAH,GAAQ,MAAM,CAAC,KAHhB;AAIpB,QAAA,aAAa,EAAE,MAAM,CAAC,aAJF;AAKpB,QAAA,cAAc,EAAE,cALI;AAMpB,QAAA,UAAU,EAAE,UAAU,KAAK,IAAf,GAAsB,UAAtB,GAAmC,UAN3B;AAOpB,QAAA,SAAS,EAAE,QAAQ,KAAK,IAAb,GAAoB,QAApB,GAA+B,SAPtB;AAQpB,QAAA,MAAM,EAAE,MAAM,CAAC,MARK;AASpB,QAAA,iBAAiB,EAAE,iBATC;AAUpB,QAAA,SAAS,EAAE,SAVS;AAWpB,QAAA,IAAI,EAAE,IAXc;AAYpB,QAAA,OAAO,EAAE,OAZW;AAapB,QAAA,QAAQ,EAAE,QAbU;AAcpB,QAAA,eAAe,EAAE,eAdG;AAepB,QAAA,aAAa,EAAE,aAfK;AAgBpB,QAAA,QAAQ,EAAE,QAhBU;AAiBpB,QAAA,cAAc,EAAE,cAjBI;AAkBpB,QAAA,UAAU,EAAE,UAlBQ;AAmBpB,QAAA,gBAAgB,EAAE;AAnBE,OAAtB,CA/BF,EAoDE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACT,QAAA,UAAU,EAAE,MAAM,CAAC,IADV;AAET,QAAA,gBAAgB,EAAE,MAAM,CAAC,KAFhB;AAGT,QAAA,UAAU,EAAE,MAAM,CAAC,UAHV;AAIT,QAAA,cAAc,EAAE,MAAM,CAAC,cAJd;AAKT,QAAA,UAAU,EAAE,MAAM,CAAC,UALV;AAMT,QAAA,WAAW,EAAE,MAAM,CAAC,WANX;AAOT,QAAA,QAAQ,EAAE,MAAM,CAAC,QAPR;AAQT,QAAA,eAAe,EAAE,MAAM,CAAC,eARf;AAST,QAAA,MAAM,EAAE,MAAM,CAAC,MATN;AAUT,QAAA,IAAI,EAAE,SAAS,IAAI,SAAS,IAAI,CAA1B,GAA8B,CAA9B,GAAkC,IAV/B;AAWT,QAAA,OAAO,EAAE,OAXA;AAYT,QAAA,SAAS,EAAE,SAZF;AAaT,QAAA,SAAS,EAAE,UAAU,KAAK,IAAf,GAAsB,UAAtB,GAAmC,CAbrC;AAcT,QAAA,QAAQ,EAAE,QAdD;AAeT,QAAA,SAAS,EAAE,SAfF;AAgBT,QAAA,YAAY,EAAE,YAhBL;AAiBT,QAAA,eAAe,EAAE,eAjBR;AAkBT,QAAA,WAAW,EAAE,WAlBJ;AAmBT,QAAA,WAAW,EAAE,WAnBJ;AAoBT,QAAA,WAAW,EAAE,WApBJ;AAqBT,QAAA,UAAU,EAAE,UArBH;AAsBT,QAAA,SAAS,EAAE;AAtBF,OAAX,CApDF,EA4EG,QA5EH,CADF;AAgFD;AAlNH;;AAAA;AAAA,EAAgC,KAAK,CAAC,SAAtC;AACS,UAAA,CAAA,WAAA,GAAc,YAAd;AAEA,UAAA,CAAA,YAAA,GAA8C;AACnD,EAAA,QAAQ,EAAE,IADyC;AAEnD,EAAA,SAAS,EAAE,EAFwC;AAGnD,EAAA,OAAO,EAAE,iBAAiB,CAAC,GAHwB;AAInD,EAAA,UAAU,EAAE,KAJuC;AAKnD,EAAA,SAAS,EAAE,KALwC;AAMnD,EAAA,QAAQ,EAAE,KANyC;AAOnD,EAAA,OAAO,EAAE,qBAAqB,CAAC,CAAD,CAArB,CAAyB,KAPiB;AAQnD,EAAA,MAAM,EAAE;AACN,IAAA,KAAK,EAAE,EADD;AAEN,IAAA,IAAI,EAAE,EAFA;AAGN,IAAA,KAAK,EAAE,EAHD;AAIN,IAAA,YAAY,EAAE,gBAJR;AAKN,IAAA,aAAa,EAAE,UALT;AAMN,IAAA,WAAW,EAAE,kBANP;AAON,IAAA,cAAc,EAAE,qBAPV;AAQN,IAAA,UAAU,EAAE,iBARN;AASN,IAAA,UAAU,EAAE,iBATN;AAUN,IAAA,aAAa,EAAE,EAVT;AAWN,IAAA,QAAQ,EAAE,cAXJ;AAYN,IAAA,eAAe,EAAE,YAZX;AAaN,IAAA,MAAM,EAAE;AAbF,GAR2C;AAuBnD,EAAA,SAAS,EAAE,CAvBwC;AAwBnD,EAAA,IAAI,EAAE,CAxB6C;AAyBnD,EAAA,MAAM,EAAE,CAzB2C;AA0BnD,EAAA,iBAAiB,EAAE,KA1BgC;AA2BnD,EAAA,UAAU,EAAE,IA3BuC;AA4BnD,EAAA,QAAQ,EAAE,IA5ByC;AA6BnD,EAAA,cAAc,EAAE,qBA7BmC;AA8BnD,EAAA,QAAQ,EAAE,yBA9ByC;AA+BnD,EAAA,SAAS,EAAE;AAAA,WAAM,SAAN;AAAA,GA/BwC;AAgCnD,EAAA,eAAe,EAAE;AAAA,WAAM,SAAN;AAAA,GAhCkC;AAiCnD,EAAA,YAAY,EAAE;AAAA,WAAM,SAAN;AAAA,GAjCqC;AAkCnD,EAAA,eAAe,EAAE;AAAA,WAAM,SAAN;AAAA,GAlCkC;AAmCnD,EAAA,WAAW,EAAE;AAAA,WAAM,SAAN;AAAA,GAnCsC;AAoCnD,EAAA,WAAW,EAAE;AAAA,WAAM,SAAN;AAAA,GApCsC;AAqCnD,EAAA,WAAW,EAAE;AAAA,WAAM,SAAN;AAAA,GArCsC;AAsCnD,EAAA,QAAQ,EAAE,IAtCyC;AAuCnD,EAAA,gBAAgB,EAAE;AAvCiC,CAA9C","sourcesContent":["import * as React from 'react';\nimport { ToggleTemplate, ToggleTemplateProps } from './ToggleTemplate';\nimport styles from '@patternfly/react-styles/css/components/Pagination/pagination';\nimport { css } from '@patternfly/react-styles';\n\nimport { fillTemplate } from '../../helpers';\nimport { Navigation } from './Navigation';\nimport { PaginationOptionsMenu } from './PaginationOptionsMenu';\nimport { getOUIAProps, OUIAProps, getDefaultOUIAId } from '../../helpers';\nimport widthChars from '@patternfly/react-tokens/dist/esm/c_pagination__nav_page_select_c_form_control_width_chars';\nimport { PickOptional } from '../../helpers';\n\nexport enum PaginationVariant {\n  top = 'top',\n  bottom = 'bottom'\n}\n\nconst defaultPerPageOptions = [\n  {\n    title: '10',\n    value: 10\n  },\n  {\n    title: '20',\n    value: 20\n  },\n  {\n    title: '50',\n    value: 50\n  },\n  {\n    title: '100',\n    value: 100\n  }\n];\n\nexport interface PerPageOptions {\n  /** option title */\n  title?: string;\n  /** option value */\n  value?: number;\n}\n\nexport interface PaginationTitles {\n  /** The title of a page displayed beside the page number */\n  page?: string;\n  /** The title of a page displayed beside the page number (plural form) */\n  pages?: string;\n  /** The type or title of the items being paginated */\n  items?: string;\n  /** The title of the pagination options menu */\n  itemsPerPage?: string;\n  /** The suffix to be displayed after each option on the options menu dropdown */\n  perPageSuffix?: string;\n  /** Accessible label for the button which moves to the first page */\n  toFirstPage?: string;\n  /** Accessible label for the button which moves to the previous page */\n  toPreviousPage?: string;\n  /** Accessible label for the button which moves to the last page */\n  toLastPage?: string;\n  /** Accessible label for the button which moves to the next page */\n  toNextPage?: string;\n  /** Accessible label for the options toggle */\n  optionsToggle?: string;\n  /** Accessible label for the input displaying the current page */\n  currPage?: string;\n  /** Accessible label for the pagination component */\n  paginationTitle?: string;\n  /** Accessible label for the English word \"of\" */\n  ofWord?: string;\n}\n\nexport type OnSetPage = (\n  _evt: React.MouseEvent | React.KeyboardEvent | MouseEvent,\n  newPage: number,\n  perPage?: number,\n  startIdx?: number,\n  endIdx?: number\n) => void;\n\nexport type OnPerPageSelect = (\n  _evt: React.MouseEvent | React.KeyboardEvent | MouseEvent,\n  newPerPage: number,\n  newPage: number,\n  startIdx?: number,\n  endIdx?: number\n) => void;\n\nexport interface PaginationProps extends React.HTMLProps<HTMLDivElement>, OUIAProps {\n  /** What should be rendered inside */\n  children?: React.ReactNode;\n  /** Additional classes for the container. */\n  className?: string;\n  /** Total number of items. */\n  itemCount?: number;\n  /** Position where pagination is rendered. */\n  variant?: 'top' | 'bottom' | PaginationVariant;\n  /** Flag indicating if pagination is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating if pagination is compact */\n  isCompact?: boolean;\n  /** Flag indicating if pagination should not be sticky on mobile */\n  isStatic?: boolean;\n  /** Flag indicating if pagination should stick to its position (based on variant) */\n  isSticky?: boolean;\n  /** Number of items per page. */\n  perPage?: number;\n  /** Array of the number of items per page  options. */\n  perPageOptions?: PerPageOptions[];\n  /** Indicate whether to show last full page of results when user selects perPage value greater than remaining rows */\n  defaultToFullPage?: boolean;\n  /** Page we start at. */\n  firstPage?: number;\n  /** Current page number. */\n  page?: number;\n  /** Start index of rows to display, used in place of providing page */\n  offset?: number;\n  /** First index of items on current page. */\n  itemsStart?: number;\n  /** Last index of items on current page. */\n  itemsEnd?: number;\n  /** ID to ideintify widget on page. */\n  widgetId?: string;\n  /** Direction of dropdown context menu. */\n  dropDirection?: 'up' | 'down';\n  /** Object with titles to display in pagination. */\n  titles?: PaginationTitles;\n  /** This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle, ofWord props. */\n  toggleTemplate?: ((props: ToggleTemplateProps) => React.ReactElement) | string;\n  /** Function called when user sets page. */\n  onSetPage?: OnSetPage;\n  /** Function called when user clicks on navigate to first page. */\n  onFirstClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks on navigate to previous page. */\n  onPreviousClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks on navigate to next page. */\n  onNextClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks on navigate to last page. */\n  onLastClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user inputs page number. */\n  onPageInput?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user selects number of items per page. */\n  onPerPageSelect?: OnPerPageSelect;\n  /** Component to be used for wrapping the toggle contents. Use 'button' when you want\n   * all of the toggle text to be clickable.\n   */\n  perPageComponent?: 'div' | 'button';\n}\n\nconst handleInputWidth = (lastPage: number, node: HTMLDivElement) => {\n  if (!node) {\n    return;\n  }\n  const len = String(lastPage).length;\n  if (len >= 3) {\n    node.style.setProperty(widthChars.name, `${len}`);\n  } else {\n    node.style.setProperty(widthChars.name, '2');\n  }\n};\n\nlet paginationId = 0;\nexport class Pagination extends React.Component<PaginationProps, { ouiaStateId: string }> {\n  static displayName = 'Pagination';\n  paginationRef = React.createRef<HTMLDivElement>();\n  static defaultProps: PickOptional<PaginationProps> = {\n    children: null,\n    className: '',\n    variant: PaginationVariant.top,\n    isDisabled: false,\n    isCompact: false,\n    isSticky: false,\n    perPage: defaultPerPageOptions[0].value,\n    titles: {\n      items: '',\n      page: '',\n      pages: '',\n      itemsPerPage: 'Items per page',\n      perPageSuffix: 'per page',\n      toFirstPage: 'Go to first page',\n      toPreviousPage: 'Go to previous page',\n      toLastPage: 'Go to last page',\n      toNextPage: 'Go to next page',\n      optionsToggle: '',\n      currPage: 'Current page',\n      paginationTitle: 'Pagination',\n      ofWord: 'of'\n    },\n    firstPage: 1,\n    page: 0,\n    offset: 0,\n    defaultToFullPage: false,\n    itemsStart: null,\n    itemsEnd: null,\n    perPageOptions: defaultPerPageOptions,\n    widgetId: 'pagination-options-menu',\n    onSetPage: () => undefined,\n    onPerPageSelect: () => undefined,\n    onFirstClick: () => undefined,\n    onPreviousClick: () => undefined,\n    onNextClick: () => undefined,\n    onPageInput: () => undefined,\n    onLastClick: () => undefined,\n    ouiaSafe: true,\n    perPageComponent: 'div'\n  };\n\n  state = {\n    ouiaStateId: getDefaultOUIAId(Pagination.displayName, this.props.variant)\n  };\n\n  getLastPage() {\n    const { itemCount, perPage, page } = this.props;\n    // when itemCount is not known let's set lastPage as page+1 as we don't know the total count\n    return itemCount || itemCount === 0 ? Math.ceil(itemCount / perPage) || 0 : page + 1;\n  }\n\n  componentDidMount() {\n    const node = this.paginationRef.current;\n    handleInputWidth(this.getLastPage(), node);\n  }\n\n  componentDidUpdate(prevProps: PaginationProps & OUIAProps) {\n    const node = this.paginationRef.current;\n    if (prevProps.perPage !== this.props.perPage || prevProps.itemCount !== this.props.itemCount) {\n      handleInputWidth(this.getLastPage(), node);\n    }\n  }\n  render() {\n    const {\n      children,\n      className,\n      variant,\n      isDisabled,\n      isCompact,\n      isStatic,\n      isSticky,\n      perPage,\n      titles,\n      firstPage,\n      page: propPage,\n      offset,\n      defaultToFullPage,\n      itemCount,\n      itemsStart,\n      itemsEnd,\n      perPageOptions,\n      dropDirection: dropDirectionProp,\n      widgetId,\n      toggleTemplate,\n      onSetPage,\n      onPerPageSelect,\n      onFirstClick,\n      onPreviousClick,\n      onNextClick,\n      onPageInput,\n      onLastClick,\n      ouiaId,\n      ouiaSafe,\n      perPageComponent,\n      ...props\n    } = this.props;\n    const dropDirection = dropDirectionProp || (variant === 'bottom' && !isStatic ? 'up' : 'down');\n\n    let page = propPage;\n    if (!page && offset) {\n      page = Math.ceil(offset / perPage);\n    }\n    if (page === 0 && !itemCount) {\n      page = 1;\n    }\n\n    const lastPage = this.getLastPage();\n    let firstIndex = (page - 1) * perPage + 1;\n    let lastIndex = page * perPage;\n\n    if (itemCount || itemCount === 0) {\n      firstIndex = itemCount <= 0 ? 0 : (page - 1) * perPage + 1;\n\n      if (page < firstPage && itemCount > 0) {\n        page = firstPage;\n      } else if (page > lastPage) {\n        page = lastPage;\n      }\n\n      if (itemCount >= 0) {\n        lastIndex = page === lastPage || itemCount === 0 ? itemCount : page * perPage;\n      }\n    }\n\n    const toggleTemplateProps = { firstIndex, lastIndex, itemCount, itemsTitle: titles.items, ofWord: titles.ofWord };\n\n    return (\n      <div\n        ref={this.paginationRef}\n        className={css(\n          styles.pagination,\n          variant === PaginationVariant.bottom && styles.modifiers.bottom,\n          isCompact && styles.modifiers.compact,\n          isStatic && styles.modifiers.static,\n          isSticky && styles.modifiers.sticky,\n          className\n        )}\n        id={`${widgetId}-${paginationId++}`}\n        {...getOUIAProps(Pagination.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)}\n        {...props}\n      >\n        {variant === PaginationVariant.top && (\n          <div className={css(styles.paginationTotalItems)}>\n            {toggleTemplate && typeof toggleTemplate === 'string' && fillTemplate(toggleTemplate, toggleTemplateProps)}\n            {toggleTemplate &&\n              typeof toggleTemplate !== 'string' &&\n              (toggleTemplate as (props: ToggleTemplateProps) => React.ReactElement)(toggleTemplateProps)}\n            {!toggleTemplate && (\n              <ToggleTemplate\n                firstIndex={firstIndex}\n                lastIndex={lastIndex}\n                itemCount={itemCount}\n                itemsTitle={titles.items}\n                ofWord={titles.ofWord}\n              />\n            )}\n          </div>\n        )}\n        <PaginationOptionsMenu\n          itemsPerPageTitle={titles.itemsPerPage}\n          perPageSuffix={titles.perPageSuffix}\n          itemsTitle={isCompact ? '' : titles.items}\n          optionsToggle={titles.optionsToggle}\n          perPageOptions={perPageOptions}\n          firstIndex={itemsStart !== null ? itemsStart : firstIndex}\n          lastIndex={itemsEnd !== null ? itemsEnd : lastIndex}\n          ofWord={titles.ofWord}\n          defaultToFullPage={defaultToFullPage}\n          itemCount={itemCount}\n          page={page}\n          perPage={perPage}\n          lastPage={lastPage}\n          onPerPageSelect={onPerPageSelect}\n          dropDirection={dropDirection}\n          widgetId={widgetId}\n          toggleTemplate={toggleTemplate}\n          isDisabled={isDisabled}\n          perPageComponent={perPageComponent}\n        />\n        <Navigation\n          pagesTitle={titles.page}\n          pagesTitlePlural={titles.pages}\n          toLastPage={titles.toLastPage}\n          toPreviousPage={titles.toPreviousPage}\n          toNextPage={titles.toNextPage}\n          toFirstPage={titles.toFirstPage}\n          currPage={titles.currPage}\n          paginationTitle={titles.paginationTitle}\n          ofWord={titles.ofWord}\n          page={itemCount && itemCount <= 0 ? 0 : page}\n          perPage={perPage}\n          itemCount={itemCount}\n          firstPage={itemsStart !== null ? itemsStart : 1}\n          lastPage={lastPage}\n          onSetPage={onSetPage}\n          onFirstClick={onFirstClick}\n          onPreviousClick={onPreviousClick}\n          onNextClick={onNextClick}\n          onLastClick={onLastClick}\n          onPageInput={onPageInput}\n          isDisabled={isDisabled}\n          isCompact={isCompact}\n        />\n        {children}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}