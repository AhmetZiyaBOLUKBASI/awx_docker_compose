{"ast":null,"code":"import _objectWithoutProperties from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";import _toPropertyKey from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js\";import _defineProperty from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";/* eslint-disable react/destructuring-assignment */import{useState,useEffect,useReducer}from'react';var initialState={// array of root level nodes (no parent_uuid)\ntree:[],// all events indexed by counter value\nevents:{},// counter value indexed by uuid\nuuidMap:{},// events with parent events that aren't yet loaded.\n// arrays indexed by parent uuid\neventsWithoutParents:{},// object in the form { counter: {rowNumber: n, numChildren: m}} for parent nodes\nchildrenSummary:{},// parent_uuid's for \"meta\" events that need to be injected into the tree to\n// maintain tree integrity\nmetaEventParentUuid:{},isAllCollapsed:false};export var ADD_EVENTS='ADD_EVENTS';export var TOGGLE_NODE_COLLAPSED='TOGGLE_NODE_COLLAPSED';export var CLEAR_EVENTS='CLEAR_EVENTS';export var REBUILD_TREE='REBUILD_TREE';export var TOGGLE_COLLAPSE_ALL='TOGGLE_COLLAPSE_ALL';export var SET_CHILDREN_SUMMARY='SET_CHILDREN_SUMMARY';export default function useJobEvents(callbacks,jobId,isFlatMode){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),actionQueue=_useState2[0],setActionQueue=_useState2[1];var enqueueAction=function enqueueAction(action){setActionQueue(function(queue){return queue.concat(action);});};var reducer=jobEventsReducer(callbacks,isFlatMode,enqueueAction);var _useReducer=useReducer(reducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];useEffect(function(){setActionQueue(function(queue){var action=queue[0];if(!action){return queue;}try{dispatch(action);}catch(e){console.error(e);// eslint-disable-line no-console\n}return queue.slice(1);});},[actionQueue]);useEffect(function(){if(isFlatMode){callbacks.setJobTreeReady();return;}callbacks.fetchChildrenSummary().then(function(result){var _result$data=result.data,event_processing_finished=_result$data.event_processing_finished,is_tree=_result$data.is_tree;if(event_processing_finished===false||is_tree===false){callbacks.setForceFlatMode(true);callbacks.setJobTreeReady();return;}enqueueAction({type:SET_CHILDREN_SUMMARY,childrenSummary:result.data.children_summary,metaEventParentUuid:result.data.meta_event_nested_uuid});}).catch(function(){callbacks.setForceFlatMode(true);callbacks.setJobTreeReady();});},[jobId,isFlatMode]);// eslint-disable-line react-hooks/exhaustive-deps\nreturn{addEvents:function addEvents(events){return dispatch({type:ADD_EVENTS,events:events});},getNodeByUuid:function getNodeByUuid(uuid){return _getNodeByUuid(state,uuid);},toggleNodeIsCollapsed:function toggleNodeIsCollapsed(uuid,isCollapsed){return dispatch({type:TOGGLE_NODE_COLLAPSED,uuid:uuid,isCollapsed:isCollapsed});},toggleCollapseAll:function toggleCollapseAll(isCollapsed){return dispatch({type:TOGGLE_COLLAPSE_ALL,isCollapsed:isCollapsed});},getEventForRow:function getEventForRow(rowIndex){return _getEventForRow(state,rowIndex);},getNodeForRow:function getNodeForRow(rowIndex){return _getNodeForRow2(state,rowIndex);},getTotalNumChildren:function getTotalNumChildren(uuid){var node=_getNodeByUuid(state,uuid);return _getTotalNumChildren(node,state.childrenSummary);},getNumCollapsedEvents:function getNumCollapsedEvents(){return state.tree.reduce(function(sum,node){return sum+getNumCollapsedChildren(node,state.childrenSummary);},0);},getCounterForRow:function getCounterForRow(rowIndex){return _getCounterForRow(state,rowIndex);},getEvent:function getEvent(eventIndex){return _getEvent(state,eventIndex);},clearLoadedEvents:function clearLoadedEvents(){return dispatch({type:CLEAR_EVENTS});},rebuildEventsTree:function rebuildEventsTree(){return dispatch({type:REBUILD_TREE});},isAllCollapsed:state.isAllCollapsed};}export function jobEventsReducer(callbacks,isFlatMode,enqueueAction){return function(state,action){switch(action.type){case ADD_EVENTS:return addEvents(state,action.events);case TOGGLE_COLLAPSE_ALL:return toggleCollapseAll(state,action.isCollapsed);case TOGGLE_NODE_COLLAPSED:return toggleNodeIsCollapsed(state,action.uuid);case CLEAR_EVENTS:return initialState;case REBUILD_TREE:return rebuildTree(state);case SET_CHILDREN_SUMMARY:callbacks.setJobTreeReady();return _objectSpread(_objectSpread({},state),{},{childrenSummary:action.childrenSummary||{},metaEventParentUuid:action.metaEventParentUuid||{}});default:throw new Error(\"Unrecognized action: \".concat(action.type));}};function addEvents(origState,newEvents){var state=_objectSpread(_objectSpread({},origState),{},{events:_objectSpread({},origState.events),tree:_toConsumableArray(origState.tree)});var parentsToFetch={};newEvents.forEach(function(event){if(typeof event.rowNumber!=='number'||Number.isNaN(event.rowNumber)){throw new Error('Cannot add event; missing rowNumber');}var eventIndex=event.counter;if(!event.parent_uuid&&state.metaEventParentUuid[eventIndex]){event.parent_uuid=state.metaEventParentUuid[eventIndex];}if(state.events[eventIndex]){state.events[eventIndex]=event;state=_gatherEventsForNewParent(state,event.uuid);return;}if(!event.parent_uuid||isFlatMode){state=_addRootLevelEvent(state,event);return;}var isParentFound;var _addNestedLevelEvent2=_addNestedLevelEvent(state,event);var _addNestedLevelEvent3=_slicedToArray(_addNestedLevelEvent2,2);state=_addNestedLevelEvent3[0];isParentFound=_addNestedLevelEvent3[1];if(!isParentFound){parentsToFetch[event.parent_uuid]=true;state=_addEventWithoutParent(state,event);}});Object.keys(parentsToFetch).forEach(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(uuid){var parent;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return callbacks.fetchEventByUuid(uuid);case 2:parent=_context.sent;if(!(!state.childrenSummary||!state.childrenSummary[parent.counter])){_context.next=6;break;}// eslint-disable-next-line no-console\nconsole.error('No row number found for ',parent.counter);return _context.abrupt(\"return\");case 6:parent.rowNumber=state.childrenSummary[parent.counter].rowNumber;enqueueAction({type:ADD_EVENTS,events:[parent]});case 8:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());return state;}function _addRootLevelEvent(state,event){var eventIndex=event.counter;var newNode={eventIndex:eventIndex,isCollapsed:state.isAllCollapsed,children:[]};var index=state.tree.findIndex(function(node){return node.eventIndex>eventIndex;});var updatedTree=_toConsumableArray(state.tree);if(index===-1){updatedTree.push(newNode);}else{updatedTree.splice(index,0,newNode);}return _gatherEventsForNewParent(_objectSpread(_objectSpread({},state),{},{events:_objectSpread(_objectSpread({},state.events),{},_defineProperty({},eventIndex,event)),tree:updatedTree,uuidMap:_objectSpread(_objectSpread({},state.uuidMap),{},_defineProperty({},event.uuid,eventIndex))}),event.uuid);}function _addNestedLevelEvent(state,event){var eventIndex=event.counter;var parent=_getNodeByUuid(state,event.parent_uuid);if(!parent){return[state,false];}var newNode={eventIndex:eventIndex,isCollapsed:state.isAllCollapsed,children:[]};var index=parent.children.findIndex(function(node){return node.eventIndex>=eventIndex;});if(index===-1){state=updateNodeByUuid(state,event.parent_uuid,function(node){node.children.push(newNode);return node;});}else{state=updateNodeByUuid(state,event.parent_uuid,function(node){node.children.splice(index,0,newNode);return node;});}state=_gatherEventsForNewParent(_objectSpread(_objectSpread({},state),{},{events:_objectSpread(_objectSpread({},state.events),{},_defineProperty({},eventIndex,event)),uuidMap:_objectSpread(_objectSpread({},state.uuidMap),{},_defineProperty({},event.uuid,eventIndex))}),event.uuid);return[state,true];}function _addEventWithoutParent(state,event){var parentUuid=event.parent_uuid;var eventsList;if(!state.eventsWithoutParents[parentUuid]){eventsList=[event];}else{eventsList=state.eventsWithoutParents[parentUuid].concat(event);}return _objectSpread(_objectSpread({},state),{},{eventsWithoutParents:_objectSpread(_objectSpread({},state.eventsWithoutParents),{},_defineProperty({},parentUuid,eventsList))});}function _gatherEventsForNewParent(state,parentUuid){if(!state.eventsWithoutParents[parentUuid]){return state;}var _state$eventsWithoutP=state.eventsWithoutParents,newEvents=_state$eventsWithoutP[parentUuid],remaining=_objectWithoutProperties(_state$eventsWithoutP,[parentUuid].map(_toPropertyKey));return addEvents(_objectSpread(_objectSpread({},state),{},{eventsWithoutParents:remaining}),newEvents);}function rebuildTree(state){var events=Object.values(state.events);return addEvents(initialState,events);}}function _getEventForRow(state,rowIndex){var _getNodeForRow3=_getNodeForRow(state,rowIndex,state.tree),node=_getNodeForRow3.node;if(node){return{node:node,event:state.events[node.eventIndex]};}return null;}function _getNodeForRow2(state,rowToFind,childrenSummary){var _getNodeForRow4=_getNodeForRow(state,rowToFind,state.tree,childrenSummary),node=_getNodeForRow4.node;return node;}function _getCounterForRow(state,rowToFind){var _getNodeForRow5=_getNodeForRow(state,rowToFind,state.tree),node=_getNodeForRow5.node,expectedCounter=_getNodeForRow5.expectedCounter;if(node){var event=state.events[node.eventIndex];return event.counter;}return expectedCounter;}function _getNodeForRow(state,rowToFind,nodes){for(var i=0;i<nodes.length;i++){var node=nodes[i];var event=state.events[node.eventIndex];if(event.rowNumber===rowToFind){return{node:node};}var totalNodeDescendants=_getTotalNumChildren(node,state.childrenSummary);var numCollapsedChildren=getNumCollapsedChildren(node,state.childrenSummary);var nodeChildren=totalNodeDescendants-numCollapsedChildren;if(event.rowNumber+nodeChildren>=rowToFind){// requested row is in children/descendants\nreturn _getNodeInChildren(state,node,rowToFind);}rowToFind+=numCollapsedChildren;var nextNode=nodes[i+1];if(!nextNode){continue;}var nextEvent=state.events[nextNode.eventIndex];var lastChild=_getLastDescendantNode([node]);if(nextEvent.rowNumber>rowToFind){// requested row is not loaded; return best guess at counter number\nvar lastChildEvent=state.events[lastChild.eventIndex];var _rowDiff=rowToFind-lastChildEvent.rowNumber;return{node:null,expectedCounter:lastChild.eventIndex+_rowDiff};}}var lastDescendant=_getLastDescendantNode(nodes);if(!lastDescendant){return{node:null,expectedCounter:rowToFind};}var lastDescendantEvent=state.events[lastDescendant.eventIndex];var rowDiff=rowToFind-lastDescendantEvent.rowNumber;return{node:null,expectedCounter:lastDescendant.eventIndex+rowDiff};}function _getNodeInChildren(state,node,rowToFind){var _node$children$;var event=state.events[node.eventIndex];var firstChild=state.events[(_node$children$=node.children[0])===null||_node$children$===void 0?void 0:_node$children$.eventIndex];if(!firstChild||rowToFind<firstChild.rowNumber){var rowDiff=rowToFind-event.rowNumber;return{node:null,expectedCounter:event.counter+rowDiff};}return _getNodeForRow(state,rowToFind,node.children);}function _getLastDescendantNode(nodes){var _lastDescendant;var lastDescendant=nodes[nodes.length-1];var children=((_lastDescendant=lastDescendant)===null||_lastDescendant===void 0?void 0:_lastDescendant.children)||[];while(children.length){lastDescendant=children[children.length-1];children=lastDescendant.children;}return lastDescendant;}function _getTotalNumChildren(node,childrenSummary){if(childrenSummary[node.eventIndex]){return childrenSummary[node.eventIndex].numChildren;}var estimatedNumChildren=node.children.length;node.children.forEach(function(child){estimatedNumChildren+=_getTotalNumChildren(child,childrenSummary);});return estimatedNumChildren;}function getNumCollapsedChildren(node,childrenSummary){if(node.isCollapsed){return _getTotalNumChildren(node,childrenSummary);}var sum=0;node.children.forEach(function(child){sum+=getNumCollapsedChildren(child,childrenSummary);});return sum;}function toggleNodeIsCollapsed(state,eventUuid){return _objectSpread(_objectSpread({},updateNodeByUuid(state,eventUuid,function(node){return _objectSpread(_objectSpread({},node),{},{isCollapsed:!node.isCollapsed});})),{},{isAllCollapsed:false});}function toggleCollapseAll(state,isAllCollapsed){var newTree=state.tree.map(function(node){return _toggleNestedNodes(state.events,node,isAllCollapsed);});return _objectSpread(_objectSpread({},state),{},{tree:newTree,isAllCollapsed:isAllCollapsed});}function _toggleNestedNodes(events,node,isCollapsed){var _node$children;var _events$node$eventInd=events[node.eventIndex],parent_uuid=_events$node$eventInd.parent_uuid,playbook_uuid=_events$node$eventInd.event_data.playbook_uuid,uuid=_events$node$eventInd.uuid;var eventShouldNotCollapse=uuid===playbook_uuid||!(parent_uuid!==null&&parent_uuid!==void 0&&parent_uuid.length);var children=(_node$children=node.children)===null||_node$children===void 0?void 0:_node$children.map(function(nestedNode){return _toggleNestedNodes(events,nestedNode,isCollapsed);});return _objectSpread(_objectSpread({},node),{},{isCollapsed:eventShouldNotCollapse?false:isCollapsed,children:children});}function updateNodeByUuid(state,uuid,update){if(!state.uuidMap[uuid]){throw new Error(\"Cannot update node; Event UUID not found \".concat(uuid));}var index=state.uuidMap[uuid];return _objectSpread(_objectSpread({},state),{},{tree:_updateNodeByIndex(index,state.tree,update)});}function _updateNodeByIndex(target,nodeArray,update){var nextIndex=nodeArray.findIndex(function(node){return node.eventIndex>target;});var targetIndex=nextIndex===-1?nodeArray.length-1:nextIndex-1;var updatedNode;if(nodeArray[targetIndex].eventIndex===target){updatedNode=update(_objectSpread(_objectSpread({},nodeArray[targetIndex]),{},{children:_toConsumableArray(nodeArray[targetIndex].children)}));}else{updatedNode=_objectSpread(_objectSpread({},nodeArray[targetIndex]),{},{children:_updateNodeByIndex(target,nodeArray[targetIndex].children,update)});}return[].concat(_toConsumableArray(nodeArray.slice(0,targetIndex)),[updatedNode],_toConsumableArray(nodeArray.slice(targetIndex+1)));}function _getNodeByUuid(state,uuid){if(!state.uuidMap[uuid]){return null;}var index=state.uuidMap[uuid];return _getNodeByIndex(state.tree,index);}function _getNodeByIndex(arr,index){if(!arr.length){return null;}var i=arr.findIndex(function(node){return node.eventIndex>=index;});if(i===-1){return _getNodeByIndex(arr[arr.length-1].children,index);}if(arr[i].eventIndex===index){return arr[i];}if(!arr[i-1]){return null;}return _getNodeByIndex(arr[i-1].children,index);}function _getEvent(state,eventIndex){var event=state.events[eventIndex];if(event){return event;}return null;}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Job/JobOutput/useJobEvents.js"],"names":["useState","useEffect","useReducer","initialState","tree","events","uuidMap","eventsWithoutParents","childrenSummary","metaEventParentUuid","isAllCollapsed","ADD_EVENTS","TOGGLE_NODE_COLLAPSED","CLEAR_EVENTS","REBUILD_TREE","TOGGLE_COLLAPSE_ALL","SET_CHILDREN_SUMMARY","useJobEvents","callbacks","jobId","isFlatMode","actionQueue","setActionQueue","enqueueAction","action","queue","concat","reducer","jobEventsReducer","state","dispatch","e","console","error","slice","setJobTreeReady","fetchChildrenSummary","then","result","data","event_processing_finished","is_tree","setForceFlatMode","type","children_summary","meta_event_nested_uuid","catch","addEvents","getNodeByUuid","uuid","toggleNodeIsCollapsed","isCollapsed","toggleCollapseAll","getEventForRow","rowIndex","getNodeForRow","getTotalNumChildren","node","getNumCollapsedEvents","reduce","sum","getNumCollapsedChildren","getCounterForRow","getEvent","eventIndex","clearLoadedEvents","rebuildEventsTree","rebuildTree","Error","origState","newEvents","parentsToFetch","forEach","event","rowNumber","Number","isNaN","counter","parent_uuid","_gatherEventsForNewParent","_addRootLevelEvent","isParentFound","_addNestedLevelEvent","_addEventWithoutParent","Object","keys","fetchEventByUuid","parent","newNode","children","index","findIndex","updatedTree","push","splice","updateNodeByUuid","parentUuid","eventsList","remaining","values","_getNodeForRow","rowToFind","expectedCounter","nodes","i","length","totalNodeDescendants","numCollapsedChildren","nodeChildren","_getNodeInChildren","nextNode","nextEvent","lastChild","_getLastDescendantNode","lastChildEvent","rowDiff","lastDescendant","lastDescendantEvent","firstChild","numChildren","estimatedNumChildren","child","eventUuid","newTree","map","_toggleNestedNodes","playbook_uuid","event_data","eventShouldNotCollapse","nestedNode","update","_updateNodeByIndex","target","nodeArray","nextIndex","targetIndex","updatedNode","_getNodeByIndex","arr"],"mappings":"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","sourcesContent":["/* eslint-disable react/destructuring-assignment */\nimport { useState, useEffect, useReducer } from 'react';\n\nconst initialState = {\n  // array of root level nodes (no parent_uuid)\n  tree: [],\n  // all events indexed by counter value\n  events: {},\n  // counter value indexed by uuid\n  uuidMap: {},\n  // events with parent events that aren't yet loaded.\n  // arrays indexed by parent uuid\n  eventsWithoutParents: {},\n  // object in the form { counter: {rowNumber: n, numChildren: m}} for parent nodes\n  childrenSummary: {},\n  // parent_uuid's for \"meta\" events that need to be injected into the tree to\n  // maintain tree integrity\n  metaEventParentUuid: {},\n  isAllCollapsed: false,\n};\nexport const ADD_EVENTS = 'ADD_EVENTS';\nexport const TOGGLE_NODE_COLLAPSED = 'TOGGLE_NODE_COLLAPSED';\nexport const CLEAR_EVENTS = 'CLEAR_EVENTS';\nexport const REBUILD_TREE = 'REBUILD_TREE';\nexport const TOGGLE_COLLAPSE_ALL = 'TOGGLE_COLLAPSE_ALL';\nexport const SET_CHILDREN_SUMMARY = 'SET_CHILDREN_SUMMARY';\n\nexport default function useJobEvents(callbacks, jobId, isFlatMode) {\n  const [actionQueue, setActionQueue] = useState([]);\n  const enqueueAction = (action) => {\n    setActionQueue((queue) => queue.concat(action));\n  };\n  const reducer = jobEventsReducer(callbacks, isFlatMode, enqueueAction);\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    setActionQueue((queue) => {\n      const action = queue[0];\n      if (!action) {\n        return queue;\n      }\n      try {\n        dispatch(action);\n      } catch (e) {\n        console.error(e); // eslint-disable-line no-console\n      }\n      return queue.slice(1);\n    });\n  }, [actionQueue]);\n\n  useEffect(() => {\n    if (isFlatMode) {\n      callbacks.setJobTreeReady();\n      return;\n    }\n\n    callbacks\n      .fetchChildrenSummary()\n      .then((result) => {\n        const { event_processing_finished, is_tree } = result.data;\n        if (event_processing_finished === false || is_tree === false) {\n          callbacks.setForceFlatMode(true);\n          callbacks.setJobTreeReady();\n          return;\n        }\n        enqueueAction({\n          type: SET_CHILDREN_SUMMARY,\n          childrenSummary: result.data.children_summary,\n          metaEventParentUuid: result.data.meta_event_nested_uuid,\n        });\n      })\n      .catch(() => {\n        callbacks.setForceFlatMode(true);\n        callbacks.setJobTreeReady();\n      });\n  }, [jobId, isFlatMode]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    addEvents: (events) => dispatch({ type: ADD_EVENTS, events }),\n    getNodeByUuid: (uuid) => getNodeByUuid(state, uuid),\n    toggleNodeIsCollapsed: (uuid, isCollapsed) =>\n      dispatch({ type: TOGGLE_NODE_COLLAPSED, uuid, isCollapsed }),\n    toggleCollapseAll: (isCollapsed) =>\n      dispatch({ type: TOGGLE_COLLAPSE_ALL, isCollapsed }),\n    getEventForRow: (rowIndex) => getEventForRow(state, rowIndex),\n    getNodeForRow: (rowIndex) => getNodeForRow(state, rowIndex),\n    getTotalNumChildren: (uuid) => {\n      const node = getNodeByUuid(state, uuid);\n      return getTotalNumChildren(node, state.childrenSummary);\n    },\n    getNumCollapsedEvents: () =>\n      state.tree.reduce(\n        (sum, node) =>\n          sum + getNumCollapsedChildren(node, state.childrenSummary),\n        0\n      ),\n    getCounterForRow: (rowIndex) => getCounterForRow(state, rowIndex),\n    getEvent: (eventIndex) => getEvent(state, eventIndex),\n    clearLoadedEvents: () => dispatch({ type: CLEAR_EVENTS }),\n    rebuildEventsTree: () => dispatch({ type: REBUILD_TREE }),\n    isAllCollapsed: state.isAllCollapsed,\n  };\n}\n\nexport function jobEventsReducer(callbacks, isFlatMode, enqueueAction) {\n  return (state, action) => {\n    switch (action.type) {\n      case ADD_EVENTS:\n        return addEvents(state, action.events);\n      case TOGGLE_COLLAPSE_ALL:\n        return toggleCollapseAll(state, action.isCollapsed);\n      case TOGGLE_NODE_COLLAPSED:\n        return toggleNodeIsCollapsed(state, action.uuid);\n      case CLEAR_EVENTS:\n        return initialState;\n      case REBUILD_TREE:\n        return rebuildTree(state);\n      case SET_CHILDREN_SUMMARY:\n        callbacks.setJobTreeReady();\n        return {\n          ...state,\n          childrenSummary: action.childrenSummary || {},\n          metaEventParentUuid: action.metaEventParentUuid || {},\n        };\n      default:\n        throw new Error(`Unrecognized action: ${action.type}`);\n    }\n  };\n\n  function addEvents(origState, newEvents) {\n    let state = {\n      ...origState,\n      events: { ...origState.events },\n      tree: [...origState.tree],\n    };\n    const parentsToFetch = {};\n    newEvents.forEach((event) => {\n      if (\n        typeof event.rowNumber !== 'number' ||\n        Number.isNaN(event.rowNumber)\n      ) {\n        throw new Error('Cannot add event; missing rowNumber');\n      }\n      const eventIndex = event.counter;\n      if (!event.parent_uuid && state.metaEventParentUuid[eventIndex]) {\n        event.parent_uuid = state.metaEventParentUuid[eventIndex];\n      }\n      if (state.events[eventIndex]) {\n        state.events[eventIndex] = event;\n        state = _gatherEventsForNewParent(state, event.uuid);\n        return;\n      }\n      if (!event.parent_uuid || isFlatMode) {\n        state = _addRootLevelEvent(state, event);\n        return;\n      }\n\n      let isParentFound;\n      [state, isParentFound] = _addNestedLevelEvent(state, event);\n      if (!isParentFound) {\n        parentsToFetch[event.parent_uuid] = true;\n        state = _addEventWithoutParent(state, event);\n      }\n    });\n\n    Object.keys(parentsToFetch).forEach(async (uuid) => {\n      const parent = await callbacks.fetchEventByUuid(uuid);\n\n      if (!state.childrenSummary || !state.childrenSummary[parent.counter]) {\n        // eslint-disable-next-line no-console\n        console.error('No row number found for ', parent.counter);\n        return;\n      }\n      parent.rowNumber = state.childrenSummary[parent.counter].rowNumber;\n\n      enqueueAction({\n        type: ADD_EVENTS,\n        events: [parent],\n      });\n    });\n\n    return state;\n  }\n\n  function _addRootLevelEvent(state, event) {\n    const eventIndex = event.counter;\n    const newNode = {\n      eventIndex,\n      isCollapsed: state.isAllCollapsed,\n      children: [],\n    };\n    const index = state.tree.findIndex((node) => node.eventIndex > eventIndex);\n    const updatedTree = [...state.tree];\n    if (index === -1) {\n      updatedTree.push(newNode);\n    } else {\n      updatedTree.splice(index, 0, newNode);\n    }\n    return _gatherEventsForNewParent(\n      {\n        ...state,\n        events: { ...state.events, [eventIndex]: event },\n        tree: updatedTree,\n        uuidMap: {\n          ...state.uuidMap,\n          [event.uuid]: eventIndex,\n        },\n      },\n      event.uuid\n    );\n  }\n\n  function _addNestedLevelEvent(state, event) {\n    const eventIndex = event.counter;\n    const parent = getNodeByUuid(state, event.parent_uuid);\n    if (!parent) {\n      return [state, false];\n    }\n    const newNode = {\n      eventIndex,\n      isCollapsed: state.isAllCollapsed,\n      children: [],\n    };\n    const index = parent.children.findIndex(\n      (node) => node.eventIndex >= eventIndex\n    );\n    if (index === -1) {\n      state = updateNodeByUuid(state, event.parent_uuid, (node) => {\n        node.children.push(newNode);\n        return node;\n      });\n    } else {\n      state = updateNodeByUuid(state, event.parent_uuid, (node) => {\n        node.children.splice(index, 0, newNode);\n        return node;\n      });\n    }\n    state = _gatherEventsForNewParent(\n      {\n        ...state,\n        events: {\n          ...state.events,\n          [eventIndex]: event,\n        },\n        uuidMap: {\n          ...state.uuidMap,\n          [event.uuid]: eventIndex,\n        },\n      },\n      event.uuid\n    );\n\n    return [state, true];\n  }\n\n  function _addEventWithoutParent(state, event) {\n    const parentUuid = event.parent_uuid;\n    let eventsList;\n    if (!state.eventsWithoutParents[parentUuid]) {\n      eventsList = [event];\n    } else {\n      eventsList = state.eventsWithoutParents[parentUuid].concat(event);\n    }\n\n    return {\n      ...state,\n      eventsWithoutParents: {\n        ...state.eventsWithoutParents,\n        [parentUuid]: eventsList,\n      },\n    };\n  }\n\n  function _gatherEventsForNewParent(state, parentUuid) {\n    if (!state.eventsWithoutParents[parentUuid]) {\n      return state;\n    }\n\n    const { [parentUuid]: newEvents, ...remaining } =\n      state.eventsWithoutParents;\n    return addEvents(\n      {\n        ...state,\n        eventsWithoutParents: remaining,\n      },\n      newEvents\n    );\n  }\n\n  function rebuildTree(state) {\n    const events = Object.values(state.events);\n    return addEvents(initialState, events);\n  }\n}\n\nfunction getEventForRow(state, rowIndex) {\n  const { node } = _getNodeForRow(state, rowIndex, state.tree);\n  if (node) {\n    return {\n      node,\n      event: state.events[node.eventIndex],\n    };\n  }\n  return null;\n}\n\nfunction getNodeForRow(state, rowToFind, childrenSummary) {\n  const { node } = _getNodeForRow(\n    state,\n    rowToFind,\n    state.tree,\n    childrenSummary\n  );\n  return node;\n}\n\nfunction getCounterForRow(state, rowToFind) {\n  const { node, expectedCounter } = _getNodeForRow(\n    state,\n    rowToFind,\n    state.tree\n  );\n\n  if (node) {\n    const event = state.events[node.eventIndex];\n    return event.counter;\n  }\n  return expectedCounter;\n}\n\nfunction _getNodeForRow(state, rowToFind, nodes) {\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const event = state.events[node.eventIndex];\n    if (event.rowNumber === rowToFind) {\n      return { node };\n    }\n    const totalNodeDescendants = getTotalNumChildren(\n      node,\n      state.childrenSummary\n    );\n    const numCollapsedChildren = getNumCollapsedChildren(\n      node,\n      state.childrenSummary\n    );\n    const nodeChildren = totalNodeDescendants - numCollapsedChildren;\n    if (event.rowNumber + nodeChildren >= rowToFind) {\n      // requested row is in children/descendants\n      return _getNodeInChildren(state, node, rowToFind);\n    }\n    rowToFind += numCollapsedChildren;\n\n    const nextNode = nodes[i + 1];\n    if (!nextNode) {\n      continue;\n    }\n    const nextEvent = state.events[nextNode.eventIndex];\n    const lastChild = _getLastDescendantNode([node]);\n    if (nextEvent.rowNumber > rowToFind) {\n      // requested row is not loaded; return best guess at counter number\n      const lastChildEvent = state.events[lastChild.eventIndex];\n      const rowDiff = rowToFind - lastChildEvent.rowNumber;\n      return {\n        node: null,\n        expectedCounter: lastChild.eventIndex + rowDiff,\n      };\n    }\n  }\n\n  const lastDescendant = _getLastDescendantNode(nodes);\n  if (!lastDescendant) {\n    return { node: null, expectedCounter: rowToFind };\n  }\n\n  const lastDescendantEvent = state.events[lastDescendant.eventIndex];\n  const rowDiff = rowToFind - lastDescendantEvent.rowNumber;\n  return {\n    node: null,\n    expectedCounter: lastDescendant.eventIndex + rowDiff,\n  };\n}\n\nfunction _getNodeInChildren(state, node, rowToFind) {\n  const event = state.events[node.eventIndex];\n  const firstChild = state.events[node.children[0]?.eventIndex];\n  if (!firstChild || rowToFind < firstChild.rowNumber) {\n    const rowDiff = rowToFind - event.rowNumber;\n    return {\n      node: null,\n      expectedCounter: event.counter + rowDiff,\n    };\n  }\n  return _getNodeForRow(state, rowToFind, node.children);\n}\n\nfunction _getLastDescendantNode(nodes) {\n  let lastDescendant = nodes[nodes.length - 1];\n  let children = lastDescendant?.children || [];\n  while (children.length) {\n    lastDescendant = children[children.length - 1];\n    children = lastDescendant.children;\n  }\n  return lastDescendant;\n}\n\nfunction getTotalNumChildren(node, childrenSummary) {\n  if (childrenSummary[node.eventIndex]) {\n    return childrenSummary[node.eventIndex].numChildren;\n  }\n\n  let estimatedNumChildren = node.children.length;\n  node.children.forEach((child) => {\n    estimatedNumChildren += getTotalNumChildren(child, childrenSummary);\n  });\n  return estimatedNumChildren;\n}\n\nfunction getNumCollapsedChildren(node, childrenSummary) {\n  if (node.isCollapsed) {\n    return getTotalNumChildren(node, childrenSummary);\n  }\n  let sum = 0;\n  node.children.forEach((child) => {\n    sum += getNumCollapsedChildren(child, childrenSummary);\n  });\n  return sum;\n}\n\nfunction toggleNodeIsCollapsed(state, eventUuid) {\n  return {\n    ...updateNodeByUuid(state, eventUuid, (node) => ({\n      ...node,\n      isCollapsed: !node.isCollapsed,\n    })),\n    isAllCollapsed: false,\n  };\n}\n\nfunction toggleCollapseAll(state, isAllCollapsed) {\n  const newTree = state.tree.map((node) =>\n    _toggleNestedNodes(state.events, node, isAllCollapsed)\n  );\n  return { ...state, tree: newTree, isAllCollapsed };\n}\n\nfunction _toggleNestedNodes(events, node, isCollapsed) {\n  const {\n    parent_uuid,\n    event_data: { playbook_uuid },\n    uuid,\n  } = events[node.eventIndex];\n\n  const eventShouldNotCollapse = uuid === playbook_uuid || !parent_uuid?.length;\n\n  const children = node.children?.map((nestedNode) =>\n    _toggleNestedNodes(events, nestedNode, isCollapsed)\n  );\n\n  return {\n    ...node,\n    isCollapsed: eventShouldNotCollapse ? false : isCollapsed,\n    children,\n  };\n}\n\nfunction updateNodeByUuid(state, uuid, update) {\n  if (!state.uuidMap[uuid]) {\n    throw new Error(`Cannot update node; Event UUID not found ${uuid}`);\n  }\n  const index = state.uuidMap[uuid];\n  return {\n    ...state,\n    tree: _updateNodeByIndex(index, state.tree, update),\n  };\n}\n\nfunction _updateNodeByIndex(target, nodeArray, update) {\n  const nextIndex = nodeArray.findIndex((node) => node.eventIndex > target);\n  const targetIndex = nextIndex === -1 ? nodeArray.length - 1 : nextIndex - 1;\n  let updatedNode;\n  if (nodeArray[targetIndex].eventIndex === target) {\n    updatedNode = update({\n      ...nodeArray[targetIndex],\n      children: [...nodeArray[targetIndex].children],\n    });\n  } else {\n    updatedNode = {\n      ...nodeArray[targetIndex],\n      children: _updateNodeByIndex(\n        target,\n        nodeArray[targetIndex].children,\n        update\n      ),\n    };\n  }\n  return [\n    ...nodeArray.slice(0, targetIndex),\n    updatedNode,\n    ...nodeArray.slice(targetIndex + 1),\n  ];\n}\n\nfunction getNodeByUuid(state, uuid) {\n  if (!state.uuidMap[uuid]) {\n    return null;\n  }\n\n  const index = state.uuidMap[uuid];\n  return _getNodeByIndex(state.tree, index);\n}\n\nfunction _getNodeByIndex(arr, index) {\n  if (!arr.length) {\n    return null;\n  }\n  const i = arr.findIndex((node) => node.eventIndex >= index);\n  if (i === -1) {\n    return _getNodeByIndex(arr[arr.length - 1].children, index);\n  }\n  if (arr[i].eventIndex === index) {\n    return arr[i];\n  }\n  if (!arr[i - 1]) {\n    return null;\n  }\n  return _getNodeByIndex(arr[i - 1].children, index);\n}\n\nfunction getEvent(state, eventIndex) {\n  const event = state.events[eventIndex];\n  if (event) {\n    return event;\n  }\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}