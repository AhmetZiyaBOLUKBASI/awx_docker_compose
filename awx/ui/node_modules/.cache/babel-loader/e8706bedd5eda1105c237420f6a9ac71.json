{"ast":null,"code":"import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";/**\n * Returns queryset config with defaults, if needed\n * @param {string} namespace for appending to url querystring\n * @param {object} default params that are not handled with search (page, page_size and order_by)\n * @param {array} params that are number fields\n * @return {object} query param object\n */export function getQSConfig(namespace){var defaultParams=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{page:1,page_size:5,order_by:'name'};var integerFields=arguments.length>2&&arguments[2]!==undefined?arguments[2]:['page','page_size'];var dateFields=arguments.length>3&&arguments[3]!==undefined?arguments[3]:['modified','created'];if(!namespace){throw new Error('a QS namespace is required');}// if order_by isn't passed, default to name\nif(!defaultParams.order_by){defaultParams.order_by='name';}return{namespace:namespace,defaultParams:defaultParams,integerFields:integerFields,dateFields:dateFields};}/**\n * Convert url query string to query param object\n * @param {object} qs config object (used for getting defaults, current query params etc.)\n * @param {string} url query string\n * @return {object} query param object\n */export function parseQueryString(config,queryString){if(!queryString){return config.defaultParams||{};}var params=stringToObject(config,queryString);return addDefaultsToObject(config,params);}function stringToObject(config,qs){var params={};qs.replace(/^\\?/,'').split('&').map(function(s){return s.split('=');}).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),nsKey=_ref2[0],rawValue=_ref2[1];if(!nsKey||!namespaceMatches(config.namespace,nsKey)){return;}var key=config.namespace?decodeURIComponent(nsKey.substr(config.namespace.length+1)):decodeURIComponent(nsKey);var value=parseValue(config,key,rawValue);params[key]=mergeParam(params[key],value);});return params;}export{stringToObject as _stringToObject};/**\n * helper function to check the namespace of a param is what you expect\n * @param {string} namespace to append to params\n * @param {object} params object to append namespace to\n * @return {object} params object with namespaced keys\n */var namespaceMatches=function namespaceMatches(namespace,fieldname){if(!namespace)return!fieldname.includes('.');return fieldname.startsWith(\"\".concat(namespace,\".\"));};function parseValue(config,key,rawValue){if(config.integerFields&&config.integerFields.some(function(v){return v===key;})){return parseInt(rawValue,10);}// TODO: parse dateFields into date format?\nreturn decodeURIComponent(rawValue);}function addDefaultsToObject(config,params){return _objectSpread(_objectSpread({},config.defaultParams),params);}export{addDefaultsToObject as _addDefaultsToObject};/**\n * Convert query param object to url query string\n * Used to encode params for interacting with the api\n * @param {object} query param object\n * @return {string} url query string\n */export var encodeQueryString=function encodeQueryString(params){if(!params)return'';return Object.keys(params).sort().filter(function(key){return params[key]!==null;}).map(function(key){return[key,params[key]];}).map(function(_ref3){var _ref4=_slicedToArray(_ref3,2),key=_ref4[0],value=_ref4[1];return encodeValue(key,value);}).join('&');};function encodeValue(key,value){if(Array.isArray(value)){return value.map(function(val){return\"\".concat(encodeURIComponent(key),\"=\").concat(encodeURIComponent(val));}).join('&');}return\"\".concat(encodeURIComponent(key),\"=\").concat(encodeURIComponent(value));}/**\n * Removes params from the search string and returns the updated list of params\n * @param {object} qs config object (used for getting defaults, current query params etc.)\n * @param {object} object with params from existing search\n * @param {object} object with new params to remove\n * @return {object} query param object\n */export function removeParams(config,oldParams,paramsToRemove){var updated=_objectSpread({},config.defaultParams);Object.keys(oldParams).forEach(function(key){var _config$integerFields;var valToRemove=paramsToRemove[key];var isInt=(_config$integerFields=config.integerFields)===null||_config$integerFields===void 0?void 0:_config$integerFields.includes(key);var updatedValue=removeParam(oldParams[key],isInt?parseInt(valToRemove,10):valToRemove);if(updatedValue==null&&Object.prototype.hasOwnProperty.call(updated,key)){return;}updated[key]=updatedValue;});return updated;}function removeParam(oldVal,deleteVal){if(oldVal===deleteVal){return null;}if(Array.isArray(deleteVal)){return deleteVal.reduce(removeParam,oldVal);}if(Array.isArray(oldVal)){var index=oldVal.indexOf(deleteVal);if(index>-1){oldVal.splice(index,1);}if(oldVal.length===1){return oldVal[0];}}return oldVal;}/**\n * Merge old and new params together, joining values into arrays where necessary\n * @param {object} namespaced params object of old params\n * @param {object} namespaced params object of new params\n * @return {object} merged namespaced params object\n */export function mergeParams(oldParams,newParams){var merged={};Object.keys(oldParams).forEach(function(key){merged[key]=mergeParam(oldParams[key],newParams[key]);});Object.keys(newParams).forEach(function(key){if(!merged[key]){merged[key]=newParams[key];}});return merged;}function mergeParam(oldVal,newVal){if(!newVal&&newVal!==''){return oldVal;}if(!oldVal&&oldVal!==''){return newVal;}var merged;if(Array.isArray(oldVal)){merged=oldVal.concat(newVal);}else{merged=[oldVal].concat(newVal);}return dedupeArray(merged);}function dedupeArray(arr){var deduped=_toConsumableArray(new Set(arr));if(deduped.length===1){return deduped[0];}return deduped;}/**\n * Update namespaced param(s), returning a new query string. Leaves params\n * from other namespaces unaltered\n * @param {object} qs config object for namespacing params, filtering defaults\n * @param {string} the url query string to update\n * @param {object} namespaced params to add or update. use null to indicate\n *        a param that should be deleted from the query string\n * @return {string} url query string\n */export function updateQueryString(config,queryString,newParams){var allParams=parseFullQueryString(queryString);var _ref5=config||{},_ref5$namespace=_ref5.namespace,namespace=_ref5$namespace===void 0?null:_ref5$namespace,_ref5$defaultParams=_ref5.defaultParams,defaultParams=_ref5$defaultParams===void 0?{}:_ref5$defaultParams;Object.keys(newParams).forEach(function(key){var val=newParams[key];var fullKey=namespace?\"\".concat(namespace,\".\").concat(key):key;if(val===null||val===defaultParams[key]){delete allParams[fullKey];}else{allParams[fullKey]=newParams[key];}});return encodeQueryString(allParams);}function parseFullQueryString(){var queryString=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var allParams={};queryString.replace(/^\\?/,'').split('&').map(function(s){return s.split('=');}).forEach(function(_ref6){var _ref7=_slicedToArray(_ref6,2),rawKey=_ref7[0],rawValue=_ref7[1];if(!rawKey){return;}var key=decodeURIComponent(rawKey);var value=decodeURIComponent(rawValue);allParams[key]=mergeParam(allParams[key],value);});return allParams;}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/util/qs.js"],"names":["getQSConfig","namespace","defaultParams","page","page_size","order_by","integerFields","dateFields","Error","parseQueryString","config","queryString","params","stringToObject","addDefaultsToObject","qs","replace","split","map","s","forEach","nsKey","rawValue","namespaceMatches","key","decodeURIComponent","substr","length","value","parseValue","mergeParam","_stringToObject","fieldname","includes","startsWith","some","v","parseInt","_addDefaultsToObject","encodeQueryString","Object","keys","sort","filter","encodeValue","join","Array","isArray","val","encodeURIComponent","removeParams","oldParams","paramsToRemove","updated","valToRemove","isInt","updatedValue","removeParam","prototype","hasOwnProperty","call","oldVal","deleteVal","reduce","index","indexOf","splice","mergeParams","newParams","merged","newVal","concat","dedupeArray","arr","deduped","Set","updateQueryString","allParams","parseFullQueryString","fullKey","rawKey"],"mappings":"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","sourcesContent":["/**\n * Returns queryset config with defaults, if needed\n * @param {string} namespace for appending to url querystring\n * @param {object} default params that are not handled with search (page, page_size and order_by)\n * @param {array} params that are number fields\n * @return {object} query param object\n */\nexport function getQSConfig(\n  namespace,\n  defaultParams = { page: 1, page_size: 5, order_by: 'name' },\n  integerFields = ['page', 'page_size'],\n  dateFields = ['modified', 'created']\n) {\n  if (!namespace) {\n    throw new Error('a QS namespace is required');\n  }\n  // if order_by isn't passed, default to name\n  if (!defaultParams.order_by) {\n    defaultParams.order_by = 'name';\n  }\n  return {\n    namespace,\n    defaultParams,\n    integerFields,\n    dateFields,\n  };\n}\n\n/**\n * Convert url query string to query param object\n * @param {object} qs config object (used for getting defaults, current query params etc.)\n * @param {string} url query string\n * @return {object} query param object\n */\nexport function parseQueryString(config, queryString) {\n  if (!queryString) {\n    return config.defaultParams || {};\n  }\n  const params = stringToObject(config, queryString);\n  return addDefaultsToObject(config, params);\n}\n\nfunction stringToObject(config, qs) {\n  const params = {};\n  qs.replace(/^\\?/, '')\n    .split('&')\n    .map((s) => s.split('='))\n    .forEach(([nsKey, rawValue]) => {\n      if (!nsKey || !namespaceMatches(config.namespace, nsKey)) {\n        return;\n      }\n      const key = config.namespace\n        ? decodeURIComponent(nsKey.substr(config.namespace.length + 1))\n        : decodeURIComponent(nsKey);\n      const value = parseValue(config, key, rawValue);\n      params[key] = mergeParam(params[key], value);\n    });\n  return params;\n}\nexport { stringToObject as _stringToObject };\n\n/**\n * helper function to check the namespace of a param is what you expect\n * @param {string} namespace to append to params\n * @param {object} params object to append namespace to\n * @return {object} params object with namespaced keys\n */\nconst namespaceMatches = (namespace, fieldname) => {\n  if (!namespace) return !fieldname.includes('.');\n\n  return fieldname.startsWith(`${namespace}.`);\n};\n\nfunction parseValue(config, key, rawValue) {\n  if (config.integerFields && config.integerFields.some((v) => v === key)) {\n    return parseInt(rawValue, 10);\n  }\n  // TODO: parse dateFields into date format?\n  return decodeURIComponent(rawValue);\n}\n\nfunction addDefaultsToObject(config, params) {\n  return {\n    ...config.defaultParams,\n    ...params,\n  };\n}\nexport { addDefaultsToObject as _addDefaultsToObject };\n\n/**\n * Convert query param object to url query string\n * Used to encode params for interacting with the api\n * @param {object} query param object\n * @return {string} url query string\n */\nexport const encodeQueryString = (params) => {\n  if (!params) return '';\n\n  return Object.keys(params)\n    .sort()\n    .filter((key) => params[key] !== null)\n    .map((key) => [key, params[key]])\n    .map(([key, value]) => encodeValue(key, value))\n    .join('&');\n};\n\nfunction encodeValue(key, value) {\n  if (Array.isArray(value)) {\n    return value\n      .map((val) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`)\n      .join('&');\n  }\n  return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n}\n\n/**\n * Removes params from the search string and returns the updated list of params\n * @param {object} qs config object (used for getting defaults, current query params etc.)\n * @param {object} object with params from existing search\n * @param {object} object with new params to remove\n * @return {object} query param object\n */\nexport function removeParams(config, oldParams, paramsToRemove) {\n  const updated = {\n    ...config.defaultParams,\n  };\n  Object.keys(oldParams).forEach((key) => {\n    const valToRemove = paramsToRemove[key];\n    const isInt = config.integerFields?.includes(key);\n    const updatedValue = removeParam(\n      oldParams[key],\n      isInt ? parseInt(valToRemove, 10) : valToRemove\n    );\n    if (\n      updatedValue == null &&\n      Object.prototype.hasOwnProperty.call(updated, key)\n    ) {\n      return;\n    }\n    updated[key] = updatedValue;\n  });\n  return updated;\n}\n\nfunction removeParam(oldVal, deleteVal) {\n  if (oldVal === deleteVal) {\n    return null;\n  }\n  if (Array.isArray(deleteVal)) {\n    return deleteVal.reduce(removeParam, oldVal);\n  }\n  if (Array.isArray(oldVal)) {\n    const index = oldVal.indexOf(deleteVal);\n    if (index > -1) {\n      oldVal.splice(index, 1);\n    }\n    if (oldVal.length === 1) {\n      return oldVal[0];\n    }\n  }\n  return oldVal;\n}\n\n/**\n * Merge old and new params together, joining values into arrays where necessary\n * @param {object} namespaced params object of old params\n * @param {object} namespaced params object of new params\n * @return {object} merged namespaced params object\n */\nexport function mergeParams(oldParams, newParams) {\n  const merged = {};\n  Object.keys(oldParams).forEach((key) => {\n    merged[key] = mergeParam(oldParams[key], newParams[key]);\n  });\n  Object.keys(newParams).forEach((key) => {\n    if (!merged[key]) {\n      merged[key] = newParams[key];\n    }\n  });\n  return merged;\n}\n\nfunction mergeParam(oldVal, newVal) {\n  if (!newVal && newVal !== '') {\n    return oldVal;\n  }\n  if (!oldVal && oldVal !== '') {\n    return newVal;\n  }\n  let merged;\n  if (Array.isArray(oldVal)) {\n    merged = oldVal.concat(newVal);\n  } else {\n    merged = [oldVal].concat(newVal);\n  }\n  return dedupeArray(merged);\n}\n\nfunction dedupeArray(arr) {\n  const deduped = [...new Set(arr)];\n  if (deduped.length === 1) {\n    return deduped[0];\n  }\n  return deduped;\n}\n\n/**\n * Update namespaced param(s), returning a new query string. Leaves params\n * from other namespaces unaltered\n * @param {object} qs config object for namespacing params, filtering defaults\n * @param {string} the url query string to update\n * @param {object} namespaced params to add or update. use null to indicate\n *        a param that should be deleted from the query string\n * @return {string} url query string\n */\nexport function updateQueryString(config, queryString, newParams) {\n  const allParams = parseFullQueryString(queryString);\n  const { namespace = null, defaultParams = {} } = config || {};\n  Object.keys(newParams).forEach((key) => {\n    const val = newParams[key];\n    const fullKey = namespace ? `${namespace}.${key}` : key;\n    if (val === null || val === defaultParams[key]) {\n      delete allParams[fullKey];\n    } else {\n      allParams[fullKey] = newParams[key];\n    }\n  });\n  return encodeQueryString(allParams);\n}\n\nfunction parseFullQueryString(queryString = '') {\n  const allParams = {};\n  queryString\n    .replace(/^\\?/, '')\n    .split('&')\n    .map((s) => s.split('='))\n    .forEach(([rawKey, rawValue]) => {\n      if (!rawKey) {\n        return;\n      }\n      const key = decodeURIComponent(rawKey);\n      const value = decodeURIComponent(rawValue);\n      allParams[key] = mergeParam(allParams[key], value);\n    });\n  return allParams;\n}\n"]},"metadata":{},"sourceType":"module"}