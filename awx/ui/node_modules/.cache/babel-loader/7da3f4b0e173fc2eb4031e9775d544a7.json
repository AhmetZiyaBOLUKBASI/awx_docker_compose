{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport modalStyles from '@patternfly/react-styles/css/components/ModalBox/modal-box';\nimport { css } from '@patternfly/react-styles';\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { capitalize } from '../../helpers';\nimport { Tooltip } from '../Tooltip';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport { useIsomorphicLayoutEffect } from '../../helpers';\nexport var isVariantIcon = function isVariantIcon(icon) {\n  return ['success', 'danger', 'warning', 'info', 'default'].includes(icon);\n};\nexport var ModalBoxTitle = function ModalBoxTitle(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      id = _a.id,\n      title = _a.title,\n      titleIconVariant = _a.titleIconVariant,\n      _a$titleLabel = _a.titleLabel,\n      titleLabel = _a$titleLabel === void 0 ? '' : _a$titleLabel,\n      props = __rest(_a, [\"className\", \"id\", \"title\", \"titleIconVariant\", \"titleLabel\"]);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      hasTooltip = _React$useState2[0],\n      setHasTooltip = _React$useState2[1];\n\n  var h1 = React.useRef();\n  var label = titleLabel || (isVariantIcon(titleIconVariant) ? \"\".concat(capitalize(titleIconVariant), \" alert:\") : titleLabel);\n  var variantIcons = {\n    success: React.createElement(CheckCircleIcon, null),\n    danger: React.createElement(ExclamationCircleIcon, null),\n    warning: React.createElement(ExclamationTriangleIcon, null),\n    info: React.createElement(InfoCircleIcon, null),\n    default: React.createElement(BellIcon, null)\n  };\n  var CustomIcon = !isVariantIcon(titleIconVariant) && titleIconVariant;\n  useIsomorphicLayoutEffect(function () {\n    setHasTooltip(h1.current && h1.current.offsetWidth < h1.current.scrollWidth);\n  }, []);\n  var content = React.createElement(\"h1\", Object.assign({\n    id: id,\n    ref: h1,\n    className: css(modalStyles.modalBoxTitle, titleIconVariant && modalStyles.modifiers.icon, className)\n  }, props), titleIconVariant && React.createElement(\"span\", {\n    className: css(modalStyles.modalBoxTitleIcon)\n  }, isVariantIcon(titleIconVariant) ? variantIcons[titleIconVariant] : React.createElement(CustomIcon, null)), label && React.createElement(\"span\", {\n    className: css(accessibleStyles.screenReader)\n  }, label), React.createElement(\"span\", {\n    className: css(modalStyles.modalBoxTitleText)\n  }, title));\n  return hasTooltip ? React.createElement(Tooltip, {\n    content: title\n  }, content) : content;\n};\nModalBoxTitle.displayName = 'ModalBoxTitle';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Modal/ModalBoxTitle.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport modalStyles from '@patternfly/react-styles/css/components/ModalBox/modal-box';\nimport { css } from '@patternfly/react-styles';\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { capitalize } from '../../helpers';\nimport { Tooltip } from '../Tooltip';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport { useIsomorphicLayoutEffect } from '../../helpers';\n\nexport const isVariantIcon = (icon: any): icon is string =>\n  ['success', 'danger', 'warning', 'info', 'default'].includes(icon as string);\n\nexport interface ModalBoxTitleProps {\n  /** Content rendered inside the modal box header title. */\n  title: React.ReactNode;\n  /** Optional alert icon (or other) to show before the title of the Modal Header\n   * When the predefined alert types are used the default styling\n   * will be automatically applied */\n  titleIconVariant?: 'success' | 'danger' | 'warning' | 'info' | 'default' | React.ComponentType<any>;\n  /** Optional title label text for screen readers */\n  titleLabel?: string;\n  /** Additional classes added to the modal box header title. */\n  className?: string;\n  /** id of the modal box header title. */\n  id: string;\n}\n\nexport const ModalBoxTitle: React.FunctionComponent<ModalBoxTitleProps> = ({\n  className = '',\n  id,\n  title,\n  titleIconVariant,\n  titleLabel = '',\n  ...props\n}: ModalBoxTitleProps) => {\n  const [hasTooltip, setHasTooltip] = React.useState(false);\n  const h1 = React.useRef<HTMLHeadingElement>();\n  const label = titleLabel || (isVariantIcon(titleIconVariant) ? `${capitalize(titleIconVariant)} alert:` : titleLabel);\n  const variantIcons = {\n    success: <CheckCircleIcon />,\n    danger: <ExclamationCircleIcon />,\n    warning: <ExclamationTriangleIcon />,\n    info: <InfoCircleIcon />,\n    default: <BellIcon />\n  };\n  const CustomIcon = !isVariantIcon(titleIconVariant) && titleIconVariant;\n\n  useIsomorphicLayoutEffect(() => {\n    setHasTooltip(h1.current && h1.current.offsetWidth < h1.current.scrollWidth);\n  }, []);\n\n  const content = (\n    <h1\n      id={id}\n      ref={h1}\n      className={css(modalStyles.modalBoxTitle, titleIconVariant && modalStyles.modifiers.icon, className)}\n      {...props}\n    >\n      {titleIconVariant && (\n        <span className={css(modalStyles.modalBoxTitleIcon)}>\n          {isVariantIcon(titleIconVariant) ? variantIcons[titleIconVariant] : <CustomIcon />}\n        </span>\n      )}\n      {label && <span className={css(accessibleStyles.screenReader)}>{label}</span>}\n      <span className={css(modalStyles.modalBoxTitleText)}>{title}</span>\n    </h1>\n  );\n\n  return hasTooltip ? <Tooltip content={title}>{content}</Tooltip> : content;\n};\nModalBoxTitle.displayName = 'ModalBoxTitle';\n"]},"metadata":{},"sourceType":"module"}