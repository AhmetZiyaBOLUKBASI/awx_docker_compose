{"ast":null,"code":"import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";var _excluded=[\"inputs\",\"organization\",\"passwordPrompts\"];import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import React,{useCallback,useEffect,useState}from'react';import{useHistory,useParams}from'react-router-dom';import{CardBody}from'components/Card';import{CredentialsAPI,CredentialInputSourcesAPI,CredentialTypesAPI,OrganizationsAPI,UsersAPI}from'api';import ContentError from'components/ContentError';import ContentLoading from'components/ContentLoading';import useRequest from'hooks/useRequest';import{useConfig}from'contexts/Config';import{Credential}from'types';import CredentialForm from'../shared/CredentialForm';import{jsx as _jsx}from\"react/jsx-runtime\";function CredentialEdit(_ref){var credential=_ref.credential;var history=useHistory();var _useParams=useParams(),credId=_useParams.id;var _useConfig=useConfig(),_useConfig$me=_useConfig.me,me=_useConfig$me===void 0?{}:_useConfig$me;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isOrgLookupDisabled=_useState2[0],setIsOrgLookupDisabled=_useState2[1];var _useRequest=useRequest(useCallback(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(values,credentialTypesMap,inputSourceMap){var credentialTypeInputs,inputs,organization,passwordPrompts,remainingValues,nonPluginInputs,pluginInputs,possibleFields,createAndUpdateInputSources,destroyInputSources,modifiedData,_yield$Promise$all,_yield$Promise$all2,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:credentialTypeInputs=credentialTypesMap[values.credential_type].inputs;inputs=values.inputs,organization=values.organization,passwordPrompts=values.passwordPrompts,remainingValues=_objectWithoutProperties(values,_excluded);nonPluginInputs={};pluginInputs={};possibleFields=credentialTypeInputs.fields||[];possibleFields.forEach(function(field){var input=inputs[field.id];if(input!==null&&input!==void 0&&input.credential&&input!==null&&input!==void 0&&input.inputs){pluginInputs[field.id]=input;}else if(passwordPrompts[field.id]){nonPluginInputs[field.id]='ASK';}else{nonPluginInputs[field.id]=input;}});createAndUpdateInputSources=function createAndUpdateInputSources(){return Object.entries(pluginInputs).map(function(_ref3){var _ref4=_slicedToArray(_ref3,2),fieldName=_ref4[0],fieldValue=_ref4[1];if(!inputSourceMap[fieldName]){return CredentialInputSourcesAPI.create({input_field_name:fieldName,metadata:fieldValue.inputs,source_credential:fieldValue.credential.id,target_credential:credId});}if(fieldValue.touched){return CredentialInputSourcesAPI.update(inputSourceMap[fieldName].id,{metadata:fieldValue.inputs,source_credential:fieldValue.credential.id});}return null;});};destroyInputSources=function destroyInputSources(){return Object.values(inputSourceMap).map(function(inputSource){var _inputs$input_field_n;var id=inputSource.id,input_field_name=inputSource.input_field_name;if(!((_inputs$input_field_n=inputs[input_field_name])!==null&&_inputs$input_field_n!==void 0&&_inputs$input_field_n.credential)){return CredentialInputSourcesAPI.destroy(id);}return null;});};modifiedData=_objectSpread({inputs:nonPluginInputs},remainingValues);// can send only one of org, user, team\n// can send only one of org, user, team\nif(organization!==null&&organization!==void 0&&organization.id){modifiedData.organization=organization.id;}else{modifiedData.organization=null;if(me!==null&&me!==void 0&&me.id){modifiedData.user=me.id;}}_context.next=12;return Promise.all([CredentialsAPI.update(credId,modifiedData)].concat(_toConsumableArray(destroyInputSources())));case 12:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,1);data=_yield$Promise$all2[0].data;_context.next=17;return Promise.all(createAndUpdateInputSources());case 17:return _context.abrupt(\"return\",data);case 18:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2,_x3){return _ref2.apply(this,arguments);};}(),[me,credId])),submitError=_useRequest.error,submitRequest=_useRequest.request,result=_useRequest.result;useEffect(function(){if(result){history.push(\"/credentials/\".concat(result.id,\"/details\"));}},[result,history]);var _useRequest2=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _yield$Promise$all3,_yield$Promise$all4,data,results,adminOrgCount,credentialAdminCount,credTypes,_yield$CredentialType,additionalCredTypes,creds,inputSources;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return Promise.all([CredentialTypesAPI.read({page_size:200}),CredentialsAPI.readInputSources(credId),UsersAPI.readAdminOfOrganizations(me.id),OrganizationsAPI.read({page_size:1,role_level:'credential_admin_role'})]);case 2:_yield$Promise$all3=_context2.sent;_yield$Promise$all4=_slicedToArray(_yield$Promise$all3,4);data=_yield$Promise$all4[0].data;results=_yield$Promise$all4[1].data.results;adminOrgCount=_yield$Promise$all4[2].data.count;credentialAdminCount=_yield$Promise$all4[3].data.count;setIsOrgLookupDisabled(!(adminOrgCount||credentialAdminCount));credTypes=data.results;if(!(data.next&&data.next.includes('page=2'))){_context2.next=16;break;}_context2.next=13;return CredentialTypesAPI.read({page_size:200,page:2});case 13:_yield$CredentialType=_context2.sent;additionalCredTypes=_yield$CredentialType.data.results;credTypes.concat(_toConsumableArray(additionalCredTypes));case 16:creds=credTypes.reduce(function(credentialTypesMap,credentialType){credentialTypesMap[credentialType.id]=credentialType;return credentialTypesMap;},{});inputSources=results.reduce(function(inputSourcesMap,inputSource){inputSourcesMap[inputSource.input_field_name]=inputSource;return inputSourcesMap;},{});return _context2.abrupt(\"return\",{credentialTypes:creds,loadedInputSources:inputSources});case 19:case\"end\":return _context2.stop();}}},_callee2);})),[credId,me.id]),{}),isLoading=_useRequest2.isLoading,error=_useRequest2.error,loadData=_useRequest2.request,_useRequest2$result=_useRequest2.result,credentialTypes=_useRequest2$result.credentialTypes,loadedInputSources=_useRequest2$result.loadedInputSources;useEffect(function(){loadData();},[loadData]);var handleCancel=function handleCancel(){var url=\"/credentials/\".concat(credId,\"/details\");history.push(\"\".concat(url));};var handleSubmit=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(values){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return submitRequest(values,credentialTypes,loadedInputSources);case 2:case\"end\":return _context3.stop();}}},_callee3);}));return function handleSubmit(_x4){return _ref6.apply(this,arguments);};}();if(error){return/*#__PURE__*/_jsx(ContentError,{error:error});}if(isLoading||!credentialTypes){return/*#__PURE__*/_jsx(ContentLoading,{});}return/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(CredentialForm,{onCancel:handleCancel,onSubmit:handleSubmit,credential:credential,credentialTypes:credentialTypes,inputSources:loadedInputSources,submitError:submitError,isOrgLookupDisabled:isOrgLookupDisabled})});}export{CredentialEdit as _CredentialEdit};export default CredentialEdit;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Credential/CredentialEdit/CredentialEdit.js"],"names":["React","useCallback","useEffect","useState","useHistory","useParams","CardBody","CredentialsAPI","CredentialInputSourcesAPI","CredentialTypesAPI","OrganizationsAPI","UsersAPI","ContentError","ContentLoading","useRequest","useConfig","Credential","CredentialForm","CredentialEdit","credential","history","credId","id","me","isOrgLookupDisabled","setIsOrgLookupDisabled","values","credentialTypesMap","inputSourceMap","credentialTypeInputs","credential_type","inputs","organization","passwordPrompts","remainingValues","nonPluginInputs","pluginInputs","possibleFields","fields","forEach","field","input","createAndUpdateInputSources","Object","entries","map","fieldName","fieldValue","create","input_field_name","metadata","source_credential","target_credential","touched","update","destroyInputSources","inputSource","destroy","modifiedData","user","Promise","all","data","submitError","error","submitRequest","request","result","push","read","page_size","readInputSources","readAdminOfOrganizations","role_level","results","adminOrgCount","count","credentialAdminCount","credTypes","next","includes","page","additionalCredTypes","concat","creds","reduce","credentialType","inputSources","inputSourcesMap","credentialTypes","loadedInputSources","isLoading","loadData","handleCancel","url","handleSubmit","_CredentialEdit"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { CardBody } from 'components/Card';\nimport {\n  CredentialsAPI,\n  CredentialInputSourcesAPI,\n  CredentialTypesAPI,\n  OrganizationsAPI,\n  UsersAPI,\n} from 'api';\nimport ContentError from 'components/ContentError';\nimport ContentLoading from 'components/ContentLoading';\nimport useRequest from 'hooks/useRequest';\nimport { useConfig } from 'contexts/Config';\nimport { Credential } from 'types';\nimport CredentialForm from '../shared/CredentialForm';\n\nfunction CredentialEdit({ credential }) {\n  const history = useHistory();\n  const { id: credId } = useParams();\n  const { me = {} } = useConfig();\n  const [isOrgLookupDisabled, setIsOrgLookupDisabled] = useState(false);\n\n  const {\n    error: submitError,\n    request: submitRequest,\n    result,\n  } = useRequest(\n    useCallback(\n      async (values, credentialTypesMap, inputSourceMap) => {\n        const { inputs: credentialTypeInputs } =\n          credentialTypesMap[values.credential_type];\n\n        const { inputs, organization, passwordPrompts, ...remainingValues } =\n          values;\n\n        const nonPluginInputs = {};\n        const pluginInputs = {};\n        const possibleFields = credentialTypeInputs.fields || [];\n\n        possibleFields.forEach((field) => {\n          const input = inputs[field.id];\n          if (input?.credential && input?.inputs) {\n            pluginInputs[field.id] = input;\n          } else if (passwordPrompts[field.id]) {\n            nonPluginInputs[field.id] = 'ASK';\n          } else {\n            nonPluginInputs[field.id] = input;\n          }\n        });\n\n        const createAndUpdateInputSources = () =>\n          Object.entries(pluginInputs).map(([fieldName, fieldValue]) => {\n            if (!inputSourceMap[fieldName]) {\n              return CredentialInputSourcesAPI.create({\n                input_field_name: fieldName,\n                metadata: fieldValue.inputs,\n                source_credential: fieldValue.credential.id,\n                target_credential: credId,\n              });\n            }\n            if (fieldValue.touched) {\n              return CredentialInputSourcesAPI.update(\n                inputSourceMap[fieldName].id,\n                {\n                  metadata: fieldValue.inputs,\n                  source_credential: fieldValue.credential.id,\n                }\n              );\n            }\n\n            return null;\n          });\n\n        const destroyInputSources = () =>\n          Object.values(inputSourceMap).map((inputSource) => {\n            const { id, input_field_name } = inputSource;\n            if (!inputs[input_field_name]?.credential) {\n              return CredentialInputSourcesAPI.destroy(id);\n            }\n            return null;\n          });\n\n        const modifiedData = { inputs: nonPluginInputs, ...remainingValues };\n        // can send only one of org, user, team\n        if (organization?.id) {\n          modifiedData.organization = organization.id;\n        } else {\n          modifiedData.organization = null;\n          if (me?.id) {\n            modifiedData.user = me.id;\n          }\n        }\n        const [{ data }] = await Promise.all([\n          CredentialsAPI.update(credId, modifiedData),\n          ...destroyInputSources(),\n        ]);\n\n        await Promise.all(createAndUpdateInputSources());\n\n        return data;\n      },\n      [me, credId]\n    )\n  );\n\n  useEffect(() => {\n    if (result) {\n      history.push(`/credentials/${result.id}/details`);\n    }\n  }, [result, history]);\n  const {\n    isLoading,\n    error,\n    request: loadData,\n    result: { credentialTypes, loadedInputSources },\n  } = useRequest(\n    useCallback(async () => {\n      const [\n        { data },\n        {\n          data: { results },\n        },\n        {\n          data: { count: adminOrgCount },\n        },\n        {\n          data: { count: credentialAdminCount },\n        },\n      ] = await Promise.all([\n        CredentialTypesAPI.read({ page_size: 200 }),\n        CredentialsAPI.readInputSources(credId),\n        UsersAPI.readAdminOfOrganizations(me.id),\n        OrganizationsAPI.read({\n          page_size: 1,\n          role_level: 'credential_admin_role',\n        }),\n      ]);\n      setIsOrgLookupDisabled(!(adminOrgCount || credentialAdminCount));\n      const credTypes = data.results;\n      if (data.next && data.next.includes('page=2')) {\n        const {\n          data: { results: additionalCredTypes },\n        } = await CredentialTypesAPI.read({\n          page_size: 200,\n          page: 2,\n        });\n        credTypes.concat([...additionalCredTypes]);\n      }\n      const creds = credTypes.reduce((credentialTypesMap, credentialType) => {\n        credentialTypesMap[credentialType.id] = credentialType;\n        return credentialTypesMap;\n      }, {});\n      const inputSources = results.reduce((inputSourcesMap, inputSource) => {\n        inputSourcesMap[inputSource.input_field_name] = inputSource;\n        return inputSourcesMap;\n      }, {});\n      return { credentialTypes: creds, loadedInputSources: inputSources };\n    }, [credId, me.id]),\n    {}\n  );\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  const handleCancel = () => {\n    const url = `/credentials/${credId}/details`;\n    history.push(`${url}`);\n  };\n\n  const handleSubmit = async (values) => {\n    await submitRequest(values, credentialTypes, loadedInputSources);\n  };\n\n  if (error) {\n    return <ContentError error={error} />;\n  }\n\n  if (isLoading || !credentialTypes) {\n    return <ContentLoading />;\n  }\n\n  return (\n    <CardBody>\n      <CredentialForm\n        onCancel={handleCancel}\n        onSubmit={handleSubmit}\n        credential={credential}\n        credentialTypes={credentialTypes}\n        inputSources={loadedInputSources}\n        submitError={submitError}\n        isOrgLookupDisabled={isOrgLookupDisabled}\n      />\n    </CardBody>\n  );\n}\n\nCredentialEdit.propTypes = {\n  credential: Credential.isRequired,\n};\n\nexport { CredentialEdit as _CredentialEdit };\nexport default CredentialEdit;\n"]},"metadata":{},"sourceType":"module"}