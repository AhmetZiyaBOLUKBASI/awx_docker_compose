{"ast":null,"code":"import getNodeName from '../dom-utils/getNodeName';\nimport { isHTMLElement } from '../dom-utils/instanceOf'; // This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\n\n/**\n *\n */\n\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function (name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    } // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function (name) {\n      var value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n/**\n *\n */\n\n\nfunction effect(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return function () {\n    Object.keys(state.elements).forEach(function (name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      var style = styleProperties.reduce(function (style, property) {\n        style[property] = '';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      } // Flow doesn't support to extend this property, but it's the most\n      // effective way to apply styles to an HTMLElement\n      // $FlowFixMe\n\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n}\n\nexport default {\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect: effect,\n  requires: ['computeStyles']\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/modifiers/applyStyles.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { Modifier, ModifierArguments } from '../types';\nimport getNodeName from '../dom-utils/getNodeName';\nimport { isHTMLElement } from '../dom-utils/instanceOf';\n\n// This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\n\n/**\n *\n */\nfunction applyStyles({ state }: ModifierArguments<{}>) {\n  Object.keys(state.elements).forEach(name => {\n    const style = state.styles[name] || {};\n\n    const attributes = state.attributes[name] || {};\n    const element = state.elements[name];\n\n    // arrow is optional + virtual elements\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    }\n\n    // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe\n    Object.assign(element.style, style);\n\n    Object.keys(attributes).forEach(name => {\n      const value = attributes[name];\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n\n/**\n *\n */\nfunction effect({ state }: ModifierArguments<{}>) {\n  const initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return () => {\n    Object.keys(state.elements).forEach(name => {\n      const element = state.elements[name];\n      const attributes = state.attributes[name] || {};\n\n      const styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);\n\n      // Set all values to an empty string to unset them\n      const style = styleProperties.reduce((style, property) => {\n        style[property] = '';\n        return style;\n      }, {});\n\n      // arrow is optional + virtual elements\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      }\n\n      // Flow doesn't support to extend this property, but it's the most\n      // effective way to apply styles to an HTMLElement\n      // $FlowFixMe\n      Object.assign(element.style, style);\n\n      Object.keys(attributes).forEach(attribute => {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n}\n\n// eslint-disable-next-line import/no-unused-modules\nexport type ApplyStylesModifier = Modifier<'applyStyles', {}>;\nexport default {\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect,\n  requires: ['computeStyles']\n} as ApplyStylesModifier;\n"]},"metadata":{},"sourceType":"module"}