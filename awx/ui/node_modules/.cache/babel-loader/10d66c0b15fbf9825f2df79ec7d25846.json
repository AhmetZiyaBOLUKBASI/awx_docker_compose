{"ast":null,"code":"import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{i18n}from\"@lingui/core\";import React,{useEffect,useCallback}from'react';import{Link,Redirect,Route,Switch,useLocation,useParams}from'react-router-dom';import{Card,PageSection}from'@patternfly/react-core';import{CaretLeftIcon}from'@patternfly/react-icons';import useRequest from'hooks/useRequest';import{CredentialTypesAPI}from'api';import RoutedTabs from'components/RoutedTabs';import ContentError from'components/ContentError';import ContentLoading from'components/ContentLoading';import CredentialTypeDetails from'./CredentialTypeDetails';import CredentialTypeEdit from'./CredentialTypeEdit';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CredentialType(_ref){var setBreadcrumb=_ref.setBreadcrumb;var _useParams=useParams(),id=_useParams.id;var _useLocation=useLocation(),pathname=_useLocation.pathname;var _useRequest=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$CredentialType,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return CredentialTypesAPI.readDetail(id);case 2:_yield$CredentialType=_context.sent;data=_yield$CredentialType.data;return _context.abrupt(\"return\",data);case 5:case\"end\":return _context.stop();}}},_callee);})),[id])),isLoading=_useRequest.isLoading,contentError=_useRequest.error,fetchCredentialTypes=_useRequest.request,credentialType=_useRequest.result;useEffect(function(){fetchCredentialTypes();},[fetchCredentialTypes,pathname]);useEffect(function(){if(credentialType){setBreadcrumb(credentialType);}},[credentialType,setBreadcrumb]);var tabsArray=[{name:/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(CaretLeftIcon,{}),/*i18n*/i18n._(\"Back to credential types\")]}),link:'/credential_types',id:99,isBackButton:true},{name:/*i18n*/i18n._(\"Details\"),link:\"/credential_types/\".concat(id,\"/details\"),id:0}];if(!isLoading&&contentError){var _contentError$respons;return/*#__PURE__*/_jsx(PageSection,{children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(ContentError,{error:contentError,children:((_contentError$respons=contentError.response)===null||_contentError$respons===void 0?void 0:_contentError$respons.status)===404&&/*#__PURE__*/_jsxs(\"span\",{children:[/*i18n*/i18n._(\"Credential type not found.\"),' ',/*#__PURE__*/_jsx(Link,{to:\"/credential_types\",children:/*i18n*/i18n._(\"View all credential types\")})]})})})});}var cardHeader=/*#__PURE__*/_jsx(RoutedTabs,{tabsArray:tabsArray});if(pathname.endsWith('edit')){cardHeader=null;}return/*#__PURE__*/_jsx(PageSection,{children:/*#__PURE__*/_jsxs(Card,{children:[cardHeader,isLoading&&/*#__PURE__*/_jsx(ContentLoading,{}),!isLoading&&credentialType&&/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsx(Redirect,{from:\"/credential_types/:id\",to:\"/credential_types/:id/details\",exact:true}),credentialType&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Route,{path:\"/credential_types/:id/edit\",children:/*#__PURE__*/_jsx(CredentialTypeEdit,{credentialType:credentialType})}),/*#__PURE__*/_jsx(Route,{path:\"/credential_types/:id/details\",children:/*#__PURE__*/_jsx(CredentialTypeDetails,{credentialType:credentialType})})]})]})]})});}export default CredentialType;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/CredentialType/CredentialType.js"],"names":["React","useEffect","useCallback","Link","Redirect","Route","Switch","useLocation","useParams","Card","PageSection","CaretLeftIcon","useRequest","CredentialTypesAPI","RoutedTabs","ContentError","ContentLoading","CredentialTypeDetails","CredentialTypeEdit","CredentialType","setBreadcrumb","id","pathname","readDetail","data","isLoading","contentError","error","fetchCredentialTypes","request","credentialType","result","tabsArray","name","link","isBackButton","response","status","cardHeader","endsWith"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback } from 'react';\nimport {\n  Link,\n  Redirect,\n  Route,\n  Switch,\n  useLocation,\n  useParams,\n} from 'react-router-dom';\n\nimport { t } from '@lingui/macro';\nimport { Card, PageSection } from '@patternfly/react-core';\nimport { CaretLeftIcon } from '@patternfly/react-icons';\n\nimport useRequest from 'hooks/useRequest';\nimport { CredentialTypesAPI } from 'api';\nimport RoutedTabs from 'components/RoutedTabs';\nimport ContentError from 'components/ContentError';\nimport ContentLoading from 'components/ContentLoading';\n\nimport CredentialTypeDetails from './CredentialTypeDetails';\nimport CredentialTypeEdit from './CredentialTypeEdit';\n\nfunction CredentialType({ setBreadcrumb }) {\n  const { id } = useParams();\n  const { pathname } = useLocation();\n\n  const {\n    isLoading,\n    error: contentError,\n    request: fetchCredentialTypes,\n    result: credentialType,\n  } = useRequest(\n    useCallback(async () => {\n      const { data } = await CredentialTypesAPI.readDetail(id);\n      return data;\n    }, [id])\n  );\n\n  useEffect(() => {\n    fetchCredentialTypes();\n  }, [fetchCredentialTypes, pathname]);\n\n  useEffect(() => {\n    if (credentialType) {\n      setBreadcrumb(credentialType);\n    }\n  }, [credentialType, setBreadcrumb]);\n\n  const tabsArray = [\n    {\n      name: (\n        <>\n          <CaretLeftIcon />\n          {t`Back to credential types`}\n        </>\n      ),\n      link: '/credential_types',\n      id: 99,\n      isBackButton: true,\n    },\n    {\n      name: t`Details`,\n      link: `/credential_types/${id}/details`,\n      id: 0,\n    },\n  ];\n\n  if (!isLoading && contentError) {\n    return (\n      <PageSection>\n        <Card>\n          <ContentError error={contentError}>\n            {contentError.response?.status === 404 && (\n              <span>\n                {t`Credential type not found.`}{' '}\n                <Link to=\"/credential_types\">\n                  {t`View all credential types`}\n                </Link>\n              </span>\n            )}\n          </ContentError>\n        </Card>\n      </PageSection>\n    );\n  }\n\n  let cardHeader = <RoutedTabs tabsArray={tabsArray} />;\n  if (pathname.endsWith('edit')) {\n    cardHeader = null;\n  }\n\n  return (\n    <PageSection>\n      <Card>\n        {cardHeader}\n        {isLoading && <ContentLoading />}\n        {!isLoading && credentialType && (\n          <Switch>\n            <Redirect\n              from=\"/credential_types/:id\"\n              to=\"/credential_types/:id/details\"\n              exact\n            />\n            {credentialType && (\n              <>\n                <Route path=\"/credential_types/:id/edit\">\n                  <CredentialTypeEdit credentialType={credentialType} />\n                </Route>\n                <Route path=\"/credential_types/:id/details\">\n                  <CredentialTypeDetails credentialType={credentialType} />\n                </Route>\n              </>\n            )}\n          </Switch>\n        )}\n      </Card>\n    </PageSection>\n  );\n}\n\nexport default CredentialType;\n"]},"metadata":{},"sourceType":"module"}