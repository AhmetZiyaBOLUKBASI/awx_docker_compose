{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { SelectVariant, SelectFooterTabbableItems } from './selectConstants';\nimport { findTabbableElements } from '../../helpers/util';\nimport { KeyTypes } from '../../helpers/constants';\nexport var SelectToggle = /*#__PURE__*/function (_React$Component) {\n  _inherits(SelectToggle, _React$Component);\n\n  var _super = _createSuper(SelectToggle);\n\n  function SelectToggle(props) {\n    var _this;\n\n    _classCallCheck(this, SelectToggle);\n\n    _this = _super.call(this, props);\n\n    _this.onDocClick = function (event) {\n      var _this$props = _this.props,\n          parentRef = _this$props.parentRef,\n          menuRef = _this$props.menuRef,\n          footerRef = _this$props.footerRef,\n          isOpen = _this$props.isOpen,\n          onToggle = _this$props.onToggle,\n          onClose = _this$props.onClose;\n      var clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      var clickedWithinMenu = menuRef && menuRef.current && menuRef.current.contains && menuRef.current.contains(event.target);\n      var clickedWithinFooter = footerRef && footerRef.current && footerRef.current.contains && footerRef.current.contains(event.target);\n\n      if (isOpen && !(clickedOnToggle || clickedWithinMenu || clickedWithinFooter)) {\n        onToggle(false, event);\n        onClose();\n      }\n    };\n\n    _this.handleGlobalKeys = function (event) {\n      var _this$props2 = _this.props,\n          parentRef = _this$props2.parentRef,\n          menuRef = _this$props2.menuRef,\n          hasFooter = _this$props2.hasFooter,\n          footerRef = _this$props2.footerRef,\n          isOpen = _this$props2.isOpen,\n          variant = _this$props2.variant,\n          onToggle = _this$props2.onToggle,\n          onClose = _this$props2.onClose,\n          moveFocusToLastMenuItem = _this$props2.moveFocusToLastMenuItem;\n      var escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      var escFromWithinMenu = menuRef && menuRef.current && menuRef.current.contains && menuRef.current.contains(event.target);\n\n      if (isOpen && event.key === KeyTypes.Tab && (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti)) {\n        _this.props.handleTypeaheadKeys('tab', event.shiftKey);\n\n        event.preventDefault();\n        return;\n      }\n\n      if (isOpen && event.key === KeyTypes.Tab && hasFooter) {\n        var tabbableItems = findTabbableElements(footerRef, SelectFooterTabbableItems); // If no tabbable item in footer close select\n\n        if (tabbableItems.length <= 0) {\n          onToggle(false, event);\n          onClose();\n\n          _this.toggle.current.focus();\n\n          return;\n        } else {\n          // if current element is not in footer, tab to first tabbable element in footer, or close if shift clicked\n          var currentElementIndex = tabbableItems.findIndex(function (item) {\n            return item === document.activeElement;\n          });\n\n          if (currentElementIndex === -1) {\n            if (event.shiftKey) {\n              if (variant !== 'checkbox') {\n                // only close non checkbox variation on shift clicked\n                onToggle(false, event);\n                onClose();\n\n                _this.toggle.current.focus();\n              }\n            } else {\n              // tab to footer\n              tabbableItems[0].focus();\n              return;\n            }\n          } // Current element is in footer.\n\n\n          if (event.shiftKey) {\n            // Move focus back to menu if current tab index is 0\n            if (currentElementIndex === 0) {\n              moveFocusToLastMenuItem();\n              event.preventDefault();\n            }\n\n            return;\n          } // Tab to next element in footer or close if there are none\n\n\n          if (currentElementIndex + 1 < tabbableItems.length) {\n            tabbableItems[currentElementIndex + 1].focus();\n          } else {\n            // no more footer items close menu\n            onToggle(false, event);\n            onClose();\n\n            _this.toggle.current.focus();\n          }\n\n          event.preventDefault();\n          return;\n        }\n      }\n\n      if (isOpen && (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) && (escFromToggle || escFromWithinMenu)) {\n        onToggle(false, event);\n        onClose();\n\n        _this.toggle.current.focus();\n      }\n    };\n\n    _this.onKeyDown = function (event) {\n      var _this$props3 = _this.props,\n          isOpen = _this$props3.isOpen,\n          onToggle = _this$props3.onToggle,\n          variant = _this$props3.variant,\n          onClose = _this$props3.onClose,\n          onEnter = _this$props3.onEnter,\n          handleTypeaheadKeys = _this$props3.handleTypeaheadKeys;\n\n      if (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti) {\n        if (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) {\n          handleTypeaheadKeys(event.key === KeyTypes.ArrowDown && 'down' || event.key === KeyTypes.ArrowUp && 'up');\n          event.preventDefault();\n        } else if (event.key === KeyTypes.Enter) {\n          if (isOpen) {\n            handleTypeaheadKeys('enter');\n          } else {\n            onToggle(!isOpen, event);\n          }\n        }\n      }\n\n      if (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti || event.key === KeyTypes.Tab && !isOpen || event.key !== KeyTypes.Enter && event.key !== KeyTypes.Space) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && isOpen) {\n        onToggle(!isOpen, event);\n        onClose();\n\n        _this.toggle.current.focus();\n      } else if ((event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && !isOpen) {\n        onToggle(!isOpen, event);\n        onEnter();\n      }\n    };\n\n    var variant = props.variant;\n    var isTypeahead = variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti;\n    _this.toggle = isTypeahead ? React.createRef() : React.createRef();\n    return _this;\n  }\n\n  _createClass(SelectToggle, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('click', this.onDocClick, {\n        capture: true\n      });\n      document.addEventListener('touchstart', this.onDocClick);\n      document.addEventListener('keydown', this.handleGlobalKeys);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('click', this.onDocClick);\n      document.removeEventListener('touchstart', this.onDocClick);\n      document.removeEventListener('keydown', this.handleGlobalKeys);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      var _a = this.props,\n          className = _a.className,\n          children = _a.children,\n          isOpen = _a.isOpen,\n          isActive = _a.isActive,\n          isPlain = _a.isPlain,\n          isDisabled = _a.isDisabled,\n          hasPlaceholderStyle = _a.hasPlaceholderStyle,\n          variant = _a.variant,\n          onToggle = _a.onToggle,\n          onEnter = _a.onEnter,\n          onClose = _a.onClose,\n          onBlur = _a.onBlur,\n          onClickTypeaheadToggleButton = _a.onClickTypeaheadToggleButton,\n          handleTypeaheadKeys = _a.handleTypeaheadKeys,\n          moveFocusToLastMenuItem = _a.moveFocusToLastMenuItem,\n          parentRef = _a.parentRef,\n          menuRef = _a.menuRef,\n          id = _a.id,\n          type = _a.type,\n          hasClearButton = _a.hasClearButton,\n          ariaLabelledBy = _a['aria-labelledby'],\n          ariaLabel = _a['aria-label'],\n          hasFooter = _a.hasFooter,\n          footerRef = _a.footerRef,\n          props = __rest(_a, [\"className\", \"children\", \"isOpen\", \"isActive\", \"isPlain\", \"isDisabled\", \"hasPlaceholderStyle\", \"variant\", \"onToggle\", \"onEnter\", \"onClose\", \"onBlur\", \"onClickTypeaheadToggleButton\", \"handleTypeaheadKeys\", \"moveFocusToLastMenuItem\", \"parentRef\", \"menuRef\", \"id\", \"type\", \"hasClearButton\", 'aria-labelledby', 'aria-label', \"hasFooter\", \"footerRef\"]);\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n      var isTypeahead = variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti || hasClearButton;\n      var toggleProps = {\n        id: id,\n        'aria-labelledby': ariaLabelledBy,\n        'aria-expanded': isOpen,\n        'aria-haspopup': variant !== SelectVariant.checkbox && 'listbox' || null\n      };\n      return React.createElement(React.Fragment, null, !isTypeahead && React.createElement(\"button\", Object.assign({}, props, toggleProps, {\n        ref: this.toggle,\n        type: type,\n        className: css(styles.selectToggle, hasPlaceholderStyle && styles.modifiers.placeholder, isDisabled && styles.modifiers.disabled, isPlain && styles.modifiers.plain, isActive && styles.modifiers.active, className),\n        \"aria-label\": ariaLabel,\n        onBlur: onBlur,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onClick: function onClick(event) {\n          onToggle(!isOpen, event);\n\n          if (isOpen) {\n            onClose();\n          }\n        },\n        onKeyDown: this.onKeyDown,\n        disabled: isDisabled\n      }), children, React.createElement(\"span\", {\n        className: css(styles.selectToggleArrow)\n      }, React.createElement(CaretDownIcon, null))), isTypeahead && React.createElement(\"div\", Object.assign({}, props, {\n        ref: this.toggle,\n        className: css(styles.selectToggle, hasPlaceholderStyle && styles.modifiers.placeholder, isDisabled && styles.modifiers.disabled, isPlain && styles.modifiers.plain, isTypeahead && styles.modifiers.typeahead, className),\n        onBlur: onBlur,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onClick: function onClick(event) {\n          if (!isDisabled) {\n            onToggle(!isOpen, event);\n\n            if (isOpen) {\n              onClose();\n            }\n          }\n        },\n        onKeyDown: this.onKeyDown\n      }), children, React.createElement(\"button\", Object.assign({}, toggleProps, {\n        type: type,\n        className: css(buttonStyles.button, styles.selectToggleButton, styles.modifiers.plain),\n        \"aria-label\": ariaLabel,\n        onClick: function onClick(event) {\n          onToggle(!isOpen, event);\n\n          if (isOpen) {\n            onClose();\n          }\n\n          onClickTypeaheadToggleButton();\n        }\n      }, (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti) && {\n        tabIndex: -1\n      }, {\n        disabled: isDisabled\n      }), React.createElement(CaretDownIcon, {\n        className: css(styles.selectToggleArrow)\n      }))));\n    }\n  }]);\n\n  return SelectToggle;\n}(React.Component);\nSelectToggle.displayName = 'SelectToggle';\nSelectToggle.defaultProps = {\n  className: '',\n  isOpen: false,\n  isActive: false,\n  isPlain: false,\n  isDisabled: false,\n  hasPlaceholderStyle: false,\n  hasClearButton: false,\n  hasFooter: false,\n  variant: 'single',\n  'aria-labelledby': '',\n  'aria-label': '',\n  type: 'button',\n  onToggle: function onToggle() {},\n  onEnter: function onEnter() {},\n  onClose: function onClose() {},\n  onClickTypeaheadToggleButton: function onClickTypeaheadToggleButton() {}\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Select/SelectToggle.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { SelectVariant, SelectFooterTabbableItems } from './selectConstants';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { findTabbableElements } from '../../helpers/util';\nimport { KeyTypes } from '../../helpers/constants';\n\nexport interface SelectToggleProps extends React.HTMLProps<HTMLElement> {\n  /** HTML ID of dropdown toggle */\n  id: string;\n  /** Anything which can be rendered as dropdown toggle */\n  children: React.ReactNode;\n  /** Classes applied to root element of dropdown toggle */\n  className?: string;\n  /** Flag to indicate if select is open */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (isExpanded: boolean, event: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent | Event) => void;\n  /** Callback for toggle open on keyboard entry */\n  onEnter?: () => void;\n  /** Callback for toggle close */\n  onClose?: () => void;\n  /** Callback for toggle blur */\n  onBlur?: (event?: any) => void;\n  /** @hide Internal callback for toggle keyboard navigation */\n  handleTypeaheadKeys?: (position: string, shiftKey?: boolean) => void;\n  /** @hide Internal callback to move focus to last menu item */\n  moveFocusToLastMenuItem?: () => void;\n  /** Element which wraps toggle */\n  parentRef: React.RefObject<HTMLDivElement>;\n  /** The menu element */\n  menuRef?: React.RefObject<HTMLElement>;\n  /** The menu footer element */\n  footerRef?: React.RefObject<HTMLDivElement>;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Flag indicating if select is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating if placeholder styles should be applied */\n  hasPlaceholderStyle?: boolean;\n  /** Type of the toggle button, defaults to 'button' */\n  type?: 'reset' | 'button' | 'submit' | undefined;\n  /** Id of label for the Select aria-labelledby */\n  'aria-labelledby'?: string;\n  /** Label for toggle of select variants */\n  'aria-label'?: string;\n  /** Flag for variant, determines toggle rules and interaction */\n  variant?: 'single' | 'checkbox' | 'typeahead' | 'typeaheadmulti';\n  /** Flag indicating if select toggle has an clear button */\n  hasClearButton?: boolean;\n  /** Flag indicating if select menu has a footer */\n  hasFooter?: boolean;\n  /** @hide Internal callback for handling focus when typeahead toggle button clicked. */\n  onClickTypeaheadToggleButton?: () => void;\n}\n\nexport class SelectToggle extends React.Component<SelectToggleProps> {\n  static displayName = 'SelectToggle';\n  private toggle: React.RefObject<HTMLDivElement> | React.RefObject<HTMLButtonElement>;\n\n  static defaultProps: PickOptional<SelectToggleProps> = {\n    className: '',\n    isOpen: false,\n    isActive: false,\n    isPlain: false,\n    isDisabled: false,\n    hasPlaceholderStyle: false,\n    hasClearButton: false,\n    hasFooter: false,\n    variant: 'single',\n    'aria-labelledby': '',\n    'aria-label': '',\n    type: 'button',\n    onToggle: () => {},\n    onEnter: () => {},\n    onClose: () => {},\n    onClickTypeaheadToggleButton: () => {}\n  };\n\n  constructor(props: SelectToggleProps) {\n    super(props);\n    const { variant } = props;\n    const isTypeahead = variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti;\n    this.toggle = isTypeahead ? React.createRef<HTMLDivElement>() : React.createRef<HTMLButtonElement>();\n  }\n\n  componentDidMount() {\n    document.addEventListener('click', this.onDocClick, { capture: true });\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.handleGlobalKeys);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.handleGlobalKeys);\n  }\n\n  onDocClick = (event: Event) => {\n    const { parentRef, menuRef, footerRef, isOpen, onToggle, onClose } = this.props;\n    const clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target as Node);\n    const clickedWithinMenu =\n      menuRef && menuRef.current && menuRef.current.contains && menuRef.current.contains(event.target as Node);\n    const clickedWithinFooter =\n      footerRef && footerRef.current && footerRef.current.contains && footerRef.current.contains(event.target as Node);\n\n    if (isOpen && !(clickedOnToggle || clickedWithinMenu || clickedWithinFooter)) {\n      onToggle(false, event);\n      onClose();\n    }\n  };\n\n  handleGlobalKeys = (event: KeyboardEvent) => {\n    const {\n      parentRef,\n      menuRef,\n      hasFooter,\n      footerRef,\n      isOpen,\n      variant,\n      onToggle,\n      onClose,\n      moveFocusToLastMenuItem\n    } = this.props;\n    const escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target as Node);\n    const escFromWithinMenu =\n      menuRef && menuRef.current && menuRef.current.contains && menuRef.current.contains(event.target as Node);\n    if (\n      isOpen &&\n      event.key === KeyTypes.Tab &&\n      (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti)\n    ) {\n      this.props.handleTypeaheadKeys('tab', event.shiftKey);\n      event.preventDefault();\n      return;\n    }\n\n    if (isOpen && event.key === KeyTypes.Tab && hasFooter) {\n      const tabbableItems = findTabbableElements(footerRef, SelectFooterTabbableItems);\n\n      // If no tabbable item in footer close select\n      if (tabbableItems.length <= 0) {\n        onToggle(false, event);\n        onClose();\n        this.toggle.current.focus();\n        return;\n      } else {\n        // if current element is not in footer, tab to first tabbable element in footer, or close if shift clicked\n        const currentElementIndex = tabbableItems.findIndex((item: any) => item === document.activeElement);\n        if (currentElementIndex === -1) {\n          if (event.shiftKey) {\n            if (variant !== 'checkbox') {\n              // only close non checkbox variation on shift clicked\n              onToggle(false, event);\n              onClose();\n              this.toggle.current.focus();\n            }\n          } else {\n            // tab to footer\n            tabbableItems[0].focus();\n            return;\n          }\n        }\n        // Current element is in footer.\n        if (event.shiftKey) {\n          // Move focus back to menu if current tab index is 0\n          if (currentElementIndex === 0) {\n            moveFocusToLastMenuItem();\n            event.preventDefault();\n          }\n          return;\n        }\n        // Tab to next element in footer or close if there are none\n        if (currentElementIndex + 1 < tabbableItems.length) {\n          tabbableItems[currentElementIndex + 1].focus();\n        } else {\n          // no more footer items close menu\n          onToggle(false, event);\n          onClose();\n          this.toggle.current.focus();\n        }\n        event.preventDefault();\n        return;\n      }\n    }\n\n    if (\n      isOpen &&\n      (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) &&\n      (escFromToggle || escFromWithinMenu)\n    ) {\n      onToggle(false, event);\n      onClose();\n      this.toggle.current.focus();\n    }\n  };\n\n  onKeyDown = (event: React.KeyboardEvent) => {\n    const { isOpen, onToggle, variant, onClose, onEnter, handleTypeaheadKeys } = this.props;\n\n    if (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti) {\n      if (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) {\n        handleTypeaheadKeys((event.key === KeyTypes.ArrowDown && 'down') || (event.key === KeyTypes.ArrowUp && 'up'));\n        event.preventDefault();\n      } else if (event.key === KeyTypes.Enter) {\n        if (isOpen) {\n          handleTypeaheadKeys('enter');\n        } else {\n          onToggle(!isOpen, event);\n        }\n      }\n    }\n\n    if (\n      variant === SelectVariant.typeahead ||\n      variant === SelectVariant.typeaheadMulti ||\n      (event.key === KeyTypes.Tab && !isOpen) ||\n      (event.key !== KeyTypes.Enter && event.key !== KeyTypes.Space)\n    ) {\n      return;\n    }\n    event.preventDefault();\n    if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && isOpen) {\n      onToggle(!isOpen, event);\n      onClose();\n      this.toggle.current.focus();\n    } else if ((event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && !isOpen) {\n      onToggle(!isOpen, event);\n      onEnter();\n    }\n  };\n\n  render() {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const {\n      className,\n      children,\n      isOpen,\n      isActive,\n      isPlain,\n      isDisabled,\n      hasPlaceholderStyle,\n      variant,\n      onToggle,\n      onEnter,\n      onClose,\n      onBlur,\n      onClickTypeaheadToggleButton,\n      handleTypeaheadKeys,\n      moveFocusToLastMenuItem,\n      parentRef,\n      menuRef,\n      id,\n      type,\n      hasClearButton,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-label': ariaLabel,\n      hasFooter,\n      footerRef,\n      ...props\n    } = this.props;\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    const isTypeahead =\n      variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti || hasClearButton;\n    const toggleProps: {\n      id: string;\n      'aria-labelledby': string;\n      'aria-expanded': boolean;\n      'aria-haspopup': 'listbox' | null;\n    } = {\n      id,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-expanded': isOpen,\n      'aria-haspopup': (variant !== SelectVariant.checkbox && 'listbox') || null\n    };\n    return (\n      <React.Fragment>\n        {!isTypeahead && (\n          <button\n            {...props}\n            {...toggleProps}\n            ref={this.toggle as React.RefObject<HTMLButtonElement>}\n            type={type}\n            className={css(\n              styles.selectToggle,\n              hasPlaceholderStyle && styles.modifiers.placeholder,\n              isDisabled && styles.modifiers.disabled,\n              isPlain && styles.modifiers.plain,\n              isActive && styles.modifiers.active,\n              className\n            )}\n            aria-label={ariaLabel}\n            onBlur={onBlur}\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onClick={event => {\n              onToggle(!isOpen, event);\n              if (isOpen) {\n                onClose();\n              }\n            }}\n            onKeyDown={this.onKeyDown}\n            disabled={isDisabled}\n          >\n            {children}\n            <span className={css(styles.selectToggleArrow)}>\n              <CaretDownIcon />\n            </span>\n          </button>\n        )}\n        {isTypeahead && (\n          <div\n            {...props}\n            ref={this.toggle as React.RefObject<HTMLDivElement>}\n            className={css(\n              styles.selectToggle,\n              hasPlaceholderStyle && styles.modifiers.placeholder,\n              isDisabled && styles.modifiers.disabled,\n              isPlain && styles.modifiers.plain,\n              isTypeahead && styles.modifiers.typeahead,\n              className\n            )}\n            onBlur={onBlur}\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onClick={event => {\n              if (!isDisabled) {\n                onToggle(!isOpen, event);\n                if (isOpen) {\n                  onClose();\n                }\n              }\n            }}\n            onKeyDown={this.onKeyDown}\n          >\n            {children}\n            <button\n              {...toggleProps}\n              type={type}\n              className={css(buttonStyles.button, styles.selectToggleButton, styles.modifiers.plain)}\n              aria-label={ariaLabel}\n              onClick={event => {\n                onToggle(!isOpen, event);\n                if (isOpen) {\n                  onClose();\n                }\n                onClickTypeaheadToggleButton();\n              }}\n              {...((variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti) && {\n                tabIndex: -1\n              })}\n              disabled={isDisabled}\n            >\n              <CaretDownIcon className={css(styles.selectToggleArrow)} />\n            </button>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}