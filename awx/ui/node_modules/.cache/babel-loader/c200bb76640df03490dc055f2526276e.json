{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{i18n}from\"@lingui/core\";import React,{useCallback}from'react';import{useField,useFormikContext}from'formik';import CredentialLookup from'components/Lookup/CredentialLookup';import{required}from'util/validators';import{ScmTypeOptions}from'./SharedFields';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var InsightsSubForm=function InsightsSubForm(_ref){var credential=_ref.credential,onCredentialSelection=_ref.onCredentialSelection,scmUpdateOnLaunch=_ref.scmUpdateOnLaunch,autoPopulateCredential=_ref.autoPopulateCredential;var _useFormikContext=useFormikContext(),setFieldValue=_useFormikContext.setFieldValue,setFieldTouched=_useFormikContext.setFieldTouched;var _useField=useField('credential'),_useField2=_slicedToArray(_useField,3),credMeta=_useField2[1],credHelpers=_useField2[2];var onCredentialChange=useCallback(function(value){onCredentialSelection('insights',value);setFieldValue('credential',value);setFieldTouched('credential',true,false);},[onCredentialSelection,setFieldValue,setFieldTouched]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(CredentialLookup,{credentialTypeId:credential.typeId,label:/*i18n*/i18n._(\"Insights Credential\"),helperTextInvalid:credMeta.error,isValid:!credMeta.touched||!credMeta.error,onBlur:function onBlur(){return credHelpers.setTouched();},onChange:onCredentialChange,value:credential.value,required:true,autoPopulate:autoPopulateCredential,validate:required(/*i18n*/i18n._(\"Select a value for this field\"))}),/*#__PURE__*/_jsx(ScmTypeOptions,{hideAllowOverride:true,scmUpdateOnLaunch:scmUpdateOnLaunch})]});};export default InsightsSubForm;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Project/shared/ProjectSubForms/InsightsSubForm.js"],"names":["React","useCallback","useField","useFormikContext","CredentialLookup","required","ScmTypeOptions","InsightsSubForm","credential","onCredentialSelection","scmUpdateOnLaunch","autoPopulateCredential","setFieldValue","setFieldTouched","credMeta","credHelpers","onCredentialChange","value","typeId","error","touched","setTouched"],"mappings":"sIAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,KAAmC,OAAnC,CAGA,OAASC,QAAT,CAAmBC,gBAAnB,KAA2C,QAA3C,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oCAA7B,CACA,OAASC,QAAT,KAAyB,iBAAzB,CACA,OAASC,cAAT,KAA+B,gBAA/B,C,6IAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAKlB,IAJJC,CAAAA,UAII,MAJJA,UAII,CAHJC,qBAGI,MAHJA,qBAGI,CAFJC,iBAEI,MAFJA,iBAEI,CADJC,sBACI,MADJA,sBACI,CACJ,sBAA2CR,gBAAgB,EAA3D,CAAQS,aAAR,mBAAQA,aAAR,CAAuBC,eAAvB,mBAAuBA,eAAvB,CACA,cAAkCX,QAAQ,CAAC,YAAD,CAA1C,wCAASY,QAAT,eAAmBC,WAAnB,eAEA,GAAMC,CAAAA,kBAAkB,CAAGf,WAAW,CACpC,SAACgB,KAAD,CAAW,CACTR,qBAAqB,CAAC,UAAD,CAAaQ,KAAb,CAArB,CACAL,aAAa,CAAC,YAAD,CAAeK,KAAf,CAAb,CACAJ,eAAe,CAAC,YAAD,CAAe,IAAf,CAAqB,KAArB,CAAf,CACD,CALmC,CAMpC,CAACJ,qBAAD,CAAwBG,aAAxB,CAAuCC,eAAvC,CANoC,CAAtC,CASA,mBACE,wCACE,KAAC,gBAAD,EACE,gBAAgB,CAAEL,UAAU,CAACU,MAD/B,CAEE,KAAK,SAAE,6BAFT,CAGE,iBAAiB,CAAEJ,QAAQ,CAACK,KAH9B,CAIE,OAAO,CAAE,CAACL,QAAQ,CAACM,OAAV,EAAqB,CAACN,QAAQ,CAACK,KAJ1C,CAKE,MAAM,CAAE,wBAAMJ,CAAAA,WAAW,CAACM,UAAZ,EAAN,EALV,CAME,QAAQ,CAAEL,kBANZ,CAOE,KAAK,CAAER,UAAU,CAACS,KAPpB,CAQE,QAAQ,KARV,CASE,YAAY,CAAEN,sBAThB,CAUE,QAAQ,CAAEN,QAAQ,SAAC,uCAAD,CAVpB,EADF,cAaE,KAAC,cAAD,EAAgB,iBAAiB,KAAjC,CAAkC,iBAAiB,CAAEK,iBAArD,EAbF,GADF,CAiBD,CAnCD,CAqCA,cAAeH,CAAAA,eAAf","sourcesContent":["import React, { useCallback } from 'react';\n\nimport { t } from '@lingui/macro';\nimport { useField, useFormikContext } from 'formik';\nimport CredentialLookup from 'components/Lookup/CredentialLookup';\nimport { required } from 'util/validators';\nimport { ScmTypeOptions } from './SharedFields';\n\nconst InsightsSubForm = ({\n  credential,\n  onCredentialSelection,\n  scmUpdateOnLaunch,\n  autoPopulateCredential,\n}) => {\n  const { setFieldValue, setFieldTouched } = useFormikContext();\n  const [, credMeta, credHelpers] = useField('credential');\n\n  const onCredentialChange = useCallback(\n    (value) => {\n      onCredentialSelection('insights', value);\n      setFieldValue('credential', value);\n      setFieldTouched('credential', true, false);\n    },\n    [onCredentialSelection, setFieldValue, setFieldTouched]\n  );\n\n  return (\n    <>\n      <CredentialLookup\n        credentialTypeId={credential.typeId}\n        label={t`Insights Credential`}\n        helperTextInvalid={credMeta.error}\n        isValid={!credMeta.touched || !credMeta.error}\n        onBlur={() => credHelpers.setTouched()}\n        onChange={onCredentialChange}\n        value={credential.value}\n        required\n        autoPopulate={autoPopulateCredential}\n        validate={required(t`Select a value for this field`)}\n      />\n      <ScmTypeOptions hideAllowOverride scmUpdateOnLaunch={scmUpdateOnLaunch} />\n    </>\n  );\n};\n\nexport default InsightsSubForm;\n"]},"metadata":{},"sourceType":"module"}