{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { DualListSelectorTree } from './DualListSelectorTree';\nimport { getUniqueId } from '../../helpers';\nimport { DualListSelectorListWrapper } from './DualListSelectorListWrapper';\nimport { DualListSelectorContext, DualListSelectorPaneContext } from './DualListSelectorContext';\nimport { DualListSelectorList } from './DualListSelectorList';\nexport var DualListSelectorPane = function DualListSelectorPane(_a) {\n  var _a$isChosen = _a.isChosen,\n      isChosen = _a$isChosen === void 0 ? false : _a$isChosen,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$status = _a.status,\n      status = _a$status === void 0 ? '' : _a$status,\n      actions = _a.actions,\n      searchInput = _a.searchInput,\n      children = _a.children,\n      _onOptionSelect = _a.onOptionSelect,\n      onOptionCheck = _a.onOptionCheck,\n      _a$title = _a.title,\n      title = _a$title === void 0 ? '' : _a$title,\n      _a$options = _a.options,\n      options = _a$options === void 0 ? [] : _a$options,\n      _a$selectedOptions = _a.selectedOptions,\n      selectedOptions = _a$selectedOptions === void 0 ? [] : _a$selectedOptions,\n      _a$isSearchable = _a.isSearchable,\n      isSearchable = _a$isSearchable === void 0 ? false : _a$isSearchable,\n      _a$searchInputAriaLab = _a.searchInputAriaLabel,\n      searchInputAriaLabel = _a$searchInputAriaLab === void 0 ? '' : _a$searchInputAriaLab,\n      onFilterUpdate = _a.onFilterUpdate,\n      onSearchInputChanged = _a.onSearchInputChanged,\n      filterOption = _a.filterOption,\n      _a$id = _a.id,\n      id = _a$id === void 0 ? getUniqueId('dual-list-selector-pane') : _a$id,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      props = __rest(_a, [\"isChosen\", \"className\", \"status\", \"actions\", \"searchInput\", \"children\", \"onOptionSelect\", \"onOptionCheck\", \"title\", \"options\", \"selectedOptions\", \"isSearchable\", \"searchInputAriaLabel\", \"onFilterUpdate\", \"onSearchInputChanged\", \"filterOption\", \"id\", \"isDisabled\"]);\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      input = _React$useState2[0],\n      setInput = _React$useState2[1];\n\n  var _React$useContext = React.useContext(DualListSelectorContext),\n      isTree = _React$useContext.isTree; // only called when search input is dynamically built\n\n\n  var onChange = function onChange(e) {\n    var newValue = e.target.value;\n    var filtered;\n\n    if (isTree) {\n      filtered = options.map(function (opt) {\n        return Object.assign({}, opt);\n      }).filter(function (item) {\n        return filterInput(item, newValue);\n      });\n    } else {\n      filtered = options.filter(function (option) {\n        if (displayOption(option)) {\n          return option;\n        }\n      });\n    }\n\n    onFilterUpdate(filtered, isChosen ? 'chosen' : 'available', newValue === '');\n\n    if (onSearchInputChanged) {\n      onSearchInputChanged(newValue, e);\n    }\n\n    setInput(newValue);\n  }; // only called when options are passed via options prop and isTree === true\n\n\n  var filterInput = function filterInput(item, input) {\n    if (filterOption) {\n      return filterOption(item, input);\n    } else {\n      if (item.text.toLowerCase().includes(input.toLowerCase()) || input === '') {\n        return true;\n      }\n    }\n\n    if (item.children) {\n      return (item.children = item.children.map(function (opt) {\n        return Object.assign({}, opt);\n      }).filter(function (child) {\n        return filterInput(child, input);\n      })).length > 0;\n    }\n  }; // only called when options are passed via options prop and isTree === false\n\n\n  var displayOption = function displayOption(option) {\n    if (filterOption) {\n      return filterOption(option, input);\n    } else {\n      return option.toString().toLowerCase().includes(input.toLowerCase());\n    }\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dualListSelectorPane, isChosen ? styles.modifiers.chosen : 'pf-m-available', className)\n  }, props), title && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorHeader)\n  }, React.createElement(\"div\", {\n    className: \"pf-c-dual-list-selector__title\"\n  }, React.createElement(\"div\", {\n    className: css(styles.dualListSelectorTitleText)\n  }, title))), (actions || searchInput || isSearchable) && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorTools)\n  }, (isSearchable || searchInput) && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorToolsFilter)\n  }, searchInput ? searchInput : React.createElement(\"input\", {\n    className: css(formStyles.formControl, formStyles.modifiers.search),\n    type: \"search\",\n    onChange: isDisabled ? undefined : onChange,\n    \"aria-label\": searchInputAriaLabel,\n    disabled: isDisabled\n  })), actions && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorToolsActions)\n  }, actions)), status && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorStatus)\n  }, React.createElement(\"div\", {\n    className: css(styles.dualListSelectorStatusText),\n    id: \"\".concat(id, \"-status\")\n  }, status)), React.createElement(DualListSelectorPaneContext.Provider, {\n    value: {\n      isChosen: isChosen\n    }\n  }, !isTree && React.createElement(DualListSelectorListWrapper, {\n    \"aria-labelledby\": \"\".concat(id, \"-status\"),\n    options: options,\n    selectedOptions: selectedOptions,\n    onOptionSelect: function onOptionSelect(e, index, id) {\n      return _onOptionSelect(e, index, isChosen, id);\n    },\n    displayOption: displayOption,\n    id: \"\".concat(id, \"-list\"),\n    isDisabled: isDisabled\n  }, children), isTree && React.createElement(DualListSelectorListWrapper, {\n    \"aria-labelledby\": \"\".concat(id, \"-status\"),\n    id: \"\".concat(id, \"-list\")\n  }, options.length > 0 ? React.createElement(DualListSelectorList, null, React.createElement(DualListSelectorTree, {\n    data: isSearchable ? options.map(function (opt) {\n      return Object.assign({}, opt);\n    }).filter(function (item) {\n      return filterInput(item, input);\n    }) : options,\n    onOptionCheck: onOptionCheck,\n    id: \"\".concat(id, \"-tree\"),\n    isDisabled: isDisabled\n  })) : children)));\n};\nDualListSelectorPane.displayName = 'DualListSelectorPane';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorPane.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { DualListSelectorTree, DualListSelectorTreeItemData } from './DualListSelectorTree';\nimport { getUniqueId } from '../../helpers';\nimport { DualListSelectorListWrapper } from './DualListSelectorListWrapper';\nimport { DualListSelectorContext, DualListSelectorPaneContext } from './DualListSelectorContext';\nimport { DualListSelectorList } from './DualListSelectorList';\n\nexport interface DualListSelectorPaneProps {\n  /** Additional classes applied to the dual list selector pane. */\n  className?: string;\n  /** A dual list selector list or dual list selector tree to be rendered in the pane. */\n  children?: React.ReactNode;\n  /** Flag indicating if this pane is the chosen pane. */\n  isChosen?: boolean;\n  /** Status to display above the pane. */\n  status?: string;\n  /** Title of the pane. */\n  title?: React.ReactNode;\n  /** A search input placed above the list at the top of the pane, before actions. */\n  searchInput?: React.ReactNode;\n  /** Actions to place above the pane. */\n  actions?: React.ReactNode[];\n  /** Id of the pane. */\n  id?: string;\n  /** @hide Options to list in the pane. */\n  options?: React.ReactNode[];\n  /** @hide Options currently selected in the pane. */\n  selectedOptions?: string[] | number[];\n  /** @hide Callback for when an option is selected. Optionally used only when options prop is provided. */\n  onOptionSelect?: (\n    e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n    index: number,\n    isChosen: boolean,\n    id?: string,\n    itemData?: any,\n    parentData?: any\n  ) => void;\n  /** @hide Callback for when a tree option is checked. Optionally used only when options prop is provided. */\n  onOptionCheck?: (\n    evt: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n  /** @hide Flag indicating a dynamically built search bar should be included above the pane. */\n  isSearchable?: boolean;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n  /** Callback for search input. To be used when isSearchable is true. */\n  onSearch?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  /** @hide A callback for when the search input value for changes.  To be used when isSearchable is true. */\n  onSearchInputChanged?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** @hide Filter function for custom filtering based on search string. To be used when isSearchable is true. */\n  filterOption?: (option: React.ReactNode, input: string) => boolean;\n  /** @hide Accessible label for the search input. To be used when isSearchable is true. */\n  searchInputAriaLabel?: string;\n  /** @hide Callback for updating the filtered options in DualListSelector. To be used when isSearchable is true. */\n  onFilterUpdate?: (newFilteredOptions: React.ReactNode[], paneType: string, isSearchReset: boolean) => void;\n}\n\nexport const DualListSelectorPane: React.FunctionComponent<DualListSelectorPaneProps> = ({\n  isChosen = false,\n  className = '',\n  status = '',\n  actions,\n  searchInput,\n  children,\n  onOptionSelect,\n  onOptionCheck,\n  title = '',\n  options = [],\n  selectedOptions = [],\n  isSearchable = false,\n  searchInputAriaLabel = '',\n  onFilterUpdate,\n  onSearchInputChanged,\n  filterOption,\n  id = getUniqueId('dual-list-selector-pane'),\n  isDisabled = false,\n  ...props\n}: DualListSelectorPaneProps) => {\n  const [input, setInput] = React.useState('');\n  const { isTree } = React.useContext(DualListSelectorContext);\n\n  // only called when search input is dynamically built\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    let filtered: React.ReactNode[];\n    if (isTree) {\n      filtered = options\n        .map(opt => Object.assign({}, opt))\n        .filter(item => filterInput((item as unknown) as DualListSelectorTreeItemData, newValue));\n    } else {\n      filtered = options.filter(option => {\n        if (displayOption(option)) {\n          return option;\n        }\n      });\n    }\n    onFilterUpdate(filtered, isChosen ? 'chosen' : 'available', newValue === '');\n\n    if (onSearchInputChanged) {\n      onSearchInputChanged(newValue, e);\n    }\n    setInput(newValue);\n  };\n\n  // only called when options are passed via options prop and isTree === true\n  const filterInput = (item: DualListSelectorTreeItemData, input: string): boolean => {\n    if (filterOption) {\n      return filterOption((item as unknown) as React.ReactNode, input);\n    } else {\n      if (item.text.toLowerCase().includes(input.toLowerCase()) || input === '') {\n        return true;\n      }\n    }\n    if (item.children) {\n      return (\n        (item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => filterInput(child, input)))\n          .length > 0\n      );\n    }\n  };\n\n  // only called when options are passed via options prop and isTree === false\n  const displayOption = (option: React.ReactNode) => {\n    if (filterOption) {\n      return filterOption(option, input);\n    } else {\n      return option\n        .toString()\n        .toLowerCase()\n        .includes(input.toLowerCase());\n    }\n  };\n\n  return (\n    <div\n      className={css(styles.dualListSelectorPane, isChosen ? styles.modifiers.chosen : 'pf-m-available', className)}\n      {...props}\n    >\n      {title && (\n        <div className={css(styles.dualListSelectorHeader)}>\n          <div className=\"pf-c-dual-list-selector__title\">\n            <div className={css(styles.dualListSelectorTitleText)}>{title}</div>\n          </div>\n        </div>\n      )}\n      {(actions || searchInput || isSearchable) && (\n        <div className={css(styles.dualListSelectorTools)}>\n          {(isSearchable || searchInput) && (\n            <div className={css(styles.dualListSelectorToolsFilter)}>\n              {searchInput ? (\n                searchInput\n              ) : (\n                <input\n                  className={css(formStyles.formControl, formStyles.modifiers.search)}\n                  type=\"search\"\n                  onChange={isDisabled ? undefined : onChange}\n                  aria-label={searchInputAriaLabel}\n                  disabled={isDisabled}\n                />\n              )}\n            </div>\n          )}\n          {actions && <div className={css(styles.dualListSelectorToolsActions)}>{actions}</div>}\n        </div>\n      )}\n      {status && (\n        <div className={css(styles.dualListSelectorStatus)}>\n          <div className={css(styles.dualListSelectorStatusText)} id={`${id}-status`}>\n            {status}\n          </div>\n        </div>\n      )}\n      <DualListSelectorPaneContext.Provider value={{ isChosen }}>\n        {!isTree && (\n          <DualListSelectorListWrapper\n            aria-labelledby={`${id}-status`}\n            options={options}\n            selectedOptions={selectedOptions}\n            onOptionSelect={(\n              e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n              index: number,\n              id: string\n            ) => onOptionSelect(e, index, isChosen, id)}\n            displayOption={displayOption}\n            id={`${id}-list`}\n            isDisabled={isDisabled}\n          >\n            {children}\n          </DualListSelectorListWrapper>\n        )}\n        {isTree && (\n          <DualListSelectorListWrapper aria-labelledby={`${id}-status`} id={`${id}-list`}>\n            {options.length > 0 ? (\n              <DualListSelectorList>\n                <DualListSelectorTree\n                  data={\n                    isSearchable\n                      ? ((options\n                          .map(opt => Object.assign({}, opt))\n                          .filter(item =>\n                            filterInput((item as unknown) as DualListSelectorTreeItemData, input)\n                          ) as unknown) as DualListSelectorTreeItemData[])\n                      : ((options as unknown) as DualListSelectorTreeItemData[])\n                  }\n                  onOptionCheck={onOptionCheck}\n                  id={`${id}-tree`}\n                  isDisabled={isDisabled}\n                />\n              </DualListSelectorList>\n            ) : (\n              children\n            )}\n          </DualListSelectorListWrapper>\n        )}\n      </DualListSelectorPaneContext.Provider>\n    </div>\n  );\n};\nDualListSelectorPane.displayName = 'DualListSelectorPane';\n"]},"metadata":{},"sourceType":"module"}