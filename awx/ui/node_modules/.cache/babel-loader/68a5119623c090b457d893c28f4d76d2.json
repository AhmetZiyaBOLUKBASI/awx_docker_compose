{"ast":null,"code":"import{i18n}from\"@lingui/core\";import React from'react';import{FormGroup,Title}from'@patternfly/react-core';import{FormCheckboxLayout,FormColumnLayout,FormFullWidthLayout,SubFormLayout}from'components/FormLayout';import{CheckboxField}from'components/FormField';import{CredentialType}from'types';import{CredentialField,GceFileUploadField}from'./CredentialFormFields';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function TypeInputsSubForm(_ref){var credentialType=_ref.credentialType;var stringFields=credentialType.inputs.fields.filter(function(fieldOptions){return fieldOptions.type==='string'||fieldOptions.choices;});var booleanFields=credentialType.inputs.fields.filter(function(fieldOptions){return fieldOptions.type==='boolean';});return/*#__PURE__*/_jsxs(SubFormLayout,{children:[/*#__PURE__*/_jsx(Title,{size:\"md\",headingLevel:\"h4\",children:/*i18n*/i18n._(\"Type Details\")}),/*#__PURE__*/_jsxs(FormColumnLayout,{children:[credentialType.namespace==='gce'&&/*#__PURE__*/_jsx(GceFileUploadField,{}),stringFields.map(function(fieldOptions){return fieldOptions.multiline?/*#__PURE__*/_jsx(FormFullWidthLayout,{children:/*#__PURE__*/_jsx(CredentialField,{credentialType:credentialType,fieldOptions:fieldOptions})},fieldOptions.id):/*#__PURE__*/_jsx(CredentialField,{credentialType:credentialType,fieldOptions:fieldOptions},fieldOptions.id);}),booleanFields.length>0&&/*#__PURE__*/_jsx(FormFullWidthLayout,{children:/*#__PURE__*/_jsx(FormGroup,{fieldId:\"credential-checkboxes\",label:/*i18n*/i18n._(\"Options\"),children:/*#__PURE__*/_jsx(FormCheckboxLayout,{children:booleanFields.map(function(fieldOptions){return/*#__PURE__*/_jsx(CheckboxField,{id:\"credential-\".concat(fieldOptions.id),name:\"inputs.\".concat(fieldOptions.id),label:fieldOptions.label,tooltip:fieldOptions.help_text},fieldOptions.id);})})})})]})]});}TypeInputsSubForm.defaultProps={};export default TypeInputsSubForm;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Credential/shared/TypeInputsSubForm.js"],"names":["React","FormGroup","Title","FormCheckboxLayout","FormColumnLayout","FormFullWidthLayout","SubFormLayout","CheckboxField","CredentialType","CredentialField","GceFileUploadField","TypeInputsSubForm","credentialType","stringFields","inputs","fields","filter","fieldOptions","type","choices","booleanFields","namespace","map","multiline","id","length","label","help_text","defaultProps"],"mappings":"+BAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAGA,OAASC,SAAT,CAAoBC,KAApB,KAAiC,wBAAjC,CACA,OACEC,kBADF,CAEEC,gBAFF,CAGEC,mBAHF,CAIEC,aAJF,KAKO,uBALP,CAMA,OAASC,aAAT,KAA8B,sBAA9B,CACA,OAASC,cAAT,KAA+B,OAA/B,CACA,OAASC,eAAT,CAA0BC,kBAA1B,KAAoD,wBAApD,C,wFAEA,QAASC,CAAAA,iBAAT,MAA+C,IAAlBC,CAAAA,cAAkB,MAAlBA,cAAkB,CAC7C,GAAMC,CAAAA,YAAY,CAAGD,cAAc,CAACE,MAAf,CAAsBC,MAAtB,CAA6BC,MAA7B,CACnB,SAACC,YAAD,QAAkBA,CAAAA,YAAY,CAACC,IAAb,GAAsB,QAAtB,EAAkCD,YAAY,CAACE,OAAjE,EADmB,CAArB,CAGA,GAAMC,CAAAA,aAAa,CAAGR,cAAc,CAACE,MAAf,CAAsBC,MAAtB,CAA6BC,MAA7B,CACpB,SAACC,YAAD,QAAkBA,CAAAA,YAAY,CAACC,IAAb,GAAsB,SAAxC,EADoB,CAAtB,CAGA,mBACE,MAAC,aAAD,yBACE,KAAC,KAAD,EAAO,IAAI,CAAC,IAAZ,CAAiB,YAAY,CAAC,IAA9B,kBACG,sBADH,EADF,cAIE,MAAC,gBAAD,YACGN,cAAc,CAACS,SAAf,GAA6B,KAA7B,eAAsC,KAAC,kBAAD,IADzC,CAEGR,YAAY,CAACS,GAAb,CAAiB,SAACL,YAAD,QAChBA,CAAAA,YAAY,CAACM,SAAb,cACE,KAAC,mBAAD,wBACE,KAAC,eAAD,EACE,cAAc,CAAEX,cADlB,CAEE,YAAY,CAAEK,YAFhB,EADF,EAA0BA,YAAY,CAACO,EAAvC,CADF,cAQE,KAAC,eAAD,EAEE,cAAc,CAAEZ,cAFlB,CAGE,YAAY,CAAEK,YAHhB,EACOA,YAAY,CAACO,EADpB,CATc,EAAjB,CAFH,CAkBGJ,aAAa,CAACK,MAAd,CAAuB,CAAvB,eACC,KAAC,mBAAD,wBACE,KAAC,SAAD,EAAW,OAAO,CAAC,uBAAnB,CAA2C,KAAK,SAAE,iBAAlD,uBACE,KAAC,kBAAD,WACGL,aAAa,CAACE,GAAd,CAAkB,SAACL,YAAD,qBACjB,KAAC,aAAD,EACE,EAAE,sBAAgBA,YAAY,CAACO,EAA7B,CADJ,CAGE,IAAI,kBAAYP,YAAY,CAACO,EAAzB,CAHN,CAIE,KAAK,CAAEP,YAAY,CAACS,KAJtB,CAKE,OAAO,CAAET,YAAY,CAACU,SALxB,EAEOV,YAAY,CAACO,EAFpB,CADiB,EAAlB,CADH,EADF,EADF,EAnBJ,GAJF,GADF,CA2CD,CAMDb,iBAAiB,CAACiB,YAAlB,CAAiC,EAAjC,CAEA,cAAejB,CAAAA,iBAAf","sourcesContent":["import React from 'react';\n\nimport { t } from '@lingui/macro';\nimport { FormGroup, Title } from '@patternfly/react-core';\nimport {\n  FormCheckboxLayout,\n  FormColumnLayout,\n  FormFullWidthLayout,\n  SubFormLayout,\n} from 'components/FormLayout';\nimport { CheckboxField } from 'components/FormField';\nimport { CredentialType } from 'types';\nimport { CredentialField, GceFileUploadField } from './CredentialFormFields';\n\nfunction TypeInputsSubForm({ credentialType }) {\n  const stringFields = credentialType.inputs.fields.filter(\n    (fieldOptions) => fieldOptions.type === 'string' || fieldOptions.choices\n  );\n  const booleanFields = credentialType.inputs.fields.filter(\n    (fieldOptions) => fieldOptions.type === 'boolean'\n  );\n  return (\n    <SubFormLayout>\n      <Title size=\"md\" headingLevel=\"h4\">\n        {t`Type Details`}\n      </Title>\n      <FormColumnLayout>\n        {credentialType.namespace === 'gce' && <GceFileUploadField />}\n        {stringFields.map((fieldOptions) =>\n          fieldOptions.multiline ? (\n            <FormFullWidthLayout key={fieldOptions.id}>\n              <CredentialField\n                credentialType={credentialType}\n                fieldOptions={fieldOptions}\n              />\n            </FormFullWidthLayout>\n          ) : (\n            <CredentialField\n              key={fieldOptions.id}\n              credentialType={credentialType}\n              fieldOptions={fieldOptions}\n            />\n          )\n        )}\n        {booleanFields.length > 0 && (\n          <FormFullWidthLayout>\n            <FormGroup fieldId=\"credential-checkboxes\" label={t`Options`}>\n              <FormCheckboxLayout>\n                {booleanFields.map((fieldOptions) => (\n                  <CheckboxField\n                    id={`credential-${fieldOptions.id}`}\n                    key={fieldOptions.id}\n                    name={`inputs.${fieldOptions.id}`}\n                    label={fieldOptions.label}\n                    tooltip={fieldOptions.help_text}\n                  />\n                ))}\n              </FormCheckboxLayout>\n            </FormGroup>\n          </FormFullWidthLayout>\n        )}\n      </FormColumnLayout>\n    </SubFormLayout>\n  );\n}\n\nTypeInputsSubForm.propTypes = {\n  credentialType: CredentialType.isRequired,\n};\n\nTypeInputsSubForm.defaultProps = {};\n\nexport default TypeInputsSubForm;\n"]},"metadata":{},"sourceType":"module"}