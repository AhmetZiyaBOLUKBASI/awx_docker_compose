{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";/**\n * Convert host filter string to params object\n * @param {string} string host filter string\n * @return {object} A string or array of strings keyed by query param key\n */export function toSearchParams(){var string=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';if(string===''){return{};}var readableParamsStr=string.replace(/^\\?/,'').replace(/&/g,' and ');var orArr=readableParamsStr.split(/ or /);if(orArr.length>1){orArr.forEach(function(str,index){orArr[index]=\"or__\".concat(str);});}var unescapeString=function unescapeString(v){return(//  This is necessary when editing a string that was initially\n//  escaped to allow white space\nv?v.replace(/\"/g,''):'');};return orArr.join(' and ').split(/ and | or /).map(function(s){return s.split('=');}).reduce(function(searchParams,_ref){var _ref2=_slicedToArray(_ref,2),k=_ref2[0],v=_ref2[1];var key=decodeURIComponent(k);var value=decodeURIComponent(unescapeString(v));if(searchParams[key]===undefined){searchParams[key]=value;}else if(Array.isArray(searchParams[key])){searchParams[key]=[].concat(_toConsumableArray(searchParams[key]),[value]);}else{searchParams[key]=[searchParams[key],value];}return searchParams;},{});}/**\n * Convert params object to an encoded namespaced url query string\n * Used to put into url bar when modal opens\n * @param {object} config Config object for namespacing params\n * @param {object} searchParams A string or array of strings keyed by query param key\n * @return {string} URL query string\n */export function toQueryString(config){var searchParams=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(Object.keys(searchParams).length===0)return'';return Object.keys(searchParams).flatMap(function(key){if(Array.isArray(searchParams[key])){return searchParams[key].map(function(val){return\"\".concat(config.namespace,\".\").concat(encodeURIComponent(key),\"=\").concat(encodeURIComponent(val));});}return\"\".concat(config.namespace,\".\").concat(encodeURIComponent(key),\"=\").concat(encodeURIComponent(searchParams[key]));}).join('&');}/**\n * Escape a string with double quote in case there was a white space\n * @param {string} key The key of the value to be parsed\n * @param {string} value A string to be parsed\n * @return {string}  string\n */var escapeString=function escapeString(key,value){if(verifySpace(value)||key.includes('regex')){return\"\\\"\".concat(value,\"\\\"\");}return value;};/**\n * Verify whether a string has white spaces\n * @param {string} value A string to be parsed\n * @return {bool} true if a string has white spaces\n */var verifySpace=function verifySpace(value){return value.trim().indexOf(' ')>=0;};/**\n * Convert params object to host filter string\n * @param {object} searchParams A string or array of strings keyed by query param key\n * @return {string} Host filter string\n */export function toHostFilter(){var searchParams=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var flattenSearchParams=Object.keys(searchParams).sort().flatMap(function(key){if(Array.isArray(searchParams[key])){return searchParams[key].map(function(val){return\"\".concat(key,\"=\").concat(escapeString(key,val));});}return\"\".concat(key,\"=\").concat(escapeString(key,searchParams[key]));});var filteredSearchParams=flattenSearchParams.filter(function(el){return el.indexOf('or__')===-1;});var conditionalSearchParams=flattenSearchParams.filter(function(el){return!filteredSearchParams.includes(el);});var conditionalQuery=conditionalSearchParams.map(function(el){return el.replace('or__','or ');}).join(' ').trim();if(filteredSearchParams.length===0&&conditionalQuery){// when there are just or operators the first one should be removed from the query\n// `name=foo or name__contains=bar or name__iexact=foo` instead of\n// `or name=foo or name__contains=bar or name__iexact=foo` that is the reason of the slice(3)\nreturn conditionalQuery.slice(3);}if(conditionalQuery){return filteredSearchParams.join(' and ').concat(' ',conditionalQuery);}return filteredSearchParams.join(' and ').trim();}/**\n * Helper function to remove namespace from params object\n * @param {object} config Config object with namespace param\n * @param {object} obj A string or array of strings keyed by query param key\n * @return {object} Params object without namespaced keys\n */export function removeNamespacedKeys(config){var obj=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var clonedObj=_objectSpread({},obj);var newObj={};Object.keys(clonedObj).forEach(function(nsKey){var key=nsKey;if(nsKey.startsWith(config.namespace)){key=nsKey.substr(config.namespace.length+1);}newObj[key]=clonedObj[nsKey];});return newObj;}/**\n * Helper function to remove default params from params object\n * @param {object} config Config object with default params\n * @param {object} obj A string or array of strings keyed by query param key\n * @return {string} Params object without default params\n */export function removeDefaultParams(config){var obj=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var clonedObj=_objectSpread({},obj);var defaultKeys=Object.keys(config.defaultParams);defaultKeys.forEach(function(keyToOmit){delete clonedObj[keyToOmit];});return clonedObj;}/**\n * Helper function to update host_filter value\n * @param {string} value A string with host_filter value from querystring\n * @param {object} obj An object returned by toSearchParams - in which the\n * host_filter value was partially removed.\n * @return {object} An object with the value of host_filter modified\n */export function modifyHostFilter(value,obj){if(!value.includes('host_filter='))return obj;var clonedObj=_objectSpread({},obj);var host_filter={};value.split(' ').forEach(function(item){if(item.includes('host_filter')){host_filter.host_filter=item.slice('host_filter='.length);}});Object.keys(clonedObj).forEach(function(key){if(key.indexOf('host_filter')!==-1){delete clonedObj[key];}});return _objectSpread(_objectSpread({},clonedObj),host_filter);}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/Lookup/shared/HostFilterUtils.js"],"names":["toSearchParams","string","readableParamsStr","replace","orArr","split","length","forEach","str","index","unescapeString","v","join","map","s","reduce","searchParams","k","key","decodeURIComponent","value","undefined","Array","isArray","toQueryString","config","Object","keys","flatMap","val","namespace","encodeURIComponent","escapeString","verifySpace","includes","trim","indexOf","toHostFilter","flattenSearchParams","sort","filteredSearchParams","filter","el","conditionalSearchParams","conditionalQuery","slice","concat","removeNamespacedKeys","obj","clonedObj","newObj","nsKey","startsWith","substr","removeDefaultParams","defaultKeys","defaultParams","keyToOmit","modifyHostFilter","host_filter","item"],"mappings":"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","sourcesContent":["/**\n * Convert host filter string to params object\n * @param {string} string host filter string\n * @return {object} A string or array of strings keyed by query param key\n */\nexport function toSearchParams(string = '') {\n  if (string === '') {\n    return {};\n  }\n\n  const readableParamsStr = string.replace(/^\\?/, '').replace(/&/g, ' and ');\n  const orArr = readableParamsStr.split(/ or /);\n\n  if (orArr.length > 1) {\n    orArr.forEach((str, index) => {\n      orArr[index] = `or__${str}`;\n    });\n  }\n\n  const unescapeString = (v) =>\n    //  This is necessary when editing a string that was initially\n    //  escaped to allow white space\n    v ? v.replace(/\"/g, '') : '';\n\n  return orArr\n    .join(' and ')\n    .split(/ and | or /)\n    .map((s) => s.split('='))\n    .reduce((searchParams, [k, v]) => {\n      const key = decodeURIComponent(k);\n      const value = decodeURIComponent(unescapeString(v));\n      if (searchParams[key] === undefined) {\n        searchParams[key] = value;\n      } else if (Array.isArray(searchParams[key])) {\n        searchParams[key] = [...searchParams[key], value];\n      } else {\n        searchParams[key] = [searchParams[key], value];\n      }\n      return searchParams;\n    }, {});\n}\n\n/**\n * Convert params object to an encoded namespaced url query string\n * Used to put into url bar when modal opens\n * @param {object} config Config object for namespacing params\n * @param {object} searchParams A string or array of strings keyed by query param key\n * @return {string} URL query string\n */\nexport function toQueryString(config, searchParams = {}) {\n  if (Object.keys(searchParams).length === 0) return '';\n  return Object.keys(searchParams)\n    .flatMap((key) => {\n      if (Array.isArray(searchParams[key])) {\n        return searchParams[key].map(\n          (val) =>\n            `${config.namespace}.${encodeURIComponent(\n              key\n            )}=${encodeURIComponent(val)}`\n        );\n      }\n      return `${config.namespace}.${encodeURIComponent(\n        key\n      )}=${encodeURIComponent(searchParams[key])}`;\n    })\n    .join('&');\n}\n\n/**\n * Escape a string with double quote in case there was a white space\n * @param {string} key The key of the value to be parsed\n * @param {string} value A string to be parsed\n * @return {string}  string\n */\nconst escapeString = (key, value) => {\n  if (verifySpace(value) || key.includes('regex')) {\n    return `\"${value}\"`;\n  }\n  return value;\n};\n\n/**\n * Verify whether a string has white spaces\n * @param {string} value A string to be parsed\n * @return {bool} true if a string has white spaces\n */\nconst verifySpace = (value) => value.trim().indexOf(' ') >= 0;\n\n/**\n * Convert params object to host filter string\n * @param {object} searchParams A string or array of strings keyed by query param key\n * @return {string} Host filter string\n */\nexport function toHostFilter(searchParams = {}) {\n  const flattenSearchParams = Object.keys(searchParams)\n    .sort()\n    .flatMap((key) => {\n      if (Array.isArray(searchParams[key])) {\n        return searchParams[key].map(\n          (val) => `${key}=${escapeString(key, val)}`\n        );\n      }\n      return `${key}=${escapeString(key, searchParams[key])}`;\n    });\n\n  const filteredSearchParams = flattenSearchParams.filter(\n    (el) => el.indexOf('or__') === -1\n  );\n\n  const conditionalSearchParams = flattenSearchParams.filter(\n    (el) => !filteredSearchParams.includes(el)\n  );\n\n  const conditionalQuery = conditionalSearchParams\n    .map((el) => el.replace('or__', 'or '))\n    .join(' ')\n    .trim();\n\n  if (filteredSearchParams.length === 0 && conditionalQuery) {\n    // when there are just or operators the first one should be removed from the query\n    // `name=foo or name__contains=bar or name__iexact=foo` instead of\n    // `or name=foo or name__contains=bar or name__iexact=foo` that is the reason of the slice(3)\n    return conditionalQuery.slice(3);\n  }\n\n  if (conditionalQuery) {\n    return filteredSearchParams.join(' and ').concat(' ', conditionalQuery);\n  }\n\n  return filteredSearchParams.join(' and ').trim();\n}\n\n/**\n * Helper function to remove namespace from params object\n * @param {object} config Config object with namespace param\n * @param {object} obj A string or array of strings keyed by query param key\n * @return {object} Params object without namespaced keys\n */\nexport function removeNamespacedKeys(config, obj = {}) {\n  const clonedObj = { ...obj };\n  const newObj = {};\n  Object.keys(clonedObj).forEach((nsKey) => {\n    let key = nsKey;\n    if (nsKey.startsWith(config.namespace)) {\n      key = nsKey.substr(config.namespace.length + 1);\n    }\n    newObj[key] = clonedObj[nsKey];\n  });\n  return newObj;\n}\n\n/**\n * Helper function to remove default params from params object\n * @param {object} config Config object with default params\n * @param {object} obj A string or array of strings keyed by query param key\n * @return {string} Params object without default params\n */\nexport function removeDefaultParams(config, obj = {}) {\n  const clonedObj = { ...obj };\n  const defaultKeys = Object.keys(config.defaultParams);\n  defaultKeys.forEach((keyToOmit) => {\n    delete clonedObj[keyToOmit];\n  });\n  return clonedObj;\n}\n\n/**\n * Helper function to update host_filter value\n * @param {string} value A string with host_filter value from querystring\n * @param {object} obj An object returned by toSearchParams - in which the\n * host_filter value was partially removed.\n * @return {object} An object with the value of host_filter modified\n */\nexport function modifyHostFilter(value, obj) {\n  if (!value.includes('host_filter=')) return obj;\n  const clonedObj = { ...obj };\n  const host_filter = {};\n  value.split(' ').forEach((item) => {\n    if (item.includes('host_filter')) {\n      host_filter.host_filter = item.slice('host_filter='.length);\n    }\n  });\n\n  Object.keys(clonedObj).forEach((key) => {\n    if (key.indexOf('host_filter') !== -1) {\n      delete clonedObj[key];\n    }\n  });\n\n  return {\n    ...clonedObj,\n    ...host_filter,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}