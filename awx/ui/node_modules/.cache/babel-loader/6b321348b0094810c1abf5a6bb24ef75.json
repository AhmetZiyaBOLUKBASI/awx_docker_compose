{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport getBasePlacement from '../utils/getBasePlacement';\nimport { top, left, right, placements } from '../enums';\n/**\n * @param placement\n * @param rects\n * @param offset\n */\n\nexport function distanceAndSkiddingToXY(placement, rects, offset) {\n  var basePlacement = getBasePlacement(placement);\n  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n  var _ref = typeof offset === 'function' ? offset(Object.assign(Object.assign({}, rects), {\n    placement: placement\n  })) : offset,\n      _ref2 = _slicedToArray(_ref, 2),\n      skidding = _ref2[0],\n      distance = _ref2[1];\n\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [left, right].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\n/**\n *\n */\n\nfunction offset(_ref3) {\n  var state = _ref3.state,\n      options = _ref3.options,\n      name = _ref3.name;\n  var _options$offset = options.offset,\n      offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n  var data = placements.reduce(function (acc, placement) {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n  var _data$state$placement = data[state.placement],\n      x = _data$state$placement.x,\n      y = _data$state$placement.y;\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n}\n\nexport default {\n  name: 'offset',\n  enabled: true,\n  phase: 'main',\n  requires: ['popperOffsets'],\n  fn: offset\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/modifiers/offset.ts"],"names":[],"mappings":";AAGA,OAAO,gBAAP,MAA6B,2BAA7B;AACA,SAAS,GAAT,EAAc,IAAd,EAAoB,KAApB,EAA2B,UAA3B,QAA6C,UAA7C;AAeA;;;;AAIG;;AACH,OAAM,SAAU,uBAAV,CACJ,SADI,EAEJ,KAFI,EAGJ,MAHI,EAGU;AAEd,MAAM,aAAa,GAAG,gBAAgB,CAAC,SAAD,CAAtC;AACA,MAAM,cAAc,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,OAAZ,CAAoB,aAApB,KAAsC,CAAtC,GAA0C,CAAC,CAA3C,GAA+C,CAAtE;;AAEA,aACE,OAAO,MAAP,KAAkB,UAAlB,GACI,MAAM,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACD,KADC,CAAA,EACI;AACR,IAAA,SAAS,EAAT;AADQ,GADJ,CAAA,CADV,GAKI,MANN;AAAA;AAAA,MAAK,QAAL;AAAA,MAAe,QAAf;;AAQA,EAAA,QAAQ,GAAG,QAAQ,IAAI,CAAvB;AACA,EAAA,QAAQ,GAAG,CAAC,QAAQ,IAAI,CAAb,IAAkB,cAA7B;AAEA,SAAO,CAAC,IAAD,EAAO,KAAP,EAAc,OAAd,CAAsB,aAAtB,KAAwC,CAAxC,GAA4C;AAAE,IAAA,CAAC,EAAE,QAAL;AAAe,IAAA,CAAC,EAAE;AAAlB,GAA5C,GAA2E;AAAE,IAAA,CAAC,EAAE,QAAL;AAAe,IAAA,CAAC,EAAE;AAAlB,GAAlF;AACD;AAED;;AAEG;;AACH,SAAS,MAAT,QAAoE;AAAA,MAAlD,KAAkD,SAAlD,KAAkD;AAAA,MAA3C,OAA2C,SAA3C,OAA2C;AAAA,MAAlC,IAAkC,SAAlC,IAAkC;AAClE,wBAA4B,OAA5B,CAAQ,MAAR;AAAA,MAAQ,MAAR,gCAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB;AAEA,MAAM,IAAI,GAAG,UAAU,CAAC,MAAX,CAAkB,UAAC,GAAD,EAAM,SAAN,EAAmB;AAChD,IAAA,GAAG,CAAC,SAAD,CAAH,GAAiB,uBAAuB,CAAC,SAAD,EAAY,KAAK,CAAC,KAAlB,EAAyB,MAAzB,CAAxC;AACA,WAAO,GAAP;AACD,GAHY,EAGV,EAHU,CAAb;AAKA,8BAAiB,IAAI,CAAC,KAAK,CAAC,SAAP,CAArB;AAAA,MAAQ,CAAR,yBAAQ,CAAR;AAAA,MAAW,CAAX,yBAAW,CAAX;;AAEA,MAAI,KAAK,CAAC,aAAN,CAAoB,aAApB,IAAqC,IAAzC,EAA+C;AAC7C,IAAA,KAAK,CAAC,aAAN,CAAoB,aAApB,CAAkC,CAAlC,IAAuC,CAAvC;AACA,IAAA,KAAK,CAAC,aAAN,CAAoB,aAApB,CAAkC,CAAlC,IAAuC,CAAvC;AACD;;AAED,EAAA,KAAK,CAAC,aAAN,CAAoB,IAApB,IAA4B,IAA5B;AACD;;AAID,eAAe;AACb,EAAA,IAAI,EAAE,QADO;AAEb,EAAA,OAAO,EAAE,IAFI;AAGb,EAAA,KAAK,EAAE,MAHM;AAIb,EAAA,QAAQ,EAAE,CAAC,eAAD,CAJG;AAKb,EAAA,EAAE,EAAE;AALS,CAAf","sourcesContent":["// @ts-nocheck\nimport { Placement } from '../enums';\nimport { ModifierArguments, Modifier, Rect, Offsets } from '../types';\nimport getBasePlacement from '../utils/getBasePlacement';\nimport { top, left, right, placements } from '../enums';\n\ntype OffsetsFunction = (arg0: {\n  popper: Rect;\n  reference: Rect;\n  placement: Placement;\n}) => [number | null | undefined, number | null | undefined];\n\ntype Offset = OffsetsFunction | [number | null | undefined, number | null | undefined];\n\n// eslint-disable-next-line import/no-unused-modules\nexport interface Options {\n  offset: Offset;\n}\n\n/**\n * @param placement\n * @param rects\n * @param offset\n */\nexport function distanceAndSkiddingToXY(\n  placement: Placement,\n  rects: { popper: Rect; reference: Rect },\n  offset: Offset\n): Offsets {\n  const basePlacement = getBasePlacement(placement);\n  const invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n  let [skidding, distance] =\n    typeof offset === 'function'\n      ? offset({\n          ...rects,\n          placement\n        })\n      : offset;\n\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n\n  return [left, right].indexOf(basePlacement) >= 0 ? { x: distance, y: skidding } : { x: skidding, y: distance };\n}\n\n/**\n *\n */\nfunction offset({ state, options, name }: ModifierArguments<Options>) {\n  const { offset = [0, 0] } = options;\n\n  const data = placements.reduce((acc, placement) => {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n\n  const { x, y } = data[state.placement];\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n}\n\n// eslint-disable-next-line import/no-unused-modules\nexport type OffsetModifier = Modifier<'offset', Options>;\nexport default {\n  name: 'offset',\n  enabled: true,\n  phase: 'main',\n  requires: ['popperOffsets'],\n  fn: offset\n} as OffsetModifier;\n"]},"metadata":{},"sourceType":"module"}