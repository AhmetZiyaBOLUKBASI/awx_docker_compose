{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nexport var ClipboardCopyExpanded = /*#__PURE__*/function (_React$Component) {\n  _inherits(ClipboardCopyExpanded, _React$Component);\n\n  var _super = _createSuper(ClipboardCopyExpanded);\n\n  function ClipboardCopyExpanded(props) {\n    _classCallCheck(this, ClipboardCopyExpanded);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(ClipboardCopyExpanded, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          children = _a.children,\n          onChange = _a.onChange,\n          isReadOnly = _a.isReadOnly,\n          isCode = _a.isCode,\n          props = __rest(_a, [\"className\", \"children\", \"onChange\", \"isReadOnly\", \"isCode\"]);\n\n      return React.createElement(\"div\", Object.assign({\n        suppressContentEditableWarning: true,\n        className: css(styles.clipboardCopyExpandableContent, className),\n        onInput: function onInput(e) {\n          return onChange(e.target.innerText, e);\n        },\n        contentEditable: !isReadOnly\n      }, props), isCode ? React.createElement(\"pre\", null, children) : children);\n    }\n  }]);\n\n  return ClipboardCopyExpanded;\n}(React.Component);\nClipboardCopyExpanded.displayName = 'ClipboardCopyExpanded';\nClipboardCopyExpanded.defaultProps = {\n  onChange: function onChange() {\n    return undefined;\n  },\n  className: '',\n  isReadOnly: false,\n  isCode: false\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/ClipboardCopy/ClipboardCopyExpanded.tsx"],"names":[],"mappings":";;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,sEAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AAYA,WAAa,qBAAb;AAAA;;AAAA;;AAEE,iCAAY,KAAZ,EAAsB;AAAA;;AAAA,6BACd,KADc;AAErB;;AAJH;AAAA;AAAA,WAaE,kBAAM;AACE,UAAA,EAAA,GAAkE,KAAlE,KAAA;AAAA,UAAE,SAAF,GAAmD,EAAnD,CAAE,SAAF;AAAA,UAAa,QAAb,GAAmD,EAAnD,CAAa,QAAb;AAAA,UAAuB,QAAvB,GAAmD,EAAnD,CAAuB,QAAvB;AAAA,UAAiC,UAAjC,GAAmD,EAAnD,CAAiC,UAAjC;AAAA,UAA6C,MAA7C,GAAmD,EAAnD,CAA6C,MAA7C;AAAA,UAAwD,KAAxD,GAA6D,MAAA,CAAA,EAAA,EAA7D,CAAA,WAAA,EAAA,UAAA,EAAA,UAAA,EAAA,YAAA,EAAA,QAAA,CAA6D,CAA7D;;AAEN,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,QAAA,8BAA8B,EAAA,IADhC;AAEE,QAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,8BAAR,EAAwC,SAAxC,CAFhB;AAGE,QAAA,OAAO,EAAE,iBAAC,CAAD;AAAA,iBAAY,QAAQ,CAAC,CAAC,CAAC,MAAF,CAAS,SAAV,EAAqB,CAArB,CAApB;AAAA,SAHX;AAIE,QAAA,eAAe,EAAE,CAAC;AAJpB,OAAA,EAKM,KALN,CAAA,EAOG,MAAM,GAAG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAM,QAAN,CAAH,GAA2B,QAPpC,CADF;AAWD;AA3BH;;AAAA;AAAA,EAA2C,KAAK,CAAC,SAAjD;AACS,qBAAA,CAAA,WAAA,GAAc,uBAAd;AAKA,qBAAA,CAAA,YAAA,GAAyD;AAC9D,EAAA,QAAQ,EAAE;AAAA,WAAW,SAAX;AAAA,GADoD;AAE9D,EAAA,SAAS,EAAE,EAFmD;AAG9D,EAAA,UAAU,EAAE,KAHkD;AAI9D,EAAA,MAAM,EAAE;AAJsD,CAAzD","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { ClipboardCopyProps } from './ClipboardCopy';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ClipboardCopyExpandedProps extends Omit<ClipboardCopyProps, 'onChange'> {\n  className?: string;\n  children: React.ReactNode;\n  onChange?: (text: string, e: React.FormEvent<HTMLDivElement>) => void;\n  isReadOnly?: boolean;\n  isCode?: boolean;\n}\n\nexport class ClipboardCopyExpanded extends React.Component<ClipboardCopyExpandedProps> {\n  static displayName = 'ClipboardCopyExpanded';\n  constructor(props: any) {\n    super(props);\n  }\n\n  static defaultProps: PickOptional<ClipboardCopyExpandedProps> = {\n    onChange: (): any => undefined,\n    className: '',\n    isReadOnly: false,\n    isCode: false\n  };\n\n  render() {\n    const { className, children, onChange, isReadOnly, isCode, ...props } = this.props;\n\n    return (\n      <div\n        suppressContentEditableWarning\n        className={css(styles.clipboardCopyExpandableContent, className)}\n        onInput={(e: any) => onChange(e.target.innerText, e)}\n        contentEditable={!isReadOnly}\n        {...props}\n      >\n        {isCode ? <pre>{children}</pre> : children}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}