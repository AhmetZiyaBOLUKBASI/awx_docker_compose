{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import getRowRangePageSize from'./shared/jobOutputUtils';export default function getEventRequestParams(job,remoteRowCount,requestRange){var _requestRange=_slicedToArray(requestRange,2),startIndex=_requestRange[0],stopIndex=_requestRange[1];var _getRowRangePageSize=getRowRangePageSize(startIndex,stopIndex),page=_getRowRangePageSize.page,pageSize=_getRowRangePageSize.pageSize,firstIndex=_getRowRangePageSize.firstIndex;var loadRange=range(firstIndex+1,Math.min(firstIndex+pageSize,remoteRowCount));return[{page:page,page_size:pageSize},loadRange];}export function range(low,high){var numbers=[];for(var n=low;n<=high;n++){numbers.push(n);}return numbers;}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Job/JobOutput/getEventRequestParams.js"],"names":["getRowRangePageSize","getEventRequestParams","job","remoteRowCount","requestRange","startIndex","stopIndex","page","pageSize","firstIndex","loadRange","range","Math","min","page_size","low","high","numbers","n","push"],"mappings":"uGAAA,MAAOA,CAAAA,mBAAP,KAAgC,yBAAhC,CAEA,cAAe,SAASC,CAAAA,qBAAT,CACbC,GADa,CAEbC,cAFa,CAGbC,YAHa,CAIb,CACA,iCAAgCA,YAAhC,IAAOC,UAAP,kBAAmBC,SAAnB,kBACA,yBAAuCN,mBAAmB,CACxDK,UADwD,CAExDC,SAFwD,CAA1D,CAAQC,IAAR,sBAAQA,IAAR,CAAcC,QAAd,sBAAcA,QAAd,CAAwBC,UAAxB,sBAAwBA,UAAxB,CAIA,GAAMC,CAAAA,SAAS,CAAGC,KAAK,CACrBF,UAAU,CAAG,CADQ,CAErBG,IAAI,CAACC,GAAL,CAASJ,UAAU,CAAGD,QAAtB,CAAgCL,cAAhC,CAFqB,CAAvB,CAKA,MAAO,CAAC,CAAEI,IAAI,CAAJA,IAAF,CAAQO,SAAS,CAAEN,QAAnB,CAAD,CAAgCE,SAAhC,CAAP,CACD,CAED,MAAO,SAASC,CAAAA,KAAT,CAAeI,GAAf,CAAoBC,IAApB,CAA0B,CAC/B,GAAMC,CAAAA,OAAO,CAAG,EAAhB,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAGH,GAAb,CAAkBG,CAAC,EAAIF,IAAvB,CAA6BE,CAAC,EAA9B,CAAkC,CAChCD,OAAO,CAACE,IAAR,CAAaD,CAAb,EACD,CACD,MAAOD,CAAAA,OAAP,CACD","sourcesContent":["import getRowRangePageSize from './shared/jobOutputUtils';\n\nexport default function getEventRequestParams(\n  job,\n  remoteRowCount,\n  requestRange\n) {\n  const [startIndex, stopIndex] = requestRange;\n  const { page, pageSize, firstIndex } = getRowRangePageSize(\n    startIndex,\n    stopIndex\n  );\n  const loadRange = range(\n    firstIndex + 1,\n    Math.min(firstIndex + pageSize, remoteRowCount)\n  );\n\n  return [{ page, page_size: pageSize }, loadRange];\n}\n\nexport function range(low, high) {\n  const numbers = [];\n  for (let n = low; n <= high; n++) {\n    numbers.push(n);\n  }\n  return numbers;\n}\n"]},"metadata":{},"sourceType":"module"}