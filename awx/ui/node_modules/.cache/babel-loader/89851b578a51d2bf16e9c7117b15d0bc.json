{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { formatBreakpointMods, toCamel } from '../../helpers/util';\nimport { Divider } from '../Divider';\nimport { PageContext } from '../Page/Page';\nexport var ToolbarItemVariant;\n\n(function (ToolbarItemVariant) {\n  ToolbarItemVariant[\"separator\"] = \"separator\";\n  ToolbarItemVariant[\"bulk-select\"] = \"bulk-select\";\n  ToolbarItemVariant[\"overflow-menu\"] = \"overflow-menu\";\n  ToolbarItemVariant[\"pagination\"] = \"pagination\";\n  ToolbarItemVariant[\"search-filter\"] = \"search-filter\";\n  ToolbarItemVariant[\"label\"] = \"label\";\n  ToolbarItemVariant[\"chip-group\"] = \"chip-group\";\n  ToolbarItemVariant[\"expand-all\"] = \"expand-all\";\n})(ToolbarItemVariant || (ToolbarItemVariant = {}));\n\nexport var ToolbarItem = function ToolbarItem(_a) {\n  var className = _a.className,\n      variant = _a.variant,\n      visibility = _a.visibility,\n      visiblity = _a.visiblity,\n      alignment = _a.alignment,\n      spacer = _a.spacer,\n      widths = _a.widths,\n      id = _a.id,\n      children = _a.children,\n      isAllExpanded = _a.isAllExpanded,\n      props = __rest(_a, [\"className\", \"variant\", \"visibility\", \"visiblity\", \"alignment\", \"spacer\", \"widths\", \"id\", \"children\", \"isAllExpanded\"]);\n\n  if (variant === ToolbarItemVariant.separator) {\n    return React.createElement(Divider, Object.assign({\n      className: css(styles.modifiers.vertical, className)\n    }, props));\n  }\n\n  if (visiblity !== undefined) {\n    // eslint-disable-next-line no-console\n    console.warn('The ToolbarItem visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n  }\n\n  var widthStyles = {};\n\n  if (widths) {\n    Object.entries(widths || {}).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          breakpoint = _ref2[0],\n          value = _ref2[1];\n\n      return widthStyles[\"--pf-c-toolbar__item--Width\".concat(breakpoint !== 'default' ? \"-on-\".concat(breakpoint) : '')] = value;\n    });\n  }\n\n  return React.createElement(PageContext.Consumer, null, function (_ref3) {\n    var width = _ref3.width,\n        getBreakpoint = _ref3.getBreakpoint;\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.toolbarItem, variant && styles.modifiers[toCamel(variant)], isAllExpanded && styles.modifiers.expanded, formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), formatBreakpointMods(spacer, styles, '', getBreakpoint(width)), className)\n    }, variant === 'label' && {\n      'aria-hidden': true\n    }, {\n      id: id\n    }, props, widths && {\n      style: Object.assign(Object.assign({}, widthStyles), props.style)\n    }), children);\n  });\n};\nToolbarItem.displayName = 'ToolbarItem';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarItem.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\n\nimport { formatBreakpointMods, toCamel } from '../../helpers/util';\nimport { Divider } from '../Divider';\nimport { PageContext } from '../Page/Page';\n\nexport enum ToolbarItemVariant {\n  separator = 'separator',\n  'bulk-select' = 'bulk-select',\n  'overflow-menu' = 'overflow-menu',\n  pagination = 'pagination',\n  'search-filter' = 'search-filter',\n  label = 'label',\n  'chip-group' = 'chip-group',\n  'expand-all' = 'expand-all'\n}\n\nexport interface ToolbarItemProps extends React.HTMLProps<HTMLDivElement> {\n  /** Classes applied to root element of the data toolbar item */\n  className?: string;\n  /** A type modifier which modifies spacing specifically depending on the type of item */\n  variant?:\n    | ToolbarItemVariant\n    | 'bulk-select'\n    | 'overflow-menu'\n    | 'pagination'\n    | 'search-filter'\n    | 'label'\n    | 'chip-group'\n    | 'separator'\n    | 'expand-all';\n  /** Visibility at various breakpoints. */\n  visibility?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** @deprecated prop misspelled */\n  visiblity?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** Alignment at various breakpoints. */\n  alignment?: {\n    default?: 'alignRight' | 'alignLeft';\n    md?: 'alignRight' | 'alignLeft';\n    lg?: 'alignRight' | 'alignLeft';\n    xl?: 'alignRight' | 'alignLeft';\n    '2xl'?: 'alignRight' | 'alignLeft';\n  };\n  /** Spacers at various breakpoints. */\n  spacer?: {\n    default?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    md?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    lg?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    xl?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    '2xl'?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n  };\n  /** Widths at various breakpoints. */\n  widths?: {\n    default?: string;\n    sm?: string;\n    md?: string;\n    lg?: string;\n    xl?: string;\n    '2xl'?: string;\n  };\n  /** id for this data toolbar item */\n  id?: string;\n  /** Flag indicating if the expand-all variant is expanded or not */\n  isAllExpanded?: boolean;\n  /** Content to be rendered inside the data toolbar item */\n  children?: React.ReactNode;\n}\n\nexport const ToolbarItem: React.FunctionComponent<ToolbarItemProps> = ({\n  className,\n  variant,\n  visibility,\n  visiblity,\n  alignment,\n  spacer,\n  widths,\n  id,\n  children,\n  isAllExpanded,\n  ...props\n}: ToolbarItemProps) => {\n  if (variant === ToolbarItemVariant.separator) {\n    return <Divider className={css(styles.modifiers.vertical, className)} {...props} />;\n  }\n\n  if (visiblity !== undefined) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'The ToolbarItem visiblity prop has been deprecated. ' +\n        'Please use the correctly spelled visibility prop instead.'\n    );\n  }\n\n  const widthStyles: any = {};\n  if (widths) {\n    Object.entries(widths || {}).map(\n      ([breakpoint, value]) =>\n        (widthStyles[`--pf-c-toolbar__item--Width${breakpoint !== 'default' ? `-on-${breakpoint}` : ''}`] = value)\n    );\n  }\n\n  return (\n    <PageContext.Consumer>\n      {({ width, getBreakpoint }) => (\n        <div\n          className={css(\n            styles.toolbarItem,\n            variant &&\n              styles.modifiers[\n                toCamel(variant) as\n                  | 'bulkSelect'\n                  | 'overflowMenu'\n                  | 'pagination'\n                  | 'searchFilter'\n                  | 'label'\n                  | 'chipGroup'\n              ],\n            isAllExpanded && styles.modifiers.expanded,\n            formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)),\n            formatBreakpointMods(alignment, styles, '', getBreakpoint(width)),\n            formatBreakpointMods(spacer, styles, '', getBreakpoint(width)),\n            className\n          )}\n          {...(variant === 'label' && { 'aria-hidden': true })}\n          id={id}\n          {...props}\n          {...(widths && { style: { ...widthStyles, ...props.style } as React.CSSProperties })}\n        >\n          {children}\n        </div>\n      )}\n    </PageContext.Consumer>\n  );\n};\nToolbarItem.displayName = 'ToolbarItem';\n"]},"metadata":{},"sourceType":"module"}