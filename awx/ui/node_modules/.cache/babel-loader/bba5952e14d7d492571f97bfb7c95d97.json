{"ast":null,"code":"import * as React from 'react';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { Button, Tooltip, Popover } from '@patternfly/react-core';\nimport { TableText } from './TableText';\nexport var HeaderCellInfoWrapper = function HeaderCellInfoWrapper(_ref) {\n  var children = _ref.children,\n      info = _ref.info,\n      className = _ref.className,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? 'tooltip' : _ref$variant,\n      popoverProps = _ref.popoverProps,\n      tooltipProps = _ref.tooltipProps,\n      ariaLabel = _ref.ariaLabel;\n  return React.createElement(\"div\", {\n    className: css(styles.tableColumnHelp, className)\n  }, typeof children === 'string' ? React.createElement(TableText, null, children) : children, React.createElement(\"span\", {\n    className: css(styles.tableColumnHelpAction)\n  }, variant === 'tooltip' ? React.createElement(Tooltip, Object.assign({\n    content: info\n  }, tooltipProps), React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": ariaLabel || typeof info === 'string' && info || 'More info'\n  }, React.createElement(HelpIcon, {\n    noVerticalAlign: true\n  }))) : React.createElement(Popover, Object.assign({\n    bodyContent: info\n  }, popoverProps), React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": ariaLabel || typeof info === 'string' && info || 'More info'\n  }, React.createElement(HelpIcon, {\n    noVerticalAlign: true\n  })))));\n};\nHeaderCellInfoWrapper.displayName = 'HeaderCellInfoWrapper';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/HeaderCellInfoWrapper.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,QAAP,MAAqB,kDAArB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,qDAAnB;AACA,SAAS,MAAT,EAAiB,OAAjB,EAA0B,OAA1B,QAAqE,wBAArE;AACA,SAAS,SAAT,QAA0B,aAA1B;AAiCA,OAAO,IAAM,qBAAqB,GAAoD,SAAzE,qBAAyE;AAAA,MACpF,QADoF,QACpF,QADoF;AAAA,MAEpF,IAFoF,QAEpF,IAFoF;AAAA,MAGpF,SAHoF,QAGpF,SAHoF;AAAA,0BAIpF,OAJoF;AAAA,MAIpF,OAJoF,6BAI1E,SAJ0E;AAAA,MAKpF,YALoF,QAKpF,YALoF;AAAA,MAMpF,YANoF,QAMpF,YANoF;AAAA,MAOpF,SAPoF,QAOpF,SAPoF;AAAA,SASpF,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAR,EAAyB,SAAzB;AAAnB,GAAA,EACG,OAAO,QAAP,KAAoB,QAApB,GAA+B,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,IAAV,EAAY,QAAZ,CAA/B,GAAmE,QADtE,EAEE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,qBAAR;AAApB,GAAA,EACG,OAAO,KAAK,SAAZ,GACC,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,OAAO,EAAE;AAAV,GAAA,EAAoB,YAApB,CAAR,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,IAAA,OAAO,EAAC,OAAT;AAAgB,kBAAa,SAAS,IAAK,OAAO,IAAP,KAAgB,QAAhB,IAA4B,IAA1C,IAAmD;AAAhF,GAAP,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAC,IAAA,eAAe,EAAA;AAAhB,GAAT,CADF,CADF,CADD,GAOC,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,WAAW,EAAE;AAAd,GAAA,EAAwB,YAAxB,CAAR,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,IAAA,OAAO,EAAC,OAAT;AAAgB,kBAAa,SAAS,IAAK,OAAO,IAAP,KAAgB,QAAhB,IAA4B,IAA1C,IAAmD;AAAhF,GAAP,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAC,IAAA,eAAe,EAAA;AAAhB,GAAT,CADF,CADF,CARJ,CAFF,CAToF;AAAA,CAA/E;AA4BP,qBAAqB,CAAC,WAAtB,GAAoC,uBAApC","sourcesContent":["import * as React from 'react';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { Button, Tooltip, Popover, TooltipProps, PopoverProps } from '@patternfly/react-core';\nimport { TableText } from './TableText';\n\nexport interface ColumnHelpWrapperProps {\n  /**\n   * The header cell that is wrapped\n   */\n  children: React.ReactNode;\n  /**\n   * The information that is presented in the tooltip/popover\n   */\n  info: React.ReactNode;\n  /**\n   * Optional classname to add to the tooltip/popover\n   */\n  className?: string;\n  /**\n   * The info variant\n   */\n  variant?: 'tooltip' | 'popover';\n  /**\n   * Additional props forwarded to the Popover component\n   */\n  popoverProps?: Omit<PopoverProps, 'bodyContent'>;\n  /**\n   * Additional props forwarded to the tooltip component\n   */\n  tooltipProps?: Omit<TooltipProps, 'content'>;\n  /**\n   * Aria label of the info button\n   */\n  ariaLabel?: string;\n}\n\nexport const HeaderCellInfoWrapper: React.FunctionComponent<ColumnHelpWrapperProps> = ({\n  children,\n  info,\n  className,\n  variant = 'tooltip',\n  popoverProps,\n  tooltipProps,\n  ariaLabel\n}: ColumnHelpWrapperProps) => (\n  <div className={css(styles.tableColumnHelp, className)}>\n    {typeof children === 'string' ? <TableText>{children}</TableText> : children}\n    <span className={css(styles.tableColumnHelpAction)}>\n      {variant === 'tooltip' ? (\n        <Tooltip content={info} {...tooltipProps}>\n          <Button variant=\"plain\" aria-label={ariaLabel || (typeof info === 'string' && info) || 'More info'}>\n            <HelpIcon noVerticalAlign />\n          </Button>\n        </Tooltip>\n      ) : (\n        <Popover bodyContent={info} {...popoverProps}>\n          <Button variant=\"plain\" aria-label={ariaLabel || (typeof info === 'string' && info) || 'More info'}>\n            <HelpIcon noVerticalAlign />\n          </Button>\n        </Popover>\n      )}\n    </span>\n  </div>\n);\nHeaderCellInfoWrapper.displayName = 'HeaderCellInfoWrapper';\n"]},"metadata":{},"sourceType":"module"}