{"ast":null,"code":"import{i18n}from\"@lingui/core\";var credentialPromptsForPassword=function credentialPromptsForPassword(credential){var _credential$inputs,_credential$inputs2,_credential$inputs3,_credential$inputs4;return(credential===null||credential===void 0?void 0:(_credential$inputs=credential.inputs)===null||_credential$inputs===void 0?void 0:_credential$inputs.password)==='ASK'||(credential===null||credential===void 0?void 0:(_credential$inputs2=credential.inputs)===null||_credential$inputs2===void 0?void 0:_credential$inputs2.ssh_key_unlock)==='ASK'||(credential===null||credential===void 0?void 0:(_credential$inputs3=credential.inputs)===null||_credential$inputs3===void 0?void 0:_credential$inputs3.become_password)==='ASK'||(credential===null||credential===void 0?void 0:(_credential$inputs4=credential.inputs)===null||_credential$inputs4===void 0?void 0:_credential$inputs4.vault_password)==='ASK';};export default function credentialsValidator(allowCredentialsWithPasswords,selectedCredentials){var defaultCredentials=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];if(defaultCredentials.length>0&&selectedCredentials){var missingCredentialTypes=[];defaultCredentials.forEach(function(defaultCredential){if(!selectedCredentials.find(function(selectedCredential){var _selectedCredential$i,_defaultCredential$in,_defaultCredential$in2,_selectedCredential$i2,_defaultCredential$in3;return(selectedCredential===null||selectedCredential===void 0?void 0:selectedCredential.credential_type)===(defaultCredential===null||defaultCredential===void 0?void 0:defaultCredential.credential_type)&&!((_selectedCredential$i=selectedCredential.inputs)!==null&&_selectedCredential$i!==void 0&&_selectedCredential$i.vault_id)&&!((_defaultCredential$in=defaultCredential.inputs)!==null&&_defaultCredential$in!==void 0&&_defaultCredential$in.vault_id)||((_defaultCredential$in2=defaultCredential.inputs)===null||_defaultCredential$in2===void 0?void 0:_defaultCredential$in2.vault_id)&&((_selectedCredential$i2=selectedCredential.inputs)===null||_selectedCredential$i2===void 0?void 0:_selectedCredential$i2.vault_id)===((_defaultCredential$in3=defaultCredential.inputs)===null||_defaultCredential$in3===void 0?void 0:_defaultCredential$in3.vault_id);})){var _defaultCredential$in4;missingCredentialTypes.push((_defaultCredential$in4=defaultCredential.inputs)!==null&&_defaultCredential$in4!==void 0&&_defaultCredential$in4.vault_id?\"\".concat(defaultCredential.summary_fields.credential_type.name,\" | \").concat(defaultCredential.inputs.vault_id):defaultCredential.summary_fields.credential_type.name);}});if(missingCredentialTypes.length>0){return(/*i18n*/i18n._(\"Job Template default credentials must be replaced with one of the same type.  Please select a credential for the following types in order to proceed: {0}\",{0:missingCredentialTypes.join(', ')}));}}if(!allowCredentialsWithPasswords&&selectedCredentials){var credentialsThatPrompt=[];selectedCredentials.forEach(function(selectedCredential){if(credentialPromptsForPassword(selectedCredential)){credentialsThatPrompt.push(selectedCredential.name);}});if(credentialsThatPrompt.length>0){return(/*i18n*/i18n._(\"Credentials that require passwords on launch are not permitted.  Please remove or replace the following credentials with a credential of the same type in order to proceed: {0}\",{0:credentialsThatPrompt.join(', ')}));}}return undefined;}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/LaunchPrompt/steps/credentialsValidator.js"],"names":["credentialPromptsForPassword","credential","inputs","password","ssh_key_unlock","become_password","vault_password","credentialsValidator","allowCredentialsWithPasswords","selectedCredentials","defaultCredentials","length","missingCredentialTypes","forEach","defaultCredential","find","selectedCredential","credential_type","vault_id","push","summary_fields","name","join","credentialsThatPrompt","undefined"],"mappings":"+BAEA,GAAMA,CAAAA,4BAA4B,CAAG,QAA/BA,CAAAA,4BAA+B,CAACC,UAAD,2FACnC,CAAAA,UAAU,OAAV,EAAAA,UAAU,SAAV,4BAAAA,UAAU,CAAEC,MAAZ,gEAAoBC,QAApB,IAAiC,KAAjC,EACA,CAAAF,UAAU,OAAV,EAAAA,UAAU,SAAV,6BAAAA,UAAU,CAAEC,MAAZ,kEAAoBE,cAApB,IAAuC,KADvC,EAEA,CAAAH,UAAU,OAAV,EAAAA,UAAU,SAAV,6BAAAA,UAAU,CAAEC,MAAZ,kEAAoBG,eAApB,IAAwC,KAFxC,EAGA,CAAAJ,UAAU,OAAV,EAAAA,UAAU,SAAV,6BAAAA,UAAU,CAAEC,MAAZ,kEAAoBI,cAApB,IAAuC,KAJJ,EAArC,CAMA,cAAe,SAASC,CAAAA,oBAAT,CACbC,6BADa,CAEbC,mBAFa,CAIb,IADAC,CAAAA,kBACA,2DADqB,EACrB,CACA,GAAIA,kBAAkB,CAACC,MAAnB,CAA4B,CAA5B,EAAiCF,mBAArC,CAA0D,CACxD,GAAMG,CAAAA,sBAAsB,CAAG,EAA/B,CACAF,kBAAkB,CAACG,OAAnB,CAA2B,SAACC,iBAAD,CAAuB,CAChD,GACE,CAACL,mBAAmB,CAACM,IAApB,CACC,SAACC,kBAAD,6HACG,CAAAA,kBAAkB,OAAlB,EAAAA,kBAAkB,SAAlB,QAAAA,kBAAkB,CAAEC,eAApB,KACCH,iBADD,SACCA,iBADD,iBACCA,iBAAiB,CAAEG,eADpB,GAEC,yBAACD,kBAAkB,CAACd,MAApB,0CAAC,sBAA2BgB,QAA5B,CAFD,EAGC,yBAACJ,iBAAiB,CAACZ,MAAnB,0CAAC,sBAA0BgB,QAA3B,CAHF,EAIC,yBAAAJ,iBAAiB,CAACZ,MAAlB,wEAA0BgB,QAA1B,GACC,yBAAAF,kBAAkB,CAACd,MAAnB,wEAA2BgB,QAA3B,6BACEJ,iBAAiB,CAACZ,MADpB,iDACE,uBAA0BgB,QAD5B,CANJ,EADD,CADH,CAWE,4BACAN,sBAAsB,CAACO,IAAvB,CACE,wBAAAL,iBAAiB,CAACZ,MAAlB,kEAA0BgB,QAA1B,WACOJ,iBAAiB,CAACM,cAAlB,CAAiCH,eAAjC,CAAiDI,IADxD,eACkEP,iBAAiB,CAACZ,MAAlB,CAAyBgB,QAD3F,EAEIJ,iBAAiB,CAACM,cAAlB,CAAiCH,eAAjC,CAAiDI,IAHvD,EAKD,CACF,CAnBD,EAqBA,GAAIT,sBAAsB,CAACD,MAAvB,CAAgC,CAApC,CAAuC,CACrC,eAAO,sKAA0JC,sBAAsB,CAACU,IAAvB,CAC/J,IAD+J,CAA1J,EAAP,EAGD,CACF,CAED,GAAI,CAACd,6BAAD,EAAkCC,mBAAtC,CAA2D,CACzD,GAAMc,CAAAA,qBAAqB,CAAG,EAA9B,CACAd,mBAAmB,CAACI,OAApB,CAA4B,SAACG,kBAAD,CAAwB,CAClD,GAAIhB,4BAA4B,CAACgB,kBAAD,CAAhC,CAAsD,CACpDO,qBAAqB,CAACJ,IAAtB,CAA2BH,kBAAkB,CAACK,IAA9C,EACD,CACF,CAJD,EAKA,GAAIE,qBAAqB,CAACZ,MAAtB,CAA+B,CAAnC,CAAsC,CACpC,eAAO,4LAAgLY,qBAAqB,CAACD,IAAtB,CACrL,IADqL,CAAhL,EAAP,EAGD,CACF,CAED,MAAOE,CAAAA,SAAP,CACD","sourcesContent":["import { t } from '@lingui/macro';\n\nconst credentialPromptsForPassword = (credential) =>\n  credential?.inputs?.password === 'ASK' ||\n  credential?.inputs?.ssh_key_unlock === 'ASK' ||\n  credential?.inputs?.become_password === 'ASK' ||\n  credential?.inputs?.vault_password === 'ASK';\n\nexport default function credentialsValidator(\n  allowCredentialsWithPasswords,\n  selectedCredentials,\n  defaultCredentials = []\n) {\n  if (defaultCredentials.length > 0 && selectedCredentials) {\n    const missingCredentialTypes = [];\n    defaultCredentials.forEach((defaultCredential) => {\n      if (\n        !selectedCredentials.find(\n          (selectedCredential) =>\n            (selectedCredential?.credential_type ===\n              defaultCredential?.credential_type &&\n              !selectedCredential.inputs?.vault_id &&\n              !defaultCredential.inputs?.vault_id) ||\n            (defaultCredential.inputs?.vault_id &&\n              selectedCredential.inputs?.vault_id ===\n                defaultCredential.inputs?.vault_id)\n        )\n      ) {\n        missingCredentialTypes.push(\n          defaultCredential.inputs?.vault_id\n            ? `${defaultCredential.summary_fields.credential_type.name} | ${defaultCredential.inputs.vault_id}`\n            : defaultCredential.summary_fields.credential_type.name\n        );\n      }\n    });\n\n    if (missingCredentialTypes.length > 0) {\n      return t`Job Template default credentials must be replaced with one of the same type.  Please select a credential for the following types in order to proceed: ${missingCredentialTypes.join(\n        ', '\n      )}`;\n    }\n  }\n\n  if (!allowCredentialsWithPasswords && selectedCredentials) {\n    const credentialsThatPrompt = [];\n    selectedCredentials.forEach((selectedCredential) => {\n      if (credentialPromptsForPassword(selectedCredential)) {\n        credentialsThatPrompt.push(selectedCredential.name);\n      }\n    });\n    if (credentialsThatPrompt.length > 0) {\n      return t`Credentials that require passwords on launch are not permitted.  Please remove or replace the following credentials with a credential of the same type in order to proceed: ${credentialsThatPrompt.join(\n        ', '\n      )}`;\n    }\n  }\n\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}