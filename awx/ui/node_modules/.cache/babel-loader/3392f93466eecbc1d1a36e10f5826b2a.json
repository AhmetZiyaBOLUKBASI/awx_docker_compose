{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport { PageContextConsumer } from './Page';\nexport var pageSidebarContextDefaults = {\n  isNavOpen: true\n};\nexport var PageSidebarContext = React.createContext(pageSidebarContextDefaults);\nexport var PageSidebar = function PageSidebar(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      nav = _a.nav,\n      _a$isNavOpen = _a.isNavOpen,\n      isNavOpen = _a$isNavOpen === void 0 ? true : _a$isNavOpen,\n      _a$theme = _a.theme,\n      theme = _a$theme === void 0 ? 'dark' : _a$theme,\n      props = __rest(_a, [\"className\", \"nav\", \"isNavOpen\", \"theme\"]);\n\n  return React.createElement(PageContextConsumer, null, function (_ref) {\n    var isManagedSidebar = _ref.isManagedSidebar,\n        managedIsNavOpen = _ref.isNavOpen;\n    var navOpen = isManagedSidebar ? managedIsNavOpen : isNavOpen;\n    return React.createElement(\"div\", Object.assign({\n      id: \"page-sidebar\",\n      className: css(styles.pageSidebar, theme === 'light' && styles.modifiers.light, navOpen && styles.modifiers.expanded, !navOpen && styles.modifiers.collapsed, className),\n      \"aria-hidden\": !navOpen\n    }, props), React.createElement(\"div\", {\n      className: styles.pageSidebarBody\n    }, React.createElement(PageSidebarContext.Provider, {\n      value: {\n        isNavOpen: navOpen\n      }\n    }, nav)));\n  });\n};\nPageSidebar.displayName = 'PageSidebar';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Page/PageSidebar.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,mDAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,mBAAT,QAAoC,QAApC;AAqBA,OAAO,IAAM,0BAA0B,GAA4B;AACjE,EAAA,SAAS,EAAE;AADsD,CAA5D;AAGP,OAAO,IAAM,kBAAkB,GAAG,KAAK,CAAC,aAAN,CAAsD,0BAAtD,CAA3B;AAEP,OAAO,IAAM,WAAW,GAA8C,SAAzD,WAAyD,CAAC,EAAD,EAM/C;AANgD,qBAIvD,EAJuD,CACrE,SADqE;AAAA,MACrE,SADqE,6BACzD,EADyD;AAAA,MAErE,GAFqE,GAIvD,EAJuD,CAErE,GAFqE;AAAA,qBAIvD,EAJuD,CAGrE,SAHqE;AAAA,MAGrE,SAHqE,6BAGzD,IAHyD;AAAA,iBAIvD,EAJuD,CAIrE,KAJqE;AAAA,MAIrE,KAJqE,yBAI7D,MAJ6D;AAAA,MAKlE,KALkE,GAK7D,MAAA,CAAA,EAAA,EAL6D,CAAA,WAAA,EAAA,KAAA,EAAA,WAAA,EAAA,OAAA,CAK7D,CAL6D;;AAM/C,SACtB,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB,IAApB,EACG,gBAAwE;AAAA,QAArE,gBAAqE,QAArE,gBAAqE;AAAA,QAAxC,gBAAwC,QAAnD,SAAmD;AACvE,QAAM,OAAO,GAAG,gBAAgB,GAAG,gBAAH,GAAsB,SAAtD;AAEA,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,MAAA,EAAE,EAAC,cADL;AAEE,MAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,WADK,EAEZ,KAAK,KAAK,OAAV,IAAqB,MAAM,CAAC,SAAP,CAAiB,KAF1B,EAGZ,OAAO,IAAI,MAAM,CAAC,SAAP,CAAiB,QAHhB,EAIZ,CAAC,OAAD,IAAY,MAAM,CAAC,SAAP,CAAiB,SAJjB,EAKZ,SALY,CAFhB;AAQG,qBACY,CAAC;AAThB,KAAA,EAUM,KAVN,CAAA,EAYE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAE,MAAM,CAAC;AAAvB,KAAA,EACE,KAAA,CAAA,aAAA,CAAC,kBAAkB,CAAC,QAApB,EAA4B;AAAC,MAAA,KAAK,EAAE;AAAE,QAAA,SAAS,EAAE;AAAb;AAAR,KAA5B,EAA6D,GAA7D,CADF,CAZF,CADF;AAkBD,GAtBH,CADsB;AAyBvB,CA/BM;AAgCP,WAAW,CAAC,WAAZ,GAA0B,aAA1B","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport { PageContextConsumer } from './Page';\n\nexport interface PageSidebarProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the page sidebar */\n  className?: string;\n  /** Component to render the side navigation (e.g. <Nav /> */\n  nav?: React.ReactNode;\n  /**\n   * If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into\n   * the sidebar component or add a callback onNavToggle function into the PageHeader component\n   */\n  isManagedSidebar?: boolean;\n  /** Programmatically manage if the side nav is shown, if isManagedSidebar is set to true in the Page component, this prop is managed */\n  isNavOpen?: boolean;\n  /** Indicates the color scheme of the sidebar */\n  theme?: 'dark' | 'light';\n}\n\nexport interface PageSidebarContextProps {\n  isNavOpen: boolean;\n}\nexport const pageSidebarContextDefaults: PageSidebarContextProps = {\n  isNavOpen: true\n};\nexport const PageSidebarContext = React.createContext<Partial<PageSidebarContextProps>>(pageSidebarContextDefaults);\n\nexport const PageSidebar: React.FunctionComponent<PageSidebarProps> = ({\n  className = '',\n  nav,\n  isNavOpen = true,\n  theme = 'dark',\n  ...props\n}: PageSidebarProps) => (\n  <PageContextConsumer>\n    {({ isManagedSidebar, isNavOpen: managedIsNavOpen }: PageSidebarProps) => {\n      const navOpen = isManagedSidebar ? managedIsNavOpen : isNavOpen;\n\n      return (\n        <div\n          id=\"page-sidebar\"\n          className={css(\n            styles.pageSidebar,\n            theme === 'light' && styles.modifiers.light,\n            navOpen && styles.modifiers.expanded,\n            !navOpen && styles.modifiers.collapsed,\n            className\n          )}\n          aria-hidden={!navOpen}\n          {...props}\n        >\n          <div className={styles.pageSidebarBody}>\n            <PageSidebarContext.Provider value={{ isNavOpen: navOpen }}>{nav}</PageSidebarContext.Provider>\n          </div>\n        </div>\n      );\n    }}\n  </PageContextConsumer>\n);\nPageSidebar.displayName = 'PageSidebar';\n"]},"metadata":{},"sourceType":"module"}