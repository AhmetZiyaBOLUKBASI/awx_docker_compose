{"ast":null,"code":"import dateutil from './dateutil';\n\nvar DateWithZone =\n/** @class */\nfunction () {\n  function DateWithZone(date, tzid) {\n    if (isNaN(date.getTime())) {\n      throw new RangeError('Invalid date passed to DateWithZone');\n    }\n\n    this.date = date;\n    this.tzid = tzid;\n  }\n\n  Object.defineProperty(DateWithZone.prototype, \"isUTC\", {\n    get: function get() {\n      return !this.tzid || this.tzid.toUpperCase() === 'UTC';\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DateWithZone.prototype.toString = function () {\n    var datestr = dateutil.timeToUntilString(this.date.getTime(), this.isUTC);\n\n    if (!this.isUTC) {\n      return \";TZID=\".concat(this.tzid, \":\").concat(datestr);\n    }\n\n    return \":\".concat(datestr);\n  };\n\n  DateWithZone.prototype.getTime = function () {\n    return this.date.getTime();\n  };\n\n  DateWithZone.prototype.rezonedDate = function () {\n    var _a;\n\n    if (this.isUTC) {\n      return this.date;\n    }\n\n    var localTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    var dateInLocalTZ = new Date(this.date.toLocaleString(undefined, {\n      timeZone: localTimeZone\n    }));\n    var dateInTargetTZ = new Date(this.date.toLocaleString(undefined, {\n      timeZone: (_a = this.tzid) !== null && _a !== void 0 ? _a : 'UTC'\n    }));\n    var tzOffset = dateInTargetTZ.getTime() - dateInLocalTZ.getTime();\n    return new Date(this.date.getTime() - tzOffset);\n  };\n\n  return DateWithZone;\n}();\n\nexport { DateWithZone };","map":{"version":3,"sources":["../../src/datewithzone.ts"],"names":[],"mappings":"AAAA,OAAO,QAAP,MAAqB,YAArB;;AAEA,IAAA,YAAA;AAAA;AAAA,YAAA;AAIE,WAAA,YAAA,CAAY,IAAZ,EAAwB,IAAxB,EAA4C;AAC1C,QAAI,KAAK,CAAC,IAAI,CAAC,OAAL,EAAD,CAAT,EAA2B;AACzB,YAAM,IAAI,UAAJ,CAAe,qCAAf,CAAN;AACD;;AACD,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,IAAL,GAAY,IAAZ;AACD;;AAED,EAAA,MAAA,CAAA,cAAA,CAAY,YAAA,CAAA,SAAZ,EAAY,OAAZ,EAAiB;SAAjB,eAAA;AACE,aAAO,CAAC,KAAK,IAAN,IAAc,KAAK,IAAL,CAAU,WAAV,OAA4B,KAAjD;AACD,KAFgB;qBAAA;;AAAA,GAAjB;;AAIO,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACE,QAAM,OAAO,GAAG,QAAQ,CAAC,iBAAT,CAA2B,KAAK,IAAL,CAAU,OAAV,EAA3B,EAAgD,KAAK,KAArD,CAAhB;;AACA,QAAI,CAAC,KAAK,KAAV,EAAiB;AACf,aAAO,SAAA,MAAA,CAAS,KAAK,IAAd,EAAkB,GAAlB,EAAkB,MAAlB,CAAsB,OAAtB,CAAP;AACD;;AAED,WAAO,IAAA,MAAA,CAAI,OAAJ,CAAP;AACD,GAPM;;AASA,EAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACE,WAAO,KAAK,IAAL,CAAU,OAAV,EAAP;AACD,GAFM;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;;;AACE,QAAI,KAAK,KAAT,EAAgB;AACd,aAAO,KAAK,IAAZ;AACD;;AAED,QAAM,aAAa,GAAG,IAAI,CAAC,cAAL,GAAsB,eAAtB,GAAwC,QAA9D;AACA,QAAM,aAAa,GAAG,IAAI,IAAJ,CACpB,KAAK,IAAL,CAAU,cAAV,CAAyB,SAAzB,EAAoC;AAAE,MAAA,QAAQ,EAAE;AAAZ,KAApC,CADoB,CAAtB;AAGA,QAAM,cAAc,GAAG,IAAI,IAAJ,CACrB,KAAK,IAAL,CAAU,cAAV,CAAyB,SAAzB,EAAoC;AAAE,MAAA,QAAQ,EAAE,CAAA,EAAA,GAAA,KAAK,IAAL,MAAS,IAAT,IAAS,EAAA,KAAA,KAAA,CAAT,GAAS,EAAT,GAAa;AAAzB,KAApC,CADqB,CAAvB;AAGA,QAAM,QAAQ,GAAG,cAAc,CAAC,OAAf,KAA2B,aAAa,CAAC,OAAd,EAA5C;AAEA,WAAO,IAAI,IAAJ,CAAS,KAAK,IAAL,CAAU,OAAV,KAAsB,QAA/B,CAAP;AACD,GAfM;;AAgBT,SAAA,YAAA;AAAC,CA7CD,EAAA","sourcesContent":["import dateutil from './dateutil';\nvar DateWithZone = /** @class */ (function () {\n    function DateWithZone(date, tzid) {\n        if (isNaN(date.getTime())) {\n            throw new RangeError('Invalid date passed to DateWithZone');\n        }\n        this.date = date;\n        this.tzid = tzid;\n    }\n    Object.defineProperty(DateWithZone.prototype, \"isUTC\", {\n        get: function () {\n            return !this.tzid || this.tzid.toUpperCase() === 'UTC';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DateWithZone.prototype.toString = function () {\n        var datestr = dateutil.timeToUntilString(this.date.getTime(), this.isUTC);\n        if (!this.isUTC) {\n            return \";TZID=\".concat(this.tzid, \":\").concat(datestr);\n        }\n        return \":\".concat(datestr);\n    };\n    DateWithZone.prototype.getTime = function () {\n        return this.date.getTime();\n    };\n    DateWithZone.prototype.rezonedDate = function () {\n        var _a;\n        if (this.isUTC) {\n            return this.date;\n        }\n        var localTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        var dateInLocalTZ = new Date(this.date.toLocaleString(undefined, { timeZone: localTimeZone }));\n        var dateInTargetTZ = new Date(this.date.toLocaleString(undefined, { timeZone: (_a = this.tzid) !== null && _a !== void 0 ? _a : 'UTC' }));\n        var tzOffset = dateInTargetTZ.getTime() - dateInLocalTZ.getTime();\n        return new Date(this.date.getTime() - tzOffset);\n    };\n    return DateWithZone;\n}());\nexport { DateWithZone };\n"]},"metadata":{},"sourceType":"module"}