{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport { css } from '@patternfly/react-styles';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { isElementInView } from '../../helpers/util';\nimport { NavContext } from './Nav';\nimport { PageSidebarContext } from '../Page/PageSidebar';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport var NavList = /*#__PURE__*/function (_React$Component) {\n  _inherits(NavList, _React$Component);\n\n  var _super = _createSuper(NavList);\n\n  function NavList() {\n    var _this;\n\n    _classCallCheck(this, NavList);\n\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      scrollViewAtStart: false,\n      scrollViewAtEnd: false\n    };\n    _this.navList = React.createRef();\n\n    _this.observer = function () {};\n\n    _this.handleScrollButtons = function () {\n      var container = _this.navList.current;\n\n      if (container) {\n        // check if it elements are in view\n        var scrollViewAtStart = isElementInView(container, container.firstChild, false);\n        var scrollViewAtEnd = isElementInView(container, container.lastChild, false);\n\n        _this.setState({\n          scrollViewAtStart: scrollViewAtStart,\n          scrollViewAtEnd: scrollViewAtEnd\n        });\n\n        _this.context.updateIsScrollable(!scrollViewAtStart || !scrollViewAtEnd);\n      }\n    };\n\n    _this.scrollLeft = function () {\n      // find first Element that is fully in view on the left, then scroll to the element before it\n      var container = _this.navList.current;\n\n      if (container) {\n        var childrenArr = Array.from(container.children);\n        var firstElementInView;\n        var lastElementOutOfView;\n\n        for (var i = 0; i < childrenArr.length && !firstElementInView; i++) {\n          if (isElementInView(container, childrenArr[i], false)) {\n            firstElementInView = childrenArr[i];\n            lastElementOutOfView = childrenArr[i - 1];\n          }\n        }\n\n        if (lastElementOutOfView) {\n          container.scrollLeft -= lastElementOutOfView.scrollWidth;\n        }\n\n        _this.handleScrollButtons();\n      }\n    };\n\n    _this.scrollRight = function () {\n      // find last Element that is fully in view on the right, then scroll to the element after it\n      var container = _this.navList.current;\n\n      if (container) {\n        var childrenArr = Array.from(container.children);\n        var lastElementInView;\n        var firstElementOutOfView;\n\n        for (var i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n          if (isElementInView(container, childrenArr[i], false)) {\n            lastElementInView = childrenArr[i];\n            firstElementOutOfView = childrenArr[i + 1];\n          }\n        }\n\n        if (firstElementOutOfView) {\n          container.scrollLeft += firstElementOutOfView.scrollWidth;\n        }\n\n        _this.handleScrollButtons();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(NavList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.observer = getResizeObserver(this.navList.current, this.handleScrollButtons);\n      this.handleScrollButtons();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.observer();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          children = _a.children,\n          className = _a.className,\n          ariaLeftScroll = _a.ariaLeftScroll,\n          ariaRightScroll = _a.ariaRightScroll,\n          props = __rest(_a, [\"children\", \"className\", \"ariaLeftScroll\", \"ariaRightScroll\"]);\n\n      var _this$state = this.state,\n          scrollViewAtStart = _this$state.scrollViewAtStart,\n          scrollViewAtEnd = _this$state.scrollViewAtEnd;\n      return React.createElement(NavContext.Consumer, null, function (_ref) {\n        var isHorizontal = _ref.isHorizontal;\n        return React.createElement(PageSidebarContext.Consumer, null, function (_ref2) {\n          var isNavOpen = _ref2.isNavOpen;\n          return React.createElement(React.Fragment, null, isHorizontal && React.createElement(\"button\", {\n            className: css(styles.navScrollButton),\n            \"aria-label\": ariaLeftScroll,\n            onClick: _this2.scrollLeft,\n            disabled: scrollViewAtStart,\n            tabIndex: isNavOpen ? null : -1\n          }, React.createElement(AngleLeftIcon, null)), React.createElement(\"ul\", Object.assign({\n            ref: _this2.navList,\n            className: css(styles.navList, className),\n            onScroll: _this2.handleScrollButtons\n          }, props), children), isHorizontal && React.createElement(\"button\", {\n            className: css(styles.navScrollButton),\n            \"aria-label\": ariaRightScroll,\n            onClick: _this2.scrollRight,\n            disabled: scrollViewAtEnd,\n            tabIndex: isNavOpen ? null : -1\n          }, React.createElement(AngleRightIcon, null)));\n        });\n      });\n    }\n  }]);\n\n  return NavList;\n}(React.Component);\nNavList.displayName = 'NavList';\nNavList.contextType = NavContext;\nNavList.defaultProps = {\n  ariaLeftScroll: 'Scroll left',\n  ariaRightScroll: 'Scroll right'\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Nav/NavList.tsx"],"names":[],"mappings":";;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,iDAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,aAAP,MAA0B,wDAA1B;AACA,OAAO,cAAP,MAA2B,yDAA3B;AACA,SAAS,eAAT,QAAgC,oBAAhC;AACA,SAAS,UAAT,QAA2B,OAA3B;AACA,SAAS,kBAAT,QAAmC,qBAAnC;AACA,SAAS,iBAAT,QAAkC,8BAAlC;AAcA,WAAa,OAAb;AAAA;;AAAA;;AAAA,qBAAA;AAAA;;AAAA;;;AASE,UAAA,KAAA,GAAQ;AACN,MAAA,iBAAiB,EAAE,KADb;AAEN,MAAA,eAAe,EAAE;AAFX,KAAR;AAKA,UAAA,OAAA,GAAU,KAAK,CAAC,SAAN,EAAV;;AACA,UAAA,QAAA,GAAgB,YAAK,CAAG,CAAxB;;AAEA,UAAA,mBAAA,GAAsB,YAAK;AACzB,UAAM,SAAS,GAAG,MAAK,OAAL,CAAa,OAA/B;;AACA,UAAI,SAAJ,EAAe;AACb;AACA,YAAM,iBAAiB,GAAG,eAAe,CAAC,SAAD,EAAY,SAAS,CAAC,UAAtB,EAAiD,KAAjD,CAAzC;AACA,YAAM,eAAe,GAAG,eAAe,CAAC,SAAD,EAAY,SAAS,CAAC,SAAtB,EAAgD,KAAhD,CAAvC;;AACA,cAAK,QAAL,CAAc;AACZ,UAAA,iBAAiB,EAAjB,iBADY;AAEZ,UAAA,eAAe,EAAf;AAFY,SAAd;;AAIA,cAAK,OAAL,CAAa,kBAAb,CAAgC,CAAC,iBAAD,IAAsB,CAAC,eAAvD;AACD;AACF,KAZD;;AAcA,UAAA,UAAA,GAAa,YAAK;AAChB;AACA,UAAM,SAAS,GAAG,MAAK,OAAL,CAAa,OAA/B;;AACA,UAAI,SAAJ,EAAe;AACb,YAAM,WAAW,GAAG,KAAK,CAAC,IAAN,CAAW,SAAS,CAAC,QAArB,CAApB;AACA,YAAI,kBAAJ;AACA,YAAI,oBAAJ;;AACA,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAW,CAAC,MAAhB,IAA0B,CAAC,kBAA3C,EAA+D,CAAC,EAAhE,EAAoE;AAClE,cAAI,eAAe,CAAC,SAAD,EAAY,WAAW,CAAC,CAAD,CAAvB,EAA2C,KAA3C,CAAnB,EAAsE;AACpE,YAAA,kBAAkB,GAAG,WAAW,CAAC,CAAD,CAAhC;AACA,YAAA,oBAAoB,GAAG,WAAW,CAAC,CAAC,GAAG,CAAL,CAAlC;AACD;AACF;;AACD,YAAI,oBAAJ,EAA0B;AACxB,UAAA,SAAS,CAAC,UAAV,IAAwB,oBAAoB,CAAC,WAA7C;AACD;;AACD,cAAK,mBAAL;AACD;AACF,KAlBD;;AAoBA,UAAA,WAAA,GAAc,YAAK;AACjB;AACA,UAAM,SAAS,GAAG,MAAK,OAAL,CAAa,OAA/B;;AACA,UAAI,SAAJ,EAAe;AACb,YAAM,WAAW,GAAG,KAAK,CAAC,IAAN,CAAW,SAAS,CAAC,QAArB,CAApB;AACA,YAAI,iBAAJ;AACA,YAAI,qBAAJ;;AACA,aAAK,IAAI,CAAC,GAAG,WAAW,CAAC,MAAZ,GAAqB,CAAlC,EAAqC,CAAC,IAAI,CAAL,IAAU,CAAC,iBAAhD,EAAmE,CAAC,EAApE,EAAwE;AACtE,cAAI,eAAe,CAAC,SAAD,EAAY,WAAW,CAAC,CAAD,CAAvB,EAA2C,KAA3C,CAAnB,EAAsE;AACpE,YAAA,iBAAiB,GAAG,WAAW,CAAC,CAAD,CAA/B;AACA,YAAA,qBAAqB,GAAG,WAAW,CAAC,CAAC,GAAG,CAAL,CAAnC;AACD;AACF;;AACD,YAAI,qBAAJ,EAA2B;AACzB,UAAA,SAAS,CAAC,UAAV,IAAwB,qBAAqB,CAAC,WAA9C;AACD;;AACD,cAAK,mBAAL;AACD;AACF,KAlBD;;AAnDF;AA+HC;;AA/HD;AAAA;AAAA,WAuEE,6BAAiB;AACf,WAAK,QAAL,GAAgB,iBAAiB,CAAC,KAAK,OAAL,CAAa,OAAd,EAAuB,KAAK,mBAA5B,CAAjC;AACA,WAAK,mBAAL;AACD;AA1EH;AAAA;AAAA,WA4EE,gCAAoB;AAClB,WAAK,QAAL;AACD;AA9EH;AAAA;AAAA,WAgFE,kBAAM;AAAA;;AACE,UAAA,EAAA,GAAqE,KAArE,KAAA;AAAA,UAAE,QAAF,GAAsD,EAAtD,CAAE,QAAF;AAAA,UAAY,SAAZ,GAAsD,EAAtD,CAAY,SAAZ;AAAA,UAAuB,cAAvB,GAAsD,EAAtD,CAAuB,cAAvB;AAAA,UAAuC,eAAvC,GAAsD,EAAtD,CAAuC,eAAvC;AAAA,UAA2D,KAA3D,GAAgE,MAAA,CAAA,EAAA,EAAhE,CAAA,UAAA,EAAA,WAAA,EAAA,gBAAA,EAAA,iBAAA,CAAgE,CAAhE;;AACN,wBAA+C,KAAK,KAApD;AAAA,UAAQ,iBAAR,eAAQ,iBAAR;AAAA,UAA2B,eAA3B,eAA2B,eAA3B;AAEA,aACE,KAAA,CAAA,aAAA,CAAC,UAAU,CAAC,QAAZ,EAAoB,IAApB,EACG;AAAA,YAAG,YAAH,QAAG,YAAH;AAAA,eACC,KAAA,CAAA,aAAA,CAAC,kBAAkB,CAAC,QAApB,EAA4B,IAA5B,EACG;AAAA,cAAG,SAAH,SAAG,SAAH;AAAA,iBACC,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAP,EAAe,IAAf,EACG,YAAY,IACX,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACE,YAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAR,CADhB;AACwC,0BAC1B,cAFd;AAGE,YAAA,OAAO,EAAE,MAAI,CAAC,UAHhB;AAIE,YAAA,QAAQ,EAAE,iBAJZ;AAKE,YAAA,QAAQ,EAAE,SAAS,GAAG,IAAH,GAAU,CAAC;AALhC,WAAA,EAOE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc,IAAd,CAPF,CAFJ,EAYE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,YAAA,GAAG,EAAE,MAAI,CAAC,OADZ;AAEE,YAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,OAAR,EAAiB,SAAjB,CAFhB;AAGE,YAAA,QAAQ,EAAE,MAAI,CAAC;AAHjB,WAAA,EAIM,KAJN,CAAA,EAMG,QANH,CAZF,EAoBG,YAAY,IACX,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACE,YAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAR,CADhB;AACwC,0BAC1B,eAFd;AAGE,YAAA,OAAO,EAAE,MAAI,CAAC,WAHhB;AAIE,YAAA,QAAQ,EAAE,eAJZ;AAKE,YAAA,QAAQ,EAAE,SAAS,GAAG,IAAH,GAAU,CAAC;AALhC,WAAA,EAOE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe,IAAf,CAPF,CArBJ,CADD;AAAA,SADH,CADD;AAAA,OADH,CADF;AA0CD;AA9HH;;AAAA;AAAA,EAA6B,KAAK,CAAC,SAAnC;AACS,OAAA,CAAA,WAAA,GAAc,SAAd;AACA,OAAA,CAAA,WAAA,GAAc,UAAd;AAEA,OAAA,CAAA,YAAA,GAA6B;AAClC,EAAA,cAAc,EAAE,aADkB;AAElC,EAAA,eAAe,EAAE;AAFiB,CAA7B","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport { css } from '@patternfly/react-styles';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { isElementInView } from '../../helpers/util';\nimport { NavContext } from './Nav';\nimport { PageSidebarContext } from '../Page/PageSidebar';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\n\nexport interface NavListProps\n  extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement> {\n  /** Children nodes */\n  children?: React.ReactNode;\n  /** Additional classes added to the list */\n  className?: string;\n  /** Aria-label for the left scroll button */\n  ariaLeftScroll?: string;\n  /** Aria-label for the right scroll button */\n  ariaRightScroll?: string;\n}\n\nexport class NavList extends React.Component<NavListProps> {\n  static displayName = 'NavList';\n  static contextType = NavContext;\n  context!: React.ContextType<typeof NavContext>;\n  static defaultProps: NavListProps = {\n    ariaLeftScroll: 'Scroll left',\n    ariaRightScroll: 'Scroll right'\n  };\n\n  state = {\n    scrollViewAtStart: false,\n    scrollViewAtEnd: false\n  };\n\n  navList = React.createRef<HTMLUListElement>();\n  observer: any = () => {};\n\n  handleScrollButtons = () => {\n    const container = this.navList.current;\n    if (container) {\n      // check if it elements are in view\n      const scrollViewAtStart = isElementInView(container, container.firstChild as HTMLElement, false);\n      const scrollViewAtEnd = isElementInView(container, container.lastChild as HTMLElement, false);\n      this.setState({\n        scrollViewAtStart,\n        scrollViewAtEnd\n      });\n      this.context.updateIsScrollable(!scrollViewAtStart || !scrollViewAtEnd);\n    }\n  };\n\n  scrollLeft = () => {\n    // find first Element that is fully in view on the left, then scroll to the element before it\n    const container = this.navList.current;\n    if (container) {\n      const childrenArr = Array.from(container.children);\n      let firstElementInView: Element;\n      let lastElementOutOfView: Element;\n      for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {\n        if (isElementInView(container, childrenArr[i] as HTMLElement, false)) {\n          firstElementInView = childrenArr[i];\n          lastElementOutOfView = childrenArr[i - 1];\n        }\n      }\n      if (lastElementOutOfView) {\n        container.scrollLeft -= lastElementOutOfView.scrollWidth;\n      }\n      this.handleScrollButtons();\n    }\n  };\n\n  scrollRight = () => {\n    // find last Element that is fully in view on the right, then scroll to the element after it\n    const container = this.navList.current;\n    if (container) {\n      const childrenArr = Array.from(container.children);\n      let lastElementInView: Element;\n      let firstElementOutOfView: Element;\n      for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n        if (isElementInView(container, childrenArr[i] as HTMLElement, false)) {\n          lastElementInView = childrenArr[i];\n          firstElementOutOfView = childrenArr[i + 1];\n        }\n      }\n      if (firstElementOutOfView) {\n        container.scrollLeft += firstElementOutOfView.scrollWidth;\n      }\n      this.handleScrollButtons();\n    }\n  };\n\n  componentDidMount() {\n    this.observer = getResizeObserver(this.navList.current, this.handleScrollButtons);\n    this.handleScrollButtons();\n  }\n\n  componentWillUnmount() {\n    this.observer();\n  }\n\n  render() {\n    const { children, className, ariaLeftScroll, ariaRightScroll, ...props } = this.props;\n    const { scrollViewAtStart, scrollViewAtEnd } = this.state;\n\n    return (\n      <NavContext.Consumer>\n        {({ isHorizontal }) => (\n          <PageSidebarContext.Consumer>\n            {({ isNavOpen }) => (\n              <React.Fragment>\n                {isHorizontal && (\n                  <button\n                    className={css(styles.navScrollButton)}\n                    aria-label={ariaLeftScroll}\n                    onClick={this.scrollLeft}\n                    disabled={scrollViewAtStart}\n                    tabIndex={isNavOpen ? null : -1}\n                  >\n                    <AngleLeftIcon />\n                  </button>\n                )}\n                <ul\n                  ref={this.navList}\n                  className={css(styles.navList, className)}\n                  onScroll={this.handleScrollButtons}\n                  {...props}\n                >\n                  {children}\n                </ul>\n                {isHorizontal && (\n                  <button\n                    className={css(styles.navScrollButton)}\n                    aria-label={ariaRightScroll}\n                    onClick={this.scrollRight}\n                    disabled={scrollViewAtEnd}\n                    tabIndex={isNavOpen ? null : -1}\n                  >\n                    <AngleRightIcon />\n                  </button>\n                )}\n              </React.Fragment>\n            )}\n          </PageSidebarContext.Consumer>\n        )}\n      </NavContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}