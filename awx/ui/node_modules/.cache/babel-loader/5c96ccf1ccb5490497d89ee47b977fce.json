{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _taggedTemplateLiteral from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject;import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{i18n}from\"@lingui/core\";import React,{useState,useCallback}from'react';import{useParams,useRouteMatch}from'react-router-dom';import styled from'styled-components';import useRequest from'hooks/useRequest';import useSelected from'hooks/useSelected';import SelectableCard from'../SelectableCard';import Wizard from'../Wizard/Wizard';import SelectResourceStep from'../AddRole/SelectResourceStep';import SelectRoleStep from'../AddRole/SelectRoleStep';import getResourceAccessConfig from'./getResourceAccessConfig';import{jsx as _jsx}from\"react/jsx-runtime\";var Grid=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-gap: 20px;\\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\\n\"])));function UserAndTeamAccessAdd(_ref){var _resourcesSelected$,_resourcesSelected$$s,_resourcesSelected$2;var title=_ref.title,onFetchData=_ref.onFetchData,apiModel=_ref.apiModel,onClose=_ref.onClose,onError=_ref.onError;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),selectedResourceType=_useState2[0],setSelectedResourceType=_useState2[1];var _useState3=useState(1),_useState4=_slicedToArray(_useState3,2),stepIdReached=_useState4[0],setStepIdReached=_useState4[1];var _useParams=useParams(),userId=_useParams.id;var teamsRouteMatch=useRouteMatch({path:'/teams/:id/roles',exact:true});var _useSelected=useSelected([]),resourcesSelected=_useSelected.selected,handleResourceSelect=_useSelected.handleSelect;var _useSelected2=useSelected([]),rolesSelected=_useSelected2.selected,handleRoleSelect=_useSelected2.handleSelect;var _useRequest=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var roleRequests,resourceRolesTypes;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:roleRequests=[];resourceRolesTypes=resourcesSelected.flatMap(function(resource){return Object.values(resource.summary_fields.object_roles);});rolesSelected.map(function(role){return resourceRolesTypes.forEach(function(rolename){if(rolename.name===role.name){roleRequests.push(apiModel.associateRole(userId,rolename.id));}});});_context.next=5;return Promise.all(roleRequests);case 5:onFetchData();case 6:case\"end\":return _context.stop();}}},_callee);})),[onFetchData,rolesSelected,apiModel,userId,resourcesSelected]),{}),handleWizardSave=_useRequest.request,saveError=_useRequest.error;// Object roles can be user only, so we remove them when\n// showing role choices for team access\nvar selectableRoles=_objectSpread({},(_resourcesSelected$=resourcesSelected[0])===null||_resourcesSelected$===void 0?void 0:(_resourcesSelected$$s=_resourcesSelected$.summary_fields)===null||_resourcesSelected$$s===void 0?void 0:_resourcesSelected$$s.object_roles);if(teamsRouteMatch&&((_resourcesSelected$2=resourcesSelected[0])===null||_resourcesSelected$2===void 0?void 0:_resourcesSelected$2.type)==='organization'){Object.keys(selectableRoles).forEach(function(key){if(selectableRoles[key].user_only){delete selectableRoles[key];}});}var steps=[{id:1,name:/*i18n*/i18n._(\"Add resource type\"),component:/*#__PURE__*/_jsx(Grid,{children:getResourceAccessConfig().map(function(resource){return/*#__PURE__*/_jsx(SelectableCard,{isSelected:resource.selectedResource===(selectedResourceType===null||selectedResourceType===void 0?void 0:selectedResourceType.selectedResource),label:resource.label,dataCy:\"add-role-\".concat(resource.selectedResource),onClick:function onClick(){return setSelectedResourceType(resource);}},resource.selectedResource);})}),enableNext:selectedResourceType!==null},{id:2,name:/*i18n*/i18n._(\"Select items from list\"),component:selectedResourceType&&/*#__PURE__*/_jsx(SelectResourceStep,{searchColumns:selectedResourceType.searchColumns,sortColumns:selectedResourceType.sortColumns,displayKey:\"name\",onRowClick:handleResourceSelect,fetchItems:selectedResourceType.fetchItems,fetchOptions:selectedResourceType.fetchOptions,selectedLabel:/*i18n*/i18n._(\"Selected\"),selectedResourceRows:resourcesSelected,sortedColumnKey:\"username\"}),enableNext:resourcesSelected.length>0,canJumpTo:stepIdReached>=2},{id:3,name:/*i18n*/i18n._(\"Select roles to apply\"),component:(resourcesSelected===null||resourcesSelected===void 0?void 0:resourcesSelected.length)>0&&/*#__PURE__*/_jsx(SelectRoleStep,{onRolesClick:handleRoleSelect,roles:selectableRoles,selectedListKey:selectedResourceType==='users'?'username':'name',selectedListLabel:/*i18n*/i18n._(\"Selected\"),selectedResourceRows:resourcesSelected,selectedRoleRows:rolesSelected}),nextButtonText:/*i18n*/i18n._(\"Save\"),canJumpTo:stepIdReached>=3}];if(saveError){onError(saveError);onClose();}return/*#__PURE__*/_jsx(Wizard,{isOpen:true,title:title,steps:steps,onClose:onClose,onNext:function onNext(_ref3){var id=_ref3.id;return setStepIdReached(stepIdReached<id?id:stepIdReached);},onSave:handleWizardSave});}export default UserAndTeamAccessAdd;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/UserAndTeamAccessAdd/UserAndTeamAccessAdd.js"],"names":["React","useState","useCallback","useParams","useRouteMatch","styled","useRequest","useSelected","SelectableCard","Wizard","SelectResourceStep","SelectRoleStep","getResourceAccessConfig","Grid","div","UserAndTeamAccessAdd","title","onFetchData","apiModel","onClose","onError","selectedResourceType","setSelectedResourceType","stepIdReached","setStepIdReached","userId","id","teamsRouteMatch","path","exact","resourcesSelected","selected","handleResourceSelect","handleSelect","rolesSelected","handleRoleSelect","roleRequests","resourceRolesTypes","flatMap","resource","Object","values","summary_fields","object_roles","map","role","forEach","rolename","name","push","associateRole","Promise","all","handleWizardSave","request","saveError","error","selectableRoles","type","keys","key","user_only","steps","component","selectedResource","label","enableNext","searchColumns","sortColumns","fetchItems","fetchOptions","length","canJumpTo","nextButtonText"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { t } from '@lingui/macro';\nimport { useParams, useRouteMatch } from 'react-router-dom';\nimport styled from 'styled-components';\nimport useRequest from 'hooks/useRequest';\nimport useSelected from 'hooks/useSelected';\nimport SelectableCard from '../SelectableCard';\nimport Wizard from '../Wizard/Wizard';\nimport SelectResourceStep from '../AddRole/SelectResourceStep';\nimport SelectRoleStep from '../AddRole/SelectRoleStep';\nimport getResourceAccessConfig from './getResourceAccessConfig';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-gap: 20px;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n`;\n\nfunction UserAndTeamAccessAdd({\n  title,\n  onFetchData,\n  apiModel,\n  onClose,\n  onError,\n}) {\n  const [selectedResourceType, setSelectedResourceType] = useState(null);\n  const [stepIdReached, setStepIdReached] = useState(1);\n  const { id: userId } = useParams();\n  const teamsRouteMatch = useRouteMatch({\n    path: '/teams/:id/roles',\n    exact: true,\n  });\n\n  const { selected: resourcesSelected, handleSelect: handleResourceSelect } =\n    useSelected([]);\n\n  const { selected: rolesSelected, handleSelect: handleRoleSelect } =\n    useSelected([]);\n\n  const { request: handleWizardSave, error: saveError } = useRequest(\n    useCallback(async () => {\n      const roleRequests = [];\n      const resourceRolesTypes = resourcesSelected.flatMap((resource) =>\n        Object.values(resource.summary_fields.object_roles)\n      );\n\n      rolesSelected.map((role) =>\n        resourceRolesTypes.forEach((rolename) => {\n          if (rolename.name === role.name) {\n            roleRequests.push(apiModel.associateRole(userId, rolename.id));\n          }\n        })\n      );\n\n      await Promise.all(roleRequests);\n      onFetchData();\n    }, [onFetchData, rolesSelected, apiModel, userId, resourcesSelected]),\n    {}\n  );\n\n  // Object roles can be user only, so we remove them when\n  // showing role choices for team access\n  const selectableRoles = {\n    ...resourcesSelected[0]?.summary_fields?.object_roles,\n  };\n  if (teamsRouteMatch && resourcesSelected[0]?.type === 'organization') {\n    Object.keys(selectableRoles).forEach((key) => {\n      if (selectableRoles[key].user_only) {\n        delete selectableRoles[key];\n      }\n    });\n  }\n\n  const steps = [\n    {\n      id: 1,\n      name: t`Add resource type`,\n      component: (\n        <Grid>\n          {getResourceAccessConfig().map((resource) => (\n            <SelectableCard\n              key={resource.selectedResource}\n              isSelected={\n                resource.selectedResource ===\n                selectedResourceType?.selectedResource\n              }\n              label={resource.label}\n              dataCy={`add-role-${resource.selectedResource}`}\n              onClick={() => setSelectedResourceType(resource)}\n            />\n          ))}\n        </Grid>\n      ),\n      enableNext: selectedResourceType !== null,\n    },\n    {\n      id: 2,\n      name: t`Select items from list`,\n      component: selectedResourceType && (\n        <SelectResourceStep\n          searchColumns={selectedResourceType.searchColumns}\n          sortColumns={selectedResourceType.sortColumns}\n          displayKey=\"name\"\n          onRowClick={handleResourceSelect}\n          fetchItems={selectedResourceType.fetchItems}\n          fetchOptions={selectedResourceType.fetchOptions}\n          selectedLabel={t`Selected`}\n          selectedResourceRows={resourcesSelected}\n          sortedColumnKey=\"username\"\n        />\n      ),\n      enableNext: resourcesSelected.length > 0,\n      canJumpTo: stepIdReached >= 2,\n    },\n    {\n      id: 3,\n      name: t`Select roles to apply`,\n      component: resourcesSelected?.length > 0 && (\n        <SelectRoleStep\n          onRolesClick={handleRoleSelect}\n          roles={selectableRoles}\n          selectedListKey={\n            selectedResourceType === 'users' ? 'username' : 'name'\n          }\n          selectedListLabel={t`Selected`}\n          selectedResourceRows={resourcesSelected}\n          selectedRoleRows={rolesSelected}\n        />\n      ),\n      nextButtonText: t`Save`,\n      canJumpTo: stepIdReached >= 3,\n    },\n  ];\n\n  if (saveError) {\n    onError(saveError);\n    onClose();\n  }\n\n  return (\n    <Wizard\n      isOpen\n      title={title}\n      steps={steps}\n      onClose={onClose}\n      onNext={({ id }) =>\n        setStepIdReached(stepIdReached < id ? id : stepIdReached)\n      }\n      onSave={handleWizardSave}\n    />\n  );\n}\n\nexport default UserAndTeamAccessAdd;\n"]},"metadata":{},"sourceType":"module"}