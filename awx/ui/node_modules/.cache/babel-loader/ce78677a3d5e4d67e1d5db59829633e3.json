{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorTreeItem } from './DualListSelectorTreeItem';\nexport var DualListSelectorTree = function DualListSelectorTree(_a) {\n  var data = _a.data,\n      _a$hasBadges = _a.hasBadges,\n      hasBadges = _a$hasBadges === void 0 ? false : _a$hasBadges,\n      _a$isNested = _a.isNested,\n      isNested = _a$isNested === void 0 ? false : _a$isNested,\n      _a$defaultAllExpanded = _a.defaultAllExpanded,\n      defaultAllExpanded = _a$defaultAllExpanded === void 0 ? false : _a$defaultAllExpanded,\n      onOptionCheck = _a.onOptionCheck,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      props = __rest(_a, [\"data\", \"hasBadges\", \"isNested\", \"defaultAllExpanded\", \"onOptionCheck\", \"isDisabled\"]);\n\n  var dataToRender = typeof data === 'function' ? data() : data;\n  var tree = dataToRender.map(function (item) {\n    return React.createElement(DualListSelectorTreeItem, Object.assign({\n      key: item.id,\n      text: item.text,\n      id: item.id,\n      defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded,\n      onOptionCheck: onOptionCheck,\n      isChecked: item.isChecked,\n      checkProps: item.checkProps,\n      hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges,\n      badgeProps: item.badgeProps,\n      itemData: item,\n      isDisabled: isDisabled,\n      useMemo: true\n    }, item.children && {\n      children: React.createElement(DualListSelectorTree, {\n        isNested: true,\n        data: item.children,\n        hasBadges: hasBadges,\n        defaultAllExpanded: defaultAllExpanded,\n        onOptionCheck: onOptionCheck,\n        isDisabled: isDisabled\n      })\n    }));\n  });\n  return isNested ? React.createElement(\"ul\", Object.assign({\n    className: css(styles.dualListSelectorList),\n    role: \"group\"\n  }, props), tree) : React.createElement(React.Fragment, null, tree);\n};\nDualListSelectorTree.displayName = 'DualListSelectorTree';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorTree.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,6EAAnB;AACA,SAAS,wBAAT,QAAyC,4BAAzC;AAsDA,OAAO,IAAM,oBAAoB,GAAuD,SAA3E,oBAA2E,CAAC,EAAD,EAQxD;AARyD,MACvF,IADuF,GAMrE,EANqE,CACvF,IADuF;AAAA,qBAMrE,EANqE,CAEvF,SAFuF;AAAA,MAEvF,SAFuF,6BAE3E,KAF2E;AAAA,oBAMrE,EANqE,CAGvF,QAHuF;AAAA,MAGvF,QAHuF,4BAG5E,KAH4E;AAAA,8BAMrE,EANqE,CAIvF,kBAJuF;AAAA,MAIvF,kBAJuF,sCAIlE,KAJkE;AAAA,MAKvF,aALuF,GAMrE,EANqE,CAKvF,aALuF;AAAA,sBAMrE,EANqE,CAMvF,UANuF;AAAA,MAMvF,UANuF,8BAM1E,KAN0E;AAAA,MAOpF,KAPoF,GAO/E,MAAA,CAAA,EAAA,EAP+E,CAAA,MAAA,EAAA,WAAA,EAAA,UAAA,EAAA,oBAAA,EAAA,eAAA,EAAA,YAAA,CAO/E,CAP+E;;AASvF,MAAM,YAAY,GAAG,OAAO,IAAP,KAAgB,UAAhB,GAA6B,IAAI,EAAjC,GAAsC,IAA3D;AACA,MAAM,IAAI,GAAG,YAAY,CAAC,GAAb,CAAiB,UAAA,IAAI;AAAA,WAChC,KAAA,CAAA,aAAA,CAAC,wBAAD,EAAyB,MAAA,CAAA,MAAA,CAAA;AACvB,MAAA,GAAG,EAAE,IAAI,CAAC,EADa;AAEvB,MAAA,IAAI,EAAE,IAAI,CAAC,IAFY;AAGvB,MAAA,EAAE,EAAE,IAAI,CAAC,EAHc;AAIvB,MAAA,eAAe,EAAE,IAAI,CAAC,eAAL,KAAyB,SAAzB,GAAqC,IAAI,CAAC,eAA1C,GAA4D,kBAJtD;AAKvB,MAAA,aAAa,EAAE,aALQ;AAMvB,MAAA,SAAS,EAAE,IAAI,CAAC,SANO;AAOvB,MAAA,UAAU,EAAE,IAAI,CAAC,UAPM;AAQvB,MAAA,QAAQ,EAAE,IAAI,CAAC,QAAL,KAAkB,SAAlB,GAA8B,IAAI,CAAC,QAAnC,GAA8C,SARjC;AASvB,MAAA,UAAU,EAAE,IAAI,CAAC,UATM;AAUvB,MAAA,QAAQ,EAAE,IAVa;AAWvB,MAAA,UAAU,EAAE,UAXW;AAYvB,MAAA,OAAO,EAAE;AAZc,KAAA,EAalB,IAAI,CAAC,QAAL,IAAiB;AACpB,MAAA,QAAQ,EACN,KAAA,CAAA,aAAA,CAAC,oBAAD,EAAqB;AACnB,QAAA,QAAQ,EAAA,IADW;AAEnB,QAAA,IAAI,EAAE,IAAI,CAAC,QAFQ;AAGnB,QAAA,SAAS,EAAE,SAHQ;AAInB,QAAA,kBAAkB,EAAE,kBAJD;AAKnB,QAAA,aAAa,EAAE,aALI;AAMnB,QAAA,UAAU,EAAE;AANO,OAArB;AAFkB,KAbC,CAAzB,CADgC;AAAA,GAArB,CAAb;AA4BA,SAAO,QAAQ,GACb,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAI,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,oBAAR,CAAlB;AAAiD,IAAA,IAAI,EAAC;AAAtD,GAAA,EAAkE,KAAlE,CAAA,EACG,IADH,CADa,GAKb,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAAG,IAAH,CALF;AAOD,CA7CM;AA+CP,oBAAoB,CAAC,WAArB,GAAmC,sBAAnC","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorTreeItem } from './DualListSelectorTreeItem';\n\nexport interface DualListSelectorTreeItemData {\n  /** Content rendered inside the dual list selector. */\n  children?: DualListSelectorTreeItemData[];\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Flag indicating this option is expanded by default. */\n  defaultExpanded?: boolean;\n  /** Flag indicating this option has a badge */\n  hasBadge?: boolean;\n  /** Callback fired when an option is checked */\n  onOptionCheck?: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    isChosen: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n  /** ID of the option */\n  id: string;\n  /** Text of the option */\n  text: string;\n  /** Parent id of an option */\n  parentId?: string;\n  /** Checked state of the option */\n  isChecked: boolean;\n  /** Additional properties to pass to the option checkbox */\n  checkProps?: any;\n  /** Additional properties to pass to the option badge */\n  badgeProps?: any;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n}\n\nexport interface DualListSelectorTreeProps {\n  /** Data of the tree view */\n  data: DualListSelectorTreeItemData[] | (() => DualListSelectorTreeItemData[]);\n  /** ID of the tree view */\n  id?: string;\n  /** @hide Flag indicating if the list is nested */\n  isNested?: boolean;\n  /** Flag indicating if all options should have badges */\n  hasBadges?: boolean;\n  /** Sets the default expanded behavior */\n  defaultAllExpanded?: boolean;\n  /** Callback fired when an option is checked */\n  isDisabled?: boolean;\n  onOptionCheck?: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n}\n\nexport const DualListSelectorTree: React.FunctionComponent<DualListSelectorTreeProps> = ({\n  data,\n  hasBadges = false,\n  isNested = false,\n  defaultAllExpanded = false,\n  onOptionCheck,\n  isDisabled = false,\n  ...props\n}: DualListSelectorTreeProps) => {\n  const dataToRender = typeof data === 'function' ? data() : data;\n  const tree = dataToRender.map(item => (\n    <DualListSelectorTreeItem\n      key={item.id}\n      text={item.text}\n      id={item.id}\n      defaultExpanded={item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded}\n      onOptionCheck={onOptionCheck}\n      isChecked={item.isChecked}\n      checkProps={item.checkProps}\n      hasBadge={item.hasBadge !== undefined ? item.hasBadge : hasBadges}\n      badgeProps={item.badgeProps}\n      itemData={item}\n      isDisabled={isDisabled}\n      useMemo={true}\n      {...(item.children && {\n        children: (\n          <DualListSelectorTree\n            isNested\n            data={item.children}\n            hasBadges={hasBadges}\n            defaultAllExpanded={defaultAllExpanded}\n            onOptionCheck={onOptionCheck}\n            isDisabled={isDisabled}\n          />\n        )\n      })}\n    />\n  ));\n  return isNested ? (\n    <ul className={css(styles.dualListSelectorList)} role=\"group\" {...props}>\n      {tree}\n    </ul>\n  ) : (\n    <>{tree}</>\n  );\n};\n\nDualListSelectorTree.displayName = 'DualListSelectorTree';\n"]},"metadata":{},"sourceType":"module"}