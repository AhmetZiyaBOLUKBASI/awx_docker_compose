{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport styles from '@patternfly/react-styles/css/components/Chip/chip';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nexport var Chip = /*#__PURE__*/function (_React$Component) {\n  _inherits(Chip, _React$Component);\n\n  var _super = _createSuper(Chip);\n\n  function Chip(props) {\n    var _this;\n\n    _classCallCheck(this, Chip);\n\n    _this = _super.call(this, props);\n    _this.span = React.createRef();\n\n    _this.setChipStyle = function () {\n      return {\n        '--pf-c-chip__text--MaxWidth': _this.props.textMaxWidth\n      };\n    };\n\n    _this.renderOverflowChip = function () {\n      var _this$props = _this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          onClick = _this$props.onClick,\n          ouiaId = _this$props.ouiaId;\n      var Component = _this.props.component;\n      return React.createElement(Component, Object.assign({\n        onClick: onClick\n      }, _this.props.textMaxWidth && Object.assign({\n        style: _this.setChipStyle()\n      }, _this.props.style), {\n        className: css(styles.chip, styles.modifiers.overflow, className)\n      }, _this.props.component === 'button' ? {\n        type: 'button'\n      } : {}, getOUIAProps('OverflowChip', ouiaId !== undefined ? ouiaId : _this.state.ouiaStateId)), React.createElement(\"span\", {\n        className: css(styles.chipText)\n      }, children));\n    };\n\n    _this.renderChip = function (randomId) {\n      var _this$props2 = _this.props,\n          children = _this$props2.children,\n          tooltipPosition = _this$props2.tooltipPosition;\n\n      if (_this.state.isTooltipVisible) {\n        return React.createElement(Tooltip, {\n          position: tooltipPosition,\n          content: children\n        }, _this.renderInnerChip(randomId));\n      }\n\n      return _this.renderInnerChip(randomId);\n    };\n\n    _this.state = {\n      isTooltipVisible: false,\n      ouiaStateId: getDefaultOUIAId(Chip.displayName)\n    };\n    return _this;\n  }\n\n  _createClass(Chip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isTooltipVisible: Boolean(this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth)\n      });\n    }\n  }, {\n    key: \"renderInnerChip\",\n    value: function renderInnerChip(id) {\n      var _this$props3 = this.props,\n          children = _this$props3.children,\n          className = _this$props3.className,\n          onClick = _this$props3.onClick,\n          closeBtnAriaLabel = _this$props3.closeBtnAriaLabel,\n          isReadOnly = _this$props3.isReadOnly,\n          component = _this$props3.component,\n          ouiaId = _this$props3.ouiaId;\n      var Component = component;\n      return React.createElement(Component, Object.assign({}, this.props.textMaxWidth && {\n        style: this.setChipStyle()\n      }, {\n        className: css(styles.chip, className)\n      }, this.state.isTooltipVisible && {\n        tabIndex: 0\n      }, getOUIAProps(Chip.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)), React.createElement(\"span\", {\n        ref: this.span,\n        className: css(styles.chipText),\n        id: id\n      }, children), !isReadOnly && React.createElement(Button, {\n        onClick: onClick,\n        variant: \"plain\",\n        \"aria-label\": closeBtnAriaLabel,\n        id: \"remove_\".concat(id),\n        \"aria-labelledby\": \"remove_\".concat(id, \" \").concat(id),\n        ouiaId: ouiaId || closeBtnAriaLabel\n      }, React.createElement(TimesIcon, {\n        \"aria-hidden\": \"true\"\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isOverflowChip = this.props.isOverflowChip;\n      return React.createElement(GenerateId, null, function (randomId) {\n        return isOverflowChip ? _this2.renderOverflowChip() : _this2.renderChip(_this2.props.id || randomId);\n      });\n    }\n  }]);\n\n  return Chip;\n}(React.Component);\nChip.displayName = 'Chip';\nChip.defaultProps = {\n  closeBtnAriaLabel: 'close',\n  className: '',\n  isOverflowChip: false,\n  isReadOnly: false,\n  tooltipPosition: 'top',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: function onClick(_e) {\n    return undefined;\n  },\n  component: 'div'\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Chip/Chip.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport styles from '@patternfly/react-styles/css/components/Chip/chip';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps, OUIAProps, getDefaultOUIAId } from '../../helpers';\n\nexport interface ChipProps extends React.HTMLProps<HTMLDivElement>, OUIAProps {\n  /** Content rendered inside the chip text */\n  children?: React.ReactNode;\n  /** Aria Label for close button */\n  closeBtnAriaLabel?: string;\n  /** Additional classes added to the chip item */\n  className?: string;\n  /** Flag indicating if the chip is an overflow chip */\n  isOverflowChip?: boolean;\n  /** Flag indicating if chip is read only */\n  isReadOnly?: boolean;\n  /** Function that is called when clicking on the chip close button */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Component that will be used for chip. It is recommended that <button> or <li>  are used when the chip is an overflow chip. */\n  component?: React.ReactNode;\n  /** Position of the tooltip which is displayed if text is longer */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n\n  /** Css property expressed in percentage or any css unit that overrides the default value of the max-width of the chip's text */\n  textMaxWidth?: string;\n}\n\ninterface ChipState {\n  isTooltipVisible: boolean;\n  ouiaStateId: string;\n}\n\nexport class Chip extends React.Component<ChipProps, ChipState> {\n  static displayName = 'Chip';\n  constructor(props: ChipProps) {\n    super(props);\n    this.state = {\n      isTooltipVisible: false,\n      ouiaStateId: getDefaultOUIAId(Chip.displayName)\n    };\n  }\n  span = React.createRef<HTMLSpanElement>();\n\n  static defaultProps: ChipProps = {\n    closeBtnAriaLabel: 'close',\n    className: '',\n    isOverflowChip: false,\n    isReadOnly: false,\n    tooltipPosition: 'top' as 'auto' | 'top' | 'bottom' | 'left' | 'right',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e: React.MouseEvent) => undefined as any,\n    component: 'div' as React.ReactNode\n  };\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth)\n    });\n  }\n\n  setChipStyle = () => ({\n    '--pf-c-chip__text--MaxWidth': this.props.textMaxWidth\n  });\n\n  renderOverflowChip = () => {\n    const { children, className, onClick, ouiaId } = this.props;\n    const Component = this.props.component as any;\n    return (\n      <Component\n        onClick={onClick}\n        {...(this.props.textMaxWidth && {\n          style: this.setChipStyle(),\n          ...this.props.style\n        })}\n        className={css(styles.chip, styles.modifiers.overflow, className)}\n        {...(this.props.component === 'button' ? { type: 'button' } : {})}\n        {...getOUIAProps('OverflowChip', ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)}\n      >\n        <span className={css(styles.chipText)}>{children}</span>\n      </Component>\n    );\n  };\n\n  renderInnerChip(id: string) {\n    const { children, className, onClick, closeBtnAriaLabel, isReadOnly, component, ouiaId } = this.props;\n    const Component = component as any;\n    return (\n      <Component\n        {...(this.props.textMaxWidth && {\n          style: this.setChipStyle()\n        })}\n        className={css(styles.chip, className)}\n        {...(this.state.isTooltipVisible && { tabIndex: 0 })}\n        {...getOUIAProps(Chip.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)}\n      >\n        <span ref={this.span} className={css(styles.chipText)} id={id}>\n          {children}\n        </span>\n        {!isReadOnly && (\n          <Button\n            onClick={onClick}\n            variant=\"plain\"\n            aria-label={closeBtnAriaLabel}\n            id={`remove_${id}`}\n            aria-labelledby={`remove_${id} ${id}`}\n            ouiaId={ouiaId || closeBtnAriaLabel}\n          >\n            <TimesIcon aria-hidden=\"true\" />\n          </Button>\n        )}\n      </Component>\n    );\n  }\n\n  renderChip = (randomId: string) => {\n    const { children, tooltipPosition } = this.props;\n    if (this.state.isTooltipVisible) {\n      return (\n        <Tooltip position={tooltipPosition} content={children}>\n          {this.renderInnerChip(randomId)}\n        </Tooltip>\n      );\n    }\n    return this.renderInnerChip(randomId);\n  };\n\n  render() {\n    const { isOverflowChip } = this.props;\n    return (\n      <GenerateId>\n        {randomId => (isOverflowChip ? this.renderOverflowChip() : this.renderChip(this.props.id || randomId))}\n      </GenerateId>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}