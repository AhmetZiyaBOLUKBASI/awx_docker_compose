{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerColorVariant, DrawerContext } from './Drawer';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nvar isResizing = null;\nvar newSize = 0;\nexport var DrawerPanelContent = function DrawerPanelContent(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      id = _a.id,\n      children = _a.children,\n      _a$hasNoBorder = _a.hasNoBorder,\n      hasNoBorder = _a$hasNoBorder === void 0 ? false : _a$hasNoBorder,\n      _a$isResizable = _a.isResizable,\n      isResizable = _a$isResizable === void 0 ? false : _a$isResizable,\n      onResize = _a.onResize,\n      minSize = _a.minSize,\n      defaultSize = _a.defaultSize,\n      maxSize = _a.maxSize,\n      _a$increment = _a.increment,\n      increment = _a$increment === void 0 ? 5 : _a$increment,\n      _a$resizeAriaLabel = _a.resizeAriaLabel,\n      resizeAriaLabel = _a$resizeAriaLabel === void 0 ? 'Resize' : _a$resizeAriaLabel,\n      widths = _a.widths,\n      _a$colorVariant = _a.colorVariant,\n      colorVariant = _a$colorVariant === void 0 ? DrawerColorVariant.default : _a$colorVariant,\n      props = __rest(_a, [\"className\", \"id\", \"children\", \"hasNoBorder\", \"isResizable\", \"onResize\", \"minSize\", \"defaultSize\", \"maxSize\", \"increment\", \"resizeAriaLabel\", \"widths\", \"colorVariant\"]);\n\n  var panel = React.useRef();\n  var splitterRef = React.useRef();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      separatorValue = _React$useState2[0],\n      setSeparatorValue = _React$useState2[1];\n\n  var _React$useContext = React.useContext(DrawerContext),\n      position = _React$useContext.position,\n      isExpanded = _React$useContext.isExpanded,\n      isStatic = _React$useContext.isStatic,\n      onExpand = _React$useContext.onExpand,\n      drawerRef = _React$useContext.drawerRef,\n      drawerContentRef = _React$useContext.drawerContentRef,\n      isInline = _React$useContext.isInline;\n\n  var hidden = isStatic ? false : !isExpanded;\n\n  var _React$useState3 = React.useState(!hidden),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isExpandedInternal = _React$useState4[0],\n      setIsExpandedInternal = _React$useState4[1];\n\n  var currWidth = 0;\n  var panelRect;\n  var right;\n  var left;\n  var bottom;\n  var setInitialVals = true;\n  React.useEffect(function () {\n    if (!isStatic && isExpanded) {\n      setIsExpandedInternal(isExpanded);\n    }\n  }, [isStatic, isExpanded]);\n\n  var calcValueNow = function calcValueNow() {\n    var splitterPos;\n    var drawerSize;\n\n    if (isInline && position === 'right') {\n      splitterPos = panel.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (isInline && position === 'left') {\n      splitterPos = splitterRef.current.getBoundingClientRect().right - panel.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (position === 'right') {\n      splitterPos = drawerContentRef.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'left') {\n      splitterPos = splitterRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'bottom') {\n      splitterPos = drawerContentRef.current.getBoundingClientRect().bottom - splitterRef.current.getBoundingClientRect().top;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().bottom - drawerContentRef.current.getBoundingClientRect().top;\n    }\n\n    var newSplitterPos = splitterPos / drawerSize * 100;\n    return Math.round((newSplitterPos + Number.EPSILON) * 100) / 100;\n  };\n\n  var handleTouchStart = function handleTouchStart(e) {\n    e.stopPropagation();\n    document.addEventListener('touchmove', callbackTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', callbackTouchEnd);\n    isResizing = true;\n  };\n\n  var handleMousedown = function handleMousedown(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    document.addEventListener('mousemove', callbackMouseMove);\n    document.addEventListener('mouseup', callbackMouseUp);\n    drawerRef.current.classList.add(css(styles.modifiers.resizing));\n    isResizing = true;\n    setInitialVals = true;\n  };\n\n  var handleMouseMove = function handleMouseMove(e) {\n    var mousePos = position === 'bottom' ? e.clientY : e.clientX;\n    handleControlMove(e, mousePos);\n  };\n\n  var handleTouchMove = function handleTouchMove(e) {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    var touchPos = position === 'bottom' ? e.touches[0].clientY : e.touches[0].clientX;\n    handleControlMove(e, touchPos);\n  };\n\n  var handleControlMove = function handleControlMove(e, controlPosition) {\n    e.stopPropagation();\n\n    if (!isResizing) {\n      return;\n    }\n\n    if (setInitialVals) {\n      panelRect = panel.current.getBoundingClientRect();\n      right = panelRect.right;\n      left = panelRect.left;\n      bottom = panelRect.bottom;\n      setInitialVals = false;\n    }\n\n    var mousePos = controlPosition;\n    var newSize = 0;\n\n    if (position === 'right') {\n      newSize = right - mousePos;\n    } else if (position === 'left') {\n      newSize = mousePos - left;\n    } else {\n      newSize = bottom - mousePos;\n    }\n\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n\n  var handleMouseup = function handleMouseup() {\n    if (!isResizing) {\n      return;\n    }\n\n    drawerRef.current.classList.remove(css(styles.modifiers.resizing));\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    setInitialVals = true;\n    document.removeEventListener('mousemove', callbackMouseMove);\n    document.removeEventListener('mouseup', callbackMouseUp);\n  };\n\n  var handleTouchEnd = function handleTouchEnd(e) {\n    e.stopPropagation();\n\n    if (!isResizing) {\n      return;\n    }\n\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    document.removeEventListener('touchmove', callbackTouchMove);\n    document.removeEventListener('touchend', callbackTouchEnd);\n  };\n\n  var callbackMouseMove = React.useCallback(handleMouseMove, []);\n  var callbackTouchEnd = React.useCallback(handleTouchEnd, []);\n  var callbackTouchMove = React.useCallback(handleTouchMove, []);\n  var callbackMouseUp = React.useCallback(handleMouseup, []);\n\n  var handleKeys = function handleKeys(e) {\n    var key = e.key;\n\n    if (key !== 'Escape' && key !== 'Enter' && key !== 'ArrowUp' && key !== 'ArrowDown' && key !== 'ArrowLeft' && key !== 'ArrowRight') {\n      if (isResizing) {\n        e.preventDefault();\n      }\n\n      return;\n    }\n\n    e.preventDefault();\n\n    if (key === 'Escape' || key === 'Enter') {\n      onResize && onResize(currWidth, id);\n    }\n\n    var panelRect = panel.current.getBoundingClientRect();\n    newSize = position === 'bottom' ? panelRect.height : panelRect.width;\n    var delta = 0;\n\n    if (key === 'ArrowRight') {\n      delta = position === 'left' ? increment : -increment;\n    } else if (key === 'ArrowLeft') {\n      delta = position === 'left' ? -increment : increment;\n    } else if (key === 'ArrowUp') {\n      delta = increment;\n    } else if (key === 'ArrowDown') {\n      delta = -increment;\n    }\n\n    newSize = newSize + delta;\n\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n\n  var boundaryCssVars = {};\n\n  if (defaultSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis'] = defaultSize;\n  }\n\n  if (minSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--min'] = minSize;\n  }\n\n  if (maxSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--max'] = maxSize;\n  }\n\n  return React.createElement(GenerateId, {\n    prefix: \"pf-drawer-panel-\"\n  }, function (panelId) {\n    return React.createElement(\"div\", Object.assign({\n      id: id || panelId,\n      className: css(styles.drawerPanel, isResizable && styles.modifiers.resizable, hasNoBorder && styles.modifiers.noBorder, formatBreakpointMods(widths, styles), colorVariant === DrawerColorVariant.light200 && styles.modifiers.light_200, className),\n      ref: panel,\n      onTransitionEnd: function onTransitionEnd(ev) {\n        if (!hidden && ev.nativeEvent.propertyName === 'transform') {\n          onExpand();\n        }\n\n        setIsExpandedInternal(!hidden);\n      },\n      hidden: hidden\n    }, (defaultSize || minSize || maxSize) && {\n      style: boundaryCssVars\n    }, props), isExpandedInternal && React.createElement(React.Fragment, null, isResizable && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.drawerSplitter, position !== 'bottom' && styles.modifiers.vertical),\n      role: \"separator\",\n      tabIndex: 0,\n      \"aria-orientation\": position === 'bottom' ? 'horizontal' : 'vertical',\n      \"aria-label\": resizeAriaLabel,\n      \"aria-valuenow\": separatorValue,\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": 100,\n      \"aria-controls\": id || panelId,\n      onMouseDown: handleMousedown,\n      onKeyDown: handleKeys,\n      onTouchStart: handleTouchStart,\n      ref: splitterRef\n    }, React.createElement(\"div\", {\n      className: css(styles.drawerSplitterHandle),\n      \"aria-hidden\": true\n    })), React.createElement(\"div\", {\n      className: css(styles.drawerPanelMain)\n    }, children)), !isResizable && children));\n  });\n};\nDrawerPanelContent.displayName = 'DrawerPanelContent';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Drawer/DrawerPanelContent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerColorVariant, DrawerContext } from './Drawer';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport interface DrawerPanelContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the drawer. */\n  className?: string;\n  /** ID of the drawer panel */\n  id?: string;\n  /** Content to be rendered in the drawer panel. */\n  children?: React.ReactNode;\n  /** Flag indicating that the drawer panel should not have a border. */\n  hasNoBorder?: boolean;\n  /** Flag indicating that the drawer panel should be resizable. */\n  isResizable?: boolean;\n  /** Callback for resize end. */\n  onResize?: (width: number, id: string) => void;\n  /** The minimum size of a drawer, in either pixels or percentage. */\n  minSize?: string;\n  /** The starting size of a resizable drawer, in either pixels or percentage. */\n  defaultSize?: string;\n  /** The maximum size of a drawer, in either pixels or percentage. */\n  maxSize?: string;\n  /** The increment amount for keyboard drawer resizing, in pixels. */\n  increment?: number;\n  /** Aria label for the resizable drawer splitter. */\n  resizeAriaLabel?: string;\n  /** Width for drawer panel at various breakpoints. Overriden by resizable drawer minSize and defaultSize. */\n  widths?: {\n    default?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n    lg?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n    xl?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n    '2xl'?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n  };\n  /** Color variant of the background of the drawer panel */\n  colorVariant?: DrawerColorVariant | 'light-200' | 'default';\n}\nlet isResizing: boolean = null;\nlet newSize: number = 0;\n\nexport const DrawerPanelContent: React.FunctionComponent<DrawerPanelContentProps> = ({\n  className = '',\n  id,\n  children,\n  hasNoBorder = false,\n  isResizable = false,\n  onResize,\n  minSize,\n  defaultSize,\n  maxSize,\n  increment = 5,\n  resizeAriaLabel = 'Resize',\n  widths,\n  colorVariant = DrawerColorVariant.default,\n  ...props\n}: DrawerPanelContentProps) => {\n  const panel = React.useRef<HTMLDivElement>();\n  const splitterRef = React.useRef<HTMLDivElement>();\n  const [separatorValue, setSeparatorValue] = React.useState(0);\n  const { position, isExpanded, isStatic, onExpand, drawerRef, drawerContentRef, isInline } = React.useContext(\n    DrawerContext\n  );\n  const hidden = isStatic ? false : !isExpanded;\n  const [isExpandedInternal, setIsExpandedInternal] = React.useState(!hidden);\n  let currWidth: number = 0;\n  let panelRect: DOMRect;\n  let right: number;\n  let left: number;\n  let bottom: number;\n  let setInitialVals: boolean = true;\n\n  React.useEffect(() => {\n    if (!isStatic && isExpanded) {\n      setIsExpandedInternal(isExpanded);\n    }\n  }, [isStatic, isExpanded]);\n\n  const calcValueNow = () => {\n    let splitterPos;\n    let drawerSize;\n\n    if (isInline && position === 'right') {\n      splitterPos = panel.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (isInline && position === 'left') {\n      splitterPos = splitterRef.current.getBoundingClientRect().right - panel.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (position === 'right') {\n      splitterPos =\n        drawerContentRef.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize =\n        drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'left') {\n      splitterPos =\n        splitterRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n      drawerSize =\n        drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'bottom') {\n      splitterPos =\n        drawerContentRef.current.getBoundingClientRect().bottom - splitterRef.current.getBoundingClientRect().top;\n      drawerSize =\n        drawerContentRef.current.getBoundingClientRect().bottom - drawerContentRef.current.getBoundingClientRect().top;\n    }\n\n    const newSplitterPos = (splitterPos / drawerSize) * 100;\n    return Math.round((newSplitterPos + Number.EPSILON) * 100) / 100;\n  };\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    e.stopPropagation();\n    document.addEventListener('touchmove', callbackTouchMove, { passive: false });\n    document.addEventListener('touchend', callbackTouchEnd);\n    isResizing = true;\n  };\n\n  const handleMousedown = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    document.addEventListener('mousemove', callbackMouseMove);\n    document.addEventListener('mouseup', callbackMouseUp);\n    drawerRef.current.classList.add(css(styles.modifiers.resizing));\n    isResizing = true;\n    setInitialVals = true;\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    const mousePos = position === 'bottom' ? e.clientY : e.clientX;\n    handleControlMove(e, mousePos);\n  };\n\n  const handleTouchMove = (e: TouchEvent) => {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    const touchPos = position === 'bottom' ? e.touches[0].clientY : e.touches[0].clientX;\n    handleControlMove(e, touchPos);\n  };\n\n  const handleControlMove = (e: MouseEvent | TouchEvent, controlPosition: number) => {\n    e.stopPropagation();\n    if (!isResizing) {\n      return;\n    }\n\n    if (setInitialVals) {\n      panelRect = panel.current.getBoundingClientRect();\n      right = panelRect.right;\n      left = panelRect.left;\n      bottom = panelRect.bottom;\n      setInitialVals = false;\n    }\n    const mousePos = controlPosition;\n    let newSize = 0;\n    if (position === 'right') {\n      newSize = right - mousePos;\n    } else if (position === 'left') {\n      newSize = mousePos - left;\n    } else {\n      newSize = bottom - mousePos;\n    }\n\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n\n  const handleMouseup = () => {\n    if (!isResizing) {\n      return;\n    }\n    drawerRef.current.classList.remove(css(styles.modifiers.resizing));\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    setInitialVals = true;\n    document.removeEventListener('mousemove', callbackMouseMove);\n    document.removeEventListener('mouseup', callbackMouseUp);\n  };\n\n  const handleTouchEnd = (e: TouchEvent) => {\n    e.stopPropagation();\n    if (!isResizing) {\n      return;\n    }\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    document.removeEventListener('touchmove', callbackTouchMove);\n    document.removeEventListener('touchend', callbackTouchEnd);\n  };\n\n  const callbackMouseMove = React.useCallback(handleMouseMove, []);\n  const callbackTouchEnd = React.useCallback(handleTouchEnd, []);\n  const callbackTouchMove = React.useCallback(handleTouchMove, []);\n  const callbackMouseUp = React.useCallback(handleMouseup, []);\n\n  const handleKeys = (e: React.KeyboardEvent) => {\n    const key = e.key;\n    if (\n      key !== 'Escape' &&\n      key !== 'Enter' &&\n      key !== 'ArrowUp' &&\n      key !== 'ArrowDown' &&\n      key !== 'ArrowLeft' &&\n      key !== 'ArrowRight'\n    ) {\n      if (isResizing) {\n        e.preventDefault();\n      }\n      return;\n    }\n    e.preventDefault();\n\n    if (key === 'Escape' || key === 'Enter') {\n      onResize && onResize(currWidth, id);\n    }\n    const panelRect = panel.current.getBoundingClientRect();\n    newSize = position === 'bottom' ? panelRect.height : panelRect.width;\n    let delta = 0;\n    if (key === 'ArrowRight') {\n      delta = position === 'left' ? increment : -increment;\n    } else if (key === 'ArrowLeft') {\n      delta = position === 'left' ? -increment : increment;\n    } else if (key === 'ArrowUp') {\n      delta = increment;\n    } else if (key === 'ArrowDown') {\n      delta = -increment;\n    }\n    newSize = newSize + delta;\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n  const boundaryCssVars: any = {};\n  if (defaultSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis'] = defaultSize;\n  }\n  if (minSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--min'] = minSize;\n  }\n  if (maxSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--max'] = maxSize;\n  }\n  return (\n    <GenerateId prefix=\"pf-drawer-panel-\">\n      {panelId => (\n        <div\n          id={id || panelId}\n          className={css(\n            styles.drawerPanel,\n            isResizable && styles.modifiers.resizable,\n            hasNoBorder && styles.modifiers.noBorder,\n            formatBreakpointMods(widths, styles),\n            colorVariant === DrawerColorVariant.light200 && styles.modifiers.light_200,\n            className\n          )}\n          ref={panel}\n          onTransitionEnd={ev => {\n            if (!hidden && ev.nativeEvent.propertyName === 'transform') {\n              onExpand();\n            }\n            setIsExpandedInternal(!hidden);\n          }}\n          hidden={hidden}\n          {...((defaultSize || minSize || maxSize) && {\n            style: boundaryCssVars as React.CSSProperties\n          })}\n          {...props}\n        >\n          {isExpandedInternal && (\n            <React.Fragment>\n              {isResizable && (\n                <React.Fragment>\n                  <div\n                    className={css(styles.drawerSplitter, position !== 'bottom' && styles.modifiers.vertical)}\n                    role=\"separator\"\n                    tabIndex={0}\n                    aria-orientation={position === 'bottom' ? 'horizontal' : 'vertical'}\n                    aria-label={resizeAriaLabel}\n                    aria-valuenow={separatorValue}\n                    aria-valuemin={0}\n                    aria-valuemax={100}\n                    aria-controls={id || panelId}\n                    onMouseDown={handleMousedown}\n                    onKeyDown={handleKeys}\n                    onTouchStart={handleTouchStart}\n                    ref={splitterRef}\n                  >\n                    <div className={css(styles.drawerSplitterHandle)} aria-hidden></div>\n                  </div>\n                  <div className={css(styles.drawerPanelMain)}>{children}</div>\n                </React.Fragment>\n              )}\n              {!isResizable && children}\n            </React.Fragment>\n          )}\n        </div>\n      )}\n    </GenerateId>\n  );\n};\nDrawerPanelContent.displayName = 'DrawerPanelContent';\n"]},"metadata":{},"sourceType":"module"}