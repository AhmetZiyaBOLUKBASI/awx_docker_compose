{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{i18n}from\"@lingui/core\";import React from'react';import{useFormikContext}from'formik';import SurveyStep from'./SurveyStep';import StepName from'./StepName';import{jsx as _jsx}from\"react/jsx-runtime\";var STEP_ID='survey';export default function useSurveyStep(launchConfig,surveyConfig,resource,visitedSteps){var _useFormikContext=useFormikContext(),setFieldError=_useFormikContext.setFieldError,values=_useFormikContext.values;var hasError=Object.keys(visitedSteps).includes(STEP_ID)&&checkForError(launchConfig,surveyConfig,values);return{step:launchConfig.survey_enabled?{id:STEP_ID,name:/*#__PURE__*/_jsx(StepName,{hasErrors:hasError,id:\"survey-step\",children:/*i18n*/i18n._(\"Survey\")}),component:/*#__PURE__*/_jsx(SurveyStep,{surveyConfig:surveyConfig}),enableNext:true}:null,initialValues:getInitialValues(launchConfig,surveyConfig,resource),surveyConfig:surveyConfig,isReady:true,contentError:null,hasError:hasError,setTouched:function setTouched(setFieldTouched){if(!(surveyConfig!==null&&surveyConfig!==void 0&&surveyConfig.spec)){return;}surveyConfig.spec.forEach(function(question){setFieldTouched(\"survey_\".concat(question.variable),true,false);});},validate:function validate(){if(launchConfig.survey_enabled&&surveyConfig.spec){surveyConfig.spec.forEach(function(question){var errMessage=validateSurveyField(question,values[\"survey_\".concat(question.variable)]);if(errMessage){setFieldError(\"survey_\".concat(question.variable),errMessage);}});}}};}function getInitialValues(launchConfig,surveyConfig,resource){if(!launchConfig.survey_enabled||!surveyConfig){return{};}var values={};if(surveyConfig!==null&&surveyConfig!==void 0&&surveyConfig.spec){surveyConfig.spec.forEach(function(question){if(question.type==='multiselect'){values[\"survey_\".concat(question.variable)]=question.default?question.default.split('\\n'):[];}else{var _question$default;values[\"survey_\".concat(question.variable)]=(_question$default=question.default)!==null&&_question$default!==void 0?_question$default:'';}if(resource!==null&&resource!==void 0&&resource.extra_data){Object.entries(resource.extra_data).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];if(key===question.variable){if(question.type==='multiselect'){values[\"survey_\".concat(question.variable)]=value;}else{values[\"survey_\".concat(question.variable)]=value;}}});}});}return values;}function validateSurveyField(question,value){var isTextField=['text','textarea'].includes(question.type);var isNumeric=['integer','float'].includes(question.type);if(isTextField&&(value||value===0)){if(question.min&&value.length<question.min){return(/*i18n*/i18n._(\"This field must be at least {0} characters\",{0:question.min}));}if(question.max&&value.length>question.max){return(/*i18n*/i18n._(\"This field must not exceed {0} characters\",{0:question.max}));}}if(isNumeric&&(value||value===0)){if(value<question.min||value>question.max){return(/*i18n*/i18n._(\"This field must be a number and have a value between {0} and {1}\",{0:question.min,1:question.max}));}}if(question.required&&!value&&value!==0){return(/*i18n*/i18n._(\"This field must not be blank\"));}return null;}function checkForError(launchConfig,surveyConfig,values){var hasError=false;if(launchConfig.survey_enabled&&surveyConfig.spec){surveyConfig.spec.forEach(function(question){var value=values[\"survey_\".concat(question.variable)];var isTextField=['text','textarea'].includes(question.type);var isNumeric=['integer','float'].includes(question.type);if(isTextField&&(value||value===0)){if(question.min&&value.length<question.min||question.max&&value.length>question.max){hasError=true;}}if(isNumeric){if((value<question.min||value>question.max||value==='')&&question.required){hasError=true;}}if(question.required&&(!value||value.length===0)&&!isNumeric){hasError=true;}});}return hasError;}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/LaunchPrompt/steps/useSurveyStep.js"],"names":["React","useFormikContext","SurveyStep","StepName","STEP_ID","useSurveyStep","launchConfig","surveyConfig","resource","visitedSteps","setFieldError","values","hasError","Object","keys","includes","checkForError","step","survey_enabled","id","name","component","enableNext","initialValues","getInitialValues","isReady","contentError","setTouched","setFieldTouched","spec","forEach","question","variable","validate","errMessage","validateSurveyField","type","default","split","extra_data","entries","key","value","isTextField","isNumeric","min","length","max","required"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { t } from '@lingui/macro';\nimport { useFormikContext } from 'formik';\nimport SurveyStep from './SurveyStep';\nimport StepName from './StepName';\n\nconst STEP_ID = 'survey';\n\nexport default function useSurveyStep(\n  launchConfig,\n  surveyConfig,\n  resource,\n  visitedSteps\n) {\n  const { setFieldError, values } = useFormikContext();\n  const hasError =\n    Object.keys(visitedSteps).includes(STEP_ID) &&\n    checkForError(launchConfig, surveyConfig, values);\n\n  return {\n    step: launchConfig.survey_enabled\n      ? {\n          id: STEP_ID,\n          name: (\n            <StepName hasErrors={hasError} id=\"survey-step\">\n              {t`Survey`}\n            </StepName>\n          ),\n          component: <SurveyStep surveyConfig={surveyConfig} />,\n          enableNext: true,\n        }\n      : null,\n    initialValues: getInitialValues(launchConfig, surveyConfig, resource),\n    surveyConfig,\n    isReady: true,\n    contentError: null,\n    hasError,\n    setTouched: (setFieldTouched) => {\n      if (!surveyConfig?.spec) {\n        return;\n      }\n      surveyConfig.spec.forEach((question) => {\n        setFieldTouched(`survey_${question.variable}`, true, false);\n      });\n    },\n    validate: () => {\n      if (launchConfig.survey_enabled && surveyConfig.spec) {\n        surveyConfig.spec.forEach((question) => {\n          const errMessage = validateSurveyField(\n            question,\n            values[`survey_${question.variable}`]\n          );\n          if (errMessage) {\n            setFieldError(`survey_${question.variable}`, errMessage);\n          }\n        });\n      }\n    },\n  };\n}\n\nfunction getInitialValues(launchConfig, surveyConfig, resource) {\n  if (!launchConfig.survey_enabled || !surveyConfig) {\n    return {};\n  }\n\n  const values = {};\n  if (surveyConfig?.spec) {\n    surveyConfig.spec.forEach((question) => {\n      if (question.type === 'multiselect') {\n        values[`survey_${question.variable}`] = question.default\n          ? question.default.split('\\n')\n          : [];\n      } else {\n        values[`survey_${question.variable}`] = question.default ?? '';\n      }\n      if (resource?.extra_data) {\n        Object.entries(resource.extra_data).forEach(([key, value]) => {\n          if (key === question.variable) {\n            if (question.type === 'multiselect') {\n              values[`survey_${question.variable}`] = value;\n            } else {\n              values[`survey_${question.variable}`] = value;\n            }\n          }\n        });\n      }\n    });\n  }\n\n  return values;\n}\n\nfunction validateSurveyField(question, value) {\n  const isTextField = ['text', 'textarea'].includes(question.type);\n  const isNumeric = ['integer', 'float'].includes(question.type);\n  if (isTextField && (value || value === 0)) {\n    if (question.min && value.length < question.min) {\n      return t`This field must be at least ${question.min} characters`;\n    }\n    if (question.max && value.length > question.max) {\n      return t`This field must not exceed ${question.max} characters`;\n    }\n  }\n  if (isNumeric && (value || value === 0)) {\n    if (value < question.min || value > question.max) {\n      return t`This field must be a number and have a value between ${question.min} and ${question.max}`;\n    }\n  }\n  if (question.required && !value && value !== 0) {\n    return t`This field must not be blank`;\n  }\n  return null;\n}\n\nfunction checkForError(launchConfig, surveyConfig, values) {\n  let hasError = false;\n  if (launchConfig.survey_enabled && surveyConfig.spec) {\n    surveyConfig.spec.forEach((question) => {\n      const value = values[`survey_${question.variable}`];\n      const isTextField = ['text', 'textarea'].includes(question.type);\n      const isNumeric = ['integer', 'float'].includes(question.type);\n      if (isTextField && (value || value === 0)) {\n        if (\n          (question.min && value.length < question.min) ||\n          (question.max && value.length > question.max)\n        ) {\n          hasError = true;\n        }\n      }\n      if (isNumeric) {\n        if (\n          (value < question.min || value > question.max || value === '') &&\n          question.required\n        ) {\n          hasError = true;\n        }\n      }\n      if (question.required && (!value || value.length === 0) && !isNumeric) {\n        hasError = true;\n      }\n    });\n  }\n\n  return hasError;\n}\n"]},"metadata":{},"sourceType":"module"}