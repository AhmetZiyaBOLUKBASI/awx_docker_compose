{"ast":null,"code":"import _regeneratorRuntime from \"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";\nimport { __awaiter, __rest } from \"tslib\";\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { FileUploadField } from './FileUploadField';\nimport { readFile, fileReaderType } from '../../helpers/fileUtils';\nimport { fromEvent } from 'file-selector';\nexport var FileUpload = function FileUpload(_a) {\n  var id = _a.id,\n      type = _a.type,\n      _a$value = _a.value,\n      value = _a$value === void 0 ? type === fileReaderType.text || type === fileReaderType.dataURL ? '' : null : _a$value,\n      _a$filename = _a.filename,\n      filename = _a$filename === void 0 ? '' : _a$filename,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$onChange = _a.onChange,\n      onChange = _a$onChange === void 0 ? function () {} : _a$onChange,\n      _a$onFileInputChange = _a.onFileInputChange,\n      onFileInputChange = _a$onFileInputChange === void 0 ? null : _a$onFileInputChange,\n      _a$onReadStarted = _a.onReadStarted,\n      onReadStarted = _a$onReadStarted === void 0 ? function () {} : _a$onReadStarted,\n      _a$onReadFinished = _a.onReadFinished,\n      onReadFinished = _a$onReadFinished === void 0 ? function () {} : _a$onReadFinished,\n      _a$onReadFailed = _a.onReadFailed,\n      onReadFailed = _a$onReadFailed === void 0 ? function () {} : _a$onReadFailed,\n      onClearClick = _a.onClearClick,\n      _a$onClick = _a.onClick,\n      onClick = _a$onClick === void 0 ? function (event) {\n    return event.preventDefault();\n  } : _a$onClick,\n      onTextChange = _a.onTextChange,\n      onDataChange = _a.onDataChange,\n      _a$dropzoneProps = _a.dropzoneProps,\n      dropzoneProps = _a$dropzoneProps === void 0 ? {} : _a$dropzoneProps,\n      props = __rest(_a, [\"id\", \"type\", \"value\", \"filename\", \"children\", \"onChange\", \"onFileInputChange\", \"onReadStarted\", \"onReadFinished\", \"onReadFailed\", \"onClearClick\", \"onClick\", \"onTextChange\", \"onDataChange\", \"dropzoneProps\"]);\n\n  var onDropAccepted = function onDropAccepted(acceptedFiles, event) {\n    if (acceptedFiles.length > 0) {\n      var fileHandle = acceptedFiles[0];\n\n      if (event.type === 'drop') {\n        onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(event, fileHandle);\n      }\n\n      if (type === fileReaderType.text || type === fileReaderType.dataURL) {\n        onChange('', fileHandle.name, event); // Show the filename while reading\n\n        onReadStarted(fileHandle);\n        readFile(fileHandle, type).then(function (data) {\n          onReadFinished(fileHandle);\n          onChange(data, fileHandle.name, event);\n          onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange(data);\n        }).catch(function (error) {\n          onReadFailed(error, fileHandle);\n          onReadFinished(fileHandle);\n          onChange('', '', event); // Clear the filename field on a failure\n\n          onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange('');\n        });\n      } else {\n        onChange(fileHandle, fileHandle.name, event);\n      }\n    }\n\n    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n  };\n\n  var onDropRejected = function onDropRejected(rejectedFiles, event) {\n    if (rejectedFiles.length > 0) {\n      onChange('', rejectedFiles[0].name, event);\n    }\n\n    dropzoneProps.onDropRejected && dropzoneProps.onDropRejected(rejectedFiles, event);\n  };\n\n  var fileInputRef = React.useRef();\n\n  var setFileValue = function setFileValue(filename) {\n    fileInputRef.current.value = filename;\n  };\n\n  var onClearButtonClick = function onClearButtonClick(event) {\n    onChange('', '', event);\n    onClearClick === null || onClearClick === void 0 ? void 0 : onClearClick(event);\n    setFileValue(null);\n  };\n\n  return React.createElement(Dropzone, Object.assign({\n    multiple: false\n  }, dropzoneProps, {\n    onDropAccepted: onDropAccepted,\n    onDropRejected: onDropRejected\n  }), function (_ref) {\n    var getRootProps = _ref.getRootProps,\n        getInputProps = _ref.getInputProps,\n        isDragActive = _ref.isDragActive,\n        open = _ref.open;\n    var oldInputProps = getInputProps();\n    var inputProps = Object.assign(Object.assign({}, oldInputProps), {\n      onChange: function onChange(e) {\n        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _a, files;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  (_a = oldInputProps.onChange) === null || _a === void 0 ? void 0 : _a.call(oldInputProps, e);\n                  _context.next = 3;\n                  return fromEvent(e.nativeEvent);\n\n                case 3:\n                  files = _context.sent;\n\n                  if (files.length === 1) {\n                    onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(e, files[0]);\n                  }\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n      }\n    });\n    return React.createElement(FileUploadField, Object.assign({}, getRootProps(Object.assign(Object.assign({}, props), {\n      refKey: 'containerRef',\n      onClick: function onClick(event) {\n        return event.preventDefault();\n      }\n    })), {\n      tabIndex: null,\n      id: id,\n      type: type,\n      filename: filename,\n      value: value,\n      onChange: onChange,\n      isDragActive: isDragActive,\n      onBrowseButtonClick: open,\n      onClearButtonClick: onClearButtonClick,\n      onTextAreaClick: onClick,\n      onTextChange: onTextChange\n    }), React.createElement(\"input\", Object.assign({}, inputProps, {\n      ref: function ref(input) {\n        fileInputRef.current = input;\n        inputProps.ref(input);\n      }\n    })), children);\n  });\n};\nFileUpload.displayName = 'FileUpload';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/FileUpload/FileUpload.tsx"],"names":[],"mappings":";;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,QAAP,MAAkF,gBAAlF;AACA,SAAS,eAAT,QAAsD,mBAAtD;AACA,SAAS,QAAT,EAAmB,cAAnB,QAAyC,yBAAzC;AACA,SAAS,SAAT,QAA0B,eAA1B;AAuFA,OAAO,IAAM,UAAU,GAA6C,SAAvD,UAAuD,CAAC,EAAD,EAiB9C;AAjB+C,MACnE,EADmE,GAejD,EAfiD,CACnE,EADmE;AAAA,MAEnE,IAFmE,GAejD,EAfiD,CAEnE,IAFmE;AAAA,iBAejD,EAfiD,CAGnE,KAHmE;AAAA,MAGnE,KAHmE,yBAG3D,IAAI,KAAK,cAAc,CAAC,IAAxB,IAAgC,IAAI,KAAK,cAAc,CAAC,OAAxD,GAAkE,EAAlE,GAAuE,IAHZ;AAAA,oBAejD,EAfiD,CAInE,QAJmE;AAAA,MAInE,QAJmE,4BAIxD,EAJwD;AAAA,oBAejD,EAfiD,CAKnE,QALmE;AAAA,MAKnE,QALmE,4BAKxD,IALwD;AAAA,oBAejD,EAfiD,CAMnE,QANmE;AAAA,MAMnE,QANmE,4BAMxD,YAAK,CAAG,CANgD;AAAA,6BAejD,EAfiD,CAOnE,iBAPmE;AAAA,MAOnE,iBAPmE,qCAO/C,IAP+C;AAAA,yBAejD,EAfiD,CAQnE,aARmE;AAAA,MAQnE,aARmE,iCAQnD,YAAK,CAAG,CAR2C;AAAA,0BAejD,EAfiD,CASnE,cATmE;AAAA,MASnE,cATmE,kCASlD,YAAK,CAAG,CAT0C;AAAA,wBAejD,EAfiD,CAUnE,YAVmE;AAAA,MAUnE,YAVmE,gCAUpD,YAAK,CAAG,CAV4C;AAAA,MAWnE,YAXmE,GAejD,EAfiD,CAWnE,YAXmE;AAAA,mBAejD,EAfiD,CAYnE,OAZmE;AAAA,MAYnE,OAZmE,2BAYzD,UAAA,KAAK;AAAA,WAAI,KAAK,CAAC,cAAN,EAAJ;AAAA,GAZoD;AAAA,MAanE,YAbmE,GAejD,EAfiD,CAanE,YAbmE;AAAA,MAcnE,YAdmE,GAejD,EAfiD,CAcnE,YAdmE;AAAA,yBAejD,EAfiD,CAenE,aAfmE;AAAA,MAenE,aAfmE,iCAenD,EAfmD;AAAA,MAgBhE,KAhBgE,GAgB3D,MAAA,CAAA,EAAA,EAhB2D,CAAA,IAAA,EAAA,MAAA,EAAA,OAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,mBAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,cAAA,EAAA,SAAA,EAAA,cAAA,EAAA,cAAA,EAAA,eAAA,CAgB3D,CAhB2D;;AAkBnE,MAAM,cAAc,GAAyB,SAAvC,cAAuC,CAAC,aAAD,EAAgB,KAAhB,EAAyB;AACpE,QAAI,aAAa,CAAC,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,UAAM,UAAU,GAAG,aAAa,CAAC,CAAD,CAAhC;;AACA,UAAI,KAAK,CAAC,IAAN,KAAe,MAAnB,EAA2B;AACzB,QAAA,iBAAiB,KAAA,IAAjB,IAAA,iBAAiB,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAA,iBAAiB,CAAG,KAAH,EAAU,UAAV,CAAjB;AACD;;AACD,UAAI,IAAI,KAAK,cAAc,CAAC,IAAxB,IAAgC,IAAI,KAAK,cAAc,CAAC,OAA5D,EAAqE;AACnE,QAAA,QAAQ,CAAC,EAAD,EAAK,UAAU,CAAC,IAAhB,EAAsB,KAAtB,CAAR,CADmE,CAC7B;;AACtC,QAAA,aAAa,CAAC,UAAD,CAAb;AACA,QAAA,QAAQ,CAAC,UAAD,EAAa,IAAb,CAAR,CACG,IADH,CACQ,UAAA,IAAI,EAAG;AACX,UAAA,cAAc,CAAC,UAAD,CAAd;AACA,UAAA,QAAQ,CAAC,IAAD,EAAiB,UAAU,CAAC,IAA5B,EAAkC,KAAlC,CAAR;AACA,UAAA,YAAY,KAAA,IAAZ,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAA,YAAY,CAAG,IAAH,CAAZ;AACD,SALH,EAMG,KANH,CAMS,UAAC,KAAD,EAAwB;AAC7B,UAAA,YAAY,CAAC,KAAD,EAAQ,UAAR,CAAZ;AACA,UAAA,cAAc,CAAC,UAAD,CAAd;AACA,UAAA,QAAQ,CAAC,EAAD,EAAK,EAAL,EAAS,KAAT,CAAR,CAH6B,CAGJ;;AACzB,UAAA,YAAY,KAAA,IAAZ,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAA,YAAY,CAAG,EAAH,CAAZ;AACD,SAXH;AAYD,OAfD,MAeO;AACL,QAAA,QAAQ,CAAC,UAAD,EAAa,UAAU,CAAC,IAAxB,EAA8B,KAA9B,CAAR;AACD;AACF;;AACD,IAAA,aAAa,CAAC,cAAd,IAAgC,aAAa,CAAC,cAAd,CAA6B,aAA7B,EAA4C,KAA5C,CAAhC;AACD,GA1BD;;AA4BA,MAAM,cAAc,GAAyB,SAAvC,cAAuC,CAAC,aAAD,EAAgB,KAAhB,EAAyB;AACpE,QAAI,aAAa,CAAC,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,MAAA,QAAQ,CAAC,EAAD,EAAK,aAAa,CAAC,CAAD,CAAb,CAAiB,IAAtB,EAA4B,KAA5B,CAAR;AACD;;AACD,IAAA,aAAa,CAAC,cAAd,IAAgC,aAAa,CAAC,cAAd,CAA6B,aAA7B,EAA4C,KAA5C,CAAhC;AACD,GALD;;AAOA,MAAM,YAAY,GAAG,KAAK,CAAC,MAAN,EAArB;;AACA,MAAM,YAAY,GAAG,SAAf,YAAe,CAAC,QAAD,EAAqB;AACxC,IAAA,YAAY,CAAC,OAAb,CAAqB,KAArB,GAA6B,QAA7B;AACD,GAFD;;AAIA,MAAM,kBAAkB,GAAG,SAArB,kBAAqB,CAAC,KAAD,EAA2D;AACpF,IAAA,QAAQ,CAAC,EAAD,EAAK,EAAL,EAAS,KAAT,CAAR;AACA,IAAA,YAAY,KAAA,IAAZ,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAA,YAAY,CAAG,KAAH,CAAZ;AACA,IAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAJD;;AAMA,SACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,QAAQ,EAAE;AAAX,GAAA,EAAsB,aAAtB,EAAmC;AAAE,IAAA,cAAc,EAAE,cAAlB;AAAkC,IAAA,cAAc,EAAE;AAAlD,GAAnC,CAAT,EACG,gBAAwD;AAAA,QAArD,YAAqD,QAArD,YAAqD;AAAA,QAAvC,aAAuC,QAAvC,aAAuC;AAAA,QAAxB,YAAwB,QAAxB,YAAwB;AAAA,QAAV,IAAU,QAAV,IAAU;AACvD,QAAM,aAAa,GAAG,aAAa,EAAnC;AACA,QAAM,UAAU,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACX,aADW,CAAA,EACE;AAChB,MAAA,QAAQ,EAAE,kBAAO,CAAP;AAAA,eAAiD,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACzD,mBAAA,EAAA,GAAA,aAAa,CAAC,QAAd,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,KAAA,CAAtB,GAAsB,EAAA,CAAA,IAAA,CAAtB,aAAsB,EAAG,CAAH,CAAtB;AADyD;AAE3C,yBAAM,SAAS,CAAC,CAAC,CAAC,WAAH,CAAf;;AAF2C;AAEnD,kBAAA,KAFmD;;AAGzD,sBAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACtB,oBAAA,iBAAiB,KAAA,IAAjB,IAAA,iBAAiB,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAA,iBAAiB,CAAG,CAAH,EAAM,KAAK,CAAC,CAAD,CAAX,CAAjB;AACD;;AALwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAA,EAAjD;AAAA;AADM,KADF,CAAhB;AAWA,WACE,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB,MAAA,CAAA,MAAA,CAAA,EAAA,EACV,YAAY,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACX,KADW,CAAA,EACN;AACR,MAAA,MAAM,EAAE,cADA;AAER,MAAA,OAAO,EAAE,iBAAA,KAAK;AAAA,eAAI,KAAK,CAAC,cAAN,EAAJ;AAAA;AAFN,KADM,CAAA,CADF,EAKZ;AACF,MAAA,QAAQ,EAAE,IADR;AAEF,MAAA,EAAE,EAAE,EAFF;AAGF,MAAA,IAAI,EAAE,IAHJ;AAIF,MAAA,QAAQ,EAAE,QAJR;AAKF,MAAA,KAAK,EAAE,KALL;AAMF,MAAA,QAAQ,EAAE,QANR;AAOF,MAAA,YAAY,EAAE,YAPZ;AAQF,MAAA,mBAAmB,EAAE,IARnB;AASF,MAAA,kBAAkB,EAAE,kBATlB;AAUF,MAAA,eAAe,EAAE,OAVf;AAWF,MAAA,YAAY,EAAE;AAXZ,KALY,CAAhB,EAkBE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAEM,UAFN,EAEgB;AACd,MAAA,GAAG,EAAE,aAAA,KAAK,EAAG;AACX,QAAA,YAAY,CAAC,OAAb,GAAuB,KAAvB;AACC,QAAA,UAAwC,CAAC,GAAzC,CAA6C,KAA7C;AACF;AAJa,KAFhB,CAAA,CAlBF,EA0BG,QA1BH,CADF;AA8BD,GA5CH,CADF;AAgDD,CAhHM;AAiHP,UAAU,CAAC,WAAX,GAAyB,YAAzB","sourcesContent":["import * as React from 'react';\nimport Dropzone, { DropzoneProps, DropzoneInputProps, DropFileEventHandler } from 'react-dropzone';\nimport { FileUploadField, FileUploadFieldProps } from './FileUploadField';\nimport { readFile, fileReaderType } from '../../helpers/fileUtils';\nimport { fromEvent } from 'file-selector';\n\ninterface DropzoneInputPropsWithRef extends DropzoneInputProps {\n  ref: React.RefCallback<HTMLInputElement>; // Working around an issue in react-dropzone 9.0.0's types. Should not be necessary in later versions.\n}\n\nexport interface FileUploadProps\n  extends Omit<\n    FileUploadFieldProps,\n    'children' | 'onBrowseButtonClick' | 'onClearButtonClick' | 'isDragActive' | 'containerRef'\n  > {\n  /** Unique id for the TextArea, also used to generate ids for accessible labels. */\n  id: string;\n  /** What type of file. Determines what is is passed to `onChange` and expected by `value`\n   * (a string for 'text' and 'dataURL', or a File object otherwise. */\n  type?: 'text' | 'dataURL';\n  /** Value of the file's contents\n   * (string if text file, File object otherwise) */\n  value?: string | File;\n  /** Value to be shown in the read-only filename field. */\n  filename?: string;\n  /** @deprecated A callback for when the file contents change. Please instead use onFileInputChange, onTextChange, onDataChange, onClearClick individually.  */\n  onChange?: (\n    value: string | File,\n    filename: string,\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent> // Clear button was clicked\n      | React.DragEvent<HTMLElement> // User dragged/dropped a file\n      | React.ChangeEvent<HTMLElement> // User typed in the TextArea\n  ) => void;\n  /** Change event emitted from the hidden \\<input type=\"file\" \\> field associated with the component  */\n  onFileInputChange?: (event: React.ChangeEvent<HTMLInputElement> | React.DragEvent<HTMLElement>, file: File) => void;\n  /** Callback for clicking on the FileUploadField text area. By default, prevents a click in the text area from opening file dialog. */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Additional classes added to the FileUpload container element. */\n  className?: string;\n  /** Flag to show if the field is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the field is read only. */\n  isReadOnly?: boolean;\n  /** Flag to show if a file is being loaded. */\n  isLoading?: boolean;\n  /** Aria-valuetext for the loading spinner */\n  spinnerAriaValueText?: string;\n  /** Flag to show if the field is required. */\n  isRequired?: boolean;\n  /** Value to indicate if the field is modified to show that validation state.\n   * If set to success, field will be modified to indicate valid state.\n   * If set to error,  field will be modified to indicate error state.\n   */\n  validated?: 'success' | 'error' | 'default';\n  /** Aria-label for the TextArea. */\n  'aria-label'?: string;\n  /** Placeholder string to display in the empty filename field */\n  filenamePlaceholder?: string;\n  /** Aria-label for the read-only filename field */\n  filenameAriaLabel?: string;\n  /** Text for the Browse button */\n  browseButtonText?: string;\n  /** Text for the Clear button */\n  clearButtonText?: string;\n  /** Flag to hide the built-in preview of the file (where available).\n   * If true, you can use children to render an alternate preview. */\n  hideDefaultPreview?: boolean;\n  /** Flag to allow editing of a text file's contents after it is selected from disk */\n  allowEditingUploadedText?: boolean;\n  /** Additional children to render after (or instead of) the file preview. */\n  children?: React.ReactNode;\n\n  // Props available in FileUpload but not FileUploadField:\n\n  /** A callback for when a selected file starts loading */\n  onReadStarted?: (fileHandle: File) => void;\n  /** A callback for when a selected file finishes loading */\n  onReadFinished?: (fileHandle: File) => void;\n  /** A callback for when the FileReader API fails */\n  onReadFailed?: (error: DOMException, fileHandle: File) => void;\n  /** Optional extra props to customize react-dropzone. */\n  dropzoneProps?: DropzoneProps;\n  /** Clear button was clicked */\n  onClearClick?: React.MouseEventHandler<HTMLButtonElement>;\n  /** Text area text changed */\n  onTextChange?: (text: string) => void;\n  /** On data changed - if type='text' or type='dataURL' and file was loaded it will call this method */\n  onDataChange?: (data: string) => void;\n}\n\nexport const FileUpload: React.FunctionComponent<FileUploadProps> = ({\n  id,\n  type,\n  value = type === fileReaderType.text || type === fileReaderType.dataURL ? '' : null,\n  filename = '',\n  children = null,\n  onChange = () => {},\n  onFileInputChange = null,\n  onReadStarted = () => {},\n  onReadFinished = () => {},\n  onReadFailed = () => {},\n  onClearClick,\n  onClick = event => event.preventDefault(),\n  onTextChange,\n  onDataChange,\n  dropzoneProps = {},\n  ...props\n}: FileUploadProps) => {\n  const onDropAccepted: DropFileEventHandler = (acceptedFiles, event) => {\n    if (acceptedFiles.length > 0) {\n      const fileHandle = acceptedFiles[0];\n      if (event.type === 'drop') {\n        onFileInputChange?.(event, fileHandle);\n      }\n      if (type === fileReaderType.text || type === fileReaderType.dataURL) {\n        onChange('', fileHandle.name, event); // Show the filename while reading\n        onReadStarted(fileHandle);\n        readFile(fileHandle, type as fileReaderType)\n          .then(data => {\n            onReadFinished(fileHandle);\n            onChange(data as string, fileHandle.name, event);\n            onDataChange?.(data as string);\n          })\n          .catch((error: DOMException) => {\n            onReadFailed(error, fileHandle);\n            onReadFinished(fileHandle);\n            onChange('', '', event); // Clear the filename field on a failure\n            onDataChange?.('');\n          });\n      } else {\n        onChange(fileHandle, fileHandle.name, event);\n      }\n    }\n    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n  };\n\n  const onDropRejected: DropFileEventHandler = (rejectedFiles, event) => {\n    if (rejectedFiles.length > 0) {\n      onChange('', rejectedFiles[0].name, event);\n    }\n    dropzoneProps.onDropRejected && dropzoneProps.onDropRejected(rejectedFiles, event);\n  };\n\n  const fileInputRef = React.useRef<HTMLInputElement>();\n  const setFileValue = (filename: string) => {\n    fileInputRef.current.value = filename;\n  };\n\n  const onClearButtonClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    onChange('', '', event);\n    onClearClick?.(event);\n    setFileValue(null);\n  };\n\n  return (\n    <Dropzone multiple={false} {...dropzoneProps} onDropAccepted={onDropAccepted} onDropRejected={onDropRejected}>\n      {({ getRootProps, getInputProps, isDragActive, open }) => {\n        const oldInputProps = getInputProps();\n        const inputProps: DropzoneInputProps = {\n          ...oldInputProps,\n          onChange: async (e: React.ChangeEvent<HTMLInputElement>) => {\n            oldInputProps.onChange?.(e);\n            const files = await fromEvent(e.nativeEvent);\n            if (files.length === 1) {\n              onFileInputChange?.(e, files[0] as File);\n            }\n          }\n        };\n\n        return (\n          <FileUploadField\n            {...getRootProps({\n              ...props,\n              refKey: 'containerRef',\n              onClick: event => event.preventDefault()\n            })}\n            tabIndex={null} // Omit the unwanted tabIndex from react-dropzone's getRootProps\n            id={id}\n            type={type}\n            filename={filename}\n            value={value}\n            onChange={onChange}\n            isDragActive={isDragActive}\n            onBrowseButtonClick={open}\n            onClearButtonClick={onClearButtonClick}\n            onTextAreaClick={onClick}\n            onTextChange={onTextChange}\n          >\n            <input\n              /* hidden, necessary for react-dropzone */\n              {...inputProps}\n              ref={input => {\n                fileInputRef.current = input;\n                (inputProps as DropzoneInputPropsWithRef).ref(input);\n              }}\n            />\n            {children}\n          </FileUploadField>\n        );\n      }}\n    </Dropzone>\n  );\n};\nFileUpload.displayName = 'FileUpload';\n"]},"metadata":{},"sourceType":"module"}