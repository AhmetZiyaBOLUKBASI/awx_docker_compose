{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { TreeViewList } from './TreeViewList';\nimport { TreeViewListItem } from './TreeViewListItem';\nimport { TreeViewRoot } from './TreeViewRoot';\nexport var TreeView = function TreeView(_a) {\n  var data = _a.data,\n      _a$isNested = _a.isNested,\n      isNested = _a$isNested === void 0 ? false : _a$isNested,\n      _a$hasChecks = _a.hasChecks,\n      hasChecks = _a$hasChecks === void 0 ? false : _a$hasChecks,\n      _a$hasBadges = _a.hasBadges,\n      hasBadges = _a$hasBadges === void 0 ? false : _a$hasBadges,\n      _a$hasGuides = _a.hasGuides,\n      hasGuides = _a$hasGuides === void 0 ? false : _a$hasGuides,\n      _a$variant = _a.variant,\n      variant = _a$variant === void 0 ? 'default' : _a$variant,\n      _a$defaultAllExpanded = _a.defaultAllExpanded,\n      defaultAllExpanded = _a$defaultAllExpanded === void 0 ? false : _a$defaultAllExpanded,\n      allExpanded = _a.allExpanded,\n      icon = _a.icon,\n      expandedIcon = _a.expandedIcon,\n      parentItem = _a.parentItem,\n      onSelect = _a.onSelect,\n      onCheck = _a.onCheck,\n      toolbar = _a.toolbar,\n      activeItems = _a.activeItems,\n      _a$compareItems = _a.compareItems,\n      compareItems = _a$compareItems === void 0 ? function (item, itemToCheck) {\n    return item.id === itemToCheck.id;\n  } : _a$compareItems,\n      className = _a.className,\n      useMemo = _a.useMemo,\n      props = __rest(_a, [\"data\", \"isNested\", \"hasChecks\", \"hasBadges\", \"hasGuides\", \"variant\", \"defaultAllExpanded\", \"allExpanded\", \"icon\", \"expandedIcon\", \"parentItem\", \"onSelect\", \"onCheck\", \"toolbar\", \"activeItems\", \"compareItems\", \"className\", \"useMemo\"]);\n\n  var treeViewList = React.createElement(TreeViewList, {\n    isNested: isNested,\n    toolbar: toolbar\n  }, data.map(function (item) {\n    var _a;\n\n    return React.createElement(TreeViewListItem, Object.assign({\n      key: ((_a = item.id) === null || _a === void 0 ? void 0 : _a.toString()) || item.name.toString(),\n      name: item.name,\n      title: item.title,\n      id: item.id,\n      isExpanded: allExpanded,\n      defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded,\n      onSelect: onSelect,\n      onCheck: onCheck,\n      hasCheck: item.hasCheck !== undefined ? item.hasCheck : hasChecks,\n      checkProps: item.checkProps,\n      hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges,\n      customBadgeContent: item.customBadgeContent,\n      badgeProps: item.badgeProps,\n      activeItems: activeItems,\n      parentItem: parentItem,\n      itemData: item,\n      icon: item.icon !== undefined ? item.icon : icon,\n      expandedIcon: item.expandedIcon !== undefined ? item.expandedIcon : expandedIcon,\n      action: item.action,\n      compareItems: compareItems,\n      isCompact: variant === 'compact' || variant === 'compactNoBackground',\n      useMemo: useMemo\n    }, item.children && {\n      children: React.createElement(TreeView, {\n        data: item.children,\n        isNested: true,\n        parentItem: item,\n        hasChecks: hasChecks,\n        hasBadges: hasBadges,\n        hasGuides: hasGuides,\n        variant: variant,\n        allExpanded: allExpanded,\n        defaultAllExpanded: defaultAllExpanded,\n        onSelect: onSelect,\n        onCheck: onCheck,\n        activeItems: activeItems,\n        icon: icon,\n        expandedIcon: expandedIcon\n      })\n    }));\n  }));\n  return React.createElement(React.Fragment, null, parentItem ? treeViewList : React.createElement(TreeViewRoot, Object.assign({\n    hasChecks: hasChecks,\n    hasGuides: hasGuides,\n    variant: variant,\n    className: className\n  }, props), treeViewList));\n};\nTreeView.displayName = 'TreeView';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/TreeView/TreeView.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { TreeViewList } from './TreeViewList';\nimport { TreeViewCheckProps, TreeViewListItem } from './TreeViewListItem';\nimport { TreeViewRoot } from './TreeViewRoot';\n\nexport interface TreeViewDataItem {\n  /** Internal content of a tree view item */\n  name: React.ReactNode;\n  /** Title a tree view item. Only used in Compact presentations. */\n  title?: React.ReactNode;\n  /** ID of a tree view item */\n  id?: string;\n  /** Child nodes of a tree view item */\n  children?: TreeViewDataItem[];\n  /** Flag indicating if node is expanded by default */\n  defaultExpanded?: boolean;\n  /** Default icon of a tree view item */\n  icon?: React.ReactNode;\n  /** Expanded icon of a tree view item */\n  expandedIcon?: React.ReactNode;\n  /** Flag indicating if a tree view item has a checkbox */\n  hasCheck?: boolean;\n  /** Additional properties of the tree view item checkbox */\n  checkProps?: TreeViewCheckProps;\n  /** Flag indicating if a tree view item has a badge */\n  hasBadge?: boolean;\n  /** Optional prop for custom badge */\n  customBadgeContent?: React.ReactNode;\n  /** Additional properties of the tree view item badge */\n  badgeProps?: any;\n  /** Action of a tree view item, can be a Button or Dropdown */\n  action?: React.ReactNode;\n}\n\nexport interface TreeViewProps {\n  /** Data of the tree view */\n  data: TreeViewDataItem[];\n  /** ID of the tree view */\n  id?: string;\n  /** Flag indicating if the tree view is nested */\n  isNested?: boolean;\n  /** Flag indicating if all nodes in the tree view should have checkboxes */\n  hasChecks?: boolean;\n  /** Flag indicating if all nodes in the tree view should have badges */\n  hasBadges?: boolean;\n  /** Flag indicating if tree view has guide lines. */\n  hasGuides?: boolean;\n  /** Variant presentation styles for the tree view. */\n  variant?: 'default' | 'compact' | 'compactNoBackground';\n  /** Icon for all leaf or unexpanded node items */\n  icon?: React.ReactNode;\n  /** Icon for all expanded node items */\n  expandedIcon?: React.ReactNode;\n  /** Sets the expanded state on all tree nodes, overriding default behavior and current internal state */\n  allExpanded?: boolean;\n  /** Sets the default expanded behavior */\n  defaultAllExpanded?: boolean;\n  /** Callback for item selection */\n  onSelect?: (event: React.MouseEvent, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void;\n  /** Callback for item checkbox selection */\n  onCheck?: (event: React.ChangeEvent, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void;\n  /** Active items of tree view */\n  activeItems?: TreeViewDataItem[];\n  /** Internal. Parent item of a TreeViewListItem */\n  parentItem?: TreeViewDataItem;\n  /** Comparison function for determining active items */\n  compareItems?: (item: TreeViewDataItem, itemToCheck: TreeViewDataItem) => boolean;\n  /** Class to add to add if not passed a parentItem */\n  className?: string;\n  /** Toolbar to display above the tree view */\n  toolbar?: React.ReactNode;\n  /** Flag indicating the TreeView should utilize memoization to help render large data sets. Setting this property requires that `activeItems` pass in an array containing every node in the selected item's path. */\n  useMemo?: boolean;\n}\n\nexport const TreeView: React.FunctionComponent<TreeViewProps> = ({\n  data,\n  isNested = false,\n  hasChecks = false,\n  hasBadges = false,\n  hasGuides = false,\n  variant = 'default',\n  defaultAllExpanded = false,\n  allExpanded,\n  icon,\n  expandedIcon,\n  parentItem,\n  onSelect,\n  onCheck,\n  toolbar,\n  activeItems,\n  compareItems = (item, itemToCheck) => item.id === itemToCheck.id,\n  className,\n  useMemo,\n  ...props\n}: TreeViewProps) => {\n  const treeViewList = (\n    <TreeViewList isNested={isNested} toolbar={toolbar}>\n      {data.map(item => (\n        <TreeViewListItem\n          key={item.id?.toString() || item.name.toString()}\n          name={item.name}\n          title={item.title}\n          id={item.id}\n          isExpanded={allExpanded}\n          defaultExpanded={item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded}\n          onSelect={onSelect}\n          onCheck={onCheck}\n          hasCheck={item.hasCheck !== undefined ? item.hasCheck : hasChecks}\n          checkProps={item.checkProps}\n          hasBadge={item.hasBadge !== undefined ? item.hasBadge : hasBadges}\n          customBadgeContent={item.customBadgeContent}\n          badgeProps={item.badgeProps}\n          activeItems={activeItems}\n          parentItem={parentItem}\n          itemData={item}\n          icon={item.icon !== undefined ? item.icon : icon}\n          expandedIcon={item.expandedIcon !== undefined ? item.expandedIcon : expandedIcon}\n          action={item.action}\n          compareItems={compareItems}\n          isCompact={variant === 'compact' || variant === 'compactNoBackground'}\n          useMemo={useMemo}\n          {...(item.children && {\n            children: (\n              <TreeView\n                data={item.children}\n                isNested\n                parentItem={item}\n                hasChecks={hasChecks}\n                hasBadges={hasBadges}\n                hasGuides={hasGuides}\n                variant={variant}\n                allExpanded={allExpanded}\n                defaultAllExpanded={defaultAllExpanded}\n                onSelect={onSelect}\n                onCheck={onCheck}\n                activeItems={activeItems}\n                icon={icon}\n                expandedIcon={expandedIcon}\n              />\n            )\n          })}\n        />\n      ))}\n    </TreeViewList>\n  );\n  return (\n    <>\n      {parentItem ? (\n        treeViewList\n      ) : (\n        <TreeViewRoot hasChecks={hasChecks} hasGuides={hasGuides} variant={variant} className={className} {...props}>\n          {treeViewList}\n        </TreeViewRoot>\n      )}\n    </>\n  );\n};\n\nTreeView.displayName = 'TreeView';\n"]},"metadata":{},"sourceType":"module"}