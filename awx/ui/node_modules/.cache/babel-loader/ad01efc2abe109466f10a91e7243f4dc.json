{"ast":null,"code":"import _createForOfIteratorHelper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/JumpLinks/jump-links';\nimport sidebarStyles from '@patternfly/react-styles/css/components/Sidebar/sidebar';\nimport { JumpLinksItem } from './JumpLinksItem';\nimport { JumpLinksList } from './JumpLinksList';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport cssToggleDisplayVar from '@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display';\nimport { canUseDOM } from '../../helpers/util'; // Recursively find JumpLinkItems and return an array of all their scrollNodes\n\nvar getScrollItems = function getScrollItems(children, res) {\n  React.Children.forEach(children, function (child) {\n    if (canUseDOM && document.getElementById && document.querySelector && child.type === JumpLinksItem) {\n      var scrollNode = child.props.node || child.props.href;\n\n      if (typeof scrollNode === 'string') {\n        if (scrollNode.startsWith('#')) {\n          // Allow spaces and other special characters as `id`s to be nicer to consumers\n          // https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\n          res.push(document.getElementById(scrollNode.substr(1)));\n        } else {\n          res.push(document.querySelector(scrollNode));\n        }\n      } else if (scrollNode instanceof HTMLElement) {\n        res.push(scrollNode);\n      }\n    }\n\n    if ([React.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {\n      getScrollItems(child.props.children, res);\n    }\n  });\n  return res;\n};\n\nfunction isResponsive(jumpLinks) {\n  // https://github.com/patternfly/patternfly/blob/main/src/patternfly/components/JumpLinks/jump-links.scss#L103\n  return jumpLinks && getComputedStyle(jumpLinks).getPropertyValue(cssToggleDisplayVar.name).includes('block');\n}\n\nexport var JumpLinks = function JumpLinks(_a) {\n  var isCentered = _a.isCentered,\n      isVertical = _a.isVertical,\n      children = _a.children,\n      label = _a.label,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? typeof label === 'string' ? label : null : _a$ariaLabel,\n      scrollableSelector = _a.scrollableSelector,\n      _a$activeIndex = _a.activeIndex,\n      activeIndexProp = _a$activeIndex === void 0 ? 0 : _a$activeIndex,\n      _a$offset = _a.offset,\n      offset = _a$offset === void 0 ? 0 : _a$offset,\n      expandable = _a.expandable,\n      _a$isExpanded = _a.isExpanded,\n      isExpandedProp = _a$isExpanded === void 0 ? false : _a$isExpanded,\n      _a$alwaysShowLabel = _a.alwaysShowLabel,\n      alwaysShowLabel = _a$alwaysShowLabel === void 0 ? true : _a$alwaysShowLabel,\n      _a$toggleAriaLabel = _a.toggleAriaLabel,\n      toggleAriaLabel = _a$toggleAriaLabel === void 0 ? 'Toggle jump links' : _a$toggleAriaLabel,\n      className = _a.className,\n      props = __rest(_a, [\"isCentered\", \"isVertical\", \"children\", \"label\", 'aria-label', \"scrollableSelector\", \"activeIndex\", \"offset\", \"expandable\", \"isExpanded\", \"alwaysShowLabel\", \"toggleAriaLabel\", \"className\"]);\n\n  var hasScrollSpy = Boolean(scrollableSelector);\n\n  var _React$useState = React.useState(hasScrollSpy ? getScrollItems(children, []) : []),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      scrollItems = _React$useState2[0],\n      setScrollItems = _React$useState2[1];\n\n  var _React$useState3 = React.useState(activeIndexProp),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      activeIndex = _React$useState4[0],\n      setActiveIndex = _React$useState4[1];\n\n  var _React$useState5 = React.useState(isExpandedProp),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      isExpanded = _React$useState6[0],\n      setIsExpanded = _React$useState6[1]; // Boolean to disable scroll listener from overriding active state of clicked jumplink\n\n\n  var isLinkClicked = React.useRef(false); // Allow expanding to be controlled for a niche use case\n\n  React.useEffect(function () {\n    return setIsExpanded(isExpandedProp);\n  }, [isExpandedProp]);\n  var navRef = React.useRef();\n  var scrollableElement;\n  var scrollSpy = React.useCallback(function () {\n    if (!canUseDOM || !hasScrollSpy || !(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n\n    if (isLinkClicked.current) {\n      isLinkClicked.current = false;\n      return;\n    }\n\n    var scrollPosition = Math.ceil(scrollableElement.scrollTop + offset);\n    window.requestAnimationFrame(function () {\n      var newScrollItems = scrollItems; // Items might have rendered after this component. Do a quick refresh.\n\n      if (!newScrollItems[0] || newScrollItems.includes(null)) {\n        newScrollItems = getScrollItems(children, []);\n        setScrollItems(newScrollItems);\n      }\n\n      var scrollElements = newScrollItems.map(function (e, index) {\n        return {\n          y: e ? e.offsetTop : null,\n          index: index\n        };\n      }).filter(function (_ref) {\n        var y = _ref.y;\n        return y !== null;\n      }).sort(function (e1, e2) {\n        return e2.y - e1.y;\n      });\n\n      var _iterator = _createForOfIteratorHelper(scrollElements),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _step.value,\n              y = _step$value.y,\n              index = _step$value.index;\n\n          if (scrollPosition >= y) {\n            return setActiveIndex(index);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    });\n  }, [scrollItems, hasScrollSpy, scrollableElement, offset]);\n  React.useEffect(function () {\n    scrollableElement = document.querySelector(scrollableSelector);\n\n    if (!(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n\n    scrollableElement.addEventListener('scroll', scrollSpy);\n    return function () {\n      return scrollableElement.removeEventListener('scroll', scrollSpy);\n    };\n  }, [scrollableSelector, scrollSpy]);\n  React.useEffect(function () {\n    scrollSpy();\n  }, []);\n  var jumpLinkIndex = 0;\n\n  var cloneChildren = function cloneChildren(children) {\n    return !hasScrollSpy ? children : React.Children.map(children, function (child) {\n      if (child.type === JumpLinksItem) {\n        var _child$props = child.props,\n            onClickProp = _child$props.onClick,\n            isActiveProp = _child$props.isActive;\n        var itemIndex = jumpLinkIndex++;\n        var scrollItem = scrollItems[itemIndex];\n        return React.cloneElement(child, {\n          onClick: function onClick(ev) {\n            isLinkClicked.current = true; // Items might have rendered after this component. Do a quick refresh.\n\n            var newScrollItems;\n\n            if (!scrollItem) {\n              newScrollItems = getScrollItems(children, []);\n              setScrollItems(newScrollItems);\n            }\n\n            var newScrollItem = scrollItem || newScrollItems[itemIndex];\n\n            if (newScrollItem) {\n              // we have to support scrolling to an offset due to sticky sidebar\n              var _scrollableElement = document.querySelector(scrollableSelector);\n\n              if (_scrollableElement instanceof HTMLElement) {\n                if (isResponsive(navRef.current)) {\n                  // Remove class immediately so we can get collapsed height\n                  if (navRef.current) {\n                    navRef.current.classList.remove(styles.modifiers.expanded);\n                  }\n\n                  var stickyParent = navRef.current && navRef.current.parentElement;\n\n                  while (stickyParent && !stickyParent.classList.contains(sidebarStyles.modifiers.sticky)) {\n                    stickyParent = stickyParent.parentElement;\n                  }\n\n                  setIsExpanded(false);\n\n                  if (stickyParent) {\n                    offset += stickyParent.scrollHeight;\n                  }\n                }\n\n                _scrollableElement.scrollTo(0, newScrollItem.offsetTop - offset);\n              }\n\n              newScrollItem.focus();\n              ev.preventDefault();\n              setActiveIndex(itemIndex);\n            }\n\n            if (onClickProp) {\n              onClickProp(ev);\n            }\n          },\n          isActive: isActiveProp || activeIndex === itemIndex,\n          children: cloneChildren(child.props.children)\n        });\n      } else if (child.type === React.Fragment) {\n        return cloneChildren(child.props.children);\n      } else if (child.type === JumpLinksList) {\n        return React.cloneElement(child, {\n          children: cloneChildren(child.props.children)\n        });\n      }\n\n      return child;\n    });\n  };\n\n  return React.createElement(\"nav\", Object.assign({\n    className: css(styles.jumpLinks, isCentered && styles.modifiers.center, isVertical && styles.modifiers.vertical, formatBreakpointMods(expandable, styles), isExpanded && styles.modifiers.expanded, className),\n    \"aria-label\": ariaLabel,\n    ref: navRef\n  }, props), React.createElement(\"div\", {\n    className: styles.jumpLinksMain\n  }, React.createElement(\"div\", {\n    className: css('pf-c-jump-links__header')\n  }, expandable && React.createElement(\"div\", {\n    className: styles.jumpLinksToggle\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    onClick: function onClick() {\n      return setIsExpanded(!isExpanded);\n    },\n    \"aria-label\": toggleAriaLabel,\n    \"aria-expanded\": isExpanded\n  }, React.createElement(\"span\", {\n    className: styles.jumpLinksToggleIcon\n  }, React.createElement(AngleRightIcon, null)), label && React.createElement(\"span\", {\n    className: css(styles.jumpLinksToggleText)\n  }, \" \", label, \" \"))), label && alwaysShowLabel && React.createElement(\"div\", {\n    className: css(styles.jumpLinksLabel)\n  }, label)), React.createElement(\"ul\", {\n    className: styles.jumpLinksList\n  }, cloneChildren(children))));\n};\nJumpLinks.displayName = 'JumpLinks';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/JumpLinks/JumpLinks.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/JumpLinks/jump-links';\nimport sidebarStyles from '@patternfly/react-styles/css/components/Sidebar/sidebar';\nimport { JumpLinksItem, JumpLinksItemProps } from './JumpLinksItem';\nimport { JumpLinksList } from './JumpLinksList';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport cssToggleDisplayVar from '@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display';\nimport { canUseDOM } from '../../helpers/util';\n\nexport interface JumpLinksProps extends Omit<React.HTMLProps<HTMLElement>, 'label'> {\n  /** Whether to center children. */\n  isCentered?: boolean;\n  /** Whether the layout of children is vertical or horizontal. */\n  isVertical?: boolean;\n  /** Label to add to nav element. */\n  label?: React.ReactNode;\n  /** Flag to always show the label when using `expandable` */\n  alwaysShowLabel?: boolean;\n  /** Aria-label to add to nav element. Defaults to label. */\n  'aria-label'?: string;\n  /** Selector for the scrollable element to spy on. Not passing a selector disables spying. */\n  scrollableSelector?: string;\n  /** The index of the child Jump link to make active. */\n  activeIndex?: number;\n  /** Children nodes */\n  children?: React.ReactNode;\n  /** Offset to add to `scrollPosition`, potentially for a masthead which content scrolls under. */\n  offset?: number;\n  /** When to collapse/expand at different breakpoints */\n  expandable?: {\n    default?: 'expandable' | 'nonExpandable';\n    sm?: 'expandable' | 'nonExpandable';\n    md?: 'expandable' | 'nonExpandable';\n    lg?: 'expandable' | 'nonExpandable';\n    xl?: 'expandable' | 'nonExpandable';\n    '2xl'?: 'expandable' | 'nonExpandable';\n  };\n  /** On mobile whether or not the JumpLinks starts out expanded */\n  isExpanded?: boolean;\n  /** Aria label for expandable toggle */\n  toggleAriaLabel?: string;\n  /** Class for nav */\n  className?: string;\n}\n\n// Recursively find JumpLinkItems and return an array of all their scrollNodes\nconst getScrollItems = (children: React.ReactNode, res: HTMLElement[]) => {\n  React.Children.forEach(children, (child: any) => {\n    if (canUseDOM && document.getElementById && document.querySelector && child.type === JumpLinksItem) {\n      const scrollNode = child.props.node || child.props.href;\n      if (typeof scrollNode === 'string') {\n        if (scrollNode.startsWith('#')) {\n          // Allow spaces and other special characters as `id`s to be nicer to consumers\n          // https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\n          res.push(document.getElementById(scrollNode.substr(1)) as HTMLElement);\n        } else {\n          res.push(document.querySelector(scrollNode) as HTMLElement);\n        }\n      } else if (scrollNode instanceof HTMLElement) {\n        res.push(scrollNode);\n      }\n    }\n    if ([React.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {\n      getScrollItems(child.props.children, res);\n    }\n  });\n  return res;\n};\n\nfunction isResponsive(jumpLinks: HTMLElement) {\n  // https://github.com/patternfly/patternfly/blob/main/src/patternfly/components/JumpLinks/jump-links.scss#L103\n  return (\n    jumpLinks &&\n    getComputedStyle(jumpLinks)\n      .getPropertyValue(cssToggleDisplayVar.name)\n      .includes('block')\n  );\n}\n\nexport const JumpLinks: React.FunctionComponent<JumpLinksProps> = ({\n  isCentered,\n  isVertical,\n  children,\n  label,\n  'aria-label': ariaLabel = typeof label === 'string' ? label : null,\n  scrollableSelector,\n  activeIndex: activeIndexProp = 0,\n  offset = 0,\n  expandable,\n  isExpanded: isExpandedProp = false,\n  alwaysShowLabel = true,\n  toggleAriaLabel = 'Toggle jump links',\n  className,\n  ...props\n}: JumpLinksProps) => {\n  const hasScrollSpy = Boolean(scrollableSelector);\n  const [scrollItems, setScrollItems] = React.useState(hasScrollSpy ? getScrollItems(children, []) : []);\n  const [activeIndex, setActiveIndex] = React.useState(activeIndexProp);\n  const [isExpanded, setIsExpanded] = React.useState(isExpandedProp);\n  // Boolean to disable scroll listener from overriding active state of clicked jumplink\n  const isLinkClicked = React.useRef(false);\n  // Allow expanding to be controlled for a niche use case\n  React.useEffect(() => setIsExpanded(isExpandedProp), [isExpandedProp]);\n  const navRef = React.useRef<HTMLElement>();\n\n  let scrollableElement: HTMLElement;\n\n  const scrollSpy = React.useCallback(() => {\n    if (!canUseDOM || !hasScrollSpy || !(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n    if (isLinkClicked.current) {\n      isLinkClicked.current = false;\n      return;\n    }\n    const scrollPosition = Math.ceil(scrollableElement.scrollTop + offset);\n    window.requestAnimationFrame(() => {\n      let newScrollItems = scrollItems;\n      // Items might have rendered after this component. Do a quick refresh.\n      if (!newScrollItems[0] || newScrollItems.includes(null)) {\n        newScrollItems = getScrollItems(children, []);\n        setScrollItems(newScrollItems);\n      }\n      const scrollElements = newScrollItems\n        .map((e, index) => ({\n          y: e ? e.offsetTop : null,\n          index\n        }))\n        .filter(({ y }) => y !== null)\n        .sort((e1, e2) => e2.y - e1.y);\n      for (const { y, index } of scrollElements) {\n        if (scrollPosition >= y) {\n          return setActiveIndex(index);\n        }\n      }\n    });\n  }, [scrollItems, hasScrollSpy, scrollableElement, offset]);\n\n  React.useEffect(() => {\n    scrollableElement = document.querySelector(scrollableSelector) as HTMLElement;\n    if (!(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n    scrollableElement.addEventListener('scroll', scrollSpy);\n\n    return () => scrollableElement.removeEventListener('scroll', scrollSpy);\n  }, [scrollableSelector, scrollSpy]);\n\n  React.useEffect(() => {\n    scrollSpy();\n  }, []);\n\n  let jumpLinkIndex = 0;\n  const cloneChildren = (children: React.ReactNode): React.ReactNode =>\n    !hasScrollSpy\n      ? children\n      : React.Children.map(children, (child: any) => {\n          if (child.type === JumpLinksItem) {\n            const { onClick: onClickProp, isActive: isActiveProp } = child.props;\n            const itemIndex = jumpLinkIndex++;\n            const scrollItem = scrollItems[itemIndex];\n            return React.cloneElement(child as React.ReactElement<JumpLinksItemProps>, {\n              onClick(ev: React.MouseEvent<HTMLAnchorElement>) {\n                isLinkClicked.current = true;\n                // Items might have rendered after this component. Do a quick refresh.\n                let newScrollItems;\n                if (!scrollItem) {\n                  newScrollItems = getScrollItems(children, []);\n                  setScrollItems(newScrollItems);\n                }\n                const newScrollItem = scrollItem || newScrollItems[itemIndex];\n\n                if (newScrollItem) {\n                  // we have to support scrolling to an offset due to sticky sidebar\n                  const scrollableElement = document.querySelector(scrollableSelector) as HTMLElement;\n                  if (scrollableElement instanceof HTMLElement) {\n                    if (isResponsive(navRef.current)) {\n                      // Remove class immediately so we can get collapsed height\n                      if (navRef.current) {\n                        navRef.current.classList.remove(styles.modifiers.expanded);\n                      }\n                      let stickyParent = navRef.current && navRef.current.parentElement;\n                      while (stickyParent && !stickyParent.classList.contains(sidebarStyles.modifiers.sticky)) {\n                        stickyParent = stickyParent.parentElement;\n                      }\n                      setIsExpanded(false);\n                      if (stickyParent) {\n                        offset += stickyParent.scrollHeight;\n                      }\n                    }\n                    scrollableElement.scrollTo(0, newScrollItem.offsetTop - offset);\n                  }\n                  newScrollItem.focus();\n                  ev.preventDefault();\n                  setActiveIndex(itemIndex);\n                }\n                if (onClickProp) {\n                  onClickProp(ev);\n                }\n              },\n              isActive: isActiveProp || activeIndex === itemIndex,\n              children: cloneChildren(child.props.children)\n            });\n          } else if (child.type === React.Fragment) {\n            return cloneChildren(child.props.children);\n          } else if (child.type === JumpLinksList) {\n            return React.cloneElement(child, { children: cloneChildren(child.props.children) });\n          }\n          return child;\n        });\n\n  return (\n    <nav\n      className={css(\n        styles.jumpLinks,\n        isCentered && styles.modifiers.center,\n        isVertical && styles.modifiers.vertical,\n        formatBreakpointMods(expandable, styles),\n        isExpanded && styles.modifiers.expanded,\n        className\n      )}\n      aria-label={ariaLabel}\n      ref={navRef}\n      {...props}\n    >\n      <div className={styles.jumpLinksMain}>\n        <div className={css('pf-c-jump-links__header')}>\n          {expandable && (\n            <div className={styles.jumpLinksToggle}>\n              <Button\n                variant=\"plain\"\n                onClick={() => setIsExpanded(!isExpanded)}\n                aria-label={toggleAriaLabel}\n                aria-expanded={isExpanded}\n              >\n                <span className={styles.jumpLinksToggleIcon}>\n                  <AngleRightIcon />\n                </span>\n                {label && <span className={css(styles.jumpLinksToggleText)}> {label} </span>}\n              </Button>\n            </div>\n          )}\n          {label && alwaysShowLabel && <div className={css(styles.jumpLinksLabel)}>{label}</div>}\n        </div>\n        <ul className={styles.jumpLinksList}>{cloneChildren(children)}</ul>\n      </div>\n    </nav>\n  );\n};\nJumpLinks.displayName = 'JumpLinks';\n"]},"metadata":{},"sourceType":"module"}