{"ast":null,"code":"/*!\n* focus-trap 6.9.2\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { tabbable, focusable, isTabbable, isFocusable } from 'tabbable';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar activeFocusTraps = function () {\n  var trapQueue = [];\n  return {\n    activateTrap: function activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        var activeTrap = trapQueue[trapQueue.length - 1];\n\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      var trapIndex = trapQueue.indexOf(trap);\n\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n    deactivateTrap: function deactivateTrap(trap) {\n      var trapIndex = trapQueue.indexOf(trap);\n\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    }\n  };\n}();\n\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\n\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nvar isTabEvent = function isTabEvent(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n}; // Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\n\n\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n  return idx;\n};\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\n\n\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\n\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true\n  }, userOptions);\n\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n\n\n  var findContainerIndex = function findContainerIndex(element) {\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n          tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n\n\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n\n      optionValue = optionValue.apply(void 0, params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      } // else, empty string (invalid), null (invalid), 0 (invalid)\n\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n\n    return node;\n  };\n\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus'); // false explicitly indicates we want no initialFocus at all\n\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode; // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n\n    return node;\n  };\n\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions); // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : null,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true; // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n\n          var nodeIdx = focusableNodes.findIndex(function (n) {\n            return n === node;\n          });\n\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n\n          if (forward) {\n            return focusableNodes.slice(nodeIdx + 1).find(function (n) {\n              return isTabbable(n, config.tabbableOptions);\n            });\n          }\n\n          return focusableNodes.slice(0, nodeIdx).reverse().find(function (n) {\n            return isTabbable(n, config.tabbableOptions);\n          });\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    }); // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n  };\n\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  }; // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n\n\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus: config.returnFocusOnDeactivate && !isFocusable(target, config.tabbableOptions)\n      });\n      return;\n    } // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    } // otherwise, prevent the click\n\n\n    e.preventDefault();\n  }; // In case focus escapes the trap for some strange reason, pull it back in.\n\n\n  var checkFocusIn = function checkFocusIn(e) {\n    var target = getActualTarget(e);\n    var targetContained = findContainerIndex(target) >= 0; // In Firefox when you Tab out of an iframe the Document is briefly focused.\n\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  }; // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n\n\n  var checkTab = function checkTab(e) {\n    var target = getActualTarget(e);\n    updateTabbableNodes();\n    var destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back in to...\n        if (e.shiftKey) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (e.shiftKey) {\n        // REVERSE\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref2) {\n          var firstTabbableNode = _ref2.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        // FORWARD\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var lastTabbableNode = _ref3.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = _destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    } // else, let the browser take care of [shift+]tab and move the focus\n\n  };\n\n  var checkKey = function checkKey(e) {\n    if (isEscapeEvent(e) && valueOrHandler(config.escapeDeactivates, e) !== false) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }; //\n  // EVENT LISTENERS\n  //\n\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    } // There can be only one listening focus trap at a time\n\n\n    activeFocusTraps.activateTrap(trap); // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  }; //\n  // TRAP DEFINITION\n  //\n\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      if (onActivate) {\n        onActivate();\n      }\n\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n\n        addListeners();\n\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      activeFocusTraps.deactivateTrap(trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n      return this;\n    },\n    unpause: function unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    }\n  }; // initialize container elements\n\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\nexport { createFocusTrap };","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/focus-trap/index.js"],"names":["activeFocusTraps","trapQueue","activateTrap","activeTrap","trapIndex","deactivateTrap","isSelectableInput","node","isEscapeEvent","e","isTabEvent","delay","setTimeout","findIndex","idx","arr","fn","valueOrHandler","params","value","getActualTarget","event","createFocusTrap","doc","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","undefined","getOption","configOverrideOptions","configOptionName","findContainerIndex","container","tabbableNodes","getNodeForOption","optionValue","optionName","getInitialFocusNode","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","tabbable","focusableNodes","focusable","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","isTabbable","group","tryFocus","preventScroll","getReturnFocusNode","checkPointerDown","target","trap","returnFocus","isFocusable","checkFocusIn","targetContained","checkTab","destinationNode","containerIndex","containerGroup","startOfGroupIndex","destinationGroupIndex","destinationGroup","lastOfGroupIndex","checkKey","checkClick","addListeners","capture","passive","removeListeners","activate","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","deactivate","options","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","pause","unpause","updateContainerElements","elementsAsArray"],"mappings":"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","sourcesContent":["import { tabbable, focusable, isFocusable, isTabbable } from 'tabbable';\n\nconst activeFocusTraps = (function () {\n  const trapQueue = [];\n  return {\n    activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        const activeTrap = trapQueue[trapQueue.length - 1];\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n\n    deactivateTrap(trap) {\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    },\n  };\n})();\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element) {\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode:\n          tabbableNodes.length > 0\n            ? tabbableNodes[tabbableNodes.length - 1]\n            : null,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          const nodeIdx = focusableNodes.findIndex((n) => n === node);\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n\n          if (forward) {\n            return focusableNodes\n              .slice(nodeIdx + 1)\n              .find((n) => isTabbable(n, config.tabbableOptions));\n          }\n\n          return focusableNodes\n            .slice(0, nodeIdx)\n            .reverse()\n            .find((n) => isTabbable(n, config.tabbableOptions));\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus:\n          config.returnFocusOnDeactivate &&\n          !isFocusable(target, config.tabbableOptions),\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const target = getActualTarget(e);\n    const targetContained = findContainerIndex(target) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkTab = function (e) {\n    const target = getActualTarget(e);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back in to...\n        if (e.shiftKey) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (e.shiftKey) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (e) {\n    if (\n      isEscapeEvent(e) &&\n      valueOrHandler(config.escapeDeactivates, e) !== false\n    ) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      if (onActivate) {\n        onActivate();\n      }\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n\n      activeFocusTraps.deactivateTrap(trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n\n      return this;\n    },\n\n    unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"]},"metadata":{},"sourceType":"module"}