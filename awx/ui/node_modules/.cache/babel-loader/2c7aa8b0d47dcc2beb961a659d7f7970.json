{"ast":null,"code":"import _createForOfIteratorHelper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { WizardBody } from './WizardBody';\nexport var WizardToggle = function WizardToggle(_ref) {\n  var isNavOpen = _ref.isNavOpen,\n      onNavToggle = _ref.onNavToggle,\n      nav = _ref.nav,\n      steps = _ref.steps,\n      activeStep = _ref.activeStep,\n      children = _ref.children,\n      _ref$hasNoBodyPadding = _ref.hasNoBodyPadding,\n      hasNoBodyPadding = _ref$hasNoBodyPadding === void 0 ? false : _ref$hasNoBodyPadding,\n      _ref$ariaLabel = _ref['aria-label'],\n      ariaLabel = _ref$ariaLabel === void 0 ? 'Wizard Toggle' : _ref$ariaLabel,\n      _ref$mainAriaLabelled = _ref.mainAriaLabelledBy,\n      mainAriaLabelledBy = _ref$mainAriaLabelled === void 0 ? null : _ref$mainAriaLabelled,\n      _ref$mainAriaLabel = _ref.mainAriaLabel,\n      mainAriaLabel = _ref$mainAriaLabel === void 0 ? null : _ref$mainAriaLabel,\n      _ref$isInPage = _ref.isInPage,\n      isInPage = _ref$isInPage === void 0 ? true : _ref$isInPage,\n      hasDrawer = _ref.hasDrawer,\n      isDrawerExpanded = _ref.isDrawerExpanded;\n  var activeStepIndex;\n  var activeStepName;\n  var activeStepSubName;\n\n  for (var i = 0; i < steps.length; i++) {\n    if (activeStep.id && steps[i].id === activeStep.id || steps[i].name === activeStep.name) {\n      activeStepIndex = i + 1;\n      activeStepName = steps[i].name;\n      break;\n    } else if (steps[i].steps) {\n      var _iterator = _createForOfIteratorHelper(steps[i].steps),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var step = _step.value;\n\n          if (activeStep.id && step.id === activeStep.id || step.name === activeStep.name) {\n            activeStepIndex = i + 1;\n            activeStepName = steps[i].name;\n            activeStepSubName = step.name;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: function onClick() {\n      return onNavToggle(!isNavOpen);\n    },\n    className: css(styles.wizardToggle, isNavOpen && 'pf-m-expanded'),\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": isNavOpen\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleList)\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleListItem)\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleNum)\n  }, activeStepIndex), \" \", activeStepName, activeStepSubName && React.createElement(AngleRightIcon, {\n    className: css(styles.wizardToggleSeparator),\n    \"aria-hidden\": \"true\"\n  })), activeStepSubName && React.createElement(\"span\", {\n    className: css(styles.wizardToggleListItem)\n  }, activeStepSubName)), React.createElement(\"span\", {\n    className: css(styles.wizardToggleIcon)\n  }, React.createElement(CaretDownIcon, {\n    \"aria-hidden\": \"true\"\n  }))), React.createElement(\"div\", {\n    className: css(styles.wizardOuterWrap)\n  }, React.createElement(\"div\", {\n    className: css(styles.wizardInnerWrap)\n  }, nav(isNavOpen), React.createElement(WizardBody, {\n    mainComponent: isInPage ? 'div' : 'main',\n    \"aria-label\": mainAriaLabel,\n    \"aria-labelledby\": mainAriaLabelledBy,\n    hasNoBodyPadding: hasNoBodyPadding,\n    activeStep: activeStep,\n    isDrawerExpanded: isDrawerExpanded,\n    hasDrawer: hasDrawer\n  }, hasDrawer && !isDrawerExpanded && activeStep.drawerToggleButton, activeStep.component)), children));\n};\nWizardToggle.displayName = 'WizardToggle';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Wizard/WizardToggle.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { WizardStep } from './Wizard';\nimport { WizardBody } from './WizardBody';\n\nexport interface WizardToggleProps {\n  /** Function that returns the WizardNav component */\n  nav: (isWizardNavOpen: boolean) => React.ReactElement;\n  /** The wizard steps */\n  steps: WizardStep[];\n  /** The currently active WizardStep */\n  activeStep: WizardStep;\n  /** The WizardFooter */\n  children?: React.ReactNode;\n  /** Set to true to remove body padding */\n  hasNoBodyPadding: boolean;\n  /** If the nav is open */\n  isNavOpen: boolean;\n  /** Callback function for when the nav is toggled */\n  onNavToggle: (isOpen: boolean) => void;\n  /** The button's aria-label */\n  'aria-label'?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** The main's aria-label */\n  mainAriaLabel?: string;\n  /** If the wizard is in-page */\n  isInPage?: boolean;\n  /** @beta Flag indicating the wizard has a drawer for at least one of the wizard steps */\n  hasDrawer?: boolean;\n  /** @beta Flag indicating the wizard drawer is expanded */\n  isDrawerExpanded?: boolean;\n}\n\nexport const WizardToggle: React.FunctionComponent<WizardToggleProps> = ({\n  isNavOpen,\n  onNavToggle,\n  nav,\n  steps,\n  activeStep,\n  children,\n  hasNoBodyPadding = false,\n  'aria-label': ariaLabel = 'Wizard Toggle',\n  mainAriaLabelledBy = null,\n  mainAriaLabel = null,\n  isInPage = true,\n  hasDrawer,\n  isDrawerExpanded\n}: WizardToggleProps) => {\n  let activeStepIndex;\n  let activeStepName;\n  let activeStepSubName;\n  for (let i = 0; i < steps.length; i++) {\n    if ((activeStep.id && steps[i].id === activeStep.id) || steps[i].name === activeStep.name) {\n      activeStepIndex = i + 1;\n      activeStepName = steps[i].name;\n      break;\n    } else if (steps[i].steps) {\n      for (const step of steps[i].steps) {\n        if ((activeStep.id && step.id === activeStep.id) || step.name === activeStep.name) {\n          activeStepIndex = i + 1;\n          activeStepName = steps[i].name;\n          activeStepSubName = step.name;\n          break;\n        }\n      }\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <button\n        onClick={() => onNavToggle(!isNavOpen)}\n        className={css(styles.wizardToggle, isNavOpen && 'pf-m-expanded')}\n        aria-label={ariaLabel}\n        aria-expanded={isNavOpen}\n      >\n        <span className={css(styles.wizardToggleList)}>\n          <span className={css(styles.wizardToggleListItem)}>\n            <span className={css(styles.wizardToggleNum)}>{activeStepIndex}</span> {activeStepName}\n            {activeStepSubName && <AngleRightIcon className={css(styles.wizardToggleSeparator)} aria-hidden=\"true\" />}\n          </span>\n          {activeStepSubName && <span className={css(styles.wizardToggleListItem)}>{activeStepSubName}</span>}\n        </span>\n        <span className={css(styles.wizardToggleIcon)}>\n          <CaretDownIcon aria-hidden=\"true\" />\n        </span>\n      </button>\n      <div className={css(styles.wizardOuterWrap)}>\n        <div className={css(styles.wizardInnerWrap)}>\n          {nav(isNavOpen)}\n          <WizardBody\n            mainComponent={isInPage ? 'div' : 'main'}\n            aria-label={mainAriaLabel}\n            aria-labelledby={mainAriaLabelledBy}\n            hasNoBodyPadding={hasNoBodyPadding}\n            activeStep={activeStep}\n            isDrawerExpanded={isDrawerExpanded}\n            hasDrawer={hasDrawer}\n          >\n            {hasDrawer && !isDrawerExpanded && activeStep.drawerToggleButton}\n            {activeStep.component}\n          </WizardBody>\n        </div>\n        {children}\n      </div>\n    </React.Fragment>\n  );\n};\nWizardToggle.displayName = 'WizardToggle';\n"]},"metadata":{},"sourceType":"module"}