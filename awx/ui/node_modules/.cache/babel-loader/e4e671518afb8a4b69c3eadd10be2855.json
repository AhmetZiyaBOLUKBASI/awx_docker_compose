{"ast":null,"code":"import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{i18n}from\"@lingui/core\";import React,{useState}from'react';import{useField}from'formik';import{Form,FormGroup,Select,SelectOption,SelectVariant}from'@patternfly/react-core';import{required,minMaxValue,maxLength,minLength,integer,combine}from'util/validators';import{Survey}from'types';import FormField from'../../FormField';import Popover from'../../Popover';import{jsx as _jsx}from\"react/jsx-runtime\";function SurveyStep(_ref){var surveyConfig=_ref.surveyConfig;var fieldTypes={text:TextField,textarea:TextField,password:TextField,multiplechoice:MultipleChoiceField,multiselect:MultiSelectField,integer:NumberField,float:NumberField};return/*#__PURE__*/_jsx(Form,{onSubmit:function onSubmit(e){e.preventDefault();},children:surveyConfig.spec.map(function(question){var Field=fieldTypes[question.type];return/*#__PURE__*/_jsx(Field,{question:question},question.variable);})});}function TextField(_ref2){var question=_ref2.question;var validators=[question.required?required(null):null,question.required&&question.min?minLength(question.min):null,question.required&&question.max?maxLength(question.max):null];return/*#__PURE__*/_jsx(FormField,{id:\"survey-question-\".concat(question.variable),name:\"survey_\".concat(question.variable),label:question.question_name,tooltip:question.question_description,isRequired:question.required,validate:combine(validators),type:question.type,minLength:question.min,maxLength:question.max});}function NumberField(_ref3){var question=_ref3.question;var validators=[question.required?required(null):null,minMaxValue(question.min,question.max),question.type==='integer'?integer():null];return/*#__PURE__*/_jsx(FormField,{id:\"survey-question-\".concat(question.variable),name:\"survey_\".concat(question.variable),label:question.question_name,tooltip:question.question_description,isRequired:question.required,validate:combine(validators),type:\"number\",min:question.min,max:question.max});}function MultipleChoiceField(_ref4){var question=_ref4.question;var _useField=useField({name:\"survey_\".concat(question.variable),validate:question.required?required(null):null}),_useField2=_slicedToArray(_useField,3),field=_useField2[0],meta=_useField2[1],helpers=_useField2[2];var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isOpen=_useState2[0],setIsOpen=_useState2[1];var id=\"survey-question-\".concat(question.variable);var isValid=!(meta.touched&&meta.error);var options=[];if(typeof question.choices==='string'){options=question.choices.split('\\n');}else if(Array.isArray(question.choices)){options=_toConsumableArray(question.choices);}return/*#__PURE__*/_jsx(FormGroup,{fieldId:id,helperTextInvalid:meta.error,isRequired:question.required,validated:isValid?'default':'error',label:question.question_name,labelIcon:/*#__PURE__*/_jsx(Popover,{content:question.question_description}),children:/*#__PURE__*/_jsx(Select,{onToggle:setIsOpen,onSelect:function onSelect(event,option){helpers.setValue(option);setIsOpen(false);},selections:field.value,variant:SelectVariant.typeahead,id:id,ouiaId:\"single-survey-question-\".concat(question.variable),isOpen:isOpen,placeholderText:/*i18n*/i18n._(\"Select an option\"),onClear:function onClear(){helpers.setTouched(true);helpers.setValue('');},noResultsFoundText:/*i18n*/i18n._(\"No results found\"),children:options.map(function(opt){return/*#__PURE__*/_jsx(SelectOption,{value:opt},opt);})})});}function MultiSelectField(_ref5){var _meta$value;var question=_ref5.question;var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isOpen=_useState4[0],setIsOpen=_useState4[1];var _useField3=useField({name:\"survey_\".concat(question.variable),validate:question.required?required(null):null}),_useField4=_slicedToArray(_useField3,3),field=_useField4[0],meta=_useField4[1],helpers=_useField4[2];var id=\"survey-question-\".concat(question.variable);var hasActualValue=!question.required||((_meta$value=meta.value)===null||_meta$value===void 0?void 0:_meta$value.length)>0;var isValid=!meta.touched||!meta.error&&hasActualValue;var options=[];if(typeof question.choices==='string'){options=question.choices.split('\\n');}else if(Array.isArray(question.choices)){options=_toConsumableArray(question.choices);}return/*#__PURE__*/_jsx(FormGroup,{fieldId:id,helperTextInvalid:meta.error||/*i18n*/i18n._(\"At least one value must be selected for this field.\"),isRequired:question.required,validated:isValid?'default':'error',label:question.question_name,labelIcon:/*#__PURE__*/_jsx(Popover,{content:question.question_description}),children:/*#__PURE__*/_jsx(Select,{ouiaId:\"multi-survey-question-\".concat(question.variable),variant:SelectVariant.typeaheadMulti,id:id,placeholderText:!field.value.length&&/*i18n*/i18n._(\"Select option(s)\"),onToggle:setIsOpen,onSelect:function onSelect(event,option){var _field$value;if(field!==null&&field!==void 0&&(_field$value=field.value)!==null&&_field$value!==void 0&&_field$value.includes(option)){helpers.setValue(field.value.filter(function(o){return o!==option;}));}else{helpers.setValue(field.value.concat(option));}helpers.setTouched(true);},isOpen:isOpen,selections:field.value,onClear:function onClear(){helpers.setTouched(true);helpers.setValue([]);},noResultsFoundText:/*i18n*/i18n._(\"No results found\"),children:options.map(function(opt){return/*#__PURE__*/_jsx(SelectOption,{value:opt},opt);})})});}export default SurveyStep;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/LaunchPrompt/steps/SurveyStep.js"],"names":["React","useState","useField","Form","FormGroup","Select","SelectOption","SelectVariant","required","minMaxValue","maxLength","minLength","integer","combine","Survey","FormField","Popover","SurveyStep","surveyConfig","fieldTypes","text","TextField","textarea","password","multiplechoice","MultipleChoiceField","multiselect","MultiSelectField","NumberField","float","e","preventDefault","spec","map","question","Field","type","variable","validators","min","max","question_name","question_description","name","validate","field","meta","helpers","isOpen","setIsOpen","id","isValid","touched","error","options","choices","split","Array","isArray","event","option","setValue","value","typeahead","setTouched","opt","hasActualValue","length","typeaheadMulti","includes","filter","o","concat"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { t } from '@lingui/macro';\nimport { useField } from 'formik';\nimport {\n  Form,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from '@patternfly/react-core';\nimport {\n  required,\n  minMaxValue,\n  maxLength,\n  minLength,\n  integer,\n  combine,\n} from 'util/validators';\nimport { Survey } from 'types';\nimport FormField from '../../FormField';\nimport Popover from '../../Popover';\n\nfunction SurveyStep({ surveyConfig }) {\n  const fieldTypes = {\n    text: TextField,\n    textarea: TextField,\n    password: TextField,\n    multiplechoice: MultipleChoiceField,\n    multiselect: MultiSelectField,\n    integer: NumberField,\n    float: NumberField,\n  };\n  return (\n    <Form\n      onSubmit={(e) => {\n        e.preventDefault();\n      }}\n    >\n      {surveyConfig.spec.map((question) => {\n        const Field = fieldTypes[question.type];\n        return <Field key={question.variable} question={question} />;\n      })}\n    </Form>\n  );\n}\nSurveyStep.propTypes = {\n  surveyConfig: Survey.isRequired,\n};\n\nfunction TextField({ question }) {\n  const validators = [\n    question.required ? required(null) : null,\n    question.required && question.min ? minLength(question.min) : null,\n    question.required && question.max ? maxLength(question.max) : null,\n  ];\n  return (\n    <FormField\n      id={`survey-question-${question.variable}`}\n      name={`survey_${question.variable}`}\n      label={question.question_name}\n      tooltip={question.question_description}\n      isRequired={question.required}\n      validate={combine(validators)}\n      type={question.type}\n      minLength={question.min}\n      maxLength={question.max}\n    />\n  );\n}\n\nfunction NumberField({ question }) {\n  const validators = [\n    question.required ? required(null) : null,\n    minMaxValue(question.min, question.max),\n    question.type === 'integer' ? integer() : null,\n  ];\n  return (\n    <FormField\n      id={`survey-question-${question.variable}`}\n      name={`survey_${question.variable}`}\n      label={question.question_name}\n      tooltip={question.question_description}\n      isRequired={question.required}\n      validate={combine(validators)}\n      type=\"number\"\n      min={question.min}\n      max={question.max}\n    />\n  );\n}\n\nfunction MultipleChoiceField({ question }) {\n  const [field, meta, helpers] = useField({\n    name: `survey_${question.variable}`,\n    validate: question.required ? required(null) : null,\n  });\n  const [isOpen, setIsOpen] = useState(false);\n  const id = `survey-question-${question.variable}`;\n  const isValid = !(meta.touched && meta.error);\n\n  let options = [];\n\n  if (typeof question.choices === 'string') {\n    options = question.choices.split('\\n');\n  } else if (Array.isArray(question.choices)) {\n    options = [...question.choices];\n  }\n\n  return (\n    <FormGroup\n      fieldId={id}\n      helperTextInvalid={meta.error}\n      isRequired={question.required}\n      validated={isValid ? 'default' : 'error'}\n      label={question.question_name}\n      labelIcon={<Popover content={question.question_description} />}\n    >\n      <Select\n        onToggle={setIsOpen}\n        onSelect={(event, option) => {\n          helpers.setValue(option);\n          setIsOpen(false);\n        }}\n        selections={field.value}\n        variant={SelectVariant.typeahead}\n        id={id}\n        ouiaId={`single-survey-question-${question.variable}`}\n        isOpen={isOpen}\n        placeholderText={t`Select an option`}\n        onClear={() => {\n          helpers.setTouched(true);\n          helpers.setValue('');\n        }}\n        noResultsFoundText={t`No results found`}\n      >\n        {options.map((opt) => (\n          <SelectOption key={opt} value={opt} />\n        ))}\n      </Select>\n    </FormGroup>\n  );\n}\n\nfunction MultiSelectField({ question }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [field, meta, helpers] = useField({\n    name: `survey_${question.variable}`,\n    validate: question.required ? required(null) : null,\n  });\n  const id = `survey-question-${question.variable}`;\n  const hasActualValue = !question.required || meta.value?.length > 0;\n  const isValid = !meta.touched || (!meta.error && hasActualValue);\n\n  let options = [];\n\n  if (typeof question.choices === 'string') {\n    options = question.choices.split('\\n');\n  } else if (Array.isArray(question.choices)) {\n    options = [...question.choices];\n  }\n\n  return (\n    <FormGroup\n      fieldId={id}\n      helperTextInvalid={\n        meta.error || t`At least one value must be selected for this field.`\n      }\n      isRequired={question.required}\n      validated={isValid ? 'default' : 'error'}\n      label={question.question_name}\n      labelIcon={<Popover content={question.question_description} />}\n    >\n      <Select\n        ouiaId={`multi-survey-question-${question.variable}`}\n        variant={SelectVariant.typeaheadMulti}\n        id={id}\n        placeholderText={!field.value.length && t`Select option(s)`}\n        onToggle={setIsOpen}\n        onSelect={(event, option) => {\n          if (field?.value?.includes(option)) {\n            helpers.setValue(field.value.filter((o) => o !== option));\n          } else {\n            helpers.setValue(field.value.concat(option));\n          }\n          helpers.setTouched(true);\n        }}\n        isOpen={isOpen}\n        selections={field.value}\n        onClear={() => {\n          helpers.setTouched(true);\n          helpers.setValue([]);\n        }}\n        noResultsFoundText={t`No results found`}\n      >\n        {options.map((opt) => (\n          <SelectOption key={opt} value={opt} />\n        ))}\n      </Select>\n    </FormGroup>\n  );\n}\n\nexport default SurveyStep;\n"]},"metadata":{},"sourceType":"module"}