{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FileUpload/file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextArea, TextAreResizeOrientation } from '../TextArea';\nimport { Spinner, spinnerSize } from '../Spinner';\nimport { fileReaderType } from '../../helpers/fileUtils';\nexport var FileUploadField = function FileUploadField(_a) {\n  var id = _a.id,\n      type = _a.type,\n      _a$value = _a.value,\n      value = _a$value === void 0 ? '' : _a$value,\n      _a$filename = _a.filename,\n      filename = _a$filename === void 0 ? '' : _a$filename,\n      _a$onChange = _a.onChange,\n      onChange = _a$onChange === void 0 ? function () {} : _a$onChange,\n      _a$onBrowseButtonClic = _a.onBrowseButtonClick,\n      onBrowseButtonClick = _a$onBrowseButtonClic === void 0 ? function () {} : _a$onBrowseButtonClic,\n      _a$onClearButtonClick = _a.onClearButtonClick,\n      onClearButtonClick = _a$onClearButtonClick === void 0 ? function () {} : _a$onClearButtonClick,\n      onTextAreaClick = _a.onTextAreaClick,\n      onTextChange = _a.onTextChange,\n      onTextAreaBlur = _a.onTextAreaBlur,\n      _a$textAreaPlaceholde = _a.textAreaPlaceholder,\n      textAreaPlaceholder = _a$textAreaPlaceholde === void 0 ? '' : _a$textAreaPlaceholde,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      _a$isReadOnly = _a.isReadOnly,\n      isReadOnly = _a$isReadOnly === void 0 ? false : _a$isReadOnly,\n      _a$isLoading = _a.isLoading,\n      isLoading = _a$isLoading === void 0 ? false : _a$isLoading,\n      spinnerAriaValueText = _a.spinnerAriaValueText,\n      _a$isRequired = _a.isRequired,\n      isRequired = _a$isRequired === void 0 ? false : _a$isRequired,\n      _a$isDragActive = _a.isDragActive,\n      isDragActive = _a$isDragActive === void 0 ? false : _a$isDragActive,\n      _a$validated = _a.validated,\n      validated = _a$validated === void 0 ? 'default' : _a$validated,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? 'File upload' : _a$ariaLabel,\n      _a$filenamePlaceholde = _a.filenamePlaceholder,\n      filenamePlaceholder = _a$filenamePlaceholde === void 0 ? 'Drag a file here or browse to upload' : _a$filenamePlaceholde,\n      _a$filenameAriaLabel = _a.filenameAriaLabel,\n      filenameAriaLabel = _a$filenameAriaLabel === void 0 ? filename ? 'Read only filename' : filenamePlaceholder : _a$filenameAriaLabel,\n      _a$browseButtonText = _a.browseButtonText,\n      browseButtonText = _a$browseButtonText === void 0 ? 'Browse...' : _a$browseButtonText,\n      _a$clearButtonText = _a.clearButtonText,\n      clearButtonText = _a$clearButtonText === void 0 ? 'Clear' : _a$clearButtonText,\n      _a$isClearButtonDisab = _a.isClearButtonDisabled,\n      isClearButtonDisabled = _a$isClearButtonDisab === void 0 ? !filename && !value : _a$isClearButtonDisab,\n      _a$containerRef = _a.containerRef,\n      containerRef = _a$containerRef === void 0 ? null : _a$containerRef,\n      _a$allowEditingUpload = _a.allowEditingUploadedText,\n      allowEditingUploadedText = _a$allowEditingUpload === void 0 ? false : _a$allowEditingUpload,\n      _a$hideDefaultPreview = _a.hideDefaultPreview,\n      hideDefaultPreview = _a$hideDefaultPreview === void 0 ? false : _a$hideDefaultPreview,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      props = __rest(_a, [\"id\", \"type\", \"value\", \"filename\", \"onChange\", \"onBrowseButtonClick\", \"onClearButtonClick\", \"onTextAreaClick\", \"onTextChange\", \"onTextAreaBlur\", \"textAreaPlaceholder\", \"className\", \"isDisabled\", \"isReadOnly\", \"isLoading\", \"spinnerAriaValueText\", \"isRequired\", \"isDragActive\", \"validated\", 'aria-label', \"filenamePlaceholder\", \"filenameAriaLabel\", \"browseButtonText\", \"clearButtonText\", \"isClearButtonDisabled\", \"containerRef\", \"allowEditingUploadedText\", \"hideDefaultPreview\", \"children\"]);\n\n  var onTextAreaChange = function onTextAreaChange(newValue, event) {\n    onChange(newValue, filename, event);\n    onTextChange === null || onTextChange === void 0 ? void 0 : onTextChange(newValue);\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.fileUpload, isDragActive && styles.modifiers.dragHover, isLoading && styles.modifiers.loading, className),\n    ref: containerRef\n  }, props), React.createElement(\"div\", {\n    className: styles.fileUploadFileSelect\n  }, React.createElement(InputGroup, null, React.createElement(TextInput, {\n    isReadOnly // Always read-only regardless of isReadOnly prop (which is just for the TextArea)\n    : true,\n    isDisabled: isDisabled,\n    id: \"\".concat(id, \"-filename\"),\n    name: \"\".concat(id, \"-filename\"),\n    \"aria-label\": filenameAriaLabel,\n    placeholder: filenamePlaceholder,\n    \"aria-describedby\": \"\".concat(id, \"-browse-button\"),\n    value: filename\n  }), React.createElement(Button, {\n    id: \"\".concat(id, \"-browse-button\"),\n    variant: ButtonVariant.control,\n    onClick: onBrowseButtonClick,\n    isDisabled: isDisabled\n  }, browseButtonText), React.createElement(Button, {\n    variant: ButtonVariant.control,\n    isDisabled: isDisabled || isClearButtonDisabled,\n    onClick: onClearButtonClick\n  }, clearButtonText))), React.createElement(\"div\", {\n    className: styles.fileUploadFileDetails\n  }, !hideDefaultPreview && type === fileReaderType.text && React.createElement(TextArea, {\n    readOnly: isReadOnly || !!filename && !allowEditingUploadedText,\n    disabled: isDisabled,\n    isRequired: isRequired,\n    resizeOrientation: TextAreResizeOrientation.vertical,\n    validated: validated,\n    id: id,\n    name: id,\n    \"aria-label\": ariaLabel,\n    value: value,\n    onChange: onTextAreaChange,\n    onClick: onTextAreaClick,\n    onBlur: onTextAreaBlur,\n    placeholder: textAreaPlaceholder\n  }), isLoading && React.createElement(\"div\", {\n    className: styles.fileUploadFileDetailsSpinner\n  }, React.createElement(Spinner, {\n    size: spinnerSize.lg,\n    \"aria-valuetext\": spinnerAriaValueText\n  }))), children);\n};\nFileUploadField.displayName = 'FileUploadField';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/FileUpload/FileUploadField.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FileUpload/file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextArea, TextAreResizeOrientation } from '../TextArea';\nimport { Spinner, spinnerSize } from '../Spinner';\nimport { fileReaderType } from '../../helpers/fileUtils';\n\nexport interface FileUploadFieldProps extends Omit<React.HTMLProps<HTMLDivElement>, 'value' | 'onChange'> {\n  /** Unique id for the TextArea, also used to generate ids for accessible labels */\n  id: string;\n  /** What type of file. Determines what is is expected by `value`\n   * (a string for 'text' and 'dataURL', or a File object otherwise). */\n  type?: 'text' | 'dataURL';\n  /** Value of the file's contents\n   * (string if text file, File object otherwise) */\n  value?: string | File;\n  /** Value to be shown in the read-only filename field. */\n  filename?: string;\n  /** A callback for when the TextArea value changes. */\n  onChange?: (\n    value: string,\n    filename: string,\n    event:\n      | React.ChangeEvent<HTMLTextAreaElement> // User typed in the TextArea\n      | React.MouseEvent<HTMLButtonElement, MouseEvent> // User clicked Clear button\n  ) => void;\n  /** Additional classes added to the FileUploadField container element. */\n  className?: string;\n  /** Flag to show if the field is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the field is read only. */\n  isReadOnly?: boolean;\n  /** Flag to show if a file is being loaded. */\n  isLoading?: boolean;\n  /** Aria-valuetext for the loading spinner */\n  spinnerAriaValueText?: string;\n  /** Flag to show if the field is required. */\n  isRequired?: boolean;\n  /** Value to indicate if the field is modified to show that validation state.\n   * If set to success, field will be modified to indicate valid state.\n   * If set to error,  field will be modified to indicate error state.\n   */\n  validated?: 'success' | 'error' | 'default';\n  /** Aria-label for the TextArea. */\n  'aria-label'?: string;\n  /** Placeholder string to display in the empty filename field */\n  filenamePlaceholder?: string;\n  /** Aria-label for the read-only filename field */\n  filenameAriaLabel?: string;\n  /** Text for the Browse button */\n  browseButtonText?: string;\n  /** Text for the Clear button */\n  clearButtonText?: string;\n  /** Flag to disable the Clear button */\n  isClearButtonDisabled?: boolean;\n  /** Flag to hide the built-in preview of the file (where available).\n   * If true, you can use children to render an alternate preview. */\n  hideDefaultPreview?: boolean;\n  /** Flag to allow editing of a text file's contents after it is selected from disk */\n  allowEditingUploadedText?: boolean;\n  /** Additional children to render after (or instead of) the file preview. */\n  children?: React.ReactNode;\n\n  // Props available in FileUploadField but not FileUpload:\n\n  /** A callback for when the Browse button is clicked. */\n  onBrowseButtonClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  /** A callback for when the Clear button is clicked. */\n  onClearButtonClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  /** A callback from when the text area is clicked. Can also be set via the onClick property of FileUpload. */\n  onTextAreaClick?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;\n  /** Flag to show if a file is being dragged over the field */\n  isDragActive?: boolean;\n  /** A reference object to attach to the FileUploadField container element. */\n  containerRef?: React.Ref<HTMLDivElement>;\n  /** Text area text changed */\n  onTextChange?: (text: string) => void;\n  /** Callback for when focus is lost on the text area field */\n  onTextAreaBlur?: (event?: any) => void;\n  /** Placeholder string to display in the empty text area field */\n  textAreaPlaceholder?: string;\n}\n\nexport const FileUploadField: React.FunctionComponent<FileUploadFieldProps> = ({\n  id,\n  type,\n  value = '',\n  filename = '',\n  onChange = () => {},\n  onBrowseButtonClick = () => {},\n  onClearButtonClick = () => {},\n  onTextAreaClick,\n  onTextChange,\n  onTextAreaBlur,\n  textAreaPlaceholder = '',\n  className = '',\n  isDisabled = false,\n  isReadOnly = false,\n  isLoading = false,\n  spinnerAriaValueText,\n  isRequired = false,\n  isDragActive = false,\n  validated = 'default' as 'success' | 'error' | 'default',\n  'aria-label': ariaLabel = 'File upload',\n  filenamePlaceholder = 'Drag a file here or browse to upload',\n  filenameAriaLabel = filename ? 'Read only filename' : filenamePlaceholder,\n  browseButtonText = 'Browse...',\n  clearButtonText = 'Clear',\n  isClearButtonDisabled = !filename && !value,\n  containerRef = null as React.Ref<HTMLDivElement>,\n  allowEditingUploadedText = false,\n  hideDefaultPreview = false,\n  children = null,\n\n  ...props\n}: FileUploadFieldProps) => {\n  const onTextAreaChange = (newValue: string, event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    onChange(newValue, filename, event);\n    onTextChange?.(newValue);\n  };\n  return (\n    <div\n      className={css(\n        styles.fileUpload,\n        isDragActive && styles.modifiers.dragHover,\n        isLoading && styles.modifiers.loading,\n        className\n      )}\n      ref={containerRef}\n      {...props}\n    >\n      <div className={styles.fileUploadFileSelect}>\n        <InputGroup>\n          <TextInput\n            isReadOnly // Always read-only regardless of isReadOnly prop (which is just for the TextArea)\n            isDisabled={isDisabled}\n            id={`${id}-filename`}\n            name={`${id}-filename`}\n            aria-label={filenameAriaLabel}\n            placeholder={filenamePlaceholder}\n            aria-describedby={`${id}-browse-button`}\n            value={filename}\n          />\n          <Button\n            id={`${id}-browse-button`}\n            variant={ButtonVariant.control}\n            onClick={onBrowseButtonClick}\n            isDisabled={isDisabled}\n          >\n            {browseButtonText}\n          </Button>\n          <Button\n            variant={ButtonVariant.control}\n            isDisabled={isDisabled || isClearButtonDisabled}\n            onClick={onClearButtonClick}\n          >\n            {clearButtonText}\n          </Button>\n        </InputGroup>\n      </div>\n      <div className={styles.fileUploadFileDetails}>\n        {!hideDefaultPreview && type === fileReaderType.text && (\n          <TextArea\n            readOnly={isReadOnly || (!!filename && !allowEditingUploadedText)}\n            disabled={isDisabled}\n            isRequired={isRequired}\n            resizeOrientation={TextAreResizeOrientation.vertical}\n            validated={validated}\n            id={id}\n            name={id}\n            aria-label={ariaLabel}\n            value={value as string}\n            onChange={onTextAreaChange}\n            onClick={onTextAreaClick}\n            onBlur={onTextAreaBlur}\n            placeholder={textAreaPlaceholder}\n          />\n        )}\n        {isLoading && (\n          <div className={styles.fileUploadFileDetailsSpinner}>\n            <Spinner size={spinnerSize.lg} aria-valuetext={spinnerAriaValueText} />\n          </div>\n        )}\n      </div>\n      {children}\n    </div>\n  );\n};\nFileUploadField.displayName = 'FileUploadField';\n"]},"metadata":{},"sourceType":"module"}