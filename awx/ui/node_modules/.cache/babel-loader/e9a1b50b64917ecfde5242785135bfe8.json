{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{i18n}from\"@lingui/core\";import React,{useCallback,useEffect}from'react';import{useHistory}from'react-router-dom';import{Formik}from'formik';import{Form}from'@patternfly/react-core';import{CardBody}from'components/Card';import ContentError from'components/ContentError';import ContentLoading from'components/ContentLoading';import{FormSubmitError}from'components/FormField';import{FormColumnLayout,FormFullWidthLayout}from'components/FormLayout';import{useSettings}from'contexts/Settings';import useModal from'hooks/useModal';import useRequest from'hooks/useRequest';import{SettingsAPI}from'api';import{formatJson}from'../../shared/settingUtils';import{BooleanField,ChoiceField,EncryptedField,InputField,ObjectField,RevertAllAlert,RevertFormActionGroup}from'../../shared';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function LoggingEdit(){var history=useHistory();var _useModal=useModal(),isModalOpen=_useModal.isModalOpen,toggleModal=_useModal.toggleModal,closeModal=_useModal.closeModal;var _useSettings=useSettings(),options=_useSettings.PUT;var _useRequest=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$SettingsAPI$re,data,mergedData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return SettingsAPI.readCategory('logging');case 2:_yield$SettingsAPI$re=_context.sent;data=_yield$SettingsAPI$re.data;mergedData={};Object.keys(data).forEach(function(key){if(!options[key]){return;}mergedData[key]=options[key];mergedData[key].value=data[key];});return _context.abrupt(\"return\",mergedData);case 7:case\"end\":return _context.stop();}}},_callee);})),[options]),null),isLoading=_useRequest.isLoading,error=_useRequest.error,fetchLogging=_useRequest.request,logging=_useRequest.result;useEffect(function(){fetchLogging();},[fetchLogging]);var _useRequest2=useRequest(useCallback(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return SettingsAPI.updateAll(values);case 2:history.push('/settings/logging/details');case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x){return _ref2.apply(this,arguments);};}(),[history]),null),submitError=_useRequest2.error,submitForm=_useRequest2.request;var handleSubmit=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(form){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return submitForm(_objectSpread(_objectSpread({},form),{},{LOG_AGGREGATOR_LOGGERS:formatJson(form.LOG_AGGREGATOR_LOGGERS),LOG_AGGREGATOR_HOST:form.LOG_AGGREGATOR_HOST||null,LOG_AGGREGATOR_TYPE:form.LOG_AGGREGATOR_TYPE||null,API_400_ERROR_LOG_FORMAT:form.API_400_ERROR_LOG_FORMAT||null}));case 2:case\"end\":return _context3.stop();}}},_callee3);}));return function handleSubmit(_x2){return _ref3.apply(this,arguments);};}();var _useRequest3=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return SettingsAPI.revertCategory('logging');case 2:case\"end\":return _context4.stop();}}},_callee4);})),[]),null),revertError=_useRequest3.error,revertAll=_useRequest3.request;var handleRevertAll=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return revertAll();case 2:closeModal();history.push('/settings/logging/details');case 4:case\"end\":return _context5.stop();}}},_callee5);}));return function handleRevertAll(){return _ref5.apply(this,arguments);};}();var handleCancel=function handleCancel(){history.push('/settings/logging/details');};var initialValues=function initialValues(fields){return Object.keys(fields).reduce(function(acc,key){if(fields[key].type==='list'){acc[key]=JSON.stringify(fields[key].value,null,2);}else{var _fields$key$value;acc[key]=(_fields$key$value=fields[key].value)!==null&&_fields$key$value!==void 0?_fields$key$value:'';}return acc;},{});};return/*#__PURE__*/_jsxs(CardBody,{children:[isLoading&&/*#__PURE__*/_jsx(ContentLoading,{}),!isLoading&&error&&/*#__PURE__*/_jsx(ContentError,{error:error}),!isLoading&&logging&&/*#__PURE__*/_jsx(Formik,{initialValues:initialValues(logging),onSubmit:handleSubmit,children:function children(formik){return/*#__PURE__*/_jsxs(Form,{autoComplete:\"off\",onSubmit:formik.handleSubmit,children:[/*#__PURE__*/_jsxs(FormColumnLayout,{children:[/*#__PURE__*/_jsx(BooleanField,{name:\"LOG_AGGREGATOR_ENABLED\",config:_objectSpread(_objectSpread({},logging.LOG_AGGREGATOR_ENABLED),{},{help_text:/*#__PURE__*/_jsxs(_Fragment,{children:[logging.LOG_AGGREGATOR_ENABLED.help_text,!formik.values.LOG_AGGREGATOR_ENABLED&&(!formik.values.LOG_AGGREGATOR_HOST||!formik.values.LOG_AGGREGATOR_TYPE)&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*i18n*/i18n._(\"Cannot enable log aggregator without providing\\nlogging aggregator host and logging aggregator type.\")]})]})}),ariaLabel:/*i18n*/i18n._(\"Enable external logging\"),disabled:!formik.values.LOG_AGGREGATOR_ENABLED&&(!formik.values.LOG_AGGREGATOR_HOST||!formik.values.LOG_AGGREGATOR_TYPE)}),/*#__PURE__*/_jsx(InputField,{name:\"LOG_AGGREGATOR_HOST\",config:logging.LOG_AGGREGATOR_HOST,isRequired:Boolean(formik.values.LOG_AGGREGATOR_ENABLED)}),/*#__PURE__*/_jsx(InputField,{name:\"LOG_AGGREGATOR_PORT\",config:logging.LOG_AGGREGATOR_PORT,type:\"number\"}),/*#__PURE__*/_jsx(ChoiceField,{name:\"LOG_AGGREGATOR_TYPE\",config:logging.LOG_AGGREGATOR_TYPE,isRequired:Boolean(formik.values.LOG_AGGREGATOR_ENABLED)}),/*#__PURE__*/_jsx(InputField,{name:\"LOG_AGGREGATOR_USERNAME\",config:logging.LOG_AGGREGATOR_USERNAME}),/*#__PURE__*/_jsx(EncryptedField,{name:\"LOG_AGGREGATOR_PASSWORD\",config:logging.LOG_AGGREGATOR_PASSWORD}),/*#__PURE__*/_jsx(BooleanField,{name:\"LOG_AGGREGATOR_INDIVIDUAL_FACTS\",ariaLabel:/*i18n*/i18n._(\"Enable log system tracking facts individually\"),config:logging.LOG_AGGREGATOR_INDIVIDUAL_FACTS}),/*#__PURE__*/_jsx(ChoiceField,{name:\"LOG_AGGREGATOR_PROTOCOL\",config:logging.LOG_AGGREGATOR_PROTOCOL}),/*#__PURE__*/_jsx(ChoiceField,{name:\"LOG_AGGREGATOR_LEVEL\",config:logging.LOG_AGGREGATOR_LEVEL}),['tcp','https'].includes(formik.values.LOG_AGGREGATOR_PROTOCOL)&&/*#__PURE__*/_jsx(InputField,{name:\"LOG_AGGREGATOR_TCP_TIMEOUT\",config:logging.LOG_AGGREGATOR_TCP_TIMEOUT,type:\"number\",isRequired:true}),formik.values.LOG_AGGREGATOR_PROTOCOL==='https'&&/*#__PURE__*/_jsx(BooleanField,{name:\"LOG_AGGREGATOR_VERIFY_CERT\",ariaLabel:/*i18n*/i18n._(\"Enable HTTPS certificate verification\"),config:logging.LOG_AGGREGATOR_VERIFY_CERT}),/*#__PURE__*/_jsx(ObjectField,{name:\"LOG_AGGREGATOR_LOGGERS\",config:logging.LOG_AGGREGATOR_LOGGERS}),/*#__PURE__*/_jsx(FormFullWidthLayout,{children:/*#__PURE__*/_jsx(InputField,{name:\"API_400_ERROR_LOG_FORMAT\",config:logging.API_400_ERROR_LOG_FORMAT})}),submitError&&/*#__PURE__*/_jsx(FormSubmitError,{error:submitError}),revertError&&/*#__PURE__*/_jsx(FormSubmitError,{error:revertError}),/*#__PURE__*/_jsx(RevertFormActionGroup,{onCancel:handleCancel,onSubmit:formik.handleSubmit,onRevert:toggleModal})]}),isModalOpen&&/*#__PURE__*/_jsx(RevertAllAlert,{onClose:closeModal,onRevertAll:handleRevertAll})]});}})]});}export default LoggingEdit;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Setting/Logging/LoggingEdit/LoggingEdit.js"],"names":["React","useCallback","useEffect","useHistory","Formik","Form","CardBody","ContentError","ContentLoading","FormSubmitError","FormColumnLayout","FormFullWidthLayout","useSettings","useModal","useRequest","SettingsAPI","formatJson","BooleanField","ChoiceField","EncryptedField","InputField","ObjectField","RevertAllAlert","RevertFormActionGroup","LoggingEdit","history","isModalOpen","toggleModal","closeModal","options","PUT","readCategory","data","mergedData","Object","keys","forEach","key","value","isLoading","error","fetchLogging","request","logging","result","values","updateAll","push","submitError","submitForm","handleSubmit","form","LOG_AGGREGATOR_LOGGERS","LOG_AGGREGATOR_HOST","LOG_AGGREGATOR_TYPE","API_400_ERROR_LOG_FORMAT","revertCategory","revertError","revertAll","handleRevertAll","handleCancel","initialValues","fields","reduce","acc","type","JSON","stringify","formik","LOG_AGGREGATOR_ENABLED","help_text","Boolean","LOG_AGGREGATOR_PORT","LOG_AGGREGATOR_USERNAME","LOG_AGGREGATOR_PASSWORD","LOG_AGGREGATOR_INDIVIDUAL_FACTS","LOG_AGGREGATOR_PROTOCOL","LOG_AGGREGATOR_LEVEL","includes","LOG_AGGREGATOR_TCP_TIMEOUT","LOG_AGGREGATOR_VERIFY_CERT"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { t } from '@lingui/macro';\nimport { Formik } from 'formik';\nimport { Form } from '@patternfly/react-core';\nimport { CardBody } from 'components/Card';\nimport ContentError from 'components/ContentError';\nimport ContentLoading from 'components/ContentLoading';\nimport { FormSubmitError } from 'components/FormField';\nimport { FormColumnLayout, FormFullWidthLayout } from 'components/FormLayout';\nimport { useSettings } from 'contexts/Settings';\nimport useModal from 'hooks/useModal';\nimport useRequest from 'hooks/useRequest';\nimport { SettingsAPI } from 'api';\nimport { formatJson } from '../../shared/settingUtils';\nimport {\n  BooleanField,\n  ChoiceField,\n  EncryptedField,\n  InputField,\n  ObjectField,\n  RevertAllAlert,\n  RevertFormActionGroup,\n} from '../../shared';\n\nfunction LoggingEdit() {\n  const history = useHistory();\n  const { isModalOpen, toggleModal, closeModal } = useModal();\n  const { PUT: options } = useSettings();\n\n  const {\n    isLoading,\n    error,\n    request: fetchLogging,\n    result: logging,\n  } = useRequest(\n    useCallback(async () => {\n      const { data } = await SettingsAPI.readCategory('logging');\n      const mergedData = {};\n      Object.keys(data).forEach((key) => {\n        if (!options[key]) {\n          return;\n        }\n        mergedData[key] = options[key];\n        mergedData[key].value = data[key];\n      });\n      return mergedData;\n    }, [options]),\n    null\n  );\n\n  useEffect(() => {\n    fetchLogging();\n  }, [fetchLogging]);\n\n  const { error: submitError, request: submitForm } = useRequest(\n    useCallback(\n      async (values) => {\n        await SettingsAPI.updateAll(values);\n        history.push('/settings/logging/details');\n      },\n      [history]\n    ),\n    null\n  );\n\n  const handleSubmit = async (form) => {\n    await submitForm({\n      ...form,\n      LOG_AGGREGATOR_LOGGERS: formatJson(form.LOG_AGGREGATOR_LOGGERS),\n      LOG_AGGREGATOR_HOST: form.LOG_AGGREGATOR_HOST || null,\n      LOG_AGGREGATOR_TYPE: form.LOG_AGGREGATOR_TYPE || null,\n      API_400_ERROR_LOG_FORMAT: form.API_400_ERROR_LOG_FORMAT || null,\n    });\n  };\n\n  const { error: revertError, request: revertAll } = useRequest(\n    useCallback(async () => {\n      await SettingsAPI.revertCategory('logging');\n    }, []),\n    null\n  );\n\n  const handleRevertAll = async () => {\n    await revertAll();\n\n    closeModal();\n\n    history.push('/settings/logging/details');\n  };\n\n  const handleCancel = () => {\n    history.push('/settings/logging/details');\n  };\n\n  const initialValues = (fields) =>\n    Object.keys(fields).reduce((acc, key) => {\n      if (fields[key].type === 'list') {\n        acc[key] = JSON.stringify(fields[key].value, null, 2);\n      } else {\n        acc[key] = fields[key].value ?? '';\n      }\n      return acc;\n    }, {});\n\n  return (\n    <CardBody>\n      {isLoading && <ContentLoading />}\n      {!isLoading && error && <ContentError error={error} />}\n      {!isLoading && logging && (\n        <Formik initialValues={initialValues(logging)} onSubmit={handleSubmit}>\n          {(formik) => (\n            <Form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\n              <FormColumnLayout>\n                <BooleanField\n                  name=\"LOG_AGGREGATOR_ENABLED\"\n                  config={{\n                    ...logging.LOG_AGGREGATOR_ENABLED,\n                    help_text: (\n                      <>\n                        {logging.LOG_AGGREGATOR_ENABLED.help_text}\n                        {!formik.values.LOG_AGGREGATOR_ENABLED &&\n                          (!formik.values.LOG_AGGREGATOR_HOST ||\n                            !formik.values.LOG_AGGREGATOR_TYPE) && (\n                            <>\n                              <br />\n                              <br />\n                              {t`Cannot enable log aggregator without providing\n                                  logging aggregator host and logging aggregator type.`}\n                            </>\n                          )}\n                      </>\n                    ),\n                  }}\n                  ariaLabel={t`Enable external logging`}\n                  disabled={\n                    !formik.values.LOG_AGGREGATOR_ENABLED &&\n                    (!formik.values.LOG_AGGREGATOR_HOST ||\n                      !formik.values.LOG_AGGREGATOR_TYPE)\n                  }\n                />\n                <InputField\n                  name=\"LOG_AGGREGATOR_HOST\"\n                  config={logging.LOG_AGGREGATOR_HOST}\n                  isRequired={Boolean(formik.values.LOG_AGGREGATOR_ENABLED)}\n                />\n                <InputField\n                  name=\"LOG_AGGREGATOR_PORT\"\n                  config={logging.LOG_AGGREGATOR_PORT}\n                  type=\"number\"\n                />\n                <ChoiceField\n                  name=\"LOG_AGGREGATOR_TYPE\"\n                  config={logging.LOG_AGGREGATOR_TYPE}\n                  isRequired={Boolean(formik.values.LOG_AGGREGATOR_ENABLED)}\n                />\n                <InputField\n                  name=\"LOG_AGGREGATOR_USERNAME\"\n                  config={logging.LOG_AGGREGATOR_USERNAME}\n                />\n                <EncryptedField\n                  name=\"LOG_AGGREGATOR_PASSWORD\"\n                  config={logging.LOG_AGGREGATOR_PASSWORD}\n                />\n                <BooleanField\n                  name=\"LOG_AGGREGATOR_INDIVIDUAL_FACTS\"\n                  ariaLabel={t`Enable log system tracking facts individually`}\n                  config={logging.LOG_AGGREGATOR_INDIVIDUAL_FACTS}\n                />\n                <ChoiceField\n                  name=\"LOG_AGGREGATOR_PROTOCOL\"\n                  config={logging.LOG_AGGREGATOR_PROTOCOL}\n                />\n                <ChoiceField\n                  name=\"LOG_AGGREGATOR_LEVEL\"\n                  config={logging.LOG_AGGREGATOR_LEVEL}\n                />\n                {['tcp', 'https'].includes(\n                  formik.values.LOG_AGGREGATOR_PROTOCOL\n                ) && (\n                  <InputField\n                    name=\"LOG_AGGREGATOR_TCP_TIMEOUT\"\n                    config={logging.LOG_AGGREGATOR_TCP_TIMEOUT}\n                    type=\"number\"\n                    isRequired\n                  />\n                )}\n                {formik.values.LOG_AGGREGATOR_PROTOCOL === 'https' && (\n                  <BooleanField\n                    name=\"LOG_AGGREGATOR_VERIFY_CERT\"\n                    ariaLabel={t`Enable HTTPS certificate verification`}\n                    config={logging.LOG_AGGREGATOR_VERIFY_CERT}\n                  />\n                )}\n                <ObjectField\n                  name=\"LOG_AGGREGATOR_LOGGERS\"\n                  config={logging.LOG_AGGREGATOR_LOGGERS}\n                />\n                <FormFullWidthLayout>\n                  <InputField\n                    name=\"API_400_ERROR_LOG_FORMAT\"\n                    config={logging.API_400_ERROR_LOG_FORMAT}\n                  />\n                </FormFullWidthLayout>\n                {submitError && <FormSubmitError error={submitError} />}\n                {revertError && <FormSubmitError error={revertError} />}\n                <RevertFormActionGroup\n                  onCancel={handleCancel}\n                  onSubmit={formik.handleSubmit}\n                  onRevert={toggleModal}\n                />\n              </FormColumnLayout>\n              {isModalOpen && (\n                <RevertAllAlert\n                  onClose={closeModal}\n                  onRevertAll={handleRevertAll}\n                />\n              )}\n            </Form>\n          )}\n        </Formik>\n      )}\n    </CardBody>\n  );\n}\n\nexport default LoggingEdit;\n"]},"metadata":{},"sourceType":"module"}