{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nexport var DropdownToggleCheckbox = /*#__PURE__*/function (_React$Component) {\n  _inherits(DropdownToggleCheckbox, _React$Component);\n\n  var _super = _createSuper(DropdownToggleCheckbox);\n\n  function DropdownToggleCheckbox(props) {\n    var _this;\n\n    _classCallCheck(this, DropdownToggleCheckbox);\n\n    _this = _super.call(this, props);\n\n    _this.handleChange = function (event) {\n      _this.props.onChange(event.target.checked, event);\n    };\n\n    _this.calculateChecked = function () {\n      var _this$props = _this.props,\n          isChecked = _this$props.isChecked,\n          checked = _this$props.checked;\n\n      if (isChecked === null) {\n        // return false here and the indeterminate state will be set to true through the ref\n        return false;\n      } else if (isChecked !== undefined) {\n        return isChecked;\n      }\n\n      return checked;\n    };\n\n    _this.state = {\n      ouiaStateId: getDefaultOUIAId(DropdownToggleCheckbox.displayName)\n    };\n    return _this;\n  }\n\n  _createClass(DropdownToggleCheckbox, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          isValid = _a.isValid,\n          isDisabled = _a.isDisabled,\n          isChecked = _a.isChecked,\n          children = _a.children,\n          ouiaId = _a.ouiaId,\n          ouiaSafe = _a.ouiaSafe,\n          onChange = _a.onChange,\n          checked = _a.checked,\n          props = __rest(_a, [\"className\", \"isValid\", \"isDisabled\", \"isChecked\", \"children\", \"ouiaId\", \"ouiaSafe\", \"onChange\", \"checked\"]);\n\n      var text = children && React.createElement(\"span\", {\n        className: css(styles.dropdownToggleText, className),\n        \"aria-hidden\": \"true\",\n        id: \"\".concat(props.id, \"-text\")\n      }, children);\n      return React.createElement(\"label\", {\n        className: css(styles.dropdownToggleCheck, className),\n        htmlFor: props.id\n      }, React.createElement(\"input\", Object.assign({}, props, this.calculateChecked() !== undefined && {\n        onChange: this.handleChange\n      }, {\n        type: \"checkbox\",\n        ref: function ref(elem) {\n          return elem && (elem.indeterminate = isChecked === null);\n        },\n        \"aria-invalid\": !isValid,\n        disabled: isDisabled,\n        checked: this.calculateChecked()\n      }, getOUIAProps(DropdownToggleCheckbox.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe))), text);\n    }\n  }]);\n\n  return DropdownToggleCheckbox;\n}(React.Component);\nDropdownToggleCheckbox.displayName = 'DropdownToggleCheckbox';\nDropdownToggleCheckbox.defaultProps = {\n  className: '',\n  isValid: true,\n  isDisabled: false,\n  onChange: function onChange() {\n    return undefined;\n  }\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Dropdown/DropdownToggleCheckbox.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { getOUIAProps, OUIAProps, getDefaultOUIAId } from '../../helpers';\n\nexport interface DropdownToggleCheckboxProps\n  extends Omit<React.HTMLProps<HTMLInputElement>, 'type' | 'onChange' | 'disabled' | 'checked'>,\n    OUIAProps {\n  /** Additional classes added to the DropdownToggleCheckbox */\n  className?: string;\n  /** Flag to show if the checkbox selection is valid or invalid */\n  isValid?: boolean;\n  /** Flag to show if the checkbox is disabled */\n  isDisabled?: boolean;\n  /** Flag to show if the checkbox is checked */\n  isChecked?: boolean | null;\n  /** Alternate Flag to show if the checkbox is checked */\n  checked?: boolean | null;\n  /** A callback for when the checkbox selection changes */\n  onChange?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Element to be rendered inside the <span> */\n  children?: React.ReactNode;\n  /** Id of the checkbox */\n  id: string;\n  /** Aria-label of the checkbox */\n  'aria-label': string;\n}\n\nexport class DropdownToggleCheckbox extends React.Component<DropdownToggleCheckboxProps, { ouiaStateId: string }> {\n  static displayName = 'DropdownToggleCheckbox';\n  static defaultProps: PickOptional<DropdownToggleCheckboxProps> = {\n    className: '',\n    isValid: true,\n    isDisabled: false,\n    onChange: () => undefined as any\n  };\n\n  constructor(props: DropdownToggleCheckboxProps) {\n    super(props);\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(DropdownToggleCheckbox.displayName)\n    };\n  }\n\n  handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.onChange((event.target as HTMLInputElement).checked, event);\n  };\n\n  calculateChecked = () => {\n    const { isChecked, checked } = this.props;\n    if (isChecked === null) {\n      // return false here and the indeterminate state will be set to true through the ref\n      return false;\n    } else if (isChecked !== undefined) {\n      return isChecked;\n    }\n    return checked;\n  };\n\n  render() {\n    const {\n      className,\n      isValid,\n      isDisabled,\n      isChecked,\n      children,\n      ouiaId,\n      ouiaSafe,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onChange,\n      checked,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    const text = children && (\n      <span className={css(styles.dropdownToggleText, className)} aria-hidden=\"true\" id={`${props.id}-text`}>\n        {children}\n      </span>\n    );\n    return (\n      <label className={css(styles.dropdownToggleCheck, className)} htmlFor={props.id}>\n        <input\n          {...props}\n          {...(this.calculateChecked() !== undefined && { onChange: this.handleChange })}\n          type=\"checkbox\"\n          ref={elem => elem && (elem.indeterminate = isChecked === null)}\n          aria-invalid={!isValid}\n          disabled={isDisabled}\n          checked={this.calculateChecked()}\n          {...getOUIAProps(\n            DropdownToggleCheckbox.displayName,\n            ouiaId !== undefined ? ouiaId : this.state.ouiaStateId,\n            ouiaSafe\n          )}\n        />\n        {text}\n      </label>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}