{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { trimLeft } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps } from '../../helpers';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport var TextInputTypes;\n\n(function (TextInputTypes) {\n  TextInputTypes[\"text\"] = \"text\";\n  TextInputTypes[\"date\"] = \"date\";\n  TextInputTypes[\"datetimeLocal\"] = \"datetime-local\";\n  TextInputTypes[\"email\"] = \"email\";\n  TextInputTypes[\"month\"] = \"month\";\n  TextInputTypes[\"number\"] = \"number\";\n  TextInputTypes[\"password\"] = \"password\";\n  TextInputTypes[\"search\"] = \"search\";\n  TextInputTypes[\"tel\"] = \"tel\";\n  TextInputTypes[\"time\"] = \"time\";\n  TextInputTypes[\"url\"] = \"url\";\n})(TextInputTypes || (TextInputTypes = {}));\n\nexport var TextInputBase = /*#__PURE__*/function (_React$Component) {\n  _inherits(TextInputBase, _React$Component);\n\n  var _super = _createSuper(TextInputBase);\n\n  function TextInputBase(props) {\n    var _this;\n\n    _classCallCheck(this, TextInputBase);\n\n    _this = _super.call(this, props);\n    _this.inputRef = React.createRef();\n\n    _this.observer = function () {};\n\n    _this.handleChange = function (event) {\n      if (_this.props.onChange) {\n        _this.props.onChange(event.currentTarget.value, event);\n      }\n    };\n\n    _this.handleResize = function () {\n      var inputRef = _this.props.innerRef || _this.inputRef;\n\n      if (inputRef && inputRef.current) {\n        trimLeft(inputRef.current, String(_this.props.value));\n      }\n    };\n\n    _this.restoreText = function () {\n      var inputRef = _this.props.innerRef || _this.inputRef; // restore the value\n\n      inputRef.current.value = String(_this.props.value); // make sure we still see the rightmost value to preserve cursor click position\n\n      inputRef.current.scrollLeft = inputRef.current.scrollWidth;\n    };\n\n    _this.onFocus = function (event) {\n      var _this$props = _this.props,\n          isLeftTruncated = _this$props.isLeftTruncated,\n          onFocus = _this$props.onFocus;\n\n      if (isLeftTruncated) {\n        _this.restoreText();\n      }\n\n      onFocus && onFocus(event);\n    };\n\n    _this.onBlur = function (event) {\n      var _this$props2 = _this.props,\n          isLeftTruncated = _this$props2.isLeftTruncated,\n          onBlur = _this$props2.onBlur;\n\n      if (isLeftTruncated) {\n        _this.handleResize();\n      }\n\n      onBlur && onBlur(event);\n    };\n\n    _this.sanitizeInputValue = function (value) {\n      return typeof value === 'string' ? value.replace(/\\n/g, ' ') : value;\n    };\n\n    if (!props.id && !props['aria-label'] && !props['aria-labelledby']) {\n      // eslint-disable-next-line no-console\n      console.error('Text input:', 'Text input requires either an id or aria-label to be specified');\n    }\n\n    _this.state = {\n      ouiaStateId: getDefaultOUIAId(TextInputBase.displayName)\n    };\n    return _this;\n  }\n\n  _createClass(TextInputBase, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.isLeftTruncated) {\n        var inputRef = this.props.innerRef || this.inputRef;\n        this.observer = getResizeObserver(inputRef.current, this.handleResize);\n        this.handleResize();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.isLeftTruncated) {\n        this.observer();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          innerRef = _a.innerRef,\n          className = _a.className,\n          type = _a.type,\n          value = _a.value,\n          validated = _a.validated,\n          onChange = _a.onChange,\n          onFocus = _a.onFocus,\n          onBlur = _a.onBlur,\n          isLeftTruncated = _a.isLeftTruncated,\n          isReadOnly = _a.isReadOnly,\n          isRequired = _a.isRequired,\n          isDisabled = _a.isDisabled,\n          isIconSprite = _a.isIconSprite,\n          iconVariant = _a.iconVariant,\n          customIconUrl = _a.customIconUrl,\n          customIconDimensions = _a.customIconDimensions,\n          ouiaId = _a.ouiaId,\n          ouiaSafe = _a.ouiaSafe,\n          props = __rest(_a, [\"innerRef\", \"className\", \"type\", \"value\", \"validated\", \"onChange\", \"onFocus\", \"onBlur\", \"isLeftTruncated\", \"isReadOnly\", \"isRequired\", \"isDisabled\", \"isIconSprite\", \"iconVariant\", \"customIconUrl\", \"customIconDimensions\", \"ouiaId\", \"ouiaSafe\"]);\n\n      var customIconStyle = {};\n\n      if (customIconUrl) {\n        customIconStyle.backgroundImage = \"url('\".concat(customIconUrl, \"')\");\n      }\n\n      if (customIconDimensions) {\n        customIconStyle.backgroundSize = customIconDimensions;\n      }\n\n      return React.createElement(\"input\", Object.assign({}, props, {\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        className: css(styles.formControl, isIconSprite && styles.modifiers.iconSprite, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, (iconVariant && iconVariant !== 'search' || customIconUrl) && styles.modifiers.icon, iconVariant && styles.modifiers[iconVariant], className),\n        onChange: this.handleChange,\n        type: type,\n        value: this.sanitizeInputValue(value),\n        \"aria-invalid\": props['aria-invalid'] ? props['aria-invalid'] : validated === ValidatedOptions.error,\n        required: isRequired,\n        disabled: isDisabled,\n        readOnly: isReadOnly,\n        ref: innerRef || this.inputRef\n      }, (customIconUrl || customIconDimensions) && {\n        style: customIconStyle\n      }, getOUIAProps(TextInput.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)));\n    }\n  }]);\n\n  return TextInputBase;\n}(React.Component);\nTextInputBase.displayName = 'TextInputBase';\nTextInputBase.defaultProps = {\n  'aria-label': null,\n  className: '',\n  isRequired: false,\n  validated: 'default',\n  isDisabled: false,\n  isReadOnly: false,\n  isIconSprite: false,\n  type: TextInputTypes.text,\n  isLeftTruncated: false,\n  onChange: function onChange() {\n    return undefined;\n  },\n  ouiaSafe: true\n};\nexport var TextInput = React.forwardRef(function (props, ref) {\n  return React.createElement(TextInputBase, Object.assign({}, props, {\n    innerRef: ref\n  }));\n});\nTextInput.displayName = 'TextInput';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/TextInput/TextInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { trimLeft } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps, OUIAProps } from '../../helpers';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\n\nexport enum TextInputTypes {\n  text = 'text',\n  date = 'date',\n  datetimeLocal = 'datetime-local',\n  email = 'email',\n  month = 'month',\n  number = 'number',\n  password = 'password',\n  search = 'search',\n  tel = 'tel',\n  time = 'time',\n  url = 'url'\n}\n\nexport interface TextInputProps\n  extends Omit<React.HTMLProps<HTMLInputElement>, 'onChange' | 'onFocus' | 'onBlur' | 'disabled' | 'ref'>,\n    OUIAProps {\n  /** Additional classes added to the TextInput. */\n  className?: string;\n  /** Flag to show if the input is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the input is read only. */\n  isReadOnly?: boolean;\n  /** Flag to show if the input is required. */\n  isRequired?: boolean;\n  /** Value to indicate if the input is modified to show that validation state.\n   * If set to success, input will be modified to indicate valid state.\n   * If set to error,  input will be modified to indicate error state.\n   */\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  /** A callback for when the input value changes. */\n  onChange?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Type that the input accepts. */\n  type?:\n    | 'text'\n    | 'date'\n    | 'datetime-local'\n    | 'email'\n    | 'month'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'time'\n    | 'url';\n  /** Value of the input. */\n  value?: string | number;\n  /** Aria-label. The input requires an associated id or aria-label. */\n  'aria-label'?: string;\n  /** A reference object to attach to the input box. */\n  innerRef?: React.RefObject<any>;\n  /** Trim text on left */\n  isLeftTruncated?: boolean;\n  /** Callback function when input is focused */\n  onFocus?: (event?: any) => void;\n  /** Callback function when input is blurred (focus leaves) */\n  onBlur?: (event?: any) => void;\n  /** icon variant */\n  iconVariant?: 'calendar' | 'clock' | 'search';\n  /** Use the external file instead of a data URI */\n  isIconSprite?: boolean;\n  /** Custom icon url to set as the input's background-image */\n  customIconUrl?: string;\n  /** Dimensions for the custom icon set as the input's background-size */\n  customIconDimensions?: string;\n}\n\ninterface TextInputState {\n  ouiaStateId: string;\n}\n\nexport class TextInputBase extends React.Component<TextInputProps, TextInputState> {\n  static displayName = 'TextInputBase';\n  static defaultProps: TextInputProps = {\n    'aria-label': null,\n    className: '',\n    isRequired: false,\n    validated: 'default' as 'success' | 'warning' | 'error' | 'default',\n    isDisabled: false,\n    isReadOnly: false,\n    isIconSprite: false,\n    type: TextInputTypes.text,\n    isLeftTruncated: false,\n    onChange: (): any => undefined,\n    ouiaSafe: true\n  };\n  inputRef = React.createRef<HTMLInputElement>();\n  observer: any = () => {};\n\n  constructor(props: TextInputProps) {\n    super(props);\n    if (!props.id && !props['aria-label'] && !props['aria-labelledby']) {\n      // eslint-disable-next-line no-console\n      console.error('Text input:', 'Text input requires either an id or aria-label to be specified');\n    }\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(TextInputBase.displayName)\n    };\n  }\n\n  handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    if (this.props.onChange) {\n      this.props.onChange(event.currentTarget.value, event);\n    }\n  };\n\n  componentDidMount() {\n    if (this.props.isLeftTruncated) {\n      const inputRef = this.props.innerRef || this.inputRef;\n      this.observer = getResizeObserver(inputRef.current, this.handleResize);\n      this.handleResize();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.isLeftTruncated) {\n      this.observer();\n    }\n  }\n\n  handleResize = () => {\n    const inputRef = this.props.innerRef || this.inputRef;\n    if (inputRef && inputRef.current) {\n      trimLeft(inputRef.current, String(this.props.value));\n    }\n  };\n\n  restoreText = () => {\n    const inputRef = this.props.innerRef || this.inputRef;\n    // restore the value\n    (inputRef.current as HTMLInputElement).value = String(this.props.value);\n    // make sure we still see the rightmost value to preserve cursor click position\n    inputRef.current.scrollLeft = inputRef.current.scrollWidth;\n  };\n\n  onFocus = (event?: any) => {\n    const { isLeftTruncated, onFocus } = this.props;\n    if (isLeftTruncated) {\n      this.restoreText();\n    }\n    onFocus && onFocus(event);\n  };\n\n  onBlur = (event?: any) => {\n    const { isLeftTruncated, onBlur } = this.props;\n    if (isLeftTruncated) {\n      this.handleResize();\n    }\n    onBlur && onBlur(event);\n  };\n\n  render() {\n    const {\n      innerRef,\n      className,\n      type,\n      value,\n      validated,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onChange,\n      onFocus,\n      onBlur,\n      isLeftTruncated,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      isReadOnly,\n      isRequired,\n      isDisabled,\n      isIconSprite,\n      iconVariant,\n      customIconUrl,\n      customIconDimensions,\n      ouiaId,\n      ouiaSafe,\n      ...props\n    } = this.props;\n\n    const customIconStyle = {} as any;\n    if (customIconUrl) {\n      customIconStyle.backgroundImage = `url('${customIconUrl}')`;\n    }\n    if (customIconDimensions) {\n      customIconStyle.backgroundSize = customIconDimensions;\n    }\n\n    return (\n      <input\n        {...props}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n        className={css(\n          styles.formControl,\n          isIconSprite && styles.modifiers.iconSprite,\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning,\n          ((iconVariant && iconVariant !== 'search') || customIconUrl) && styles.modifiers.icon,\n          iconVariant && styles.modifiers[iconVariant],\n          className\n        )}\n        onChange={this.handleChange}\n        type={type}\n        value={this.sanitizeInputValue(value)}\n        aria-invalid={props['aria-invalid'] ? props['aria-invalid'] : validated === ValidatedOptions.error}\n        required={isRequired}\n        disabled={isDisabled}\n        readOnly={isReadOnly}\n        ref={innerRef || this.inputRef}\n        {...((customIconUrl || customIconDimensions) && { style: customIconStyle })}\n        {...getOUIAProps(TextInput.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)}\n      />\n    );\n  }\n\n  private sanitizeInputValue = (value: string | number) =>\n    typeof value === 'string' ? value.replace(/\\n/g, ' ') : value;\n}\n\nexport const TextInput = React.forwardRef((props: TextInputProps, ref: React.Ref<HTMLInputElement>) => (\n  <TextInputBase {...props} innerRef={ref as React.MutableRefObject<any>} />\n));\nTextInput.displayName = 'TextInput';\n"]},"metadata":{},"sourceType":"module"}