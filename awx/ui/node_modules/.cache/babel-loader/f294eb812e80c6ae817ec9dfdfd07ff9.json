{"ast":null,"code":"import getDocumentElement from './getDocumentElement';\nimport getComputedStyle from './getComputedStyle';\nimport getWindowScrollBarX from './getWindowScrollBarX';\nimport getWindowScroll from './getWindowScroll'; // Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\n/**\n * @param element\n */\n\nexport default function getDocumentRect(element) {\n  var html = getDocumentElement(element);\n  var winScroll = getWindowScroll(element);\n  var body = element.ownerDocument.body;\n  var width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  var height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n  var y = -winScroll.scrollTop;\n\n  if (getComputedStyle(body || html).direction === 'rtl') {\n    x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n}","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/dom-utils/getDocumentRect.ts"],"names":[],"mappings":"AAEA,OAAO,kBAAP,MAA+B,sBAA/B;AACA,OAAO,gBAAP,MAA6B,oBAA7B;AACA,OAAO,mBAAP,MAAgC,uBAAhC;AACA,OAAO,eAAP,MAA4B,mBAA5B,C,CAEA;AACA;;AACA;;AAEG;;AACH,eAAc,SAAU,eAAV,CAA0B,OAA1B,EAA8C;AAC1D,MAAM,IAAI,GAAG,kBAAkB,CAAC,OAAD,CAA/B;AACA,MAAM,SAAS,GAAG,eAAe,CAAC,OAAD,CAAjC;AACA,MAAM,IAAI,GAAG,OAAO,CAAC,aAAR,CAAsB,IAAnC;AAEA,MAAM,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,WAAd,EAA2B,IAAI,CAAC,WAAhC,EAA6C,IAAI,GAAG,IAAI,CAAC,WAAR,GAAsB,CAAvE,EAA0E,IAAI,GAAG,IAAI,CAAC,WAAR,GAAsB,CAApG,CAAd;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,GAAL,CACb,IAAI,CAAC,YADQ,EAEb,IAAI,CAAC,YAFQ,EAGb,IAAI,GAAG,IAAI,CAAC,YAAR,GAAuB,CAHd,EAIb,IAAI,GAAG,IAAI,CAAC,YAAR,GAAuB,CAJd,CAAf;AAOA,MAAI,CAAC,GAAG,CAAC,SAAS,CAAC,UAAX,GAAwB,mBAAmB,CAAC,OAAD,CAAnD;AACA,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,SAArB;;AAEA,MAAI,gBAAgB,CAAC,IAAI,IAAI,IAAT,CAAhB,CAA+B,SAA/B,KAA6C,KAAjD,EAAwD;AACtD,IAAA,CAAC,IAAI,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,WAAd,EAA2B,IAAI,GAAG,IAAI,CAAC,WAAR,GAAsB,CAArD,IAA0D,KAA/D;AACD;;AAED,SAAO;AAAE,IAAA,KAAK,EAAL,KAAF;AAAS,IAAA,MAAM,EAAN,MAAT;AAAiB,IAAA,CAAC,EAAD,CAAjB;AAAoB,IAAA,CAAC,EAAD;AAApB,GAAP;AACD","sourcesContent":["// @ts-nocheck\nimport { Rect } from '../types';\nimport getDocumentElement from './getDocumentElement';\nimport getComputedStyle from './getComputedStyle';\nimport getWindowScrollBarX from './getWindowScrollBarX';\nimport getWindowScroll from './getWindowScroll';\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n/**\n * @param element\n */\nexport default function getDocumentRect(element: HTMLElement): Rect {\n  const html = getDocumentElement(element);\n  const winScroll = getWindowScroll(element);\n  const body = element.ownerDocument.body;\n\n  const width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  const height = Math.max(\n    html.scrollHeight,\n    html.clientHeight,\n    body ? body.scrollHeight : 0,\n    body ? body.clientHeight : 0\n  );\n\n  let x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -winScroll.scrollTop;\n\n  if (getComputedStyle(body || html).direction === 'rtl') {\n    x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n\n  return { width, height, x, y };\n}\n"]},"metadata":{},"sourceType":"module"}