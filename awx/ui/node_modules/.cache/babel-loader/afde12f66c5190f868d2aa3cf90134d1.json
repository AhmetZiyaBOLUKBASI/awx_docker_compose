{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Brand/brand';\nimport { setBreakpointCssVars } from '../../helpers';\nexport var Brand = function Brand(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$src = _a.src,\n      src = _a$src === void 0 ? '' : _a$src,\n      alt = _a.alt,\n      children = _a.children,\n      widths = _a.widths,\n      heights = _a.heights,\n      style = _a.style,\n      props = __rest(_a, [\"className\", \"src\", \"alt\", \"children\", \"widths\", \"heights\", \"style\"]);\n\n  if (children !== undefined && widths !== undefined) {\n    style = Object.assign(Object.assign({}, style), setBreakpointCssVars(widths, '--pf-c-brand--Width'));\n  }\n\n  if (children !== undefined && heights !== undefined) {\n    style = Object.assign(Object.assign({}, style), setBreakpointCssVars(heights, '--pf-c-brand--Height'));\n  }\n\n  return (\n    /** the brand component currently contains no styling the 'pf-c-brand' string will be used for the className */\n    children !== undefined ? React.createElement(\"picture\", Object.assign({\n      className: css(styles.brand, styles.modifiers.picture, className),\n      style: style\n    }, props), children, React.createElement(\"img\", {\n      src: src,\n      alt: alt\n    })) : React.createElement(\"img\", Object.assign({}, props, {\n      className: css(styles.brand, className),\n      src: src,\n      alt: alt\n    }))\n  );\n};\nBrand.displayName = 'Brand';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Brand/Brand.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,qDAAnB;AACA,SAAS,oBAAT,QAAqC,eAArC;AA+BA,OAAO,IAAM,KAAK,GAAwC,SAA7C,KAA6C,CAAC,EAAD,EASzC;AAT0C,qBAOpD,EAPoD,CACzD,SADyD;AAAA,MACzD,SADyD,6BAC7C,EAD6C;AAAA,eAOpD,EAPoD,CAEzD,GAFyD;AAAA,MAEzD,GAFyD,uBAEnD,EAFmD;AAAA,MAGzD,GAHyD,GAOpD,EAPoD,CAGzD,GAHyD;AAAA,MAIzD,QAJyD,GAOpD,EAPoD,CAIzD,QAJyD;AAAA,MAKzD,MALyD,GAOpD,EAPoD,CAKzD,MALyD;AAAA,MAMzD,OANyD,GAOpD,EAPoD,CAMzD,OANyD;AAAA,MAOzD,KAPyD,GAOpD,EAPoD,CAOzD,KAPyD;AAAA,MAQtD,KARsD,GAQjD,MAAA,CAAA,EAAA,EARiD,CAAA,WAAA,EAAA,KAAA,EAAA,KAAA,EAAA,UAAA,EAAA,QAAA,EAAA,SAAA,EAAA,OAAA,CAQjD,CARiD;;AAUzD,MAAI,QAAQ,KAAK,SAAb,IAA0B,MAAM,KAAK,SAAzC,EAAoD;AAClD,IAAA,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACA,KADA,CAAA,EAEA,oBAAoB,CAAC,MAAD,EAAS,qBAAT,CAFpB,CAAL;AAID;;AAED,MAAI,QAAQ,KAAK,SAAb,IAA0B,OAAO,KAAK,SAA1C,EAAqD;AACnD,IAAA,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACA,KADA,CAAA,EAEA,oBAAoB,CAAC,OAAD,EAAU,sBAAV,CAFpB,CAAL;AAID;;AAED;AACE;AACA,IAAA,QAAQ,KAAK,SAAb,GACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAS,MAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,KAAR,EAAe,MAAM,CAAC,SAAP,CAAiB,OAAhC,EAAyC,SAAzC,CAAvB;AAA4E,MAAA,KAAK,EAAE;AAAnF,KAAA,EAA8F,KAA9F,CAAA,EACG,QADH,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,GAAG,EAAE,GAAV;AAAe,MAAA,GAAG,EAAE;AAApB,KAAA,CAFF,CADF,GAME,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAS,KAAT,EAAc;AAAE,MAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,KAAR,EAAe,SAAf,CAAhB;AAA2C,MAAA,GAAG,EAAE,GAAhD;AAAqD,MAAA,GAAG,EAAE;AAA1D,KAAd,CAAA;AARJ;AAWD,CAnCM;AAoCP,KAAK,CAAC,WAAN,GAAoB,OAApB","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Brand/brand';\nimport { setBreakpointCssVars } from '../../helpers';\nexport interface BrandProps\n  extends React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement> {\n  /** Transforms the Brand into a <picture> element from an <img> element. Container for <source> child elements. */\n  children?: React.ReactNode;\n  /** Additional classes added to the either type of Brand. */\n  className?: string;\n  /** Attribute that specifies the URL of a <img> Brand. For a <picture> Brand this specifies the fallback <img> URL. */\n  src?: string;\n  /** Attribute that specifies the alt text of a <img> Brand. For a <picture> Brand this specifies the fallback <img> alt text. */\n  alt: string;\n  /** Widths at various breakpoints for a <picture> Brand. */\n  widths?: {\n    default?: string;\n    sm?: string;\n    md?: string;\n    lg?: string;\n    xl?: string;\n    '2xl'?: string;\n  };\n  /** Heights at various breakpoints for a <picture> Brand. */\n  heights?: {\n    default?: string;\n    sm?: string;\n    md?: string;\n    lg?: string;\n    xl?: string;\n    '2xl'?: string;\n  };\n}\n\nexport const Brand: React.FunctionComponent<BrandProps> = ({\n  className = '',\n  src = '',\n  alt,\n  children,\n  widths,\n  heights,\n  style,\n  ...props\n}: BrandProps) => {\n  if (children !== undefined && widths !== undefined) {\n    style = {\n      ...style,\n      ...setBreakpointCssVars(widths, '--pf-c-brand--Width')\n    };\n  }\n\n  if (children !== undefined && heights !== undefined) {\n    style = {\n      ...style,\n      ...setBreakpointCssVars(heights, '--pf-c-brand--Height')\n    };\n  }\n\n  return (\n    /** the brand component currently contains no styling the 'pf-c-brand' string will be used for the className */\n    children !== undefined ? (\n      <picture className={css(styles.brand, styles.modifiers.picture, className)} style={style} {...props}>\n        {children}\n        <img src={src} alt={alt} />\n      </picture>\n    ) : (\n      <img {...props} className={css(styles.brand, className)} src={src} alt={alt} />\n    )\n  );\n};\nBrand.displayName = 'Brand';\n"]},"metadata":{},"sourceType":"module"}