{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MenuToggle/menu-toggle';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nexport var MenuToggleBase = /*#__PURE__*/function (_React$Component) {\n  _inherits(MenuToggleBase, _React$Component);\n\n  var _super = _createSuper(MenuToggleBase);\n\n  function MenuToggleBase() {\n    var _this;\n\n    _classCallCheck(this, MenuToggleBase);\n\n    _this = _super.apply(this, arguments);\n    _this.displayName = 'MenuToggleBase';\n    return _this;\n  }\n\n  _createClass(MenuToggleBase, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          className = _a.className,\n          icon = _a.icon,\n          badge = _a.badge,\n          isExpanded = _a.isExpanded,\n          isDisabled = _a.isDisabled,\n          isFullHeight = _a.isFullHeight,\n          isFullWidth = _a.isFullWidth,\n          variant = _a.variant,\n          innerRef = _a.innerRef,\n          props = __rest(_a, [\"children\", \"className\", \"icon\", \"badge\", \"isExpanded\", \"isDisabled\", \"isFullHeight\", \"isFullWidth\", \"variant\", \"innerRef\"]);\n\n      var isPlain = variant === 'plain';\n      var isPlainText = variant === 'plainText';\n      var content = React.createElement(React.Fragment, null, icon && React.createElement(\"span\", {\n        className: css(styles.menuToggleIcon)\n      }, icon), React.createElement(\"span\", {\n        className: \"pf-c-menu-toggle__text\"\n      }, children), badge && React.createElement(\"span\", {\n        className: css(styles.menuToggleCount)\n      }, badge), React.createElement(\"span\", {\n        className: css(styles.menuToggleControls)\n      }, React.createElement(\"span\", {\n        className: css(styles.menuToggleToggleIcon)\n      }, React.createElement(CaretDownIcon, {\n        \"aria-hidden\": true\n      }))));\n      return React.createElement(\"button\", Object.assign({\n        className: css(styles.menuToggle, isExpanded && styles.modifiers.expanded, variant === 'primary' && styles.modifiers.primary, variant === 'secondary' && styles.modifiers.secondary, (isPlain || isPlainText) && styles.modifiers.plain, isPlainText && styles.modifiers.text, isFullHeight && styles.modifiers.fullHeight, isFullWidth && styles.modifiers.fullWidth, className),\n        type: \"button\",\n        \"aria-expanded\": false,\n        ref: innerRef\n      }, isExpanded && {\n        'aria-expanded': true\n      }, isDisabled && {\n        disabled: true\n      }, props), isPlain && children, !isPlain && content);\n    }\n  }]);\n\n  return MenuToggleBase;\n}(React.Component);\nMenuToggleBase.defaultProps = {\n  className: '',\n  isExpanded: false,\n  isDisabled: false,\n  isFullWidth: false,\n  isFullHeight: false,\n  variant: 'default'\n};\nexport var MenuToggle = React.forwardRef(function (props, ref) {\n  return React.createElement(MenuToggleBase, Object.assign({\n    innerRef: ref\n  }, props));\n});\nMenuToggle.displayName = 'MenuToggle';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/MenuToggle/MenuToggle.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MenuToggle/menu-toggle';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { BadgeProps } from '../Badge';\n\nexport interface MenuToggleProps\n  extends Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, 'ref'> {\n  /** Content rendered inside the toggle */\n  children?: React.ReactNode;\n  /** Additional classes added to the toggle */\n  className?: string;\n  /** Flag indicating the toggle has expanded styling */\n  isExpanded?: boolean;\n  /** Flag indicating the toggle is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating the toggle is full height */\n  isFullHeight?: boolean;\n  /** Flag indicating the toggle takes up the full width of its parent */\n  isFullWidth?: boolean;\n  /** Variant styles of the menu toggle */\n  variant?: 'default' | 'plain' | 'primary' | 'plainText' | 'secondary';\n  /** Optional icon rendered inside the toggle, before the children content */\n  icon?: React.ReactNode;\n  /** Optional badge rendered inside the toggle, after the children content */\n  badge?: BadgeProps | React.ReactNode;\n  /** Forwarded ref */\n  innerRef?: React.Ref<HTMLButtonElement>;\n}\n\nexport class MenuToggleBase extends React.Component<MenuToggleProps> {\n  displayName = 'MenuToggleBase';\n  static defaultProps = {\n    className: '',\n    isExpanded: false,\n    isDisabled: false,\n    isFullWidth: false,\n    isFullHeight: false,\n    variant: 'default'\n  };\n\n  render() {\n    const {\n      children,\n      className,\n      icon,\n      badge,\n      isExpanded,\n      isDisabled,\n      isFullHeight,\n      isFullWidth,\n      variant,\n      innerRef,\n      ...props\n    } = this.props;\n\n    const isPlain = variant === 'plain';\n    const isPlainText = variant === 'plainText';\n\n    const content = (\n      <React.Fragment>\n        {icon && <span className={css(styles.menuToggleIcon)}>{icon}</span>}\n        <span className=\"pf-c-menu-toggle__text\">{children}</span>\n        {badge && <span className={css(styles.menuToggleCount)}>{badge as React.ReactNode}</span>}\n        <span className={css(styles.menuToggleControls)}>\n          <span className={css(styles.menuToggleToggleIcon)}>\n            <CaretDownIcon aria-hidden />\n          </span>\n        </span>\n      </React.Fragment>\n    );\n    return (\n      <button\n        className={css(\n          styles.menuToggle,\n          isExpanded && styles.modifiers.expanded,\n          variant === 'primary' && styles.modifiers.primary,\n          variant === 'secondary' && styles.modifiers.secondary,\n          (isPlain || isPlainText) && styles.modifiers.plain,\n          isPlainText && styles.modifiers.text,\n          isFullHeight && styles.modifiers.fullHeight,\n          isFullWidth && styles.modifiers.fullWidth,\n          className\n        )}\n        type=\"button\"\n        aria-expanded={false}\n        ref={innerRef}\n        {...(isExpanded && { 'aria-expanded': true })}\n        {...(isDisabled && { disabled: true })}\n        {...props}\n      >\n        {isPlain && children}\n        {!isPlain && content}\n      </button>\n    );\n  }\n}\n\nexport const MenuToggle = React.forwardRef((props: MenuToggleProps, ref: React.Ref<HTMLButtonElement>) => (\n  <MenuToggleBase innerRef={ref} {...props} />\n));\n\nMenuToggle.displayName = 'MenuToggle';\n"]},"metadata":{},"sourceType":"module"}