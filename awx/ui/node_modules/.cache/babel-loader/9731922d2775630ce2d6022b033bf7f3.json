{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { Button, Checkbox } from '@patternfly/react-core';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport EllipsisHIcon from '@patternfly/react-icons/dist/esm/icons/ellipsis-h-icon';\nexport var treeRow = function treeRow(onCollapse, onCheckChange, onToggleRowDetails) {\n  return function (value, _ref) {\n    var rowIndex = _ref.rowIndex,\n        rowData = _ref.rowData;\n    var _rowData$props = rowData.props,\n        isExpanded = _rowData$props.isExpanded,\n        isDetailsExpanded = _rowData$props.isDetailsExpanded,\n        level = _rowData$props['aria-level'],\n        setsize = _rowData$props['aria-setsize'],\n        toggleAriaLabel = _rowData$props.toggleAriaLabel,\n        checkAriaLabel = _rowData$props.checkAriaLabel,\n        showDetailsAriaLabel = _rowData$props.showDetailsAriaLabel,\n        isChecked = _rowData$props.isChecked,\n        checkboxId = _rowData$props.checkboxId,\n        icon = _rowData$props.icon;\n    var content = value.title || value;\n    var text = React.createElement(\"div\", {\n      className: css(stylesTreeView.tableTreeViewText),\n      key: \"tree-view-text\"\n    }, icon && React.createElement(\"span\", {\n      className: css(stylesTreeView.tableTreeViewIcon),\n      key: \"tree-view-text-icon\"\n    }, icon), React.createElement(\"span\", {\n      className: \"pf-c-table__text\",\n      key: \"table-text\"\n    }, content));\n\n    var onChange = function onChange(isChecked, event) {\n      onCheckChange(event, isChecked, rowIndex, content, rowData);\n    };\n\n    return {\n      component: 'th',\n      className: 'pf-c-table__tree-view-title-cell',\n      children: level !== undefined ? React.createElement(\"div\", {\n        className: css(stylesTreeView.tableTreeViewMain)\n      }, setsize > 0 && React.createElement(\"span\", {\n        className: css(stylesTreeView.tableToggle),\n        key: \"table-toggle\"\n      }, React.createElement(Button, {\n        variant: \"plain\",\n        onClick: function onClick(event) {\n          return onCollapse && onCollapse(event, rowIndex, content, rowData);\n        },\n        className: css(isExpanded && styles.modifiers.expanded),\n        \"aria-expanded\": isExpanded,\n        \"aria-label\": toggleAriaLabel || \"\".concat(isExpanded ? 'Collapse' : 'Expand', \" row \").concat(rowIndex)\n      }, React.createElement(\"div\", {\n        className: css(stylesTreeView.tableToggleIcon)\n      }, React.createElement(AngleDownIcon, {\n        \"aria-hidden\": \"true\"\n      })))), !!onCheckChange && React.createElement(\"span\", {\n        className: css(stylesTreeView.tableCheck),\n        key: \"table-check\"\n      }, React.createElement(\"label\", {\n        htmlFor: checkboxId || \"checkbox_\".concat(rowIndex)\n      }, React.createElement(Checkbox, {\n        id: checkboxId || \"checkbox_\".concat(rowIndex),\n        \"aria-label\": checkAriaLabel || \"Row \".concat(rowIndex, \" checkbox\"),\n        isChecked: isChecked,\n        onChange: onChange\n      }))), text, !!onToggleRowDetails && React.createElement(\"span\", {\n        className: css(stylesTreeView.tableTreeViewDetailsToggle),\n        key: \"view-details-toggle\"\n      }, React.createElement(Button, {\n        variant: \"plain\",\n        \"aria-expanded\": isDetailsExpanded,\n        \"aria-label\": showDetailsAriaLabel || 'Show row details',\n        onClick: function onClick(event) {\n          return onToggleRowDetails && onToggleRowDetails(event, rowIndex, content, rowData);\n        }\n      }, React.createElement(\"span\", {\n        className: \"pf-c-table__details-toggle-icon\"\n      }, React.createElement(EllipsisHIcon, {\n        \"aria-hidden\": true\n      }))))) : text\n    };\n  };\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/utils/decorators/treeRow.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IExtra, IFormatterValueType, OnCheckChange, OnTreeRowCollapse, OnToggleRowDetails } from '../../TableTypes';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { Button, Checkbox } from '@patternfly/react-core';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport EllipsisHIcon from '@patternfly/react-icons/dist/esm/icons/ellipsis-h-icon';\n\nexport const treeRow = (\n  onCollapse: OnTreeRowCollapse,\n  onCheckChange?: OnCheckChange,\n  onToggleRowDetails?: OnToggleRowDetails\n) => (value: IFormatterValueType, { rowIndex, rowData }: IExtra) => {\n  const {\n    isExpanded,\n    isDetailsExpanded,\n    'aria-level': level,\n    'aria-setsize': setsize,\n    toggleAriaLabel,\n    checkAriaLabel,\n    showDetailsAriaLabel,\n    isChecked,\n    checkboxId,\n    icon\n  } = rowData.props;\n  const content = value.title || value;\n  const text = (\n    <div className={css(stylesTreeView.tableTreeViewText)} key=\"tree-view-text\">\n      {icon && (\n        <span className={css(stylesTreeView.tableTreeViewIcon)} key=\"tree-view-text-icon\">\n          {icon}\n        </span>\n      )}\n      <span className=\"pf-c-table__text\" key=\"table-text\">\n        {content as React.ReactNode}\n      </span>\n    </div>\n  );\n  const onChange = (isChecked: boolean, event: React.FormEvent<HTMLInputElement>) => {\n    onCheckChange(event, isChecked, rowIndex, content as React.ReactNode, rowData);\n  };\n  return {\n    component: 'th',\n    className: 'pf-c-table__tree-view-title-cell',\n    children:\n      level !== undefined ? (\n        <div className={css(stylesTreeView.tableTreeViewMain)}>\n          {setsize > 0 && (\n            <span className={css(stylesTreeView.tableToggle)} key=\"table-toggle\">\n              <Button\n                variant=\"plain\"\n                onClick={event => onCollapse && onCollapse(event, rowIndex, content as React.ReactNode, rowData)}\n                className={css(isExpanded && styles.modifiers.expanded)}\n                aria-expanded={isExpanded}\n                aria-label={toggleAriaLabel || `${isExpanded ? 'Collapse' : 'Expand'} row ${rowIndex}`}\n              >\n                <div className={css(stylesTreeView.tableToggleIcon)}>\n                  <AngleDownIcon aria-hidden=\"true\" />\n                </div>\n              </Button>\n            </span>\n          )}\n          {!!onCheckChange && (\n            <span className={css(stylesTreeView.tableCheck)} key=\"table-check\">\n              <label htmlFor={checkboxId || `checkbox_${rowIndex}`}>\n                <Checkbox\n                  id={checkboxId || `checkbox_${rowIndex}`}\n                  aria-label={checkAriaLabel || `Row ${rowIndex} checkbox`}\n                  isChecked={isChecked}\n                  onChange={onChange}\n                />\n              </label>\n            </span>\n          )}\n          {text}\n          {!!onToggleRowDetails && (\n            <span className={css(stylesTreeView.tableTreeViewDetailsToggle)} key=\"view-details-toggle\">\n              <Button\n                variant=\"plain\"\n                aria-expanded={isDetailsExpanded}\n                aria-label={showDetailsAriaLabel || 'Show row details'}\n                onClick={event =>\n                  onToggleRowDetails && onToggleRowDetails(event, rowIndex, content as React.ReactNode, rowData)\n                }\n              >\n                <span className=\"pf-c-table__details-toggle-icon\">\n                  <EllipsisHIcon aria-hidden />\n                </span>\n              </Button>\n            </span>\n          )}\n        </div>\n      ) : (\n        text\n      )\n  };\n};\n"]},"metadata":{},"sourceType":"module"}