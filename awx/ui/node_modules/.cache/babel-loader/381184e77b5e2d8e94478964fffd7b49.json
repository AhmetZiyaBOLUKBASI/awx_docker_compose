{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{useState,useEffect}from'react';import{useLocation,useHistory}from'react-router-dom';import{parseQueryString,updateQueryString}from'util/qs';import useWebsocket from'hooks/useWebsocket';import useThrottle from'hooks/useThrottle';export default function useWsInventories(initialInventories,fetchInventories,fetchInventoriesById,qsConfig){var location=useLocation();var history=useHistory();var _useState=useState(initialInventories),_useState2=_slicedToArray(_useState,2),inventories=_useState2[0],setInventories=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),inventoriesToFetch=_useState4[0],setInventoriesToFetch=_useState4[1];var throttledInventoriesToFetch=useThrottle(inventoriesToFetch,5000);var lastMessage=useWebsocket({inventories:['status_changed'],jobs:['status_changed'],control:['limit_reached_1']});useEffect(function(){setInventories(initialInventories);},[initialInventories]);var enqueueId=function enqueueId(id){if(!inventoriesToFetch.includes(id)){setInventoriesToFetch(function(ids){return ids.concat(id);});}};useEffect(function(){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var newInventories,updated;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(throttledInventoriesToFetch.length){_context.next=2;break;}return _context.abrupt(\"return\");case 2:setInventoriesToFetch([]);_context.next=5;return fetchInventoriesById(throttledInventoriesToFetch);case 5:newInventories=_context.sent;updated=_toConsumableArray(inventories);newInventories.forEach(function(inventory){var index=inventories.findIndex(function(i){return i.id===inventory.id;});if(index===-1){return;}updated[index]=inventory;});setInventories(updated);case 9:case\"end\":return _context.stop();}}},_callee);}))();},// eslint-disable-next-line react-hooks/exhaustive-deps\n[throttledInventoriesToFetch,fetchInventoriesById]);useEffect(function(){if(!(lastMessage!==null&&lastMessage!==void 0&&lastMessage.inventory_id)||lastMessage.type!=='inventory_update'&&lastMessage.group_name!=='inventories'){return;}var index=inventories.findIndex(function(p){return p.id===lastMessage.inventory_id;});if(index===-1){return;}var params=parseQueryString(qsConfig,location.search);var inventory=inventories[index];var updatedInventory=_objectSpread({},inventory);if(lastMessage.group_name==='inventories'&&lastMessage.status==='deleted'&&inventories.length===1&&params.page>1){// We've deleted the last inventory on this page so we'll\n// try to navigate back to the previous page\nvar qs=updateQueryString(qsConfig,location.search,{page:params.page-1});history.push(\"\".concat(location.pathname,\"?\").concat(qs));return;}if(lastMessage.group_name==='inventories'&&lastMessage.status==='deleted'){fetchInventories();return;}if(!['pending','waiting','running','pending_deletion'].includes(lastMessage.status)){enqueueId(lastMessage.inventory_id);return;}if(lastMessage.group_name==='inventories'&&lastMessage.status==='pending_deletion'){updatedInventory.pending_deletion=true;}if(lastMessage.group_name!=='inventories'){updatedInventory.isSourceSyncRunning=true;}setInventories([].concat(_toConsumableArray(inventories.slice(0,index)),[updatedInventory],_toConsumableArray(inventories.slice(index+1))));},// eslint-disable-next-line react-hooks/exhaustive-deps,\n[lastMessage]);return inventories;}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Inventory/InventoryList/useWsInventories.js"],"names":["useState","useEffect","useLocation","useHistory","parseQueryString","updateQueryString","useWebsocket","useThrottle","useWsInventories","initialInventories","fetchInventories","fetchInventoriesById","qsConfig","location","history","inventories","setInventories","inventoriesToFetch","setInventoriesToFetch","throttledInventoriesToFetch","lastMessage","jobs","control","enqueueId","id","includes","ids","concat","length","newInventories","updated","forEach","inventory","index","findIndex","i","inventory_id","type","group_name","p","params","search","updatedInventory","status","page","qs","push","pathname","pending_deletion","isSourceSyncRunning","slice"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { parseQueryString, updateQueryString } from 'util/qs';\nimport useWebsocket from 'hooks/useWebsocket';\nimport useThrottle from 'hooks/useThrottle';\n\nexport default function useWsInventories(\n  initialInventories,\n  fetchInventories,\n  fetchInventoriesById,\n  qsConfig\n) {\n  const location = useLocation();\n  const history = useHistory();\n  const [inventories, setInventories] = useState(initialInventories);\n  const [inventoriesToFetch, setInventoriesToFetch] = useState([]);\n  const throttledInventoriesToFetch = useThrottle(inventoriesToFetch, 5000);\n  const lastMessage = useWebsocket({\n    inventories: ['status_changed'],\n    jobs: ['status_changed'],\n    control: ['limit_reached_1'],\n  });\n\n  useEffect(() => {\n    setInventories(initialInventories);\n  }, [initialInventories]);\n\n  const enqueueId = (id) => {\n    if (!inventoriesToFetch.includes(id)) {\n      setInventoriesToFetch((ids) => ids.concat(id));\n    }\n  };\n  useEffect(\n    () => {\n      (async () => {\n        if (!throttledInventoriesToFetch.length) {\n          return;\n        }\n        setInventoriesToFetch([]);\n        const newInventories = await fetchInventoriesById(\n          throttledInventoriesToFetch\n        );\n        const updated = [...inventories];\n        newInventories.forEach((inventory) => {\n          const index = inventories.findIndex((i) => i.id === inventory.id);\n          if (index === -1) {\n            return;\n          }\n          updated[index] = inventory;\n        });\n        setInventories(updated);\n      })();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [throttledInventoriesToFetch, fetchInventoriesById]\n  );\n\n  useEffect(\n    () => {\n      if (\n        !lastMessage?.inventory_id ||\n        (lastMessage.type !== 'inventory_update' &&\n          lastMessage.group_name !== 'inventories')\n      ) {\n        return;\n      }\n      const index = inventories.findIndex(\n        (p) => p.id === lastMessage.inventory_id\n      );\n      if (index === -1) {\n        return;\n      }\n\n      const params = parseQueryString(qsConfig, location.search);\n\n      const inventory = inventories[index];\n      const updatedInventory = {\n        ...inventory,\n      };\n\n      if (\n        lastMessage.group_name === 'inventories' &&\n        lastMessage.status === 'deleted' &&\n        inventories.length === 1 &&\n        params.page > 1\n      ) {\n        // We've deleted the last inventory on this page so we'll\n        // try to navigate back to the previous page\n        const qs = updateQueryString(qsConfig, location.search, {\n          page: params.page - 1,\n        });\n        history.push(`${location.pathname}?${qs}`);\n        return;\n      }\n\n      if (\n        lastMessage.group_name === 'inventories' &&\n        lastMessage.status === 'deleted'\n      ) {\n        fetchInventories();\n        return;\n      }\n\n      if (\n        !['pending', 'waiting', 'running', 'pending_deletion'].includes(\n          lastMessage.status\n        )\n      ) {\n        enqueueId(lastMessage.inventory_id);\n        return;\n      }\n\n      if (\n        lastMessage.group_name === 'inventories' &&\n        lastMessage.status === 'pending_deletion'\n      ) {\n        updatedInventory.pending_deletion = true;\n      }\n\n      if (lastMessage.group_name !== 'inventories') {\n        updatedInventory.isSourceSyncRunning = true;\n      }\n\n      setInventories([\n        ...inventories.slice(0, index),\n        updatedInventory,\n        ...inventories.slice(index + 1),\n      ]);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps,\n    [lastMessage]\n  );\n\n  return inventories;\n}\n"]},"metadata":{},"sourceType":"module"}