{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport globalBreakpointXl from '@patternfly/react-tokens/dist/esm/global_breakpoint_xl';\nimport { debounce, canUseDOM } from '../../helpers/util';\nimport { Drawer, DrawerContent, DrawerContentBody, DrawerPanelContent } from '../Drawer';\nimport { PageGroup } from './PageGroup';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nimport { getBreakpoint } from '../../helpers/util';\nexport var PageLayouts;\n\n(function (PageLayouts) {\n  PageLayouts[\"vertical\"] = \"vertical\";\n  PageLayouts[\"horizontal\"] = \"horizontal\";\n})(PageLayouts || (PageLayouts = {}));\n\nexport var pageContextDefaults = {\n  isManagedSidebar: false,\n  isNavOpen: false,\n  onNavToggle: function onNavToggle() {\n    return null;\n  },\n  width: null,\n  getBreakpoint: getBreakpoint\n};\nexport var PageContext = React.createContext(pageContextDefaults);\nexport var PageContextProvider = PageContext.Provider;\nexport var PageContextConsumer = PageContext.Consumer;\nexport var Page = /*#__PURE__*/function (_React$Component) {\n  _inherits(Page, _React$Component);\n\n  var _super = _createSuper(Page);\n\n  function Page(props) {\n    var _this;\n\n    _classCallCheck(this, Page);\n\n    _this = _super.call(this, props);\n    _this.mainRef = React.createRef();\n    _this.pageRef = React.createRef();\n\n    _this.observer = function () {};\n\n    _this.getWindowWidth = function () {\n      if (canUseDOM) {\n        return _this.pageRef.current ? _this.pageRef.current.clientWidth : window.innerWidth;\n      } else {\n        return 1200;\n      }\n    };\n\n    _this.isMobile = function () {\n      return (// eslint-disable-next-line radix\n        _this.getWindowWidth() < Number.parseInt(globalBreakpointXl.value, 10)\n      );\n    };\n\n    _this.resize = function () {\n      var onPageResize = _this.props.onPageResize;\n\n      var mobileView = _this.isMobile();\n\n      if (onPageResize) {\n        onPageResize({\n          mobileView: mobileView,\n          windowSize: _this.getWindowWidth()\n        });\n      }\n\n      if (mobileView !== _this.state.mobileView) {\n        _this.setState({\n          mobileView: mobileView\n        });\n      }\n\n      _this.pageRef.current && _this.setState({\n        width: _this.pageRef.current.clientWidth\n      });\n    };\n\n    _this.handleResize = debounce(_this.resize, 250);\n\n    _this.handleMainClick = function () {\n      if (_this.isMobile() && _this.state.mobileIsNavOpen && _this.mainRef.current) {\n        _this.setState({\n          mobileIsNavOpen: false\n        });\n      }\n    };\n\n    _this.onNavToggleMobile = function () {\n      _this.setState(function (prevState) {\n        return {\n          mobileIsNavOpen: !prevState.mobileIsNavOpen\n        };\n      });\n    };\n\n    _this.onNavToggleDesktop = function () {\n      _this.setState(function (prevState) {\n        return {\n          desktopIsNavOpen: !prevState.desktopIsNavOpen\n        };\n      });\n    };\n\n    var isManagedSidebar = props.isManagedSidebar,\n        defaultManagedSidebarIsOpen = props.defaultManagedSidebarIsOpen;\n    var managedSidebarOpen = !isManagedSidebar ? true : defaultManagedSidebarIsOpen;\n    _this.state = {\n      desktopIsNavOpen: managedSidebarOpen,\n      mobileIsNavOpen: false,\n      mobileView: false,\n      width: null\n    };\n    return _this;\n  }\n\n  _createClass(Page, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          isManagedSidebar = _this$props.isManagedSidebar,\n          onPageResize = _this$props.onPageResize;\n\n      if (isManagedSidebar || onPageResize) {\n        this.observer = getResizeObserver(this.pageRef.current, this.handleResize);\n        var currentRef = this.mainRef.current;\n\n        if (currentRef) {\n          currentRef.addEventListener('mousedown', this.handleMainClick);\n          currentRef.addEventListener('touchstart', this.handleMainClick);\n        } // Initial check if should be shown\n\n\n        this.resize();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props2 = this.props,\n          isManagedSidebar = _this$props2.isManagedSidebar,\n          onPageResize = _this$props2.onPageResize;\n\n      if (isManagedSidebar || onPageResize) {\n        this.observer();\n        var currentRef = this.mainRef.current;\n\n        if (currentRef) {\n          currentRef.removeEventListener('mousedown', this.handleMainClick);\n          currentRef.removeEventListener('touchstart', this.handleMainClick);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          breadcrumb = _a.breadcrumb,\n          isBreadcrumbWidthLimited = _a.isBreadcrumbWidthLimited,\n          className = _a.className,\n          children = _a.children,\n          header = _a.header,\n          sidebar = _a.sidebar,\n          notificationDrawer = _a.notificationDrawer,\n          isNotificationDrawerExpanded = _a.isNotificationDrawerExpanded,\n          onNotificationDrawerExpand = _a.onNotificationDrawerExpand,\n          isTertiaryNavWidthLimited = _a.isTertiaryNavWidthLimited,\n          skipToContent = _a.skipToContent,\n          role = _a.role,\n          mainContainerId = _a.mainContainerId,\n          isManagedSidebar = _a.isManagedSidebar,\n          defaultManagedSidebarIsOpen = _a.defaultManagedSidebarIsOpen,\n          onPageResize = _a.onPageResize,\n          getBreakpoint = _a.getBreakpoint,\n          mainAriaLabel = _a.mainAriaLabel,\n          mainTabIndex = _a.mainTabIndex,\n          tertiaryNav = _a.tertiaryNav,\n          isTertiaryNavGrouped = _a.isTertiaryNavGrouped,\n          isBreadcrumbGrouped = _a.isBreadcrumbGrouped,\n          additionalGroupedContent = _a.additionalGroupedContent,\n          groupProps = _a.groupProps,\n          rest = __rest(_a, [\"breadcrumb\", \"isBreadcrumbWidthLimited\", \"className\", \"children\", \"header\", \"sidebar\", \"notificationDrawer\", \"isNotificationDrawerExpanded\", \"onNotificationDrawerExpand\", \"isTertiaryNavWidthLimited\", \"skipToContent\", \"role\", \"mainContainerId\", \"isManagedSidebar\", \"defaultManagedSidebarIsOpen\", \"onPageResize\", \"getBreakpoint\", \"mainAriaLabel\", \"mainTabIndex\", \"tertiaryNav\", \"isTertiaryNavGrouped\", \"isBreadcrumbGrouped\", \"additionalGroupedContent\", \"groupProps\"]);\n\n      var _this$state = this.state,\n          mobileView = _this$state.mobileView,\n          mobileIsNavOpen = _this$state.mobileIsNavOpen,\n          desktopIsNavOpen = _this$state.desktopIsNavOpen,\n          width = _this$state.width;\n      var context = {\n        isManagedSidebar: isManagedSidebar,\n        onNavToggle: mobileView ? this.onNavToggleMobile : this.onNavToggleDesktop,\n        isNavOpen: mobileView ? mobileIsNavOpen : desktopIsNavOpen,\n        width: width,\n        getBreakpoint: getBreakpoint\n      };\n      var nav = null;\n\n      if (tertiaryNav && isTertiaryNavWidthLimited) {\n        nav = React.createElement(\"div\", {\n          className: css(styles.pageMainNav, styles.modifiers.limitWidth)\n        }, React.createElement(\"div\", {\n          className: css(styles.pageMainBody)\n        }, tertiaryNav));\n      } else if (tertiaryNav) {\n        nav = React.createElement(\"div\", {\n          className: css(styles.pageMainNav)\n        }, tertiaryNav);\n      }\n\n      var crumb = null;\n\n      if (breadcrumb && isBreadcrumbWidthLimited) {\n        crumb = React.createElement(\"section\", {\n          className: css(styles.pageMainBreadcrumb, styles.modifiers.limitWidth)\n        }, React.createElement(\"div\", {\n          className: css(styles.pageMainBody)\n        }, breadcrumb));\n      } else if (breadcrumb) {\n        crumb = React.createElement(\"section\", {\n          className: css(styles.pageMainBreadcrumb)\n        }, breadcrumb);\n      }\n\n      var isGrouped = isTertiaryNavGrouped || isBreadcrumbGrouped || additionalGroupedContent;\n      var group = isGrouped ? React.createElement(PageGroup, Object.assign({}, groupProps), isTertiaryNavGrouped && nav, isBreadcrumbGrouped && crumb, additionalGroupedContent) : null;\n      var main = React.createElement(\"main\", {\n        ref: this.mainRef,\n        role: role,\n        id: mainContainerId,\n        className: css(styles.pageMain),\n        tabIndex: mainTabIndex,\n        \"aria-label\": mainAriaLabel\n      }, group, !isTertiaryNavGrouped && nav, !isBreadcrumbGrouped && crumb, children);\n      var panelContent = React.createElement(DrawerPanelContent, null, notificationDrawer);\n      return React.createElement(PageContextProvider, {\n        value: context\n      }, React.createElement(\"div\", Object.assign({\n        ref: this.pageRef\n      }, rest, {\n        className: css(styles.page, width !== null && 'pf-m-resize-observer', width !== null && \"pf-m-breakpoint-\".concat(getBreakpoint(width)), className)\n      }), skipToContent, header, sidebar, notificationDrawer && React.createElement(\"div\", {\n        className: css(styles.pageDrawer)\n      }, React.createElement(Drawer, {\n        isExpanded: isNotificationDrawerExpanded,\n        onExpand: onNotificationDrawerExpand\n      }, React.createElement(DrawerContent, {\n        panelContent: panelContent\n      }, React.createElement(DrawerContentBody, null, main)))), !notificationDrawer && main));\n    }\n  }]);\n\n  return Page;\n}(React.Component);\nPage.displayName = 'Page';\nPage.defaultProps = {\n  isManagedSidebar: false,\n  isBreadcrumbWidthLimited: false,\n  defaultManagedSidebarIsOpen: true,\n  onPageResize: function onPageResize() {\n    return null;\n  },\n  mainTabIndex: -1,\n  isNotificationDrawerExpanded: false,\n  onNotificationDrawerExpand: function onNotificationDrawerExpand() {\n    return null;\n  },\n  getBreakpoint: getBreakpoint\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Page/Page.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport globalBreakpointXl from '@patternfly/react-tokens/dist/esm/global_breakpoint_xl';\nimport { debounce, canUseDOM } from '../../helpers/util';\nimport { Drawer, DrawerContent, DrawerContentBody, DrawerPanelContent } from '../Drawer';\nimport { PageGroup, PageGroupProps } from './PageGroup';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nimport { getBreakpoint } from '../../helpers/util';\n\nexport enum PageLayouts {\n  vertical = 'vertical',\n  horizontal = 'horizontal'\n}\n\nexport interface PageContextProps {\n  isManagedSidebar: boolean;\n  onNavToggle: () => void;\n  isNavOpen: boolean;\n  width: number;\n  getBreakpoint: (width: number | null) => 'default' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n}\nexport const pageContextDefaults: PageContextProps = {\n  isManagedSidebar: false,\n  isNavOpen: false,\n  onNavToggle: () => null,\n  width: null,\n  getBreakpoint\n};\nexport const PageContext = React.createContext<PageContextProps>(pageContextDefaults);\n\nexport const PageContextProvider = PageContext.Provider;\nexport const PageContextConsumer = PageContext.Consumer;\n\nexport interface PageProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the main section of the page layout (e.g. <PageSection />) */\n  children?: React.ReactNode;\n  /** Additional classes added to the page layout */\n  className?: string;\n  /** Header component (e.g. <PageHeader />) */\n  header?: React.ReactNode;\n  /** Sidebar component for a side nav (e.g. <PageSidebar />) */\n  sidebar?: React.ReactNode;\n  /** Notification drawer component for an optional notification drawer (e.g. <NotificationDrawer />) */\n  notificationDrawer?: React.ReactNode;\n  /** Flag indicating Notification drawer in expanded */\n  isNotificationDrawerExpanded?: boolean;\n  /** Flag indicating if breadcrumb width should be limited */\n  isBreadcrumbWidthLimited?: boolean;\n  /** Callback when notification drawer panel is finished expanding. */\n  onNotificationDrawerExpand?: () => void;\n  /** Skip to content component for the page */\n  skipToContent?: React.ReactElement;\n  /** Sets the value for role on the <main> element */\n  role?: string;\n  /** an id to use for the [role=\"main\"] element */\n  mainContainerId?: string;\n  /** tabIndex to use for the [role=\"main\"] element, null to unset it */\n  mainTabIndex?: number | null;\n  /**\n   * If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into\n   * the sidebar component or add a callback onNavToggle function into the PageHeader component\n   */\n  isManagedSidebar?: boolean;\n  /** Flag indicating if tertiary nav width should be limited */\n  isTertiaryNavWidthLimited?: boolean;\n  /**\n   * If true, the managed sidebar is initially open for desktop view\n   */\n  defaultManagedSidebarIsOpen?: boolean;\n  /**\n   * Can add callback to be notified when resize occurs, for example to set the sidebar isNav prop to false for a width < 768px\n   * Returns object { mobileView: boolean, windowSize: number }\n   */\n  onPageResize?: (object: any) => void;\n  /**\n   * The page resize observer uses the breakpoints returned from this function when adding the pf-m-breakpoint-[default|sm|md|lg|xl|2xl] class\n   * You can override the default getBreakpoint function to return breakpoints at different sizes than the default\n   * You can view the default getBreakpoint function here:\n   * https://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/helpers/util.ts\n   */\n  getBreakpoint?: (width: number | null) => 'default' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Breadcrumb component for the page */\n  breadcrumb?: React.ReactNode;\n  /** Tertiary nav component for the page */\n  tertiaryNav?: React.ReactNode;\n  /** Accessible label, can be used to name main section */\n  mainAriaLabel?: string;\n  /** Flag indicating if the tertiaryNav should be in a group */\n  isTertiaryNavGrouped?: boolean;\n  /** Flag indicating if the breadcrumb should be in a group */\n  isBreadcrumbGrouped?: boolean;\n  /** Additional content of the group */\n  additionalGroupedContent?: React.ReactNode;\n  /** Additional props of the group */\n  groupProps?: PageGroupProps;\n}\n\nexport interface PageState {\n  desktopIsNavOpen: boolean;\n  mobileIsNavOpen: boolean;\n  mobileView: boolean;\n  width: number;\n}\n\nexport class Page extends React.Component<PageProps, PageState> {\n  static displayName = 'Page';\n  static defaultProps: PageProps = {\n    isManagedSidebar: false,\n    isBreadcrumbWidthLimited: false,\n    defaultManagedSidebarIsOpen: true,\n    onPageResize: (): void => null,\n    mainTabIndex: -1,\n    isNotificationDrawerExpanded: false,\n    onNotificationDrawerExpand: () => null,\n    getBreakpoint\n  };\n  mainRef = React.createRef<HTMLDivElement>();\n  pageRef = React.createRef<HTMLDivElement>();\n  observer: any = () => {};\n\n  constructor(props: PageProps) {\n    super(props);\n\n    const { isManagedSidebar, defaultManagedSidebarIsOpen } = props;\n    const managedSidebarOpen = !isManagedSidebar ? true : defaultManagedSidebarIsOpen;\n    this.state = {\n      desktopIsNavOpen: managedSidebarOpen,\n      mobileIsNavOpen: false,\n      mobileView: false,\n      width: null\n    };\n  }\n\n  componentDidMount() {\n    const { isManagedSidebar, onPageResize } = this.props;\n    if (isManagedSidebar || onPageResize) {\n      this.observer = getResizeObserver(this.pageRef.current, this.handleResize);\n      const currentRef = this.mainRef.current;\n      if (currentRef) {\n        currentRef.addEventListener('mousedown', this.handleMainClick);\n        currentRef.addEventListener('touchstart', this.handleMainClick);\n      }\n      // Initial check if should be shown\n      this.resize();\n    }\n  }\n\n  componentWillUnmount() {\n    const { isManagedSidebar, onPageResize } = this.props;\n    if (isManagedSidebar || onPageResize) {\n      this.observer();\n      const currentRef = this.mainRef.current;\n      if (currentRef) {\n        currentRef.removeEventListener('mousedown', this.handleMainClick);\n        currentRef.removeEventListener('touchstart', this.handleMainClick);\n      }\n    }\n  }\n\n  getWindowWidth = () => {\n    if (canUseDOM) {\n      return this.pageRef.current ? this.pageRef.current.clientWidth : window.innerWidth;\n    } else {\n      return 1200;\n    }\n  };\n\n  isMobile = () =>\n    // eslint-disable-next-line radix\n    this.getWindowWidth() < Number.parseInt(globalBreakpointXl.value, 10);\n\n  resize = () => {\n    const { onPageResize } = this.props;\n    const mobileView = this.isMobile();\n    if (onPageResize) {\n      onPageResize({ mobileView, windowSize: this.getWindowWidth() });\n    }\n    if (mobileView !== this.state.mobileView) {\n      this.setState({ mobileView });\n    }\n    this.pageRef.current && this.setState({ width: this.pageRef.current.clientWidth });\n  };\n\n  handleResize = debounce(this.resize, 250);\n\n  handleMainClick = () => {\n    if (this.isMobile() && this.state.mobileIsNavOpen && this.mainRef.current) {\n      this.setState({ mobileIsNavOpen: false });\n    }\n  };\n\n  onNavToggleMobile = () => {\n    this.setState(prevState => ({\n      mobileIsNavOpen: !prevState.mobileIsNavOpen\n    }));\n  };\n\n  onNavToggleDesktop = () => {\n    this.setState(prevState => ({\n      desktopIsNavOpen: !prevState.desktopIsNavOpen\n    }));\n  };\n\n  render() {\n    const {\n      breadcrumb,\n      isBreadcrumbWidthLimited,\n      className,\n      children,\n      header,\n      sidebar,\n      notificationDrawer,\n      isNotificationDrawerExpanded,\n      onNotificationDrawerExpand,\n      isTertiaryNavWidthLimited,\n      skipToContent,\n      role,\n      mainContainerId,\n      isManagedSidebar,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      defaultManagedSidebarIsOpen,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onPageResize,\n      getBreakpoint,\n      mainAriaLabel,\n      mainTabIndex,\n      tertiaryNav,\n      isTertiaryNavGrouped,\n      isBreadcrumbGrouped,\n      additionalGroupedContent,\n      groupProps,\n      ...rest\n    } = this.props;\n    const { mobileView, mobileIsNavOpen, desktopIsNavOpen, width } = this.state;\n\n    const context = {\n      isManagedSidebar,\n      onNavToggle: mobileView ? this.onNavToggleMobile : this.onNavToggleDesktop,\n      isNavOpen: mobileView ? mobileIsNavOpen : desktopIsNavOpen,\n      width,\n      getBreakpoint\n    };\n\n    let nav = null;\n    if (tertiaryNav && isTertiaryNavWidthLimited) {\n      nav = (\n        <div className={css(styles.pageMainNav, styles.modifiers.limitWidth)}>\n          <div className={css(styles.pageMainBody)}>{tertiaryNav}</div>\n        </div>\n      );\n    } else if (tertiaryNav) {\n      nav = <div className={css(styles.pageMainNav)}>{tertiaryNav}</div>;\n    }\n\n    let crumb = null;\n    if (breadcrumb && isBreadcrumbWidthLimited) {\n      crumb = (\n        <section className={css(styles.pageMainBreadcrumb, styles.modifiers.limitWidth)}>\n          <div className={css(styles.pageMainBody)}>{breadcrumb}</div>\n        </section>\n      );\n    } else if (breadcrumb) {\n      crumb = <section className={css(styles.pageMainBreadcrumb)}>{breadcrumb}</section>;\n    }\n\n    const isGrouped = isTertiaryNavGrouped || isBreadcrumbGrouped || additionalGroupedContent;\n\n    const group = isGrouped ? (\n      <PageGroup {...groupProps}>\n        {isTertiaryNavGrouped && nav}\n        {isBreadcrumbGrouped && crumb}\n        {additionalGroupedContent}\n      </PageGroup>\n    ) : null;\n\n    const main = (\n      <main\n        ref={this.mainRef}\n        role={role}\n        id={mainContainerId}\n        className={css(styles.pageMain)}\n        tabIndex={mainTabIndex}\n        aria-label={mainAriaLabel}\n      >\n        {group}\n        {!isTertiaryNavGrouped && nav}\n        {!isBreadcrumbGrouped && crumb}\n        {children}\n      </main>\n    );\n\n    const panelContent = <DrawerPanelContent>{notificationDrawer}</DrawerPanelContent>;\n\n    return (\n      <PageContextProvider value={context}>\n        <div\n          ref={this.pageRef}\n          {...rest}\n          className={css(\n            styles.page,\n            width !== null && 'pf-m-resize-observer',\n            width !== null && `pf-m-breakpoint-${getBreakpoint(width)}`,\n            className\n          )}\n        >\n          {skipToContent}\n          {header}\n          {sidebar}\n          {notificationDrawer && (\n            <div className={css(styles.pageDrawer)}>\n              <Drawer isExpanded={isNotificationDrawerExpanded} onExpand={onNotificationDrawerExpand}>\n                <DrawerContent panelContent={panelContent}>\n                  <DrawerContentBody>{main}</DrawerContentBody>\n                </DrawerContent>\n              </Drawer>\n            </div>\n          )}\n          {!notificationDrawer && main}\n        </div>\n      </PageContextProvider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}