{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport styles from '@patternfly/react-styles/css/components/Label/label';\nimport labelGrpStyles from '@patternfly/react-styles/css/components/LabelGroup/label-group';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nimport { css } from '@patternfly/react-styles';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport { useIsomorphicLayoutEffect } from '../../helpers';\nvar colorStyles = {\n  blue: styles.modifiers.blue,\n  cyan: styles.modifiers.cyan,\n  green: styles.modifiers.green,\n  orange: styles.modifiers.orange,\n  purple: styles.modifiers.purple,\n  red: styles.modifiers.red,\n  gold: styles.modifiers.gold,\n  grey: ''\n};\nexport var Label = function Label(_a) {\n  var children = _a.children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$color = _a.color,\n      color = _a$color === void 0 ? 'grey' : _a$color,\n      _a$variant = _a.variant,\n      variant = _a$variant === void 0 ? 'filled' : _a$variant,\n      _a$isCompact = _a.isCompact,\n      isCompact = _a$isCompact === void 0 ? false : _a$isCompact,\n      _a$isEditable = _a.isEditable,\n      isEditable = _a$isEditable === void 0 ? false : _a$isEditable,\n      editableProps = _a.editableProps,\n      _a$isTruncated = _a.isTruncated,\n      isTruncated = _a$isTruncated === void 0 ? false : _a$isTruncated,\n      tooltipPosition = _a.tooltipPosition,\n      icon = _a.icon,\n      onClose = _a.onClose,\n      onEditCancel = _a.onEditCancel,\n      onEditComplete = _a.onEditComplete,\n      closeBtn = _a.closeBtn,\n      closeBtnAriaLabel = _a.closeBtnAriaLabel,\n      closeBtnProps = _a.closeBtnProps,\n      href = _a.href,\n      isOverflowLabel = _a.isOverflowLabel,\n      render = _a.render,\n      props = __rest(_a, [\"children\", \"className\", \"color\", \"variant\", \"isCompact\", \"isEditable\", \"editableProps\", \"isTruncated\", \"tooltipPosition\", \"icon\", \"onClose\", \"onEditCancel\", \"onEditComplete\", \"closeBtn\", \"closeBtnAriaLabel\", \"closeBtnProps\", \"href\", \"isOverflowLabel\", \"render\"]);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isEditableActive = _useState2[0],\n      setIsEditableActive = _useState2[1];\n\n  var _useState3 = useState(children),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currValue = _useState4[0],\n      setCurrValue = _useState4[1];\n\n  var editableButtonRef = React.useRef();\n  var editableInputRef = React.useRef();\n  React.useEffect(function () {\n    document.addEventListener('mousedown', onDocMouseDown);\n    document.addEventListener('keydown', onKeyDown);\n    return function () {\n      document.removeEventListener('mousedown', onDocMouseDown);\n      document.removeEventListener('keydown', onKeyDown);\n    };\n  });\n\n  var onDocMouseDown = function onDocMouseDown(event) {\n    if (isEditableActive && editableInputRef && editableInputRef.current && !editableInputRef.current.contains(event.target)) {\n      if (editableInputRef.current.value) {\n        onEditComplete && onEditComplete(editableInputRef.current.value);\n      }\n\n      setIsEditableActive(false);\n    }\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    var key = event.key;\n\n    if (!isEditableActive && (!editableButtonRef || !editableButtonRef.current || !editableButtonRef.current.contains(event.target)) || isEditableActive && (!editableInputRef || !editableInputRef.current || !editableInputRef.current.contains(event.target))) {\n      return;\n    }\n\n    if (isEditableActive && (key === 'Enter' || key === 'Tab')) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n\n      if (editableInputRef.current.value) {\n        onEditComplete && onEditComplete(editableInputRef.current.value);\n      }\n\n      setIsEditableActive(false);\n    }\n\n    if (isEditableActive && key === 'Escape') {\n      event.preventDefault();\n      event.stopImmediatePropagation(); // Reset div text to initial children prop - pre-edit\n\n      if (editableInputRef.current.value) {\n        editableInputRef.current.value = children;\n        onEditCancel && onEditCancel(children);\n      }\n\n      setIsEditableActive(false);\n    }\n\n    if (!isEditableActive && key === 'Enter') {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      setIsEditableActive(true); // Set cursor position to end of text\n\n      var el = event.target;\n      var range = document.createRange();\n      var sel = window.getSelection();\n      range.selectNodeContents(el);\n      range.collapse(false);\n      sel.removeAllRanges();\n      sel.addRange(range);\n    }\n  };\n\n  var LabelComponent = isOverflowLabel ? 'button' : 'span';\n  var button = closeBtn ? closeBtn : React.createElement(Button, Object.assign({\n    type: \"button\",\n    variant: \"plain\",\n    onClick: onClose,\n    \"aria-label\": closeBtnAriaLabel || \"Close \".concat(children)\n  }, closeBtnProps), React.createElement(TimesIcon, null));\n  var textRef = React.createRef(); // ref to apply tooltip when rendered is used\n\n  var componentRef = React.useRef();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isTooltipVisible = _React$useState2[0],\n      setIsTooltipVisible = _React$useState2[1];\n\n  useIsomorphicLayoutEffect(function () {\n    var currTextRef = isEditable ? editableButtonRef : textRef;\n\n    if (!isEditableActive) {\n      setIsTooltipVisible(currTextRef.current && currTextRef.current.offsetWidth < currTextRef.current.scrollWidth);\n    }\n  }, [isEditableActive]);\n  var content = React.createElement(React.Fragment, null, icon && React.createElement(\"span\", {\n    className: css(styles.labelIcon)\n  }, icon), isTruncated && React.createElement(\"span\", {\n    ref: textRef,\n    className: css(styles.labelText)\n  }, children), !isTruncated && children);\n  React.useEffect(function () {\n    if (isEditableActive && editableInputRef) {\n      editableInputRef.current && editableInputRef.current.focus();\n    }\n  }, [editableInputRef, isEditableActive]);\n\n  var updateVal = function updateVal() {\n    setCurrValue(editableInputRef.current.value);\n  };\n\n  var labelComponentChild = React.createElement(\"span\", {\n    className: css(styles.labelContent)\n  }, content);\n\n  if (href) {\n    labelComponentChild = React.createElement(\"a\", {\n      className: css(styles.labelContent),\n      href: href\n    }, content);\n  } else if (isEditable) {\n    labelComponentChild = React.createElement(\"button\", Object.assign({\n      ref: editableButtonRef,\n      className: css(styles.labelContent),\n      onClick: function onClick(e) {\n        setIsEditableActive(true);\n        e.stopPropagation();\n      }\n    }, editableProps), content);\n  }\n\n  if (render) {\n    labelComponentChild = React.createElement(React.Fragment, null, isTooltipVisible && React.createElement(Tooltip, {\n      reference: componentRef,\n      content: children,\n      position: tooltipPosition\n    }), render({\n      className: styles.labelContent,\n      content: content,\n      componentRef: componentRef\n    }));\n  } else if (isTooltipVisible) {\n    labelComponentChild = React.createElement(Tooltip, {\n      content: children,\n      position: tooltipPosition\n    }, labelComponentChild);\n  }\n\n  return React.createElement(LabelComponent, Object.assign({}, props, {\n    className: css(styles.label, colorStyles[color], variant === 'outline' && styles.modifiers.outline, isOverflowLabel && styles.modifiers.overflow, isCompact && styles.modifiers.compact, isEditable && labelGrpStyles.modifiers.editable, isEditableActive && styles.modifiers.editableActive, className)\n  }), !isEditableActive && labelComponentChild, !isEditableActive && onClose && button, isEditableActive && React.createElement(\"input\", Object.assign({\n    className: css(styles.labelContent),\n    type: \"text\",\n    id: \"editable-input\",\n    ref: editableInputRef,\n    value: currValue,\n    onChange: updateVal\n  }, editableProps)));\n};\nLabel.displayName = 'Label';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Label/Label.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport styles from '@patternfly/react-styles/css/components/Label/label';\nimport labelGrpStyles from '@patternfly/react-styles/css/components/LabelGroup/label-group';\nimport { Button } from '../Button';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport { css } from '@patternfly/react-styles';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport { useIsomorphicLayoutEffect } from '../../helpers';\n\nexport interface LabelProps extends React.HTMLProps<HTMLSpanElement> {\n  /** Content rendered inside the label. */\n  children?: React.ReactNode;\n  /** Additional classes added to the label. */\n  className?: string;\n  /** Color of the label. */\n  color?: 'blue' | 'cyan' | 'green' | 'orange' | 'purple' | 'red' | 'grey' | 'gold';\n  /** Variant of the label. */\n  variant?: 'outline' | 'filled';\n  /** Flag indicating the label is compact. */\n  isCompact?: boolean;\n  /** @beta Flag indicating the label is editable. */\n  isEditable?: boolean;\n  /** @beta Additional props passed to the editable label text div. Optionally passing onInput and onBlur callbacks will allow finer custom text input control. */\n  editableProps?: any;\n  /** @beta Callback when an editable label completes an edit. */\n  onEditComplete?: (newText: string) => void;\n  /** @beta Callback when an editable label cancels an edit. */\n  onEditCancel?: (previousText: string) => void;\n  /** Flag indicating the label text should be truncated. */\n  isTruncated?: boolean;\n  /** Position of the tooltip which is displayed if text is truncated */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** Icon added to the left of the label text. */\n  icon?: React.ReactNode;\n  /** Close click callback for removable labels. If present, label will have a close button. */\n  onClose?: (event: React.MouseEvent) => void;\n  /** Node for custom close button. */\n  closeBtn?: React.ReactNode;\n  /** Aria label for close button */\n  closeBtnAriaLabel?: string;\n  /** Additional properties for the default close button. */\n  closeBtnProps?: any;\n  /** Href for a label that is a link. If present, the label will change to an anchor element. */\n  href?: string;\n  /** Flag indicating if the label is an overflow label */\n  isOverflowLabel?: boolean;\n  /** Forwards the label content and className to rendered function.  Use this prop for react router support.*/\n  render?: ({\n    className,\n    content,\n    componentRef\n  }: {\n    className: string;\n    content: React.ReactNode;\n    componentRef: any;\n  }) => React.ReactNode;\n}\n\nconst colorStyles = {\n  blue: styles.modifiers.blue,\n  cyan: styles.modifiers.cyan,\n  green: styles.modifiers.green,\n  orange: styles.modifiers.orange,\n  purple: styles.modifiers.purple,\n  red: styles.modifiers.red,\n  gold: styles.modifiers.gold,\n  grey: ''\n};\n\nexport const Label: React.FunctionComponent<LabelProps> = ({\n  children,\n  className = '',\n  color = 'grey',\n  variant = 'filled',\n  isCompact = false,\n  isEditable = false,\n  editableProps,\n  isTruncated = false,\n  tooltipPosition,\n  icon,\n  onClose,\n  onEditCancel,\n  onEditComplete,\n  closeBtn,\n  closeBtnAriaLabel,\n  closeBtnProps,\n  href,\n  isOverflowLabel,\n  render,\n  ...props\n}: LabelProps) => {\n  const [isEditableActive, setIsEditableActive] = useState(false);\n  const [currValue, setCurrValue] = useState(children);\n  const editableButtonRef = React.useRef<HTMLButtonElement>();\n  const editableInputRef = React.useRef<HTMLInputElement>();\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocMouseDown);\n    document.addEventListener('keydown', onKeyDown);\n    return () => {\n      document.removeEventListener('mousedown', onDocMouseDown);\n      document.removeEventListener('keydown', onKeyDown);\n    };\n  });\n\n  const onDocMouseDown = (event: MouseEvent) => {\n    if (\n      isEditableActive &&\n      editableInputRef &&\n      editableInputRef.current &&\n      !editableInputRef.current.contains(event.target as Node)\n    ) {\n      if (editableInputRef.current.value) {\n        onEditComplete && onEditComplete(editableInputRef.current.value);\n      }\n      setIsEditableActive(false);\n    }\n  };\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const key = event.key;\n    if (\n      (!isEditableActive &&\n        (!editableButtonRef ||\n          !editableButtonRef.current ||\n          !editableButtonRef.current.contains(event.target as Node))) ||\n      (isEditableActive &&\n        (!editableInputRef || !editableInputRef.current || !editableInputRef.current.contains(event.target as Node)))\n    ) {\n      return;\n    }\n    if (isEditableActive && (key === 'Enter' || key === 'Tab')) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      if (editableInputRef.current.value) {\n        onEditComplete && onEditComplete(editableInputRef.current.value);\n      }\n      setIsEditableActive(false);\n    }\n    if (isEditableActive && key === 'Escape') {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      // Reset div text to initial children prop - pre-edit\n      if (editableInputRef.current.value) {\n        editableInputRef.current.value = children as string;\n        onEditCancel && onEditCancel(children as string);\n      }\n      setIsEditableActive(false);\n    }\n    if (!isEditableActive && key === 'Enter') {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      setIsEditableActive(true);\n\n      // Set cursor position to end of text\n      const el = event.target as HTMLElement;\n      const range = document.createRange();\n      const sel = window.getSelection();\n      range.selectNodeContents(el);\n      range.collapse(false);\n      sel.removeAllRanges();\n      sel.addRange(range);\n    }\n  };\n\n  const LabelComponent = (isOverflowLabel ? 'button' : 'span') as any;\n\n  const button = closeBtn ? (\n    closeBtn\n  ) : (\n    <Button\n      type=\"button\"\n      variant=\"plain\"\n      onClick={onClose}\n      aria-label={closeBtnAriaLabel || `Close ${children}`}\n      {...closeBtnProps}\n    >\n      <TimesIcon />\n    </Button>\n  );\n  const textRef = React.createRef<any>();\n  // ref to apply tooltip when rendered is used\n  const componentRef = React.useRef();\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  useIsomorphicLayoutEffect(() => {\n    const currTextRef = isEditable ? editableButtonRef : textRef;\n    if (!isEditableActive) {\n      setIsTooltipVisible(currTextRef.current && currTextRef.current.offsetWidth < currTextRef.current.scrollWidth);\n    }\n  }, [isEditableActive]);\n  const content = (\n    <React.Fragment>\n      {icon && <span className={css(styles.labelIcon)}>{icon}</span>}\n      {isTruncated && (\n        <span ref={textRef} className={css(styles.labelText)}>\n          {children}\n        </span>\n      )}\n      {!isTruncated && children}\n    </React.Fragment>\n  );\n\n  React.useEffect(() => {\n    if (isEditableActive && editableInputRef) {\n      editableInputRef.current && editableInputRef.current.focus();\n    }\n  }, [editableInputRef, isEditableActive]);\n\n  const updateVal = () => {\n    setCurrValue(editableInputRef.current.value);\n  };\n\n  let labelComponentChild = <span className={css(styles.labelContent)}>{content}</span>;\n\n  if (href) {\n    labelComponentChild = (\n      <a className={css(styles.labelContent)} href={href}>\n        {content}\n      </a>\n    );\n  } else if (isEditable) {\n    labelComponentChild = (\n      <button\n        ref={editableButtonRef}\n        className={css(styles.labelContent)}\n        onClick={(e: React.MouseEvent) => {\n          setIsEditableActive(true);\n          e.stopPropagation();\n        }}\n        {...editableProps}\n      >\n        {content}\n      </button>\n    );\n  }\n\n  if (render) {\n    labelComponentChild = (\n      <React.Fragment>\n        {isTooltipVisible && <Tooltip reference={componentRef} content={children} position={tooltipPosition} />}\n        {render({\n          className: styles.labelContent,\n          content,\n          componentRef\n        })}\n      </React.Fragment>\n    );\n  } else if (isTooltipVisible) {\n    labelComponentChild = (\n      <Tooltip content={children} position={tooltipPosition}>\n        {labelComponentChild}\n      </Tooltip>\n    );\n  }\n\n  return (\n    <LabelComponent\n      {...props}\n      className={css(\n        styles.label,\n        colorStyles[color],\n        variant === 'outline' && styles.modifiers.outline,\n        isOverflowLabel && styles.modifiers.overflow,\n        isCompact && styles.modifiers.compact,\n        isEditable && labelGrpStyles.modifiers.editable,\n        isEditableActive && styles.modifiers.editableActive,\n        className\n      )}\n    >\n      {!isEditableActive && labelComponentChild}\n      {!isEditableActive && onClose && button}\n      {isEditableActive && (\n        <input\n          className={css(styles.labelContent)}\n          type=\"text\"\n          id=\"editable-input\"\n          ref={editableInputRef}\n          value={currValue}\n          onChange={updateVal}\n          {...editableProps}\n        />\n      )}\n    </LabelComponent>\n  );\n};\nLabel.displayName = 'Label';\n"]},"metadata":{},"sourceType":"module"}