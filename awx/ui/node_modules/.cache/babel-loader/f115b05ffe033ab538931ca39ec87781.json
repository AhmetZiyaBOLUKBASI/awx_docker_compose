{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nexport var OptionsMenuToggleWithText = function OptionsMenuToggleWithText(_a) {\n  var _a$parentId = _a.parentId,\n      parentId = _a$parentId === void 0 ? '' : _a$parentId,\n      toggleText = _a.toggleText,\n      _a$toggleTextClassNam = _a.toggleTextClassName,\n      toggleTextClassName = _a$toggleTextClassNam === void 0 ? '' : _a$toggleTextClassNam,\n      toggleButtonContents = _a.toggleButtonContents,\n      _a$toggleButtonConten = _a.toggleButtonContentsClassName,\n      toggleButtonContentsClassName = _a$toggleButtonConten === void 0 ? '' : _a$toggleButtonConten,\n      _a$onToggle = _a.onToggle,\n      onToggle = _a$onToggle === void 0 ? function () {\n    return null;\n  } : _a$onToggle,\n      _a$isOpen = _a.isOpen,\n      isOpen = _a$isOpen === void 0 ? false : _a$isOpen,\n      _a$isPlain = _a.isPlain,\n      isPlain = _a$isPlain === void 0 ? false : _a$isPlain,\n      _a$isText = _a.isText,\n      isText = _a$isText === void 0 ? true : _a$isText,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      _a$isActive = _a.isActive,\n      isActive = _a$isActive === void 0 ? false : _a$isActive,\n      ariaHasPopup = _a['aria-haspopup'],\n      parentRef = _a.parentRef,\n      getMenuRef = _a.getMenuRef,\n      onEnter = _a.onEnter,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? 'Options menu' : _a$ariaLabel,\n      props = __rest(_a, [\"parentId\", \"toggleText\", \"toggleTextClassName\", \"toggleButtonContents\", \"toggleButtonContentsClassName\", \"onToggle\", \"isOpen\", \"isPlain\", \"isText\", \"isDisabled\", \"isActive\", 'aria-haspopup', \"parentRef\", \"getMenuRef\", \"onEnter\", 'aria-label']);\n\n  var buttonRef = React.useRef();\n  React.useEffect(function () {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n    return function () {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n\n  var onDocClick = function onDocClick(event) {\n    if (isOpen && parentRef && parentRef.current && !parentRef.current.contains(event.target)) {\n      onToggle(false);\n      buttonRef.current.focus();\n    }\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    if (event.key === 'Tab' && !isOpen) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if ((event.key === 'Enter' || event.key === ' ') && isOpen) {\n      onToggle(!isOpen);\n    } else if ((event.key === 'Enter' || event.key === ' ') && !isOpen) {\n      onToggle(!isOpen);\n      onEnter(event);\n    }\n  };\n\n  var onEscPress = function onEscPress(event) {\n    var keyCode = event.keyCode || event.which;\n\n    if (isOpen && (keyCode === KEY_CODES.ESCAPE_KEY || event.key === 'Tab') && parentRef && parentRef.current && parentRef.current.contains(event.target)) {\n      onToggle(false);\n      buttonRef.current.focus();\n    }\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.optionsMenuToggle, styles.modifiers.text, isPlain && styles.modifiers.plain, isDisabled && styles.modifiers.disabled, isActive && styles.modifiers.active)\n  }, props), React.createElement(\"span\", {\n    className: css(styles.optionsMenuToggleText, toggleTextClassName)\n  }, toggleText), React.createElement(\"button\", {\n    className: css(styles.optionsMenuToggleButton, toggleButtonContentsClassName),\n    id: \"\".concat(parentId, \"-toggle\"),\n    \"aria-haspopup\": \"listbox\",\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": isOpen,\n    ref: buttonRef,\n    disabled: isDisabled,\n    onClick: function onClick() {\n      return onToggle(!isOpen);\n    },\n    onKeyDown: onKeyDown\n  }, React.createElement(\"span\", {\n    className: css(styles.optionsMenuToggleButtonIcon)\n  }, toggleButtonContents)));\n};\nOptionsMenuToggleWithText.displayName = 'OptionsMenuToggleWithText';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/OptionsMenu/OptionsMenuToggleWithText.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,SAAT,QAA0B,yBAA1B;AACA,OAAO,MAAP,MAAmB,kEAAnB;AAqCA,OAAO,IAAM,yBAAyB,GAA4D,SAArF,yBAAqF,CAAC,EAAD,EAsB7D;AAtB8D,oBAoBzD,EApByD,CACjG,QADiG;AAAA,MACjG,QADiG,4BACtF,EADsF;AAAA,MAEjG,UAFiG,GAoBzD,EApByD,CAEjG,UAFiG;AAAA,8BAoBzD,EApByD,CAGjG,mBAHiG;AAAA,MAGjG,mBAHiG,sCAG3E,EAH2E;AAAA,MAIjG,oBAJiG,GAoBzD,EApByD,CAIjG,oBAJiG;AAAA,8BAoBzD,EApByD,CAKjG,6BALiG;AAAA,MAKjG,6BALiG,sCAKjE,EALiE;AAAA,oBAoBzD,EApByD,CAMjG,QANiG;AAAA,MAMjG,QANiG,4BAMtF;AAAA,WAAM,IAAN;AAAA,GANsF;AAAA,kBAoBzD,EApByD,CAOjG,MAPiG;AAAA,MAOjG,MAPiG,0BAOxF,KAPwF;AAAA,mBAoBzD,EApByD,CAQjG,OARiG;AAAA,MAQjG,OARiG,2BAQvF,KARuF;AAAA,kBAoBzD,EApByD,CAUjG,MAViG;AAAA,MAUjG,MAViG,0BAUxF,IAVwF;AAAA,sBAoBzD,EApByD,CAWjG,UAXiG;AAAA,MAWjG,UAXiG,8BAWpF,KAXoF;AAAA,oBAoBzD,EApByD,CAajG,QAbiG;AAAA,MAajG,QAbiG,4BAatF,KAbsF;AAAA,MAchF,YAdgF,GAoBzD,EApByD,CAcjG,eAdiG;AAAA,MAejG,SAfiG,GAoBzD,EApByD,CAejG,SAfiG;AAAA,MAiBjG,UAjBiG,GAoBzD,EApByD,CAiBjG,UAjBiG;AAAA,MAkBjG,OAlBiG,GAoBzD,EApByD,CAkBjG,OAlBiG;AAAA,qBAoBzD,EApByD,CAoBjG,YApBiG;AAAA,MAoBnF,SApBmF,6BAoBvE,cApBuE;AAAA,MAqB9F,KArB8F,GAqBzF,MAAA,CAAA,EAAA,EArByF,CAAA,UAAA,EAAA,YAAA,EAAA,qBAAA,EAAA,sBAAA,EAAA,+BAAA,EAAA,UAAA,EAAA,QAAA,EAAA,SAAA,EAAA,QAAA,EAAA,YAAA,EAAA,UAAA,EAAA,eAAA,EAAA,WAAA,EAAA,YAAA,EAAA,SAAA,EAAA,YAAA,CAqBzF,CArByF;;AAuBjG,MAAM,SAAS,GAAG,KAAK,CAAC,MAAN,EAAlB;AAEA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAK;AACnB,IAAA,QAAQ,CAAC,gBAAT,CAA0B,WAA1B,EAAuC,UAAvC;AACA,IAAA,QAAQ,CAAC,gBAAT,CAA0B,YAA1B,EAAwC,UAAxC;AACA,IAAA,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,UAArC;AACA,WAAO,YAAK;AACV,MAAA,QAAQ,CAAC,mBAAT,CAA6B,WAA7B,EAA0C,UAA1C;AACA,MAAA,QAAQ,CAAC,mBAAT,CAA6B,YAA7B,EAA2C,UAA3C;AACA,MAAA,QAAQ,CAAC,mBAAT,CAA6B,SAA7B,EAAwC,UAAxC;AACD,KAJD;AAKD,GATD;;AAWA,MAAM,UAAU,GAAG,SAAb,UAAa,CAAC,KAAD,EAAmC;AACpD,QAAI,MAAM,IAAI,SAAV,IAAuB,SAAS,CAAC,OAAjC,IAA4C,CAAC,SAAS,CAAC,OAAV,CAAkB,QAAlB,CAA2B,KAAK,CAAC,MAAjC,CAAjD,EAAmG;AACjG,MAAA,QAAQ,CAAC,KAAD,CAAR;AACA,MAAA,SAAS,CAAC,OAAV,CAAkB,KAAlB;AACD;AACF,GALD;;AAOA,MAAM,SAAS,GAAG,SAAZ,SAAY,CAAC,KAAD,EAAoC;AACpD,QAAI,KAAK,CAAC,GAAN,KAAc,KAAd,IAAuB,CAAC,MAA5B,EAAoC;AAClC;AACD;;AACD,IAAA,KAAK,CAAC,cAAN;;AACA,QAAI,CAAC,KAAK,CAAC,GAAN,KAAc,OAAd,IAAyB,KAAK,CAAC,GAAN,KAAc,GAAxC,KAAgD,MAApD,EAA4D;AAC1D,MAAA,QAAQ,CAAC,CAAC,MAAF,CAAR;AACD,KAFD,MAEO,IAAI,CAAC,KAAK,CAAC,GAAN,KAAc,OAAd,IAAyB,KAAK,CAAC,GAAN,KAAc,GAAxC,KAAgD,CAAC,MAArD,EAA6D;AAClE,MAAA,QAAQ,CAAC,CAAC,MAAF,CAAR;AACA,MAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,GAXD;;AAaA,MAAM,UAAU,GAAG,SAAb,UAAa,CAAC,KAAD,EAAyB;AAC1C,QAAM,OAAO,GAAG,KAAK,CAAC,OAAN,IAAiB,KAAK,CAAC,KAAvC;;AACA,QACE,MAAM,KACL,OAAO,KAAK,SAAS,CAAC,UAAtB,IAAoC,KAAK,CAAC,GAAN,KAAc,KAD7C,CAAN,IAEA,SAFA,IAGA,SAAS,CAAC,OAHV,IAIA,SAAS,CAAC,OAAV,CAAkB,QAAlB,CAA2B,KAAK,CAAC,MAAjC,CALF,EAME;AACA,MAAA,QAAQ,CAAC,KAAD,CAAR;AACA,MAAA,SAAS,CAAC,OAAV,CAAkB,KAAlB;AACD;AACF,GAZD;;AAcA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,iBADK,EAEZ,MAAM,CAAC,SAAP,CAAiB,IAFL,EAGZ,OAAO,IAAI,MAAM,CAAC,SAAP,CAAiB,KAHhB,EAIZ,UAAU,IAAI,MAAM,CAAC,SAAP,CAAiB,QAJnB,EAKZ,QAAQ,IAAI,MAAM,CAAC,SAAP,CAAiB,MALjB;AADhB,GAAA,EAQM,KARN,CAAA,EAUE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,qBAAR,EAA+B,mBAA/B;AAApB,GAAA,EAA0E,UAA1E,CAVF,EAWE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACE,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,uBAAR,EAAiC,6BAAjC,CADhB;AAEE,IAAA,EAAE,YAAK,QAAL,YAFJ;AAE0B,qBACV,SAHhB;AAGyB,kBACX,SAJd;AAIuB,qBACN,MALjB;AAME,IAAA,GAAG,EAAE,SANP;AAOE,IAAA,QAAQ,EAAE,UAPZ;AAQE,IAAA,OAAO,EAAE;AAAA,aAAM,QAAQ,CAAC,CAAC,MAAF,CAAd;AAAA,KARX;AASE,IAAA,SAAS,EAAE;AATb,GAAA,EAWE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,2BAAR;AAApB,GAAA,EAA2D,oBAA3D,CAXF,CAXF,CADF;AA2BD,CAjGM;AAkGP,yBAAyB,CAAC,WAA1B,GAAwC,2BAAxC","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\n\nexport interface OptionsMenuToggleWithTextProps extends React.HTMLProps<HTMLDivElement> {\n  /** Id of the parent options menu component */\n  parentId?: string;\n  /** Content to be rendered inside the options menu toggle as text or another non-interactive element */\n  toggleText: React.ReactNode;\n  /** classes to be added to the options menu toggle text */\n  toggleTextClassName?: string;\n  /** Content to be rendered inside the options menu toggle button */\n  toggleButtonContents?: React.ReactNode;\n  /** Classes to be added to the options menu toggle button */\n  toggleButtonContentsClassName?: string;\n  /** Callback for when this options menu is toggled */\n  onToggle?: (event: boolean) => void;\n  /** Inner function to indicate open on Enter */\n  onEnter?: (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<Element>) => void;\n  /** Flag to indicate if menu is open */\n  isOpen?: boolean;\n  /** Flag to indicate if the button is plain */\n  isPlain?: boolean;\n  /** Forces display of the active state of the options menu button */\n  isActive?: boolean;\n  /** Disables the options menu toggle */\n  isDisabled?: boolean;\n  /** @hide Internal parent reference */\n  parentRef?: React.RefObject<HTMLElement>;\n  /** Indicates that the element has a popup context menu or sub-level menu */\n  'aria-haspopup'?: boolean | 'dialog' | 'menu' | 'listbox' | 'tree' | 'grid';\n  /** Provides an accessible name for the button when an icon is used instead of text */\n  'aria-label'?: string;\n  /** @hide Display the toggle in text only mode. */\n  isText?: boolean;\n  /** @hide The menu element */\n  getMenuRef?: () => HTMLElement;\n}\n\nexport const OptionsMenuToggleWithText: React.FunctionComponent<OptionsMenuToggleWithTextProps> = ({\n  parentId = '',\n  toggleText,\n  toggleTextClassName = '',\n  toggleButtonContents,\n  toggleButtonContentsClassName = '',\n  onToggle = () => null as any,\n  isOpen = false,\n  isPlain = false,\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  isText = true,\n  isDisabled = false,\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  isActive = false,\n  'aria-haspopup': ariaHasPopup,\n  parentRef,\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  getMenuRef,\n  onEnter,\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n  'aria-label': ariaLabel = 'Options menu',\n  ...props\n}: OptionsMenuToggleWithTextProps) => {\n  const buttonRef = React.useRef<HTMLButtonElement>();\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n    return () => {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n\n  const onDocClick = (event: MouseEvent | TouchEvent) => {\n    if (isOpen && parentRef && parentRef.current && !parentRef.current.contains(event.target as Node)) {\n      onToggle(false);\n      buttonRef.current.focus();\n    }\n  };\n\n  const onKeyDown = (event: React.KeyboardEvent<any>) => {\n    if (event.key === 'Tab' && !isOpen) {\n      return;\n    }\n    event.preventDefault();\n    if ((event.key === 'Enter' || event.key === ' ') && isOpen) {\n      onToggle(!isOpen);\n    } else if ((event.key === 'Enter' || event.key === ' ') && !isOpen) {\n      onToggle(!isOpen);\n      onEnter(event);\n    }\n  };\n\n  const onEscPress = (event: KeyboardEvent) => {\n    const keyCode = event.keyCode || event.which;\n    if (\n      isOpen &&\n      (keyCode === KEY_CODES.ESCAPE_KEY || event.key === 'Tab') &&\n      parentRef &&\n      parentRef.current &&\n      parentRef.current.contains(event.target as Node)\n    ) {\n      onToggle(false);\n      buttonRef.current.focus();\n    }\n  };\n\n  return (\n    <div\n      className={css(\n        styles.optionsMenuToggle,\n        styles.modifiers.text,\n        isPlain && styles.modifiers.plain,\n        isDisabled && styles.modifiers.disabled,\n        isActive && styles.modifiers.active\n      )}\n      {...props}\n    >\n      <span className={css(styles.optionsMenuToggleText, toggleTextClassName)}>{toggleText}</span>\n      <button\n        className={css(styles.optionsMenuToggleButton, toggleButtonContentsClassName)}\n        id={`${parentId}-toggle`}\n        aria-haspopup=\"listbox\"\n        aria-label={ariaLabel}\n        aria-expanded={isOpen}\n        ref={buttonRef}\n        disabled={isDisabled}\n        onClick={() => onToggle(!isOpen)}\n        onKeyDown={onKeyDown}\n      >\n        <span className={css(styles.optionsMenuToggleButtonIcon)}>{toggleButtonContents}</span>\n      </button>\n    </div>\n  );\n};\nOptionsMenuToggleWithText.displayName = 'OptionsMenuToggleWithText';\n"]},"metadata":{},"sourceType":"module"}