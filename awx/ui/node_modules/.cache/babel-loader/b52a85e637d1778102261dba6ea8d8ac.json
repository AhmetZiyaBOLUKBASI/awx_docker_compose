{"ast":null,"code":"import _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _createForOfIteratorHelper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport * as English from \"./english.js\";\nimport * as Formats from \"./formats.js\";\nimport { padStart } from \"./util.js\";\n\nfunction stringifyTokens(splits, tokenToString) {\n  var s = \"\";\n\n  var _iterator = _createForOfIteratorHelper(splits),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var token = _step.value;\n\n      if (token.literal) {\n        s += token.val;\n      } else {\n        s += tokenToString(token.val);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return s;\n}\n\nvar _macroTokenToFormatOpts = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS\n};\n/**\n * @private\n */\n\nvar Formatter = /*#__PURE__*/function () {\n  function Formatter(locale, formatOpts) {\n    _classCallCheck(this, Formatter);\n\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  _createClass(Formatter, [{\n    key: \"formatWithSystemDefault\",\n    value: function formatWithSystemDefault(dt, opts) {\n      if (this.systemLoc === null) {\n        this.systemLoc = this.loc.redefaultToSystem();\n      }\n\n      var df = this.systemLoc.dtFormatter(dt, _objectSpread(_objectSpread({}, this.opts), opts));\n      return df.format();\n    }\n  }, {\n    key: \"formatDateTime\",\n    value: function formatDateTime(dt) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var df = this.loc.dtFormatter(dt, _objectSpread(_objectSpread({}, this.opts), opts));\n      return df.format();\n    }\n  }, {\n    key: \"formatDateTimeParts\",\n    value: function formatDateTimeParts(dt) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var df = this.loc.dtFormatter(dt, _objectSpread(_objectSpread({}, this.opts), opts));\n      return df.formatToParts();\n    }\n  }, {\n    key: \"resolvedOptions\",\n    value: function resolvedOptions(dt) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var df = this.loc.dtFormatter(dt, _objectSpread(_objectSpread({}, this.opts), opts));\n      return df.resolvedOptions();\n    }\n  }, {\n    key: \"num\",\n    value: function num(n) {\n      var p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      // we get some perf out of doing this here, annoyingly\n      if (this.opts.forceSimple) {\n        return padStart(n, p);\n      }\n\n      var opts = _objectSpread({}, this.opts);\n\n      if (p > 0) {\n        opts.padTo = p;\n      }\n\n      return this.loc.numberFormatter(opts).format(n);\n    }\n  }, {\n    key: \"formatDateTimeFromString\",\n    value: function formatDateTimeFromString(dt, fmt) {\n      var _this = this;\n\n      var knownEnglish = this.loc.listingMode() === \"en\",\n          useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\",\n          string = function string(opts, extract) {\n        return _this.loc.extract(dt, opts, extract);\n      },\n          formatOffset = function formatOffset(opts) {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return \"Z\";\n        }\n\n        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\n      },\n          meridiem = function meridiem() {\n        return knownEnglish ? English.meridiemForDateTime(dt) : string({\n          hour: \"numeric\",\n          hourCycle: \"h12\"\n        }, \"dayperiod\");\n      },\n          month = function month(length, standalone) {\n        return knownEnglish ? English.monthForDateTime(dt, length) : string(standalone ? {\n          month: length\n        } : {\n          month: length,\n          day: \"numeric\"\n        }, \"month\");\n      },\n          weekday = function weekday(length, standalone) {\n        return knownEnglish ? English.weekdayForDateTime(dt, length) : string(standalone ? {\n          weekday: length\n        } : {\n          weekday: length,\n          month: \"long\",\n          day: \"numeric\"\n        }, \"weekday\");\n      },\n          maybeMacro = function maybeMacro(token) {\n        var formatOpts = Formatter.macroTokenToFormatOpts(token);\n\n        if (formatOpts) {\n          return _this.formatWithSystemDefault(dt, formatOpts);\n        } else {\n          return token;\n        }\n      },\n          era = function era(length) {\n        return knownEnglish ? English.eraForDateTime(dt, length) : string({\n          era: length\n        }, \"era\");\n      },\n          tokenToString = function tokenToString(token) {\n        // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case \"S\":\n            return _this.num(dt.millisecond);\n\n          case \"u\": // falls through\n\n          case \"SSS\":\n            return _this.num(dt.millisecond, 3);\n          // seconds\n\n          case \"s\":\n            return _this.num(dt.second);\n\n          case \"ss\":\n            return _this.num(dt.second, 2);\n          // fractional seconds\n\n          case \"uu\":\n            return _this.num(Math.floor(dt.millisecond / 10), 2);\n\n          case \"uuu\":\n            return _this.num(Math.floor(dt.millisecond / 100));\n          // minutes\n\n          case \"m\":\n            return _this.num(dt.minute);\n\n          case \"mm\":\n            return _this.num(dt.minute, 2);\n          // hours\n\n          case \"h\":\n            return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n\n          case \"hh\":\n            return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n\n          case \"H\":\n            return _this.num(dt.hour);\n\n          case \"HH\":\n            return _this.num(dt.hour, 2);\n          // offset\n\n          case \"Z\":\n            // like +6\n            return formatOffset({\n              format: \"narrow\",\n              allowZ: _this.opts.allowZ\n            });\n\n          case \"ZZ\":\n            // like +06:00\n            return formatOffset({\n              format: \"short\",\n              allowZ: _this.opts.allowZ\n            });\n\n          case \"ZZZ\":\n            // like +0600\n            return formatOffset({\n              format: \"techie\",\n              allowZ: _this.opts.allowZ\n            });\n\n          case \"ZZZZ\":\n            // like EST\n            return dt.zone.offsetName(dt.ts, {\n              format: \"short\",\n              locale: _this.loc.locale\n            });\n\n          case \"ZZZZZ\":\n            // like Eastern Standard Time\n            return dt.zone.offsetName(dt.ts, {\n              format: \"long\",\n              locale: _this.loc.locale\n            });\n          // zone\n\n          case \"z\":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n\n          case \"a\":\n            return meridiem();\n          // dates\n\n          case \"d\":\n            return useDateTimeFormatter ? string({\n              day: \"numeric\"\n            }, \"day\") : _this.num(dt.day);\n\n          case \"dd\":\n            return useDateTimeFormatter ? string({\n              day: \"2-digit\"\n            }, \"day\") : _this.num(dt.day, 2);\n          // weekdays - standalone\n\n          case \"c\":\n            // like 1\n            return _this.num(dt.weekday);\n\n          case \"ccc\":\n            // like 'Tues'\n            return weekday(\"short\", true);\n\n          case \"cccc\":\n            // like 'Tuesday'\n            return weekday(\"long\", true);\n\n          case \"ccccc\":\n            // like 'T'\n            return weekday(\"narrow\", true);\n          // weekdays - format\n\n          case \"E\":\n            // like 1\n            return _this.num(dt.weekday);\n\n          case \"EEE\":\n            // like 'Tues'\n            return weekday(\"short\", false);\n\n          case \"EEEE\":\n            // like 'Tuesday'\n            return weekday(\"long\", false);\n\n          case \"EEEEE\":\n            // like 'T'\n            return weekday(\"narrow\", false);\n          // months - standalone\n\n          case \"L\":\n            // like 1\n            return useDateTimeFormatter ? string({\n              month: \"numeric\",\n              day: \"numeric\"\n            }, \"month\") : _this.num(dt.month);\n\n          case \"LL\":\n            // like 01, doesn't seem to work\n            return useDateTimeFormatter ? string({\n              month: \"2-digit\",\n              day: \"numeric\"\n            }, \"month\") : _this.num(dt.month, 2);\n\n          case \"LLL\":\n            // like Jan\n            return month(\"short\", true);\n\n          case \"LLLL\":\n            // like January\n            return month(\"long\", true);\n\n          case \"LLLLL\":\n            // like J\n            return month(\"narrow\", true);\n          // months - format\n\n          case \"M\":\n            // like 1\n            return useDateTimeFormatter ? string({\n              month: \"numeric\"\n            }, \"month\") : _this.num(dt.month);\n\n          case \"MM\":\n            // like 01\n            return useDateTimeFormatter ? string({\n              month: \"2-digit\"\n            }, \"month\") : _this.num(dt.month, 2);\n\n          case \"MMM\":\n            // like Jan\n            return month(\"short\", false);\n\n          case \"MMMM\":\n            // like January\n            return month(\"long\", false);\n\n          case \"MMMMM\":\n            // like J\n            return month(\"narrow\", false);\n          // years\n\n          case \"y\":\n            // like 2014\n            return useDateTimeFormatter ? string({\n              year: \"numeric\"\n            }, \"year\") : _this.num(dt.year);\n\n          case \"yy\":\n            // like 14\n            return useDateTimeFormatter ? string({\n              year: \"2-digit\"\n            }, \"year\") : _this.num(dt.year.toString().slice(-2), 2);\n\n          case \"yyyy\":\n            // like 0012\n            return useDateTimeFormatter ? string({\n              year: \"numeric\"\n            }, \"year\") : _this.num(dt.year, 4);\n\n          case \"yyyyyy\":\n            // like 000012\n            return useDateTimeFormatter ? string({\n              year: \"numeric\"\n            }, \"year\") : _this.num(dt.year, 6);\n          // eras\n\n          case \"G\":\n            // like AD\n            return era(\"short\");\n\n          case \"GG\":\n            // like Anno Domini\n            return era(\"long\");\n\n          case \"GGGGG\":\n            return era(\"narrow\");\n\n          case \"kk\":\n            return _this.num(dt.weekYear.toString().slice(-2), 2);\n\n          case \"kkkk\":\n            return _this.num(dt.weekYear, 4);\n\n          case \"W\":\n            return _this.num(dt.weekNumber);\n\n          case \"WW\":\n            return _this.num(dt.weekNumber, 2);\n\n          case \"o\":\n            return _this.num(dt.ordinal);\n\n          case \"ooo\":\n            return _this.num(dt.ordinal, 3);\n\n          case \"q\":\n            // like 1\n            return _this.num(dt.quarter);\n\n          case \"qq\":\n            // like 01\n            return _this.num(dt.quarter, 2);\n\n          case \"X\":\n            return _this.num(Math.floor(dt.ts / 1000));\n\n          case \"x\":\n            return _this.num(dt.ts);\n\n          default:\n            return maybeMacro(token);\n        }\n      };\n\n      return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n    }\n  }, {\n    key: \"formatDurationFromString\",\n    value: function formatDurationFromString(dur, fmt) {\n      var _this2 = this;\n\n      var tokenToField = function tokenToField(token) {\n        switch (token[0]) {\n          case \"S\":\n            return \"millisecond\";\n\n          case \"s\":\n            return \"second\";\n\n          case \"m\":\n            return \"minute\";\n\n          case \"h\":\n            return \"hour\";\n\n          case \"d\":\n            return \"day\";\n\n          case \"w\":\n            return \"week\";\n\n          case \"M\":\n            return \"month\";\n\n          case \"y\":\n            return \"year\";\n\n          default:\n            return null;\n        }\n      },\n          tokenToString = function tokenToString(lildur) {\n        return function (token) {\n          var mapped = tokenToField(token);\n\n          if (mapped) {\n            return _this2.num(lildur.get(mapped), token.length);\n          } else {\n            return token;\n          }\n        };\n      },\n          tokens = Formatter.parseFormat(fmt),\n          realTokens = tokens.reduce(function (found, _ref) {\n        var literal = _ref.literal,\n            val = _ref.val;\n        return literal ? found : found.concat(val);\n      }, []),\n          collapsed = dur.shiftTo.apply(dur, _toConsumableArray(realTokens.map(tokenToField).filter(function (t) {\n        return t;\n      })));\n\n      return stringifyTokens(tokens, tokenToString(collapsed));\n    }\n  }], [{\n    key: \"create\",\n    value: function create(locale) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Formatter(locale, opts);\n    }\n  }, {\n    key: \"parseFormat\",\n    value: function parseFormat(fmt) {\n      var current = null,\n          currentFull = \"\",\n          bracketed = false;\n      var splits = [];\n\n      for (var i = 0; i < fmt.length; i++) {\n        var c = fmt.charAt(i);\n\n        if (c === \"'\") {\n          if (currentFull.length > 0) {\n            splits.push({\n              literal: bracketed,\n              val: currentFull\n            });\n          }\n\n          current = null;\n          currentFull = \"\";\n          bracketed = !bracketed;\n        } else if (bracketed) {\n          currentFull += c;\n        } else if (c === current) {\n          currentFull += c;\n        } else {\n          if (currentFull.length > 0) {\n            splits.push({\n              literal: false,\n              val: currentFull\n            });\n          }\n\n          currentFull = c;\n          current = c;\n        }\n      }\n\n      if (currentFull.length > 0) {\n        splits.push({\n          literal: bracketed,\n          val: currentFull\n        });\n      }\n\n      return splits;\n    }\n  }, {\n    key: \"macroTokenToFormatOpts\",\n    value: function macroTokenToFormatOpts(token) {\n      return _macroTokenToFormatOpts[token];\n    }\n  }]);\n\n  return Formatter;\n}();\n\nexport { Formatter as default };","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/luxon/src/impl/formatter.js"],"names":["English","Formats","padStart","stringifyTokens","splits","tokenToString","s","token","literal","val","macroTokenToFormatOpts","D","DATE_SHORT","DD","DATE_MED","DDD","DATE_FULL","DDDD","DATE_HUGE","t","TIME_SIMPLE","tt","TIME_WITH_SECONDS","ttt","TIME_WITH_SHORT_OFFSET","tttt","TIME_WITH_LONG_OFFSET","T","TIME_24_SIMPLE","TT","TIME_24_WITH_SECONDS","TTT","TIME_24_WITH_SHORT_OFFSET","TTTT","TIME_24_WITH_LONG_OFFSET","f","DATETIME_SHORT","ff","DATETIME_MED","fff","DATETIME_FULL","ffff","DATETIME_HUGE","F","DATETIME_SHORT_WITH_SECONDS","FF","DATETIME_MED_WITH_SECONDS","FFF","DATETIME_FULL_WITH_SECONDS","FFFF","DATETIME_HUGE_WITH_SECONDS","Formatter","locale","formatOpts","opts","loc","systemLoc","dt","redefaultToSystem","df","dtFormatter","format","formatToParts","resolvedOptions","n","p","forceSimple","padTo","numberFormatter","fmt","knownEnglish","listingMode","useDateTimeFormatter","outputCalendar","string","extract","formatOffset","isOffsetFixed","offset","allowZ","isValid","zone","ts","meridiem","meridiemForDateTime","hour","hourCycle","month","length","standalone","monthForDateTime","day","weekday","weekdayForDateTime","maybeMacro","formatWithSystemDefault","era","eraForDateTime","num","millisecond","second","Math","floor","minute","offsetName","zoneName","year","toString","slice","weekYear","weekNumber","ordinal","quarter","parseFormat","dur","tokenToField","lildur","mapped","get","tokens","realTokens","reduce","found","concat","collapsed","shiftTo","map","filter","current","currentFull","bracketed","i","c","charAt","push"],"mappings":"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","sourcesContent":["import * as English from \"./english.js\";\nimport * as Formats from \"./formats.js\";\nimport { padStart } from \"./util.js\";\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = \"\";\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\nconst macroTokenToFormatOpts = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS,\n};\n\n/**\n * @private\n */\n\nexport default class Formatter {\n  static create(locale, opts = {}) {\n    return new Formatter(locale, opts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null,\n      currentFull = \"\",\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed, val: currentFull });\n        }\n        current = null;\n        currentFull = \"\";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  static macroTokenToFormatOpts(token) {\n    return macroTokenToFormatOpts[token];\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.formatToParts();\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.resolvedOptions();\n  }\n\n  num(n, p = 0) {\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n\n    const opts = { ...this.opts };\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === \"en\",\n      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\",\n      string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = (opts) => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return \"Z\";\n        }\n\n        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\n      },\n      meridiem = () =>\n        knownEnglish\n          ? English.meridiemForDateTime(dt)\n          : string({ hour: \"numeric\", hourCycle: \"h12\" }, \"dayperiod\"),\n      month = (length, standalone) =>\n        knownEnglish\n          ? English.monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: \"numeric\" }, \"month\"),\n      weekday = (length, standalone) =>\n        knownEnglish\n          ? English.weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: \"long\", day: \"numeric\" },\n              \"weekday\"\n            ),\n      maybeMacro = (token) => {\n        const formatOpts = Formatter.macroTokenToFormatOpts(token);\n        if (formatOpts) {\n          return this.formatWithSystemDefault(dt, formatOpts);\n        } else {\n          return token;\n        }\n      },\n      era = (length) =>\n        knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, \"era\"),\n      tokenToString = (token) => {\n        // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case \"S\":\n            return this.num(dt.millisecond);\n          case \"u\":\n          // falls through\n          case \"SSS\":\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case \"s\":\n            return this.num(dt.second);\n          case \"ss\":\n            return this.num(dt.second, 2);\n          // fractional seconds\n          case \"uu\":\n            return this.num(Math.floor(dt.millisecond / 10), 2);\n          case \"uuu\":\n            return this.num(Math.floor(dt.millisecond / 100));\n          // minutes\n          case \"m\":\n            return this.num(dt.minute);\n          case \"mm\":\n            return this.num(dt.minute, 2);\n          // hours\n          case \"h\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case \"hh\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case \"H\":\n            return this.num(dt.hour);\n          case \"HH\":\n            return this.num(dt.hour, 2);\n          // offset\n          case \"Z\":\n            // like +6\n            return formatOffset({ format: \"narrow\", allowZ: this.opts.allowZ });\n          case \"ZZ\":\n            // like +06:00\n            return formatOffset({ format: \"short\", allowZ: this.opts.allowZ });\n          case \"ZZZ\":\n            // like +0600\n            return formatOffset({ format: \"techie\", allowZ: this.opts.allowZ });\n          case \"ZZZZ\":\n            // like EST\n            return dt.zone.offsetName(dt.ts, { format: \"short\", locale: this.loc.locale });\n          case \"ZZZZZ\":\n            // like Eastern Standard Time\n            return dt.zone.offsetName(dt.ts, { format: \"long\", locale: this.loc.locale });\n          // zone\n          case \"z\":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case \"a\":\n            return meridiem();\n          // dates\n          case \"d\":\n            return useDateTimeFormatter ? string({ day: \"numeric\" }, \"day\") : this.num(dt.day);\n          case \"dd\":\n            return useDateTimeFormatter ? string({ day: \"2-digit\" }, \"day\") : this.num(dt.day, 2);\n          // weekdays - standalone\n          case \"c\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"ccc\":\n            // like 'Tues'\n            return weekday(\"short\", true);\n          case \"cccc\":\n            // like 'Tuesday'\n            return weekday(\"long\", true);\n          case \"ccccc\":\n            // like 'T'\n            return weekday(\"narrow\", true);\n          // weekdays - format\n          case \"E\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"EEE\":\n            // like 'Tues'\n            return weekday(\"short\", false);\n          case \"EEEE\":\n            // like 'Tuesday'\n            return weekday(\"long\", false);\n          case \"EEEEE\":\n            // like 'T'\n            return weekday(\"narrow\", false);\n          // months - standalone\n          case \"L\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"LL\":\n            // like 01, doesn't seem to work\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"LLL\":\n            // like Jan\n            return month(\"short\", true);\n          case \"LLLL\":\n            // like January\n            return month(\"long\", true);\n          case \"LLLLL\":\n            // like J\n            return month(\"narrow\", true);\n          // months - format\n          case \"M\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"MM\":\n            // like 01\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"MMM\":\n            // like Jan\n            return month(\"short\", false);\n          case \"MMMM\":\n            // like January\n            return month(\"long\", false);\n          case \"MMMMM\":\n            // like J\n            return month(\"narrow\", false);\n          // years\n          case \"y\":\n            // like 2014\n            return useDateTimeFormatter ? string({ year: \"numeric\" }, \"year\") : this.num(dt.year);\n          case \"yy\":\n            // like 14\n            return useDateTimeFormatter\n              ? string({ year: \"2-digit\" }, \"year\")\n              : this.num(dt.year.toString().slice(-2), 2);\n          case \"yyyy\":\n            // like 0012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 4);\n          case \"yyyyyy\":\n            // like 000012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 6);\n          // eras\n          case \"G\":\n            // like AD\n            return era(\"short\");\n          case \"GG\":\n            // like Anno Domini\n            return era(\"long\");\n          case \"GGGGG\":\n            return era(\"narrow\");\n          case \"kk\":\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case \"kkkk\":\n            return this.num(dt.weekYear, 4);\n          case \"W\":\n            return this.num(dt.weekNumber);\n          case \"WW\":\n            return this.num(dt.weekNumber, 2);\n          case \"o\":\n            return this.num(dt.ordinal);\n          case \"ooo\":\n            return this.num(dt.ordinal, 3);\n          case \"q\":\n            // like 1\n            return this.num(dt.quarter);\n          case \"qq\":\n            // like 01\n            return this.num(dt.quarter, 2);\n          case \"X\":\n            return this.num(Math.floor(dt.ts / 1000));\n          case \"x\":\n            return this.num(dt.ts);\n          default:\n            return maybeMacro(token);\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = (token) => {\n        switch (token[0]) {\n          case \"S\":\n            return \"millisecond\";\n          case \"s\":\n            return \"second\";\n          case \"m\":\n            return \"minute\";\n          case \"h\":\n            return \"hour\";\n          case \"d\":\n            return \"day\";\n          case \"w\":\n            return \"week\";\n          case \"M\":\n            return \"month\";\n          case \"y\":\n            return \"year\";\n          default:\n            return null;\n        }\n      },\n      tokenToString = (lildur) => (token) => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}