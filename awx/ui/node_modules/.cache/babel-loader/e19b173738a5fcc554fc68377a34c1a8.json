{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { getUniqueId } from '../../helpers';\nimport GripVerticalIcon from '@patternfly/react-icons/dist/esm/icons/grip-vertical-icon';\nimport { Button, ButtonVariant } from '../Button';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\nexport var DualListSelectorListItemBase = function DualListSelectorListItemBase(_a) {\n  var onOptionSelect = _a.onOptionSelect,\n      orderIndex = _a.orderIndex,\n      children = _a.children,\n      className = _a.className,\n      _a$id = _a.id,\n      id = _a$id === void 0 ? getUniqueId('dual-list-selector-list-item') : _a$id,\n      isSelected = _a.isSelected,\n      innerRef = _a.innerRef,\n      _a$isDraggable = _a.isDraggable,\n      isDraggable = _a$isDraggable === void 0 ? false : _a$isDraggable,\n      isDisabled = _a.isDisabled,\n      _a$draggableButtonAri = _a.draggableButtonAriaLabel,\n      draggableButtonAriaLabel = _a$draggableButtonAri === void 0 ? 'Reorder option' : _a$draggableButtonAri,\n      props = __rest(_a, [\"onOptionSelect\", \"orderIndex\", \"children\", \"className\", \"id\", \"isSelected\", \"innerRef\", \"isDraggable\", \"isDisabled\", \"draggableButtonAriaLabel\"]);\n\n  var ref = innerRef || React.useRef(null);\n\n  var _React$useContext = React.useContext(DualListSelectorListContext),\n      setFocusedOption = _React$useContext.setFocusedOption;\n\n  return React.createElement(\"li\", Object.assign({\n    className: css(styles.dualListSelectorListItem, className, isDisabled && styles.modifiers.disabled),\n    key: orderIndex,\n    onClick: isDisabled ? undefined : function (e) {\n      setFocusedOption(id);\n      onOptionSelect(e, id);\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (e.key === ' ' || e.key === 'Enter') {\n        document.activeElement.click();\n        e.preventDefault();\n      }\n    },\n    \"aria-selected\": isSelected,\n    id: id,\n    ref: ref,\n    role: \"option\",\n    tabIndex: -1\n  }, props), React.createElement(\"div\", {\n    className: css(styles.dualListSelectorListItemRow, isSelected && styles.modifiers.selected)\n  }, isDraggable && !isDisabled && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorDraggable)\n  }, React.createElement(Button, {\n    variant: ButtonVariant.plain,\n    component: \"span\"\n  }, React.createElement(GripVerticalIcon, {\n    style: {\n      verticalAlign: '-0.3em'\n    }\n  }))), React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItem)\n  }, React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemMain)\n  }, React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemText)\n  }, children)))));\n};\nDualListSelectorListItemBase.displayName = 'DualListSelectorListItemBase';\nexport var DualListSelectorListItem = React.forwardRef(function (props, ref) {\n  return React.createElement(DualListSelectorListItemBase, Object.assign({\n    innerRef: ref\n  }, props));\n});\nDualListSelectorListItem.displayName = 'DualListSelectorListItem';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorListItem.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { getUniqueId } from '../../helpers';\nimport GripVerticalIcon from '@patternfly/react-icons/dist/esm/icons/grip-vertical-icon';\nimport { Button, ButtonVariant } from '../Button';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorListItemProps extends React.HTMLProps<HTMLLIElement> {\n  /** Content rendered inside the dual list selector. */\n  children?: React.ReactNode;\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Flag indicating the list item is currently selected. */\n  isSelected?: boolean;\n  /** Callback fired when an option is selected.  */\n  onOptionSelect?: (e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent, id?: string) => void;\n  /** ID of the option. */\n  id?: string;\n  /** @hide Internal field used to keep track of order of unfiltered options. */\n  orderIndex?: number;\n  /** @hide Forwarded ref */\n  innerRef?: React.RefObject<HTMLLIElement>;\n  /** Flag indicating this item is draggable for reordring */\n  isDraggable?: boolean;\n  /** Accessible label for the draggable button on draggable list items */\n  draggableButtonAriaLabel?: string;\n  /** Flag indicating if the dual list selector is in a disabled state */\n  isDisabled?: boolean;\n}\n\nexport const DualListSelectorListItemBase: React.FunctionComponent<DualListSelectorListItemProps> = ({\n  onOptionSelect,\n  orderIndex,\n  children,\n  className,\n  id = getUniqueId('dual-list-selector-list-item'),\n  isSelected,\n  innerRef,\n  isDraggable = false,\n  isDisabled,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  draggableButtonAriaLabel = 'Reorder option',\n  ...props\n}: DualListSelectorListItemProps) => {\n  const ref = innerRef || React.useRef<HTMLLIElement>(null);\n  const { setFocusedOption } = React.useContext(DualListSelectorListContext);\n\n  return (\n    <li\n      className={css(styles.dualListSelectorListItem, className, isDisabled && styles.modifiers.disabled)}\n      key={orderIndex}\n      onClick={\n        isDisabled\n          ? undefined\n          : (e: React.MouseEvent) => {\n              setFocusedOption(id);\n              onOptionSelect(e, id);\n            }\n      }\n      onKeyDown={(e: React.KeyboardEvent) => {\n        if (e.key === ' ' || e.key === 'Enter') {\n          (document.activeElement as HTMLElement).click();\n          e.preventDefault();\n        }\n      }}\n      aria-selected={isSelected}\n      id={id}\n      ref={ref}\n      role=\"option\"\n      tabIndex={-1}\n      {...props}\n    >\n      <div className={css(styles.dualListSelectorListItemRow, isSelected && styles.modifiers.selected)}>\n        {isDraggable && !isDisabled && (\n          <div className={css(styles.dualListSelectorDraggable)}>\n            {/** TODO once keyboard accessibility is enabled, remove `component=span`\n             and add `aria-label={draggableButtonAriaLabel}` */}\n            <Button variant={ButtonVariant.plain} component=\"span\">\n              <GripVerticalIcon style={{ verticalAlign: '-0.3em' }} />\n            </Button>\n          </div>\n        )}\n        <span className={css(styles.dualListSelectorItem)}>\n          <span className={css(styles.dualListSelectorItemMain)}>\n            <span className={css(styles.dualListSelectorItemText)}>{children}</span>\n          </span>\n        </span>\n      </div>\n    </li>\n  );\n};\nDualListSelectorListItemBase.displayName = 'DualListSelectorListItemBase';\n\nexport const DualListSelectorListItem = React.forwardRef(\n  (props: DualListSelectorListItemProps, ref: React.Ref<HTMLLIElement>) => (\n    <DualListSelectorListItemBase innerRef={ref as React.MutableRefObject<any>} {...props} />\n  )\n);\nDualListSelectorListItem.displayName = 'DualListSelectorListItem';\n"]},"metadata":{},"sourceType":"module"}