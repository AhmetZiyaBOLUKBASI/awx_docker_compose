{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{useState,useEffect}from'react';import useWebsocket from'hooks/useWebsocket';import{getJobModel}from'util/jobs';export default function useWsJob(initialJob){var _useState=useState(initialJob),_useState2=_slicedToArray(_useState,2),job=_useState2[0],setJob=_useState2[1];var lastMessage=useWebsocket({jobs:['status_changed'],control:['limit_reached_1']});useEffect(function(){setJob(initialJob);},[initialJob]);useEffect(function(){function fetchJob(){return _fetchJob.apply(this,arguments);}function _fetchJob(){_fetchJob=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$getJobModel$re,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getJobModel(job.type).readDetail(job.id);case 2:_yield$getJobModel$re=_context.sent;data=_yield$getJobModel$re.data;setJob(data);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchJob.apply(this,arguments);}if(!job||(lastMessage===null||lastMessage===void 0?void 0:lastMessage.unified_job_id)!==job.id){return;}if(['successful','failed','error','cancelled'].includes(lastMessage.status)){fetchJob();}else{setJob(updateJob(job,lastMessage));}},[lastMessage]// eslint-disable-line react-hooks/exhaustive-deps\n);return job;}function updateJob(job,message){return _objectSpread(_objectSpread({},job),{},{finished:message.finished,status:message.status});}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Job/useWsJob.js"],"names":["useState","useEffect","useWebsocket","getJobModel","useWsJob","initialJob","job","setJob","lastMessage","jobs","control","fetchJob","type","readDetail","id","data","unified_job_id","includes","status","updateJob","message","finished"],"mappings":"8ZAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,MAAOC,CAAAA,YAAP,KAAyB,oBAAzB,CACA,OAASC,WAAT,KAA4B,WAA5B,CAEA,cAAe,SAASC,CAAAA,QAAT,CAAkBC,UAAlB,CAA8B,CAC3C,cAAsBL,QAAQ,CAACK,UAAD,CAA9B,wCAAOC,GAAP,eAAYC,MAAZ,eACA,GAAMC,CAAAA,WAAW,CAAGN,YAAY,CAAC,CAC/BO,IAAI,CAAE,CAAC,gBAAD,CADyB,CAE/BC,OAAO,CAAE,CAAC,iBAAD,CAFsB,CAAD,CAAhC,CAKAT,SAAS,CAAC,UAAM,CACdM,MAAM,CAACF,UAAD,CAAN,CACD,CAFQ,CAEN,CAACA,UAAD,CAFM,CAAT,CAIAJ,SAAS,CACP,UAAM,SACWU,CAAAA,QADX,kIACJ,wLACyBR,CAAAA,WAAW,CAACG,GAAG,CAACM,IAAL,CAAX,CAAsBC,UAAtB,CAAiCP,GAAG,CAACQ,EAArC,CADzB,4CACUC,IADV,uBACUA,IADV,CAEER,MAAM,CAACQ,IAAD,CAAN,CAFF,sDADI,2CAMJ,GAAI,CAACT,GAAD,EAAQ,CAAAE,WAAW,OAAX,EAAAA,WAAW,SAAX,QAAAA,WAAW,CAAEQ,cAAb,IAAgCV,GAAG,CAACQ,EAAhD,CAAoD,CAClD,OACD,CAED,GACE,CAAC,YAAD,CAAe,QAAf,CAAyB,OAAzB,CAAkC,WAAlC,EAA+CG,QAA/C,CACET,WAAW,CAACU,MADd,CADF,CAIE,CACAP,QAAQ,GACT,CAND,IAMO,CACLJ,MAAM,CAACY,SAAS,CAACb,GAAD,CAAME,WAAN,CAAV,CAAN,CACD,CACF,CApBM,CAqBP,CAACA,WAAD,CAAc;AArBP,CAAT,CAwBA,MAAOF,CAAAA,GAAP,CACD,CAED,QAASa,CAAAA,SAAT,CAAmBb,GAAnB,CAAwBc,OAAxB,CAAiC,CAC/B,sCACKd,GADL,MAEEe,QAAQ,CAAED,OAAO,CAACC,QAFpB,CAGEH,MAAM,CAAEE,OAAO,CAACF,MAHlB,GAKD","sourcesContent":["import { useState, useEffect } from 'react';\nimport useWebsocket from 'hooks/useWebsocket';\nimport { getJobModel } from 'util/jobs';\n\nexport default function useWsJob(initialJob) {\n  const [job, setJob] = useState(initialJob);\n  const lastMessage = useWebsocket({\n    jobs: ['status_changed'],\n    control: ['limit_reached_1'],\n  });\n\n  useEffect(() => {\n    setJob(initialJob);\n  }, [initialJob]);\n\n  useEffect(\n    () => {\n      async function fetchJob() {\n        const { data } = await getJobModel(job.type).readDetail(job.id);\n        setJob(data);\n      }\n\n      if (!job || lastMessage?.unified_job_id !== job.id) {\n        return;\n      }\n\n      if (\n        ['successful', 'failed', 'error', 'cancelled'].includes(\n          lastMessage.status\n        )\n      ) {\n        fetchJob();\n      } else {\n        setJob(updateJob(job, lastMessage));\n      }\n    },\n    [lastMessage] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  return job;\n}\n\nfunction updateJob(job, message) {\n  return {\n    ...job,\n    finished: message.finished,\n    status: message.status,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}