{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport var CardHeader = function CardHeader(_a) {\n  var _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      id = _a.id,\n      onExpand = _a.onExpand,\n      toggleButtonProps = _a.toggleButtonProps,\n      isToggleRightAligned = _a.isToggleRightAligned,\n      props = __rest(_a, [\"children\", \"className\", \"id\", \"onExpand\", \"toggleButtonProps\", \"isToggleRightAligned\"]);\n\n  return React.createElement(CardContext.Consumer, null, function (_ref) {\n    var cardId = _ref.cardId;\n    var cardHeaderToggle = React.createElement(\"div\", {\n      className: css(styles.cardHeaderToggle)\n    }, React.createElement(Button, Object.assign({\n      variant: \"plain\",\n      type: \"button\",\n      onClick: function onClick(evt) {\n        onExpand(evt, cardId);\n      }\n    }, toggleButtonProps), React.createElement(\"span\", {\n      className: css(styles.cardHeaderToggleIcon)\n    }, React.createElement(AngleRightIcon, {\n      \"aria-hidden\": \"true\"\n    }))));\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.cardHeader, isToggleRightAligned && styles.modifiers.toggleRight, className),\n      id: id\n    }, props), onExpand && !isToggleRightAligned && cardHeaderToggle, children, onExpand && isToggleRightAligned && cardHeaderToggle);\n  });\n};\nCardHeader.displayName = 'CardHeader';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Card/CardHeader.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,mDAAnB;AACA,SAAS,WAAT,QAA4B,QAA5B;AACA,SAAS,MAAT,QAAuB,WAAvB;AACA,OAAO,cAAP,MAA2B,yDAA3B;AAiBA,OAAO,IAAM,UAAU,GAA6C,SAAvD,UAAuD,CAAC,EAAD,EAQ9C;AAR+C,oBAM/C,EAN+C,CACnE,QADmE;AAAA,MACnE,QADmE,4BACxD,IADwD;AAAA,qBAM/C,EAN+C,CAEnE,SAFmE;AAAA,MAEnE,SAFmE,6BAEvD,EAFuD;AAAA,MAGnE,EAHmE,GAM/C,EAN+C,CAGnE,EAHmE;AAAA,MAInE,QAJmE,GAM/C,EAN+C,CAInE,QAJmE;AAAA,MAKnE,iBALmE,GAM/C,EAN+C,CAKnE,iBALmE;AAAA,MAMnE,oBANmE,GAM/C,EAN+C,CAMnE,oBANmE;AAAA,MAOhE,KAPgE,GAO3D,MAAA,CAAA,EAAA,EAP2D,CAAA,UAAA,EAAA,WAAA,EAAA,IAAA,EAAA,UAAA,EAAA,mBAAA,EAAA,sBAAA,CAO3D,CAP2D;;AAQ9C,SACrB,KAAA,CAAA,aAAA,CAAC,WAAW,CAAC,QAAb,EAAqB,IAArB,EACG,gBAAe;AAAA,QAAZ,MAAY,QAAZ,MAAY;AACd,QAAM,gBAAgB,GACpB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,gBAAR;AAAnB,KAAA,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO,MAAA,CAAA,MAAA,CAAA;AACL,MAAA,OAAO,EAAC,OADH;AAEL,MAAA,IAAI,EAAC,QAFA;AAGL,MAAA,OAAO,EAAE,iBAAA,GAAG,EAAG;AACb,QAAA,QAAQ,CAAC,GAAD,EAAM,MAAN,CAAR;AACD;AALI,KAAA,EAMD,iBANC,CAAP,EAQE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,MAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,oBAAR;AAApB,KAAA,EACE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AAAA,qBAAa;AAAb,KAAf,CADF,CARF,CADF,CADF;AAiBA,WACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,MAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,UAAR,EAAoB,oBAAoB,IAAI,MAAM,CAAC,SAAP,CAAiB,WAA7D,EAA0E,SAA1E,CADhB;AAEE,MAAA,EAAE,EAAE;AAFN,KAAA,EAGM,KAHN,CAAA,EAKG,QAAQ,IAAI,CAAC,oBAAb,IAAqC,gBALxC,EAMG,QANH,EAOG,QAAQ,IAAI,oBAAZ,IAAoC,gBAPvC,CADF;AAWD,GA9BH,CADqB;AAiCtB,CAzCM;AA0CP,UAAU,CAAC,WAAX,GAAyB,YAAzB","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\n\nexport interface CardHeaderProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the CardHeader */\n  children?: React.ReactNode;\n  /** Additional classes added to the CardHeader */\n  className?: string;\n  /** ID of the card header. */\n  id?: string;\n  /** Callback expandable card */\n  onExpand?: (event: React.MouseEvent, id: string) => void;\n  /** Additional props for expandable toggle button */\n  toggleButtonProps?: any;\n  /** Whether to right-align expandable toggle button */\n  isToggleRightAligned?: boolean;\n}\n\nexport const CardHeader: React.FunctionComponent<CardHeaderProps> = ({\n  children = null,\n  className = '',\n  id,\n  onExpand,\n  toggleButtonProps,\n  isToggleRightAligned,\n  ...props\n}: CardHeaderProps) => (\n  <CardContext.Consumer>\n    {({ cardId }) => {\n      const cardHeaderToggle = (\n        <div className={css(styles.cardHeaderToggle)}>\n          <Button\n            variant=\"plain\"\n            type=\"button\"\n            onClick={evt => {\n              onExpand(evt, cardId);\n            }}\n            {...toggleButtonProps}\n          >\n            <span className={css(styles.cardHeaderToggleIcon)}>\n              <AngleRightIcon aria-hidden=\"true\" />\n            </span>\n          </Button>\n        </div>\n      );\n\n      return (\n        <div\n          className={css(styles.cardHeader, isToggleRightAligned && styles.modifiers.toggleRight, className)}\n          id={id}\n          {...props}\n        >\n          {onExpand && !isToggleRightAligned && cardHeaderToggle}\n          {children}\n          {onExpand && isToggleRightAligned && cardHeaderToggle}\n        </div>\n      );\n    }}\n  </CardContext.Consumer>\n);\nCardHeader.displayName = 'CardHeader';\n"]},"metadata":{},"sourceType":"module"}