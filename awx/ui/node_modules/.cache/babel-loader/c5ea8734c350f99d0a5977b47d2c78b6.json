{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport var ExpandableSection = /*#__PURE__*/function (_React$Component) {\n  _inherits(ExpandableSection, _React$Component);\n\n  var _super = _createSuper(ExpandableSection);\n\n  function ExpandableSection(props) {\n    var _this;\n\n    _classCallCheck(this, ExpandableSection);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isExpanded: props.isExpanded\n    };\n    return _this;\n  }\n\n  _createClass(ExpandableSection, [{\n    key: \"calculateToggleText\",\n    value: function calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded) {\n      if (propOrStateIsExpanded && toggleTextExpanded !== '') {\n        return toggleTextExpanded;\n      }\n\n      if (!propOrStateIsExpanded && toggleTextCollapsed !== '') {\n        return toggleTextCollapsed;\n      }\n\n      return toggleText;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          onToggleProp = _a.onToggle,\n          isActive = _a.isActive,\n          className = _a.className,\n          toggleText = _a.toggleText,\n          toggleTextExpanded = _a.toggleTextExpanded,\n          toggleTextCollapsed = _a.toggleTextCollapsed,\n          toggleContent = _a.toggleContent,\n          children = _a.children,\n          isExpanded = _a.isExpanded,\n          isDetached = _a.isDetached,\n          displaySize = _a.displaySize,\n          isWidthLimited = _a.isWidthLimited,\n          isIndented = _a.isIndented,\n          contentId = _a.contentId,\n          props = __rest(_a, [\"onToggle\", \"isActive\", \"className\", \"toggleText\", \"toggleTextExpanded\", \"toggleTextCollapsed\", \"toggleContent\", \"children\", \"isExpanded\", \"isDetached\", \"displaySize\", \"isWidthLimited\", \"isIndented\", \"contentId\"]);\n\n      var onToggle = onToggleProp;\n      var propOrStateIsExpanded = isExpanded; // uncontrolled\n\n      if (isExpanded === undefined) {\n        propOrStateIsExpanded = this.state.isExpanded;\n\n        onToggle = function onToggle(isOpen) {\n          _this2.setState({\n            isExpanded: isOpen\n          }, function () {\n            return onToggleProp(_this2.state.isExpanded);\n          });\n        };\n      }\n\n      var computedToggleText = this.calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded);\n      return React.createElement(\"div\", Object.assign({}, props, {\n        className: css(styles.expandableSection, propOrStateIsExpanded && styles.modifiers.expanded, isActive && styles.modifiers.active, isDetached && styles.modifiers.detached, displaySize === 'large' && styles.modifiers.displayLg, isWidthLimited && styles.modifiers.limitWidth, isIndented && styles.modifiers.indented, className)\n      }), !isDetached && React.createElement(\"button\", {\n        className: css(styles.expandableSectionToggle),\n        type: \"button\",\n        \"aria-expanded\": propOrStateIsExpanded,\n        onClick: function onClick() {\n          return onToggle(!propOrStateIsExpanded);\n        }\n      }, React.createElement(\"span\", {\n        className: css(styles.expandableSectionToggleIcon)\n      }, React.createElement(AngleRightIcon, {\n        \"aria-hidden\": true\n      })), React.createElement(\"span\", {\n        className: css(styles.expandableSectionToggleText)\n      }, toggleContent || computedToggleText)), React.createElement(\"div\", {\n        className: css(styles.expandableSectionContent),\n        hidden: !propOrStateIsExpanded,\n        id: contentId\n      }, children));\n    }\n  }]);\n\n  return ExpandableSection;\n}(React.Component);\nExpandableSection.displayName = 'ExpandableSection';\nExpandableSection.defaultProps = {\n  className: '',\n  toggleText: '',\n  toggleTextExpanded: '',\n  toggleTextCollapsed: '',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle: function onToggle(isExpanded) {\n    return undefined;\n  },\n  isActive: false,\n  isDetached: false,\n  displaySize: 'default',\n  isWidthLimited: false,\n  isIndented: false,\n  contentId: ''\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/ExpandableSection/ExpandableSection.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ExpandableSectionProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the Expandable Component */\n  children?: React.ReactNode;\n  /** Additional classes added to the Expandable Component */\n  className?: string;\n  /** Flag to indicate if the content is expanded */\n  isExpanded?: boolean;\n  /** Text that appears in the attached toggle */\n  toggleText?: string;\n  /** Text that appears in the attached toggle when expanded (will override toggleText if both are specified; used for uncontrolled expandable with dynamic toggle text) */\n  toggleTextExpanded?: string;\n  /** Text that appears in the attached toggle when collapsed (will override toggleText if both are specified; used for uncontrolled expandable with dynamic toggle text) */\n  toggleTextCollapsed?: string;\n  /** React node that appears in the attached toggle in place of toggle text */\n  toggleContent?: React.ReactNode;\n  /** Callback function to toggle the expandable content. Detached expandable sections should use the onToggle property of ExpandableSectionToggle. */\n  onToggle?: (isExpanded: boolean) => void;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Indicates the expandable section has a detached toggle */\n  isDetached?: boolean;\n  /** ID of the content of the expandable section */\n  contentId?: string;\n  /** Display size variant. Set to large for disclosure styling. */\n  displaySize?: 'default' | 'large';\n  /** Flag to indicate the width of the component is limited. Set to true for disclosure styling. */\n  isWidthLimited?: boolean;\n  /** Flag to indicate if the content is indented */\n  isIndented?: boolean;\n}\n\ninterface ExpandableSectionState {\n  isExpanded: boolean;\n}\n\nexport class ExpandableSection extends React.Component<ExpandableSectionProps, ExpandableSectionState> {\n  static displayName = 'ExpandableSection';\n  constructor(props: ExpandableSectionProps) {\n    super(props);\n\n    this.state = {\n      isExpanded: props.isExpanded\n    };\n  }\n\n  static defaultProps: PickOptional<ExpandableSectionProps> = {\n    className: '',\n    toggleText: '',\n    toggleTextExpanded: '',\n    toggleTextCollapsed: '',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (isExpanded): void => undefined,\n    isActive: false,\n    isDetached: false,\n    displaySize: 'default',\n    isWidthLimited: false,\n    isIndented: false,\n    contentId: ''\n  };\n\n  private calculateToggleText(\n    toggleText: string,\n    toggleTextExpanded: string,\n    toggleTextCollapsed: string,\n    propOrStateIsExpanded: boolean\n  ) {\n    if (propOrStateIsExpanded && toggleTextExpanded !== '') {\n      return toggleTextExpanded;\n    }\n    if (!propOrStateIsExpanded && toggleTextCollapsed !== '') {\n      return toggleTextCollapsed;\n    }\n    return toggleText;\n  }\n\n  render() {\n    const {\n      onToggle: onToggleProp,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isActive,\n      className,\n      toggleText,\n      toggleTextExpanded,\n      toggleTextCollapsed,\n      toggleContent,\n      children,\n      isExpanded,\n      isDetached,\n      displaySize,\n      isWidthLimited,\n      isIndented,\n      contentId,\n      ...props\n    } = this.props;\n    let onToggle = onToggleProp;\n    let propOrStateIsExpanded = isExpanded;\n\n    // uncontrolled\n    if (isExpanded === undefined) {\n      propOrStateIsExpanded = this.state.isExpanded;\n      onToggle = isOpen => {\n        this.setState({ isExpanded: isOpen }, () => onToggleProp(this.state.isExpanded));\n      };\n    }\n\n    const computedToggleText = this.calculateToggleText(\n      toggleText,\n      toggleTextExpanded,\n      toggleTextCollapsed,\n      propOrStateIsExpanded\n    );\n\n    return (\n      <div\n        {...props}\n        className={css(\n          styles.expandableSection,\n          propOrStateIsExpanded && styles.modifiers.expanded,\n          isActive && styles.modifiers.active,\n          isDetached && styles.modifiers.detached,\n          displaySize === 'large' && styles.modifiers.displayLg,\n          isWidthLimited && styles.modifiers.limitWidth,\n          isIndented && styles.modifiers.indented,\n          className\n        )}\n      >\n        {!isDetached && (\n          <button\n            className={css(styles.expandableSectionToggle)}\n            type=\"button\"\n            aria-expanded={propOrStateIsExpanded}\n            onClick={() => onToggle(!propOrStateIsExpanded)}\n          >\n            <span className={css(styles.expandableSectionToggleIcon)}>\n              <AngleRightIcon aria-hidden />\n            </span>\n            <span className={css(styles.expandableSectionToggleText)}>{toggleContent || computedToggleText}</span>\n          </button>\n        )}\n        <div className={css(styles.expandableSectionContent)} hidden={!propOrStateIsExpanded} id={contentId}>\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}