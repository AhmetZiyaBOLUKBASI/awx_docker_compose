{"ast":null,"code":"import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState,useEffect,useCallback}from'react';import{Card,PageSection}from'@patternfly/react-core';import{useHistory}from'react-router-dom';import{CardBody}from'components/Card';import{InstanceGroupsAPI}from'api';import useRequest from'hooks/useRequest';import ContentError from'components/ContentError';import ContentLoading from'components/ContentLoading';import{jsonToYaml,isJsonString}from'util/yaml';import ContainerGroupForm from'../shared/ContainerGroupForm';import{jsx as _jsx}from\"react/jsx-runtime\";function ContainerGroupAdd(){var history=useHistory();var _useState=useState(null),_useState2=_slicedToArray(_useState,2),submitError=_useState2[0],setSubmitError=_useState2[1];var getPodSpecValue=function getPodSpecValue(value){if(isJsonString(value)){value=jsonToYaml(value);}if(value!==jsonToYaml(JSON.stringify(initialPodSpec))){return value;}return null;};var handleSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(values){var _values$credential,_yield$InstanceGroups,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return InstanceGroupsAPI.create({name:values.name,credential:values===null||values===void 0?void 0:(_values$credential=values.credential)===null||_values$credential===void 0?void 0:_values$credential.id,pod_spec_override:values.override?getPodSpecValue(values.pod_spec_override):null,is_container_group:true});case 3:_yield$InstanceGroups=_context.sent;response=_yield$InstanceGroups.data;history.push(\"/instance_groups/container_group/\".concat(response.id,\"/details\"));_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);setSubmitError(_context.t0);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function handleSubmit(_x){return _ref.apply(this,arguments);};}();var handleCancel=function handleCancel(){history.push(\"/instance_groups\");};var _useRequest=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _yield$InstanceGroups2,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return InstanceGroupsAPI.readOptions();case 2:_yield$InstanceGroups2=_context2.sent;data=_yield$InstanceGroups2.data;return _context2.abrupt(\"return\",data.actions.POST.pod_spec_override.default);case 5:case\"end\":return _context2.stop();}}},_callee2);})),[]),{initialPodSpec:{}}),fetchError=_useRequest.error,isLoading=_useRequest.isLoading,fetchInitialPodSpec=_useRequest.request,initialPodSpec=_useRequest.result;useEffect(function(){fetchInitialPodSpec();},[fetchInitialPodSpec]);if(fetchError){return/*#__PURE__*/_jsx(PageSection,{children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(ContentError,{error:fetchError})})})});}if(isLoading){return/*#__PURE__*/_jsx(PageSection,{children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(ContentLoading,{})})})});}return/*#__PURE__*/_jsx(PageSection,{children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(ContainerGroupForm,{initialPodSpec:initialPodSpec,onSubmit:handleSubmit,submitError:submitError,onCancel:handleCancel})})})});}export default ContainerGroupAdd;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/InstanceGroup/ContainerGroupAdd/ContainerGroupAdd.js"],"names":["React","useState","useEffect","useCallback","Card","PageSection","useHistory","CardBody","InstanceGroupsAPI","useRequest","ContentError","ContentLoading","jsonToYaml","isJsonString","ContainerGroupForm","ContainerGroupAdd","history","submitError","setSubmitError","getPodSpecValue","value","JSON","stringify","initialPodSpec","handleSubmit","values","create","name","credential","id","pod_spec_override","override","is_container_group","response","data","push","handleCancel","readOptions","actions","POST","default","fetchError","error","isLoading","fetchInitialPodSpec","request","result"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Card, PageSection } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\n\nimport { CardBody } from 'components/Card';\nimport { InstanceGroupsAPI } from 'api';\nimport useRequest from 'hooks/useRequest';\nimport ContentError from 'components/ContentError';\nimport ContentLoading from 'components/ContentLoading';\nimport { jsonToYaml, isJsonString } from 'util/yaml';\n\nimport ContainerGroupForm from '../shared/ContainerGroupForm';\n\nfunction ContainerGroupAdd() {\n  const history = useHistory();\n  const [submitError, setSubmitError] = useState(null);\n\n  const getPodSpecValue = (value) => {\n    if (isJsonString(value)) {\n      value = jsonToYaml(value);\n    }\n    if (value !== jsonToYaml(JSON.stringify(initialPodSpec))) {\n      return value;\n    }\n    return null;\n  };\n\n  const handleSubmit = async (values) => {\n    try {\n      const { data: response } = await InstanceGroupsAPI.create({\n        name: values.name,\n        credential: values?.credential?.id,\n        pod_spec_override: values.override\n          ? getPodSpecValue(values.pod_spec_override)\n          : null,\n        is_container_group: true,\n      });\n      history.push(`/instance_groups/container_group/${response.id}/details`);\n    } catch (error) {\n      setSubmitError(error);\n    }\n  };\n\n  const handleCancel = () => {\n    history.push(`/instance_groups`);\n  };\n\n  const {\n    error: fetchError,\n    isLoading,\n    request: fetchInitialPodSpec,\n    result: initialPodSpec,\n  } = useRequest(\n    useCallback(async () => {\n      const { data } = await InstanceGroupsAPI.readOptions();\n      return data.actions.POST.pod_spec_override.default;\n    }, []),\n    {\n      initialPodSpec: {},\n    }\n  );\n\n  useEffect(() => {\n    fetchInitialPodSpec();\n  }, [fetchInitialPodSpec]);\n\n  if (fetchError) {\n    return (\n      <PageSection>\n        <Card>\n          <CardBody>\n            <ContentError error={fetchError} />\n          </CardBody>\n        </Card>\n      </PageSection>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <PageSection>\n        <Card>\n          <CardBody>\n            <ContentLoading />\n          </CardBody>\n        </Card>\n      </PageSection>\n    );\n  }\n\n  return (\n    <PageSection>\n      <Card>\n        <CardBody>\n          <ContainerGroupForm\n            initialPodSpec={initialPodSpec}\n            onSubmit={handleSubmit}\n            submitError={submitError}\n            onCancel={handleCancel}\n          />\n        </CardBody>\n      </Card>\n    </PageSection>\n  );\n}\n\nexport default ContainerGroupAdd;\n"]},"metadata":{},"sourceType":"module"}