{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{useState,useEffect}from'react';import{useLocation}from'react-router-dom';import useWebsocket from'hooks/useWebsocket';import useThrottle from'hooks/useThrottle';import{parseQueryString}from'util/qs';import sortJobs from'./sortJobs';export default function useWsJobs(initialJobs,fetchJobsById,qsConfig){var location=useLocation();var _useState=useState(initialJobs),_useState2=_slicedToArray(_useState,2),jobs=_useState2[0],setJobs=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),jobsToFetch=_useState4[0],setJobsToFetch=_useState4[1];var throttledJobsToFetch=useThrottle(jobsToFetch,5000);var lastMessage=useWebsocket({jobs:['status_changed'],schedules:['changed'],control:['limit_reached_1']});useEffect(function(){setJobs(initialJobs);},[initialJobs]);var enqueueJobId=function enqueueJobId(id){if(!jobsToFetch.includes(id)){setJobsToFetch(function(ids){return ids.concat(id);});}};useEffect(function(){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var newJobs,deduplicated,params;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(throttledJobsToFetch.length){_context.next=2;break;}return _context.abrupt(\"return\");case 2:setJobsToFetch([]);_context.next=5;return fetchJobsById(throttledJobsToFetch);case 5:newJobs=_context.sent;deduplicated=newJobs.filter(function(job){return!jobs.find(function(j){return j.id===job.id;});});if(deduplicated.length){params=parseQueryString(qsConfig,location.search);setJobs(sortJobs([].concat(_toConsumableArray(deduplicated),_toConsumableArray(jobs)),params));}case 8:case\"end\":return _context.stop();}}},_callee);}))();},[throttledJobsToFetch,fetchJobsById]);// eslint-disable-line react-hooks/exhaustive-deps\nuseEffect(function(){if(!lastMessage||!lastMessage.unified_job_id){return;}var params=parseQueryString(qsConfig,location.search);var jobId=lastMessage.unified_job_id;var index=jobs.findIndex(function(j){return j.id===jobId;});if(index>-1){setJobs(sortJobs(updateJob(jobs,index,lastMessage),params));}else{enqueueJobId(lastMessage.unified_job_id);}},[lastMessage]);// eslint-disable-line react-hooks/exhaustive-deps\nreturn jobs;}function updateJob(jobs,index,message){var job=_objectSpread(_objectSpread({},jobs[index]),{},{status:message.status,finished:message.finished});return[].concat(_toConsumableArray(jobs.slice(0,index)),[job],_toConsumableArray(jobs.slice(index+1)));}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/JobList/useWsJobs.js"],"names":["useState","useEffect","useLocation","useWebsocket","useThrottle","parseQueryString","sortJobs","useWsJobs","initialJobs","fetchJobsById","qsConfig","location","jobs","setJobs","jobsToFetch","setJobsToFetch","throttledJobsToFetch","lastMessage","schedules","control","enqueueJobId","id","includes","ids","concat","length","newJobs","deduplicated","filter","job","find","j","params","search","unified_job_id","jobId","index","findIndex","updateJob","message","status","finished","slice"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport useWebsocket from 'hooks/useWebsocket';\nimport useThrottle from 'hooks/useThrottle';\nimport { parseQueryString } from 'util/qs';\nimport sortJobs from './sortJobs';\n\nexport default function useWsJobs(initialJobs, fetchJobsById, qsConfig) {\n  const location = useLocation();\n  const [jobs, setJobs] = useState(initialJobs);\n  const [jobsToFetch, setJobsToFetch] = useState([]);\n  const throttledJobsToFetch = useThrottle(jobsToFetch, 5000);\n  const lastMessage = useWebsocket({\n    jobs: ['status_changed'],\n    schedules: ['changed'],\n    control: ['limit_reached_1'],\n  });\n\n  useEffect(() => {\n    setJobs(initialJobs);\n  }, [initialJobs]);\n\n  const enqueueJobId = (id) => {\n    if (!jobsToFetch.includes(id)) {\n      setJobsToFetch((ids) => ids.concat(id));\n    }\n  };\n  useEffect(() => {\n    (async () => {\n      if (!throttledJobsToFetch.length) {\n        return;\n      }\n      setJobsToFetch([]);\n      const newJobs = await fetchJobsById(throttledJobsToFetch);\n      const deduplicated = newJobs.filter(\n        (job) => !jobs.find((j) => j.id === job.id)\n      );\n      if (deduplicated.length) {\n        const params = parseQueryString(qsConfig, location.search);\n        setJobs(sortJobs([...deduplicated, ...jobs], params));\n      }\n    })();\n  }, [throttledJobsToFetch, fetchJobsById]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (!lastMessage || !lastMessage.unified_job_id) {\n      return;\n    }\n    const params = parseQueryString(qsConfig, location.search);\n    const jobId = lastMessage.unified_job_id;\n    const index = jobs.findIndex((j) => j.id === jobId);\n\n    if (index > -1) {\n      setJobs(sortJobs(updateJob(jobs, index, lastMessage), params));\n    } else {\n      enqueueJobId(lastMessage.unified_job_id);\n    }\n  }, [lastMessage]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return jobs;\n}\n\nfunction updateJob(jobs, index, message) {\n  const job = {\n    ...jobs[index],\n    status: message.status,\n    finished: message.finished,\n  };\n  return [...jobs.slice(0, index), job, ...jobs.slice(index + 1)];\n}\n"]},"metadata":{},"sourceType":"module"}