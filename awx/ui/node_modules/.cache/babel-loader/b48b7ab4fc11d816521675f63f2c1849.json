{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines';\nimport { Tooltip } from '../Tooltip';\nexport var variantIcons = {\n  success: CheckCircleIcon,\n  danger: ExclamationCircleIcon,\n  warning: ExclamationTriangleIcon,\n  info: InfoCircleIcon,\n  default: BellIcon\n};\nexport var NotificationDrawerListItemHeader = function NotificationDrawerListItemHeader(_a) {\n  var children = _a.children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$icon = _a.icon,\n      icon = _a$icon === void 0 ? null : _a$icon,\n      srTitle = _a.srTitle,\n      title = _a.title,\n      _a$variant = _a.variant,\n      variant = _a$variant === void 0 ? 'default' : _a$variant,\n      _a$truncateTitle = _a.truncateTitle,\n      truncateTitle = _a$truncateTitle === void 0 ? 0 : _a$truncateTitle,\n      tooltipPosition = _a.tooltipPosition,\n      props = __rest(_a, [\"children\", \"className\", \"icon\", \"srTitle\", \"title\", \"variant\", \"truncateTitle\", \"tooltipPosition\"]);\n\n  var titleRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isTooltipVisible = _React$useState2[0],\n      setIsTooltipVisible = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n    var showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  var Icon = variantIcons[variant];\n  var Title = React.createElement(\"h2\", Object.assign({}, isTooltipVisible && {\n    tabIndex: 0\n  }, {\n    ref: titleRef,\n    className: css(styles.notificationDrawerListItemHeaderTitle, truncateTitle && styles.modifiers.truncate)\n  }), srTitle && React.createElement(\"span\", {\n    className: css(a11yStyles.screenReader)\n  }, srTitle), title);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerListItemHeader, className)\n  }), React.createElement(\"span\", {\n    className: css(styles.notificationDrawerListItemHeaderIcon)\n  }, icon ? icon : React.createElement(Icon, null)), isTooltipVisible ? React.createElement(Tooltip, {\n    content: title,\n    position: tooltipPosition\n  }, Title) : Title), children && React.createElement(\"div\", {\n    className: css(styles.notificationDrawerListItemAction)\n  }, children));\n};\nNotificationDrawerListItemHeader.displayName = 'NotificationDrawerListItemHeader';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/NotificationDrawer/NotificationDrawerListItemHeader.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\n\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines';\n\nimport { Tooltip, TooltipPosition } from '../Tooltip';\n\nexport const variantIcons = {\n  success: CheckCircleIcon,\n  danger: ExclamationCircleIcon,\n  warning: ExclamationTriangleIcon,\n  info: InfoCircleIcon,\n  default: BellIcon\n};\n\nexport interface NotificationDrawerListItemHeaderProps extends React.HTMLProps<HTMLDivElement> {\n  /**  Actions rendered inside the notification drawer list item header */\n  children?: React.ReactNode;\n  /**  Additional classes for notification drawer list item header. */\n  className?: string;\n  /**  Add custom icon for notification drawer list item header */\n  icon?: React.ReactNode;\n  /**  Notification drawer list item header screen reader title */\n  srTitle?: string;\n  /**  Notification drawer list item title */\n  title: string;\n  /**  Variant indicates the severity level */\n  variant?: 'success' | 'danger' | 'warning' | 'info' | 'default';\n  /** Truncate title to number of lines */\n  truncateTitle?: number;\n  /** Position of the tooltip which is displayed if text is truncated */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n}\n\nexport const NotificationDrawerListItemHeader: React.FunctionComponent<NotificationDrawerListItemHeaderProps> = ({\n  children,\n  className = '',\n  icon = null,\n  srTitle,\n  title,\n  variant = 'default',\n  truncateTitle = 0,\n  tooltipPosition,\n  ...props\n}: NotificationDrawerListItemHeaderProps) => {\n  const titleRef = React.useRef(null);\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useEffect(() => {\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  const Icon = variantIcons[variant];\n  const Title = (\n    <h2\n      {...(isTooltipVisible && { tabIndex: 0 })}\n      ref={titleRef}\n      className={css(styles.notificationDrawerListItemHeaderTitle, truncateTitle && styles.modifiers.truncate)}\n    >\n      {srTitle && <span className={css(a11yStyles.screenReader)}>{srTitle}</span>}\n      {title}\n    </h2>\n  );\n\n  return (\n    <React.Fragment>\n      <div {...props} className={css(styles.notificationDrawerListItemHeader, className)}>\n        <span className={css(styles.notificationDrawerListItemHeaderIcon)}>{icon ? icon : <Icon />}</span>\n        {isTooltipVisible ? (\n          <Tooltip content={title} position={tooltipPosition}>\n            {Title}\n          </Tooltip>\n        ) : (\n          Title\n        )}\n      </div>\n      {children && <div className={css(styles.notificationDrawerListItemAction)}>{children}</div>}\n    </React.Fragment>\n  );\n};\nNotificationDrawerListItemHeader.displayName = 'NotificationDrawerListItemHeader';\n"]},"metadata":{},"sourceType":"module"}