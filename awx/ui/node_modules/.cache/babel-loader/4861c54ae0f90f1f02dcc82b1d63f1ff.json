{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _defineProperty from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import React,{useCallback,useEffect}from'react';import{useHistory,useRouteMatch}from'react-router-dom';import{Formik}from'formik';import{Form}from'@patternfly/react-core';import{CardBody}from'components/Card';import ContentError from'components/ContentError';import ContentLoading from'components/ContentLoading';import{FormSubmitError}from'components/FormField';import{FormColumnLayout,FormFullWidthLayout}from'components/FormLayout';import{useSettings}from'contexts/Settings';import useModal from'hooks/useModal';import useRequest from'hooks/useRequest';import{SettingsAPI}from'api';import{RevertAllAlert,RevertFormActionGroup}from'../../shared';import{BooleanField,ChoiceField,EncryptedField,InputField,ObjectField}from'../../shared/SharedFields';import{formatJson}from'../../shared/settingUtils';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function filterByPrefix(data,prefix){return Object.keys(data).filter(function(key){return key.includes(prefix);}).reduce(function(obj,key){obj[key]=data[key];return obj;},{});}function LDAPEdit(){var history=useHistory();var _useModal=useModal(),isModalOpen=_useModal.isModalOpen,toggleModal=_useModal.toggleModal,closeModal=_useModal.closeModal;var _useSettings=useSettings(),options=_useSettings.PUT;var _useRouteMatch=useRouteMatch('/settings/ldap/:category/edit'),category=_useRouteMatch.params.category;var ldapCategory=category==='default'?'AUTH_LDAP_':\"AUTH_LDAP_\".concat(category,\"_\");var _useRequest=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$SettingsAPI$re,data,mergedData,allCategories;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return SettingsAPI.readCategory('ldap');case 2:_yield$SettingsAPI$re=_context.sent;data=_yield$SettingsAPI$re.data;mergedData={};Object.keys(data).forEach(function(key){if(!options[key]){return;}mergedData[key]=options[key];mergedData[key].value=data[key];});allCategories={AUTH_LDAP_1_:filterByPrefix(mergedData,'AUTH_LDAP_1_'),AUTH_LDAP_2_:filterByPrefix(mergedData,'AUTH_LDAP_2_'),AUTH_LDAP_3_:filterByPrefix(mergedData,'AUTH_LDAP_3_'),AUTH_LDAP_4_:filterByPrefix(mergedData,'AUTH_LDAP_4_'),AUTH_LDAP_5_:filterByPrefix(mergedData,'AUTH_LDAP_5_'),AUTH_LDAP_:_objectSpread({},mergedData)};Object.keys(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({},allCategories.AUTH_LDAP_1_),allCategories.AUTH_LDAP_2_),allCategories.AUTH_LDAP_3_),allCategories.AUTH_LDAP_4_),allCategories.AUTH_LDAP_5_)).forEach(function(keyToOmit){delete allCategories.AUTH_LDAP_[keyToOmit];});return _context.abrupt(\"return\",allCategories[ldapCategory]);case 9:case\"end\":return _context.stop();}}},_callee);})),[options,ldapCategory]),null),isLoading=_useRequest.isLoading,error=_useRequest.error,fetchLDAP=_useRequest.request,ldap=_useRequest.result;useEffect(function(){fetchLDAP();},[fetchLDAP]);var _useRequest2=useRequest(useCallback(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return SettingsAPI.updateAll(values);case 2:history.push(\"/settings/ldap/\".concat(category,\"/details\"));case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x){return _ref2.apply(this,arguments);};}(),[history,category]),null),submitError=_useRequest2.error,submitForm=_useRequest2.request;var handleSubmit=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(form){var _submitForm;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return submitForm((_submitForm={},_defineProperty(_submitForm,\"\".concat(ldapCategory,\"BIND_DN\"),form[\"\".concat(ldapCategory,\"BIND_DN\")]),_defineProperty(_submitForm,\"\".concat(ldapCategory,\"BIND_PASSWORD\"),form[\"\".concat(ldapCategory,\"BIND_PASSWORD\")]),_defineProperty(_submitForm,\"\".concat(ldapCategory,\"DENY_GROUP\"),form[\"\".concat(ldapCategory,\"DENY_GROUP\")]),_defineProperty(_submitForm,\"\".concat(ldapCategory,\"GROUP_TYPE\"),form[\"\".concat(ldapCategory,\"GROUP_TYPE\")]),_defineProperty(_submitForm,\"\".concat(ldapCategory,\"REQUIRE_GROUP\"),form[\"\".concat(ldapCategory,\"REQUIRE_GROUP\")]),_defineProperty(_submitForm,\"\".concat(ldapCategory,\"SERVER_URI\"),form[\"\".concat(ldapCategory,\"SERVER_URI\")]),_defineProperty(_submitForm,\"\".concat(ldapCategory,\"START_TLS\"),form[\"\".concat(ldapCategory,\"START_TLS\")]),_defineProperty(_submitForm,\"\".concat(ldapCategory,\"USER_DN_TEMPLATE\"),form[\"\".concat(ldapCategory,\"USER_DN_TEMPLATE\")]),_defineProperty(_submitForm,\"\".concat(ldapCategory,\"GROUP_SEARCH\"),formatJson(form[\"\".concat(ldapCategory,\"GROUP_SEARCH\")])),_defineProperty(_submitForm,\"\".concat(ldapCategory,\"GROUP_TYPE_PARAMS\"),formatJson(form[\"\".concat(ldapCategory,\"GROUP_TYPE_PARAMS\")])),_defineProperty(_submitForm,\"\".concat(ldapCategory,\"ORGANIZATION_MAP\"),formatJson(form[\"\".concat(ldapCategory,\"ORGANIZATION_MAP\")])),_defineProperty(_submitForm,\"\".concat(ldapCategory,\"TEAM_MAP\"),formatJson(form[\"\".concat(ldapCategory,\"TEAM_MAP\")])),_defineProperty(_submitForm,\"\".concat(ldapCategory,\"USER_ATTR_MAP\"),formatJson(form[\"\".concat(ldapCategory,\"USER_ATTR_MAP\")])),_defineProperty(_submitForm,\"\".concat(ldapCategory,\"USER_FLAGS_BY_GROUP\"),formatJson(form[\"\".concat(ldapCategory,\"USER_FLAGS_BY_GROUP\")])),_defineProperty(_submitForm,\"\".concat(ldapCategory,\"USER_SEARCH\"),formatJson(form[\"\".concat(ldapCategory,\"USER_SEARCH\")])),_submitForm));case 2:case\"end\":return _context3.stop();}}},_callee3);}));return function handleSubmit(_x2){return _ref3.apply(this,arguments);};}();var handleRevertAll=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var defaultValues;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:defaultValues=Object.assign.apply(Object,_toConsumableArray(Object.entries(ldap).map(function(_ref5){var _ref6=_slicedToArray(_ref5,2),key=_ref6[0],value=_ref6[1];return _defineProperty({},key,value.default);})));_context4.next=3;return submitForm(defaultValues);case 3:closeModal();case 4:case\"end\":return _context4.stop();}}},_callee4);}));return function handleRevertAll(){return _ref4.apply(this,arguments);};}();var handleCancel=function handleCancel(){history.push(\"/settings/ldap/\".concat(category,\"/details\"));};var initialValues=function initialValues(fields){return Object.keys(fields).reduce(function(acc,key){if(fields[key].type==='list'||fields[key].type==='nested object'){acc[key]=fields[key].value?JSON.stringify(fields[key].value,null,2):null;}else{var _fields$key$value;acc[key]=(_fields$key$value=fields[key].value)!==null&&_fields$key$value!==void 0?_fields$key$value:'';}return acc;},{});};return/*#__PURE__*/_jsxs(CardBody,{children:[isLoading&&/*#__PURE__*/_jsx(ContentLoading,{}),!isLoading&&error&&/*#__PURE__*/_jsx(ContentError,{error:error}),!isLoading&&ldap&&/*#__PURE__*/_jsx(Formik,{initialValues:initialValues(ldap),onSubmit:handleSubmit,children:function children(formik){return/*#__PURE__*/_jsxs(Form,{autoComplete:\"off\",onSubmit:formik.handleSubmit,children:[/*#__PURE__*/_jsxs(FormColumnLayout,{children:[/*#__PURE__*/_jsx(InputField,{name:\"\".concat(ldapCategory,\"SERVER_URI\"),config:ldap[\"\".concat(ldapCategory,\"SERVER_URI\")]}),/*#__PURE__*/_jsx(EncryptedField,{name:\"\".concat(ldapCategory,\"BIND_PASSWORD\"),config:ldap[\"\".concat(ldapCategory,\"BIND_PASSWORD\")]}),/*#__PURE__*/_jsx(ChoiceField,{name:\"\".concat(ldapCategory,\"GROUP_TYPE\"),config:ldap[\"\".concat(ldapCategory,\"GROUP_TYPE\")]}),/*#__PURE__*/_jsx(BooleanField,{name:\"\".concat(ldapCategory,\"START_TLS\"),config:ldap[\"\".concat(ldapCategory,\"START_TLS\")]}),/*#__PURE__*/_jsxs(FormFullWidthLayout,{children:[/*#__PURE__*/_jsx(InputField,{name:\"\".concat(ldapCategory,\"BIND_DN\"),config:ldap[\"\".concat(ldapCategory,\"BIND_DN\")]}),/*#__PURE__*/_jsx(InputField,{name:\"\".concat(ldapCategory,\"USER_DN_TEMPLATE\"),config:ldap[\"\".concat(ldapCategory,\"USER_DN_TEMPLATE\")]}),/*#__PURE__*/_jsx(InputField,{name:\"\".concat(ldapCategory,\"REQUIRE_GROUP\"),config:ldap[\"\".concat(ldapCategory,\"REQUIRE_GROUP\")]}),/*#__PURE__*/_jsx(InputField,{name:\"\".concat(ldapCategory,\"DENY_GROUP\"),config:ldap[\"\".concat(ldapCategory,\"DENY_GROUP\")]})]}),/*#__PURE__*/_jsx(ObjectField,{name:\"\".concat(ldapCategory,\"USER_SEARCH\"),config:ldap[\"\".concat(ldapCategory,\"USER_SEARCH\")]}),/*#__PURE__*/_jsx(ObjectField,{name:\"\".concat(ldapCategory,\"GROUP_SEARCH\"),config:ldap[\"\".concat(ldapCategory,\"GROUP_SEARCH\")]}),/*#__PURE__*/_jsx(ObjectField,{name:\"\".concat(ldapCategory,\"USER_ATTR_MAP\"),config:ldap[\"\".concat(ldapCategory,\"USER_ATTR_MAP\")]}),/*#__PURE__*/_jsx(ObjectField,{name:\"\".concat(ldapCategory,\"GROUP_TYPE_PARAMS\"),config:ldap[\"\".concat(ldapCategory,\"GROUP_TYPE_PARAMS\")]}),/*#__PURE__*/_jsx(ObjectField,{name:\"\".concat(ldapCategory,\"USER_FLAGS_BY_GROUP\"),config:ldap[\"\".concat(ldapCategory,\"USER_FLAGS_BY_GROUP\")]}),/*#__PURE__*/_jsx(ObjectField,{name:\"\".concat(ldapCategory,\"ORGANIZATION_MAP\"),config:ldap[\"\".concat(ldapCategory,\"ORGANIZATION_MAP\")]}),/*#__PURE__*/_jsx(ObjectField,{name:\"\".concat(ldapCategory,\"TEAM_MAP\"),config:ldap[\"\".concat(ldapCategory,\"TEAM_MAP\")]}),submitError&&/*#__PURE__*/_jsx(FormSubmitError,{error:submitError})]}),/*#__PURE__*/_jsx(RevertFormActionGroup,{onCancel:handleCancel,onSubmit:formik.handleSubmit,onRevert:toggleModal}),isModalOpen&&/*#__PURE__*/_jsx(RevertAllAlert,{onClose:closeModal,onRevertAll:handleRevertAll})]});}})]});}export default LDAPEdit;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Setting/LDAP/LDAPEdit/LDAPEdit.js"],"names":["React","useCallback","useEffect","useHistory","useRouteMatch","Formik","Form","CardBody","ContentError","ContentLoading","FormSubmitError","FormColumnLayout","FormFullWidthLayout","useSettings","useModal","useRequest","SettingsAPI","RevertAllAlert","RevertFormActionGroup","BooleanField","ChoiceField","EncryptedField","InputField","ObjectField","formatJson","filterByPrefix","data","prefix","Object","keys","filter","key","includes","reduce","obj","LDAPEdit","history","isModalOpen","toggleModal","closeModal","options","PUT","category","params","ldapCategory","readCategory","mergedData","forEach","value","allCategories","AUTH_LDAP_1_","AUTH_LDAP_2_","AUTH_LDAP_3_","AUTH_LDAP_4_","AUTH_LDAP_5_","AUTH_LDAP_","keyToOmit","isLoading","error","fetchLDAP","request","ldap","result","values","updateAll","push","submitError","submitForm","handleSubmit","form","handleRevertAll","defaultValues","assign","entries","map","default","handleCancel","initialValues","fields","acc","type","JSON","stringify","formik"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { Form } from '@patternfly/react-core';\nimport { CardBody } from 'components/Card';\nimport ContentError from 'components/ContentError';\nimport ContentLoading from 'components/ContentLoading';\nimport { FormSubmitError } from 'components/FormField';\nimport { FormColumnLayout, FormFullWidthLayout } from 'components/FormLayout';\nimport { useSettings } from 'contexts/Settings';\nimport useModal from 'hooks/useModal';\nimport useRequest from 'hooks/useRequest';\nimport { SettingsAPI } from 'api';\nimport { RevertAllAlert, RevertFormActionGroup } from '../../shared';\nimport {\n  BooleanField,\n  ChoiceField,\n  EncryptedField,\n  InputField,\n  ObjectField,\n} from '../../shared/SharedFields';\nimport { formatJson } from '../../shared/settingUtils';\n\nfunction filterByPrefix(data, prefix) {\n  return Object.keys(data)\n    .filter((key) => key.includes(prefix))\n    .reduce((obj, key) => {\n      obj[key] = data[key];\n      return obj;\n    }, {});\n}\n\nfunction LDAPEdit() {\n  const history = useHistory();\n  const { isModalOpen, toggleModal, closeModal } = useModal();\n  const { PUT: options } = useSettings();\n  const {\n    params: { category },\n  } = useRouteMatch('/settings/ldap/:category/edit');\n  const ldapCategory =\n    category === 'default' ? 'AUTH_LDAP_' : `AUTH_LDAP_${category}_`;\n\n  const {\n    isLoading,\n    error,\n    request: fetchLDAP,\n    result: ldap,\n  } = useRequest(\n    useCallback(async () => {\n      const { data } = await SettingsAPI.readCategory('ldap');\n\n      const mergedData = {};\n      Object.keys(data).forEach((key) => {\n        if (!options[key]) {\n          return;\n        }\n        mergedData[key] = options[key];\n        mergedData[key].value = data[key];\n      });\n\n      const allCategories = {\n        AUTH_LDAP_1_: filterByPrefix(mergedData, 'AUTH_LDAP_1_'),\n        AUTH_LDAP_2_: filterByPrefix(mergedData, 'AUTH_LDAP_2_'),\n        AUTH_LDAP_3_: filterByPrefix(mergedData, 'AUTH_LDAP_3_'),\n        AUTH_LDAP_4_: filterByPrefix(mergedData, 'AUTH_LDAP_4_'),\n        AUTH_LDAP_5_: filterByPrefix(mergedData, 'AUTH_LDAP_5_'),\n        AUTH_LDAP_: { ...mergedData },\n      };\n      Object.keys({\n        ...allCategories.AUTH_LDAP_1_,\n        ...allCategories.AUTH_LDAP_2_,\n        ...allCategories.AUTH_LDAP_3_,\n        ...allCategories.AUTH_LDAP_4_,\n        ...allCategories.AUTH_LDAP_5_,\n      }).forEach((keyToOmit) => {\n        delete allCategories.AUTH_LDAP_[keyToOmit];\n      });\n\n      return allCategories[ldapCategory];\n    }, [options, ldapCategory]),\n    null\n  );\n\n  useEffect(() => {\n    fetchLDAP();\n  }, [fetchLDAP]);\n\n  const { error: submitError, request: submitForm } = useRequest(\n    useCallback(\n      async (values) => {\n        await SettingsAPI.updateAll(values);\n        history.push(`/settings/ldap/${category}/details`);\n      },\n      [history, category]\n    ),\n    null\n  );\n\n  const handleSubmit = async (form) => {\n    await submitForm({\n      [`${ldapCategory}BIND_DN`]: form[`${ldapCategory}BIND_DN`],\n      [`${ldapCategory}BIND_PASSWORD`]: form[`${ldapCategory}BIND_PASSWORD`],\n      [`${ldapCategory}DENY_GROUP`]: form[`${ldapCategory}DENY_GROUP`],\n      [`${ldapCategory}GROUP_TYPE`]: form[`${ldapCategory}GROUP_TYPE`],\n      [`${ldapCategory}REQUIRE_GROUP`]: form[`${ldapCategory}REQUIRE_GROUP`],\n      [`${ldapCategory}SERVER_URI`]: form[`${ldapCategory}SERVER_URI`],\n      [`${ldapCategory}START_TLS`]: form[`${ldapCategory}START_TLS`],\n      [`${ldapCategory}USER_DN_TEMPLATE`]:\n        form[`${ldapCategory}USER_DN_TEMPLATE`],\n      [`${ldapCategory}GROUP_SEARCH`]: formatJson(\n        form[`${ldapCategory}GROUP_SEARCH`]\n      ),\n      [`${ldapCategory}GROUP_TYPE_PARAMS`]: formatJson(\n        form[`${ldapCategory}GROUP_TYPE_PARAMS`]\n      ),\n      [`${ldapCategory}ORGANIZATION_MAP`]: formatJson(\n        form[`${ldapCategory}ORGANIZATION_MAP`]\n      ),\n      [`${ldapCategory}TEAM_MAP`]: formatJson(form[`${ldapCategory}TEAM_MAP`]),\n      [`${ldapCategory}USER_ATTR_MAP`]: formatJson(\n        form[`${ldapCategory}USER_ATTR_MAP`]\n      ),\n      [`${ldapCategory}USER_FLAGS_BY_GROUP`]: formatJson(\n        form[`${ldapCategory}USER_FLAGS_BY_GROUP`]\n      ),\n      [`${ldapCategory}USER_SEARCH`]: formatJson(\n        form[`${ldapCategory}USER_SEARCH`]\n      ),\n    });\n  };\n\n  const handleRevertAll = async () => {\n    const defaultValues = Object.assign(\n      ...Object.entries(ldap).map(([key, value]) => ({\n        [key]: value.default,\n      }))\n    );\n    await submitForm(defaultValues);\n    closeModal();\n  };\n\n  const handleCancel = () => {\n    history.push(`/settings/ldap/${category}/details`);\n  };\n\n  const initialValues = (fields) =>\n    Object.keys(fields).reduce((acc, key) => {\n      if (fields[key].type === 'list' || fields[key].type === 'nested object') {\n        acc[key] = fields[key].value\n          ? JSON.stringify(fields[key].value, null, 2)\n          : null;\n      } else {\n        acc[key] = fields[key].value ?? '';\n      }\n      return acc;\n    }, {});\n\n  return (\n    <CardBody>\n      {isLoading && <ContentLoading />}\n      {!isLoading && error && <ContentError error={error} />}\n      {!isLoading && ldap && (\n        <Formik initialValues={initialValues(ldap)} onSubmit={handleSubmit}>\n          {(formik) => (\n            <Form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\n              <FormColumnLayout>\n                <InputField\n                  name={`${ldapCategory}SERVER_URI`}\n                  config={ldap[`${ldapCategory}SERVER_URI`]}\n                />\n                <EncryptedField\n                  name={`${ldapCategory}BIND_PASSWORD`}\n                  config={ldap[`${ldapCategory}BIND_PASSWORD`]}\n                />\n                <ChoiceField\n                  name={`${ldapCategory}GROUP_TYPE`}\n                  config={ldap[`${ldapCategory}GROUP_TYPE`]}\n                />\n                <BooleanField\n                  name={`${ldapCategory}START_TLS`}\n                  config={ldap[`${ldapCategory}START_TLS`]}\n                />\n                <FormFullWidthLayout>\n                  <InputField\n                    name={`${ldapCategory}BIND_DN`}\n                    config={ldap[`${ldapCategory}BIND_DN`]}\n                  />\n                  <InputField\n                    name={`${ldapCategory}USER_DN_TEMPLATE`}\n                    config={ldap[`${ldapCategory}USER_DN_TEMPLATE`]}\n                  />\n                  <InputField\n                    name={`${ldapCategory}REQUIRE_GROUP`}\n                    config={ldap[`${ldapCategory}REQUIRE_GROUP`]}\n                  />\n                  <InputField\n                    name={`${ldapCategory}DENY_GROUP`}\n                    config={ldap[`${ldapCategory}DENY_GROUP`]}\n                  />\n                </FormFullWidthLayout>\n                <ObjectField\n                  name={`${ldapCategory}USER_SEARCH`}\n                  config={ldap[`${ldapCategory}USER_SEARCH`]}\n                />\n                <ObjectField\n                  name={`${ldapCategory}GROUP_SEARCH`}\n                  config={ldap[`${ldapCategory}GROUP_SEARCH`]}\n                />\n                <ObjectField\n                  name={`${ldapCategory}USER_ATTR_MAP`}\n                  config={ldap[`${ldapCategory}USER_ATTR_MAP`]}\n                />\n                <ObjectField\n                  name={`${ldapCategory}GROUP_TYPE_PARAMS`}\n                  config={ldap[`${ldapCategory}GROUP_TYPE_PARAMS`]}\n                />\n                <ObjectField\n                  name={`${ldapCategory}USER_FLAGS_BY_GROUP`}\n                  config={ldap[`${ldapCategory}USER_FLAGS_BY_GROUP`]}\n                />\n                <ObjectField\n                  name={`${ldapCategory}ORGANIZATION_MAP`}\n                  config={ldap[`${ldapCategory}ORGANIZATION_MAP`]}\n                />\n                <ObjectField\n                  name={`${ldapCategory}TEAM_MAP`}\n                  config={ldap[`${ldapCategory}TEAM_MAP`]}\n                />\n                {submitError && <FormSubmitError error={submitError} />}\n              </FormColumnLayout>\n              <RevertFormActionGroup\n                onCancel={handleCancel}\n                onSubmit={formik.handleSubmit}\n                onRevert={toggleModal}\n              />\n              {isModalOpen && (\n                <RevertAllAlert\n                  onClose={closeModal}\n                  onRevertAll={handleRevertAll}\n                />\n              )}\n            </Form>\n          )}\n        </Formik>\n      )}\n    </CardBody>\n  );\n}\n\nexport default LDAPEdit;\n"]},"metadata":{},"sourceType":"module"}