{"ast":null,"code":"// @ts-nocheck\nimport getBasePlacement from './getBasePlacement';\nimport getVariation from './getVariation';\nimport getMainAxisFromPlacement from './getMainAxisFromPlacement';\nimport { top, right, bottom, left, start, end } from '../enums';\n/**\n *\n */\n\nexport default function computeOffsets(_ref) {\n  var reference = _ref.reference,\n      element = _ref.element,\n      placement = _ref.placement;\n  var basePlacement = placement ? getBasePlacement(placement) : null;\n  var variation = placement ? getVariation(placement) : null;\n  var commonX = reference.x + reference.width / 2 - element.width / 2;\n  var commonY = reference.y + reference.height / 2 - element.height / 2;\n  var offsets;\n\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n  if (mainAxis != null) {\n    var len = mainAxis === 'y' ? 'height' : 'width';\n\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference[len] / 2 - element[len] / 2);\n        break;\n\n      case end:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference[len] / 2 - element[len] / 2);\n        break;\n\n      default:\n    }\n  }\n\n  return offsets;\n}","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/utils/computeOffsets.ts"],"names":[],"mappings":"AAAA;AACA,OAAO,gBAAP,MAA6B,oBAA7B;AACA,OAAO,YAAP,MAAyB,gBAAzB;AACA,OAAO,wBAAP,MAAqC,4BAArC;AAEA,SAAS,GAAT,EAAc,KAAd,EAAqB,MAArB,EAA6B,IAA7B,EAAmC,KAAnC,EAA0C,GAA1C,QAAgE,UAAhE;AAEA;;AAEG;;AACH,eAAc,SAAU,cAAV,OASb;AAAA,MARC,SAQD,QARC,SAQD;AAAA,MAPC,OAOD,QAPC,OAOD;AAAA,MANC,SAMD,QANC,SAMD;AACC,MAAM,aAAa,GAAG,SAAS,GAAG,gBAAgB,CAAC,SAAD,CAAnB,GAAiC,IAAhE;AACA,MAAM,SAAS,GAAG,SAAS,GAAG,YAAY,CAAC,SAAD,CAAf,GAA6B,IAAxD;AACA,MAAM,OAAO,GAAG,SAAS,CAAC,CAAV,GAAc,SAAS,CAAC,KAAV,GAAkB,CAAhC,GAAoC,OAAO,CAAC,KAAR,GAAgB,CAApE;AACA,MAAM,OAAO,GAAG,SAAS,CAAC,CAAV,GAAc,SAAS,CAAC,MAAV,GAAmB,CAAjC,GAAqC,OAAO,CAAC,MAAR,GAAiB,CAAtE;AAEA,MAAI,OAAJ;;AACA,UAAQ,aAAR;AACE,SAAK,GAAL;AACE,MAAA,OAAO,GAAG;AACR,QAAA,CAAC,EAAE,OADK;AAER,QAAA,CAAC,EAAE,SAAS,CAAC,CAAV,GAAc,OAAO,CAAC;AAFjB,OAAV;AAIA;;AACF,SAAK,MAAL;AACE,MAAA,OAAO,GAAG;AACR,QAAA,CAAC,EAAE,OADK;AAER,QAAA,CAAC,EAAE,SAAS,CAAC,CAAV,GAAc,SAAS,CAAC;AAFnB,OAAV;AAIA;;AACF,SAAK,KAAL;AACE,MAAA,OAAO,GAAG;AACR,QAAA,CAAC,EAAE,SAAS,CAAC,CAAV,GAAc,SAAS,CAAC,KADnB;AAER,QAAA,CAAC,EAAE;AAFK,OAAV;AAIA;;AACF,SAAK,IAAL;AACE,MAAA,OAAO,GAAG;AACR,QAAA,CAAC,EAAE,SAAS,CAAC,CAAV,GAAc,OAAO,CAAC,KADjB;AAER,QAAA,CAAC,EAAE;AAFK,OAAV;AAIA;;AACF;AACE,MAAA,OAAO,GAAG;AACR,QAAA,CAAC,EAAE,SAAS,CAAC,CADL;AAER,QAAA,CAAC,EAAE,SAAS,CAAC;AAFL,OAAV;AA1BJ;;AAgCA,MAAM,QAAQ,GAAG,aAAa,GAAG,wBAAwB,CAAC,aAAD,CAA3B,GAA6C,IAA3E;;AAEA,MAAI,QAAQ,IAAI,IAAhB,EAAsB;AACpB,QAAM,GAAG,GAAG,QAAQ,KAAK,GAAb,GAAmB,QAAnB,GAA8B,OAA1C;;AAEA,YAAQ,SAAR;AACE,WAAK,KAAL;AACE,QAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,QAAD,CAAlB,IAAgC,IAAI,CAAC,KAAL,CAAW,SAAS,CAAC,GAAD,CAAT,GAAiB,CAAjB,GAAqB,OAAO,CAAC,GAAD,CAAP,GAAe,CAA/C,CAApD;AACA;;AACF,WAAK,GAAL;AACE,QAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,QAAD,CAAlB,IAAgC,IAAI,CAAC,IAAL,CAAU,SAAS,CAAC,GAAD,CAAT,GAAiB,CAAjB,GAAqB,OAAO,CAAC,GAAD,CAAP,GAAe,CAA9C,CAApD;AACA;;AACF;AAPF;AASD;;AAED,SAAO,OAAP;AACD","sourcesContent":["// @ts-nocheck\nimport getBasePlacement from './getBasePlacement';\nimport getVariation from './getVariation';\nimport getMainAxisFromPlacement from './getMainAxisFromPlacement';\nimport { Rect, PositioningStrategy, Offsets, ClientRectObject } from '../types';\nimport { top, right, bottom, left, start, end, Placement } from '../enums';\n\n/**\n *\n */\nexport default function computeOffsets({\n  reference,\n  element,\n  placement\n}: {\n  reference: Rect | ClientRectObject;\n  element: Rect | ClientRectObject;\n  strategy: PositioningStrategy;\n  placement?: Placement;\n}): Offsets {\n  const basePlacement = placement ? getBasePlacement(placement) : null;\n  const variation = placement ? getVariation(placement) : null;\n  const commonX = reference.x + reference.width / 2 - element.width / 2;\n  const commonY = reference.y + reference.height / 2 - element.height / 2;\n\n  let offsets;\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  const mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n  if (mainAxis != null) {\n    const len = mainAxis === 'y' ? 'height' : 'width';\n\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference[len] / 2 - element[len] / 2);\n        break;\n      case end:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference[len] / 2 - element[len] / 2);\n        break;\n      default:\n    }\n  }\n\n  return offsets;\n}\n"]},"metadata":{},"sourceType":"module"}