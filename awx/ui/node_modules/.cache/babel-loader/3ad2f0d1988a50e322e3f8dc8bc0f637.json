{"ast":null,"code":"import { __rest } from \"tslib\";\n/* eslint-disable no-console */\n\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport BarsIcon from '@patternfly/react-icons/dist/esm/icons/bars-icon';\nimport { Button, ButtonVariant } from '../../components/Button';\nimport { PageContextConsumer } from './Page';\nexport var PageHeader = function PageHeader(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$logo = _a.logo,\n      logo = _a$logo === void 0 ? null : _a$logo,\n      _a$logoProps = _a.logoProps,\n      logoProps = _a$logoProps === void 0 ? null : _a$logoProps,\n      _a$logoComponent = _a.logoComponent,\n      logoComponent = _a$logoComponent === void 0 ? 'a' : _a$logoComponent,\n      _a$headerTools = _a.headerTools,\n      headerTools = _a$headerTools === void 0 ? null : _a$headerTools,\n      _a$topNav = _a.topNav,\n      topNav = _a$topNav === void 0 ? null : _a$topNav,\n      _a$isNavOpen = _a.isNavOpen,\n      isNavOpen = _a$isNavOpen === void 0 ? true : _a$isNavOpen,\n      _a$isManagedSidebar = _a.isManagedSidebar,\n      deprecatedIsManagedSidebar = _a$isManagedSidebar === void 0 ? undefined : _a$isManagedSidebar,\n      _a$role = _a.role,\n      role = _a$role === void 0 ? undefined : _a$role,\n      _a$showNavToggle = _a.showNavToggle,\n      showNavToggle = _a$showNavToggle === void 0 ? false : _a$showNavToggle,\n      _a$onNavToggle = _a.onNavToggle,\n      onNavToggle = _a$onNavToggle === void 0 ? function () {\n    return undefined;\n  } : _a$onNavToggle,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? 'Global navigation' : _a$ariaLabel,\n      _a$ariaControls = _a['aria-controls'],\n      ariaControls = _a$ariaControls === void 0 ? null : _a$ariaControls,\n      props = __rest(_a, [\"className\", \"logo\", \"logoProps\", \"logoComponent\", \"headerTools\", \"topNav\", \"isNavOpen\", \"isManagedSidebar\", \"role\", \"showNavToggle\", \"onNavToggle\", 'aria-label', 'aria-controls']);\n\n  var LogoComponent = logoComponent;\n\n  if ([false, true].includes(deprecatedIsManagedSidebar)) {\n    console.warn('isManagedSidebar is deprecated in the PageHeader component. To make the sidebar toggle uncontrolled, pass this prop in the Page component');\n  }\n\n  return React.createElement(PageContextConsumer, null, function (_ref) {\n    var isManagedSidebar = _ref.isManagedSidebar,\n        managedOnNavToggle = _ref.onNavToggle,\n        managedIsNavOpen = _ref.isNavOpen;\n    var navToggle = isManagedSidebar ? managedOnNavToggle : onNavToggle;\n    var navOpen = isManagedSidebar ? managedIsNavOpen : isNavOpen;\n    return React.createElement(\"header\", Object.assign({\n      role: role,\n      className: css(styles.pageHeader, className)\n    }, props), (showNavToggle || logo) && React.createElement(\"div\", {\n      className: css(styles.pageHeaderBrand)\n    }, showNavToggle && React.createElement(\"div\", {\n      className: css(styles.pageHeaderBrandToggle)\n    }, React.createElement(Button, {\n      id: \"nav-toggle\",\n      onClick: navToggle,\n      \"aria-label\": ariaLabel,\n      \"aria-controls\": ariaControls,\n      \"aria-expanded\": navOpen ? 'true' : 'false',\n      variant: ButtonVariant.plain\n    }, React.createElement(BarsIcon, null))), logo && React.createElement(LogoComponent, Object.assign({\n      className: css(styles.pageHeaderBrandLink)\n    }, logoProps), logo)), topNav && React.createElement(\"div\", {\n      className: css(styles.pageHeaderNav)\n    }, topNav), headerTools);\n  });\n};\nPageHeader.displayName = 'PageHeader';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Page/PageHeader.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport BarsIcon from '@patternfly/react-icons/dist/esm/icons/bars-icon';\nimport { Button, ButtonVariant } from '../../components/Button';\nimport { PageContextConsumer, PageContextProps } from './Page';\n\nexport interface PageHeaderProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the page header */\n  className?: string;\n  /** Component to render the logo/brand, use <Brand /> */\n  logo?: React.ReactNode;\n  /** Additional props passed to the logo anchor container */\n  logoProps?: object;\n  /** Component to use to wrap the passed <logo> */\n  logoComponent?: React.ReactNode;\n  /** Component to render the header tools, use <PageHeaderTools />  */\n  headerTools?: React.ReactNode;\n  /** Component to render navigation within the header, use <Nav /> */\n  topNav?: React.ReactNode;\n  /** True to show the nav toggle button (toggles side nav) */\n  showNavToggle?: boolean;\n  /** True if the side nav is shown  */\n  isNavOpen?: boolean;\n  /** This prop is no longer managed through PageHeader but in the Page component. */\n  isManagedSidebar?: boolean;\n  /** Sets the value for role on the <main> element */\n  role?: string;\n  /** Callback function to handle the side nav toggle button, managed by the Page component if the Page isManagedSidebar prop is set to true */\n  onNavToggle?: () => void;\n  /** Aria Label for the nav toggle button */\n  'aria-label'?: string;\n}\n\nexport const PageHeader: React.FunctionComponent<PageHeaderProps> = ({\n  className = '',\n  logo = null as React.ReactNode,\n  logoProps = null as object,\n  logoComponent = 'a',\n  headerTools = null as React.ReactNode,\n  topNav = null as React.ReactNode,\n  isNavOpen = true,\n  isManagedSidebar: deprecatedIsManagedSidebar = undefined,\n  role = undefined as string,\n  showNavToggle = false,\n  onNavToggle = () => undefined as any,\n  'aria-label': ariaLabel = 'Global navigation',\n  'aria-controls': ariaControls = null,\n  ...props\n}: PageHeaderProps) => {\n  const LogoComponent = logoComponent as any;\n  if ([false, true].includes(deprecatedIsManagedSidebar)) {\n    console.warn(\n      'isManagedSidebar is deprecated in the PageHeader component. To make the sidebar toggle uncontrolled, pass this prop in the Page component'\n    );\n  }\n  return (\n    <PageContextConsumer>\n      {({ isManagedSidebar, onNavToggle: managedOnNavToggle, isNavOpen: managedIsNavOpen }: PageContextProps) => {\n        const navToggle = isManagedSidebar ? managedOnNavToggle : onNavToggle;\n        const navOpen = isManagedSidebar ? managedIsNavOpen : isNavOpen;\n\n        return (\n          <header role={role} className={css(styles.pageHeader, className)} {...props}>\n            {(showNavToggle || logo) && (\n              <div className={css(styles.pageHeaderBrand)}>\n                {showNavToggle && (\n                  <div className={css(styles.pageHeaderBrandToggle)}>\n                    <Button\n                      id=\"nav-toggle\"\n                      onClick={navToggle}\n                      aria-label={ariaLabel}\n                      aria-controls={ariaControls}\n                      aria-expanded={navOpen ? 'true' : 'false'}\n                      variant={ButtonVariant.plain}\n                    >\n                      <BarsIcon />\n                    </Button>\n                  </div>\n                )}\n                {logo && (\n                  <LogoComponent className={css(styles.pageHeaderBrandLink)} {...logoProps}>\n                    {logo}\n                  </LogoComponent>\n                )}\n              </div>\n            )}\n            {topNav && <div className={css(styles.pageHeaderNav)}>{topNav}</div>}\n            {headerTools}\n          </header>\n        );\n      }}\n    </PageContextConsumer>\n  );\n};\nPageHeader.displayName = 'PageHeader';\n"]},"metadata":{},"sourceType":"module"}