{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Chip } from '../Chip';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps } from '../../helpers';\nexport var ChipGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChipGroup, _React$Component);\n\n  var _super = _createSuper(ChipGroup);\n\n  function ChipGroup(props) {\n    var _this;\n\n    _classCallCheck(this, ChipGroup);\n\n    _this = _super.call(this, props);\n    _this.headingRef = React.createRef();\n\n    _this.toggleCollapse = function () {\n      _this.setState(function (prevState) {\n        return {\n          isOpen: !prevState.isOpen,\n          isTooltipVisible: Boolean(_this.headingRef.current && _this.headingRef.current.offsetWidth < _this.headingRef.current.scrollWidth)\n        };\n      });\n    };\n\n    _this.state = {\n      isOpen: _this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(ChipGroup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n      });\n    }\n  }, {\n    key: \"renderLabel\",\n    value: function renderLabel(id) {\n      var _this$props = this.props,\n          categoryName = _this$props.categoryName,\n          tooltipPosition = _this$props.tooltipPosition;\n      var isTooltipVisible = this.state.isTooltipVisible;\n      return isTooltipVisible ? React.createElement(Tooltip, {\n        position: tooltipPosition,\n        content: categoryName\n      }, React.createElement(\"span\", {\n        tabIndex: 0,\n        ref: this.headingRef,\n        className: css(styles.chipGroupLabel)\n      }, React.createElement(\"span\", {\n        id: id\n      }, categoryName))) : React.createElement(\"span\", {\n        ref: this.headingRef,\n        className: css(styles.chipGroupLabel),\n        id: id\n      }, categoryName);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          categoryName = _a.categoryName,\n          children = _a.children,\n          className = _a.className,\n          isClosable = _a.isClosable,\n          closeBtnAriaLabel = _a.closeBtnAriaLabel,\n          ariaLabel = _a['aria-label'],\n          onClick = _a.onClick,\n          onOverflowChipClick = _a.onOverflowChipClick,\n          numChips = _a.numChips,\n          expandedText = _a.expandedText,\n          collapsedText = _a.collapsedText,\n          ouiaId = _a.ouiaId,\n          defaultIsOpen = _a.defaultIsOpen,\n          tooltipPosition = _a.tooltipPosition,\n          rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"onOverflowChipClick\", \"numChips\", \"expandedText\", \"collapsedText\", \"ouiaId\", \"defaultIsOpen\", \"tooltipPosition\"]);\n\n      var isOpen = this.state.isOpen;\n      var numChildren = React.Children.count(children);\n      var collapsedTextResult = fillTemplate(collapsedText, {\n        remaining: React.Children.count(children) - numChips\n      });\n\n      var renderChipGroup = function renderChipGroup(id) {\n        var chipArray = !isOpen ? React.Children.toArray(children).slice(0, numChips) : React.Children.toArray(children);\n        return React.createElement(\"div\", Object.assign({\n          className: css(styles.chipGroup, className, categoryName && styles.modifiers.category),\n          role: \"group\"\n        }, categoryName && {\n          'aria-labelledby': id\n        }, !categoryName && {\n          'aria-label': ariaLabel\n        }, getOUIAProps(ChipGroup.displayName, ouiaId)), React.createElement(\"div\", {\n          className: css(styles.chipGroupMain)\n        }, categoryName && _this2.renderLabel(id), React.createElement(\"ul\", Object.assign({\n          className: css(styles.chipGroupList)\n        }, categoryName && {\n          'aria-labelledby': id\n        }, !categoryName && {\n          'aria-label': ariaLabel\n        }, {\n          role: \"list\"\n        }, rest), chipArray.map(function (child, i) {\n          return React.createElement(\"li\", {\n            className: css(styles.chipGroupListItem),\n            key: i\n          }, child);\n        }), numChildren > numChips && React.createElement(\"li\", {\n          className: css(styles.chipGroupListItem)\n        }, React.createElement(Chip, {\n          isOverflowChip: true,\n          onClick: function onClick(event) {\n            _this2.toggleCollapse();\n\n            onOverflowChipClick(event);\n          },\n          component: \"button\"\n        }, isOpen ? expandedText : collapsedTextResult)))), isClosable && React.createElement(\"div\", {\n          className: css(styles.chipGroupClose)\n        }, React.createElement(Button, {\n          variant: \"plain\",\n          \"aria-label\": closeBtnAriaLabel,\n          onClick: onClick,\n          id: \"remove_group_\".concat(id),\n          \"aria-labelledby\": \"remove_group_\".concat(id, \" \").concat(id),\n          ouiaId: ouiaId || closeBtnAriaLabel\n        }, React.createElement(TimesCircleIcon, {\n          \"aria-hidden\": \"true\"\n        }))));\n      };\n\n      return numChildren === 0 ? null : React.createElement(GenerateId, null, function (randomId) {\n        return renderChipGroup(_this2.props.id || randomId);\n      });\n    }\n  }]);\n\n  return ChipGroup;\n}(React.Component);\nChipGroup.displayName = 'ChipGroup';\nChipGroup.defaultProps = {\n  expandedText: 'Show Less',\n  collapsedText: '${remaining} more',\n  categoryName: '',\n  defaultIsOpen: false,\n  numChips: 3,\n  isClosable: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: function onClick(_e) {\n    return undefined;\n  },\n  onOverflowChipClick: function onOverflowChipClick(_e) {\n    return undefined;\n  },\n  closeBtnAriaLabel: 'Close chip group',\n  tooltipPosition: 'top',\n  'aria-label': 'Chip group category'\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/ChipGroup/ChipGroup.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Chip } from '../Chip';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps, OUIAProps } from '../../helpers';\n\nexport interface ChipGroupProps extends React.HTMLProps<HTMLUListElement>, OUIAProps {\n  /** Content rendered inside the chip group. Should be <Chip> elements. */\n  children?: React.ReactNode;\n  /** Additional classes added to the chip item */\n  className?: string;\n  /** Flag for having the chip group default to expanded */\n  defaultIsOpen?: boolean;\n  /** Customizable \"Show Less\" text string */\n  expandedText?: string;\n  /** Customizeable template string. Use variable \"${remaining}\" for the overflow chip count. */\n  collapsedText?: string;\n  /** Category name text for the chip group category.  If this prop is supplied the chip group with have a label and category styling applied */\n  categoryName?: string;\n  /** Aria label for chip group that does not have a category name */\n  'aria-label'?: string;\n  /** Set number of chips to show before overflow */\n  numChips?: number;\n  /** Flag if chip group can be closed*/\n  isClosable?: boolean;\n  /** Aria label for close button */\n  closeBtnAriaLabel?: string;\n  /** Function that is called when clicking on the chip group close button */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Function that is called when clicking on the overflow (expand/collapse) chip button */\n  onOverflowChipClick?: (event: React.MouseEvent) => void;\n  /** Position of the tooltip which is displayed if the category name text is longer */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n}\n\ninterface ChipGroupState {\n  isOpen: boolean;\n  isTooltipVisible: boolean;\n}\n\nexport class ChipGroup extends React.Component<ChipGroupProps, ChipGroupState> {\n  static displayName = 'ChipGroup';\n  constructor(props: ChipGroupProps) {\n    super(props);\n    this.state = {\n      isOpen: this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n  }\n  private headingRef = React.createRef<HTMLSpanElement>();\n\n  static defaultProps: ChipGroupProps = {\n    expandedText: 'Show Less',\n    collapsedText: '${remaining} more',\n    categoryName: '',\n    defaultIsOpen: false,\n    numChips: 3,\n    isClosable: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e: React.MouseEvent) => undefined as any,\n    onOverflowChipClick: (_e: React.MouseEvent) => undefined as any,\n    closeBtnAriaLabel: 'Close chip group',\n    tooltipPosition: 'top',\n    'aria-label': 'Chip group category'\n  };\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(\n        this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth\n      )\n    });\n  }\n\n  toggleCollapse = () => {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen,\n      isTooltipVisible: Boolean(\n        this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth\n      )\n    }));\n  };\n\n  renderLabel(id: string) {\n    const { categoryName, tooltipPosition } = this.props;\n    const { isTooltipVisible } = this.state;\n    return isTooltipVisible ? (\n      <Tooltip position={tooltipPosition} content={categoryName}>\n        <span tabIndex={0} ref={this.headingRef} className={css(styles.chipGroupLabel)}>\n          <span id={id}>{categoryName}</span>\n        </span>\n      </Tooltip>\n    ) : (\n      <span ref={this.headingRef} className={css(styles.chipGroupLabel)} id={id}>\n        {categoryName}\n      </span>\n    );\n  }\n\n  render() {\n    const {\n      categoryName,\n      children,\n      className,\n      isClosable,\n      closeBtnAriaLabel,\n      'aria-label': ariaLabel,\n      onClick,\n      onOverflowChipClick,\n      numChips,\n      expandedText,\n      collapsedText,\n      ouiaId,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      defaultIsOpen,\n      tooltipPosition,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n    const { isOpen } = this.state;\n    const numChildren = React.Children.count(children);\n    const collapsedTextResult = fillTemplate(collapsedText as string, {\n      remaining: React.Children.count(children) - numChips\n    });\n\n    const renderChipGroup = (id: string) => {\n      const chipArray = !isOpen\n        ? React.Children.toArray(children).slice(0, numChips)\n        : React.Children.toArray(children);\n\n      return (\n        <div\n          className={css(styles.chipGroup, className, categoryName && styles.modifiers.category)}\n          role=\"group\"\n          {...(categoryName && { 'aria-labelledby': id })}\n          {...(!categoryName && { 'aria-label': ariaLabel })}\n          {...getOUIAProps(ChipGroup.displayName, ouiaId)}\n        >\n          <div className={css(styles.chipGroupMain)}>\n            {categoryName && this.renderLabel(id)}\n            <ul\n              className={css(styles.chipGroupList)}\n              {...(categoryName && { 'aria-labelledby': id })}\n              {...(!categoryName && { 'aria-label': ariaLabel })}\n              role=\"list\"\n              {...rest}\n            >\n              {chipArray.map((child, i) => (\n                <li className={css(styles.chipGroupListItem)} key={i}>\n                  {child}\n                </li>\n              ))}\n              {numChildren > numChips && (\n                <li className={css(styles.chipGroupListItem)}>\n                  <Chip\n                    isOverflowChip\n                    onClick={event => {\n                      this.toggleCollapse();\n                      onOverflowChipClick(event);\n                    }}\n                    component=\"button\"\n                  >\n                    {isOpen ? expandedText : collapsedTextResult}\n                  </Chip>\n                </li>\n              )}\n            </ul>\n          </div>\n          {isClosable && (\n            <div className={css(styles.chipGroupClose)}>\n              <Button\n                variant=\"plain\"\n                aria-label={closeBtnAriaLabel}\n                onClick={onClick}\n                id={`remove_group_${id}`}\n                aria-labelledby={`remove_group_${id} ${id}`}\n                ouiaId={ouiaId || closeBtnAriaLabel}\n              >\n                <TimesCircleIcon aria-hidden=\"true\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      );\n    };\n\n    return numChildren === 0 ? null : <GenerateId>{randomId => renderChipGroup(this.props.id || randomId)}</GenerateId>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}