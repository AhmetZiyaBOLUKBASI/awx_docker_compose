{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarContext } from './ToolbarUtils';\nexport var ToolbarExpandableContent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarExpandableContent, _React$Component);\n\n  var _super = _createSuper(ToolbarExpandableContent);\n\n  function ToolbarExpandableContent() {\n    _classCallCheck(this, ToolbarExpandableContent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ToolbarExpandableContent, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          expandableContentRef = _a.expandableContentRef,\n          chipContainerRef = _a.chipContainerRef,\n          isExpanded = _a.isExpanded,\n          clearAllFilters = _a.clearAllFilters,\n          clearFiltersButtonText = _a.clearFiltersButtonText,\n          showClearFiltersButton = _a.showClearFiltersButton,\n          props = __rest(_a, [\"className\", \"expandableContentRef\", \"chipContainerRef\", \"isExpanded\", \"clearAllFilters\", \"clearFiltersButtonText\", \"showClearFiltersButton\"]);\n\n      var _this$context = this.context,\n          numberOfFilters = _this$context.numberOfFilters,\n          customChipGroupContent = _this$context.customChipGroupContent;\n\n      var clearChipGroups = function clearChipGroups() {\n        clearAllFilters();\n      };\n\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.toolbarExpandableContent, className),\n        ref: expandableContentRef\n      }, props), React.createElement(ToolbarGroup, null), numberOfFilters > 0 && React.createElement(ToolbarGroup, {\n        className: styles.modifiers.chipContainer\n      }, React.createElement(ToolbarGroup, {\n        ref: chipContainerRef\n      }), showClearFiltersButton && !customChipGroupContent && React.createElement(ToolbarItem, null, React.createElement(Button, {\n        variant: \"link\",\n        onClick: clearChipGroups,\n        isInline: true\n      }, clearFiltersButtonText)), customChipGroupContent && customChipGroupContent));\n    }\n  }]);\n\n  return ToolbarExpandableContent;\n}(React.Component);\nToolbarExpandableContent.displayName = 'ToolbarExpandableContent';\nToolbarExpandableContent.contextType = ToolbarContext;\nToolbarExpandableContent.defaultProps = {\n  isExpanded: false,\n  clearFiltersButtonText: 'Clear all filters'\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarExpandableContent.tsx"],"names":[],"mappings":";;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,yDAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AAGA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,MAAT,QAAuB,WAAvB;AACA,SAAS,cAAT,QAA+B,gBAA/B;AAoBA,WAAa,wBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WASE,kBAAM;AACE,UAAA,EAAA,GAUF,KAVE,KAAA;AAAA,UACJ,SADI,GAQkB,EARlB,CACJ,SADI;AAAA,UAEJ,oBAFI,GAQkB,EARlB,CAEJ,oBAFI;AAAA,UAGJ,gBAHI,GAQkB,EARlB,CAGJ,gBAHI;AAAA,UAKJ,UALI,GAQkB,EARlB,CAKJ,UALI;AAAA,UAMJ,eANI,GAQkB,EARlB,CAMJ,eANI;AAAA,UAOJ,sBAPI,GAQkB,EARlB,CAOJ,sBAPI;AAAA,UAQJ,sBARI,GAQkB,EARlB,CAQJ,sBARI;AAAA,UASD,KATC,GASI,MAAA,CAAA,EAAA,EATJ,CAAA,WAAA,EAAA,sBAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,wBAAA,EAAA,wBAAA,CASI,CATJ;;AAWN,0BAAoD,KAAK,OAAzD;AAAA,UAAQ,eAAR,iBAAQ,eAAR;AAAA,UAAyB,sBAAzB,iBAAyB,sBAAzB;;AAEA,UAAM,eAAe,GAAG,SAAlB,eAAkB,GAAK;AAC3B,QAAA,eAAe;AAChB,OAFD;;AAIA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAK,QAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,wBAAR,EAAkC,SAAlC,CAAnB;AAAiE,QAAA,GAAG,EAAE;AAAtE,OAAA,EAAgG,KAAhG,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,CADF,EAEG,eAAe,GAAG,CAAlB,IACC,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AAAC,QAAA,SAAS,EAAE,MAAM,CAAC,SAAP,CAAiB;AAA7B,OAAb,EACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AAAC,QAAA,GAAG,EAAE;AAAN,OAAb,CADF,EAEG,sBAAsB,IAAI,CAAC,sBAA3B,IACC,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY,IAAZ,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,QAAA,OAAO,EAAC,MAAT;AAAgB,QAAA,OAAO,EAAE,eAAzB;AAA0C,QAAA,QAAQ,EAAA;AAAlD,OAAP,EACG,sBADH,CADF,CAHJ,EASG,sBAAsB,IAAI,sBAT7B,CAHJ,CADF;AAkBD;AA7CH;;AAAA;AAAA,EAA8C,KAAK,CAAC,SAApD;AACS,wBAAA,CAAA,WAAA,GAAc,0BAAd;AACA,wBAAA,CAAA,WAAA,GAAc,cAAd;AAEA,wBAAA,CAAA,YAAA,GAA4D;AACjE,EAAA,UAAU,EAAE,KADqD;AAEjE,EAAA,sBAAsB,EAAE;AAFyC,CAA5D","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\n\nimport { RefObject } from 'react';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToolbarExpandableContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Classes added to the root element of the data toolbar expandable content */\n  className?: string;\n  /** Flag indicating the expandable content is expanded */\n  isExpanded?: boolean;\n  /** Expandable content reference for passing to data toolbar children */\n  expandableContentRef?: RefObject<HTMLDivElement>;\n  /** Chip container reference for passing to data toolbar children */\n  chipContainerRef?: RefObject<any>;\n  /** optional callback for clearing all filters in the toolbar */\n  clearAllFilters?: () => void;\n  /** Text to display in the clear all filters button */\n  clearFiltersButtonText?: string;\n  /** Flag indicating that the clear all filters button should be visible */\n  showClearFiltersButton: boolean;\n}\n\nexport class ToolbarExpandableContent extends React.Component<ToolbarExpandableContentProps> {\n  static displayName = 'ToolbarExpandableContent';\n  static contextType = ToolbarContext;\n  context!: React.ContextType<typeof ToolbarContext>;\n  static defaultProps: PickOptional<ToolbarExpandableContentProps> = {\n    isExpanded: false,\n    clearFiltersButtonText: 'Clear all filters'\n  };\n\n  render() {\n    const {\n      className,\n      expandableContentRef,\n      chipContainerRef,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isExpanded,\n      clearAllFilters,\n      clearFiltersButtonText,\n      showClearFiltersButton,\n      ...props\n    } = this.props;\n    const { numberOfFilters, customChipGroupContent } = this.context;\n\n    const clearChipGroups = () => {\n      clearAllFilters();\n    };\n\n    return (\n      <div className={css(styles.toolbarExpandableContent, className)} ref={expandableContentRef} {...props}>\n        <ToolbarGroup />\n        {numberOfFilters > 0 && (\n          <ToolbarGroup className={styles.modifiers.chipContainer}>\n            <ToolbarGroup ref={chipContainerRef} />\n            {showClearFiltersButton && !customChipGroupContent && (\n              <ToolbarItem>\n                <Button variant=\"link\" onClick={clearChipGroups} isInline>\n                  {clearFiltersButtonText}\n                </Button>\n              </ToolbarItem>\n            )}\n            {customChipGroupContent && customChipGroupContent}\n          </ToolbarGroup>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}