{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/ToggleGroup/toggle-group';\nimport { ToggleGroupItemVariant, ToggleGroupItemElement } from './ToggleGroupItemElement';\nexport var ToggleGroupItem = function ToggleGroupItem(_a) {\n  var text = _a.text,\n      icon = _a.icon,\n      className = _a.className,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      _a$isSelected = _a.isSelected,\n      isSelected = _a$isSelected === void 0 ? false : _a$isSelected,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? '' : _a$ariaLabel,\n      _a$onChange = _a.onChange,\n      onChange = _a$onChange === void 0 ? function () {} : _a$onChange,\n      _a$buttonId = _a.buttonId,\n      buttonId = _a$buttonId === void 0 ? '' : _a$buttonId,\n      props = __rest(_a, [\"text\", \"icon\", \"className\", \"isDisabled\", \"isSelected\", 'aria-label', \"onChange\", \"buttonId\"]);\n\n  var handleChange = function handleChange(event) {\n    onChange(!isSelected, event);\n  };\n\n  if (!ariaLabel && icon && !text) {\n    /* eslint-disable no-console */\n    console.warn('An accessible aria-label is required when using the toggle group item icon variant.');\n  }\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.toggleGroupItem, className)\n  }, props), React.createElement(\"button\", Object.assign({\n    type: \"button\",\n    className: css(styles.toggleGroupButton, isSelected && styles.modifiers.selected),\n    \"aria-pressed\": isSelected,\n    onClick: handleChange\n  }, ariaLabel && {\n    'aria-label': ariaLabel\n  }, isDisabled && {\n    disabled: true\n  }, buttonId && {\n    id: buttonId\n  }), icon ? React.createElement(ToggleGroupItemElement, {\n    variant: ToggleGroupItemVariant.icon\n  }, icon) : null, text ? React.createElement(ToggleGroupItemElement, {\n    variant: ToggleGroupItemVariant.text\n  }, text) : null));\n};\nToggleGroupItem.displayName = 'ToggleGroupItem';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/ToggleGroup/ToggleGroupItem.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,kEAAnB;AACA,SAAS,sBAAT,EAAiC,sBAAjC,QAA+D,0BAA/D;AAqBA,OAAO,IAAM,eAAe,GAAkD,SAAjE,eAAiE,CAAC,EAAD,EAUnD;AAVoD,MAC7E,IAD6E,GAQhE,EARgE,CAC7E,IAD6E;AAAA,MAE7E,IAF6E,GAQhE,EARgE,CAE7E,IAF6E;AAAA,MAG7E,SAH6E,GAQhE,EARgE,CAG7E,SAH6E;AAAA,sBAQhE,EARgE,CAI7E,UAJ6E;AAAA,MAI7E,UAJ6E,8BAIhE,KAJgE;AAAA,sBAQhE,EARgE,CAK7E,UAL6E;AAAA,MAK7E,UAL6E,8BAKhE,KALgE;AAAA,qBAQhE,EARgE,CAM7E,YAN6E;AAAA,MAM/D,SAN+D,6BAMnD,EANmD;AAAA,oBAQhE,EARgE,CAO7E,QAP6E;AAAA,MAO7E,QAP6E,4BAOlE,YAAK,CAAG,CAP0D;AAAA,oBAQhE,EARgE,CAQ7E,QAR6E;AAAA,MAQ7E,QAR6E,4BAQlE,EARkE;AAAA,MAS1E,KAT0E,GASrE,MAAA,CAAA,EAAA,EATqE,CAAA,MAAA,EAAA,MAAA,EAAA,WAAA,EAAA,YAAA,EAAA,YAAA,EAAA,YAAA,EAAA,UAAA,EAAA,UAAA,CASrE,CATqE;;AAW7E,MAAM,YAAY,GAAG,SAAf,YAAe,CAAC,KAAD,EAAqB;AACxC,IAAA,QAAQ,CAAC,CAAC,UAAF,EAAc,KAAd,CAAR;AACD,GAFD;;AAIA,MAAI,CAAC,SAAD,IAAc,IAAd,IAAsB,CAAC,IAA3B,EAAiC;AAC/B;AACA,IAAA,OAAO,CAAC,IAAR,CAAa,qFAAb;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,eAAR,EAAyB,SAAzB;AAAnB,GAAA,EAA4D,KAA5D,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,iBAAR,EAA2B,UAAU,IAAI,MAAM,CAAC,SAAP,CAAiB,QAA1D,CAFhB;AAEmF,oBACnE,UAHhB;AAIE,IAAA,OAAO,EAAE;AAJX,GAAA,EAKO,SAAS,IAAI;AAAE,kBAAc;AAAhB,GALpB,EAMO,UAAU,IAAI;AAAE,IAAA,QAAQ,EAAE;AAAZ,GANrB,EAOO,QAAQ,IAAI;AAAE,IAAA,EAAE,EAAE;AAAN,GAPnB,CAAA,EASG,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,sBAAD,EAAuB;AAAC,IAAA,OAAO,EAAE,sBAAsB,CAAC;AAAjC,GAAvB,EAA+D,IAA/D,CAAH,GAAmG,IAT1G,EAUG,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,sBAAD,EAAuB;AAAC,IAAA,OAAO,EAAE,sBAAsB,CAAC;AAAjC,GAAvB,EAA+D,IAA/D,CAAH,GAAmG,IAV1G,CADF,CADF;AAgBD,CApCM;AAqCP,eAAe,CAAC,WAAhB,GAA8B,iBAA9B","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/ToggleGroup/toggle-group';\nimport { ToggleGroupItemVariant, ToggleGroupItemElement } from './ToggleGroupItemElement';\n\nexport interface ToggleGroupItemProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Text rendered inside the toggle group item */\n  text?: React.ReactNode;\n  /** Icon rendered inside the toggle group item */\n  icon?: React.ReactNode;\n  /** Additional classes added to the toggle group item */\n  className?: string;\n  /** Flag indicating if the toggle group item is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating if the toggle group item is selected */\n  isSelected?: boolean;\n  /** required when icon is used with no supporting text */\n  'aria-label'?: string;\n  /** Optional id for the button within the toggle group item */\n  buttonId?: string;\n  /** A callback for when the toggle group item selection changes. */\n  onChange?: (selected: boolean, event: React.MouseEvent<any> | React.KeyboardEvent | MouseEvent) => void;\n}\n\nexport const ToggleGroupItem: React.FunctionComponent<ToggleGroupItemProps> = ({\n  text,\n  icon,\n  className,\n  isDisabled = false,\n  isSelected = false,\n  'aria-label': ariaLabel = '',\n  onChange = () => {},\n  buttonId = '',\n  ...props\n}: ToggleGroupItemProps) => {\n  const handleChange = (event: any): void => {\n    onChange(!isSelected, event);\n  };\n\n  if (!ariaLabel && icon && !text) {\n    /* eslint-disable no-console */\n    console.warn('An accessible aria-label is required when using the toggle group item icon variant.');\n  }\n\n  return (\n    <div className={css(styles.toggleGroupItem, className)} {...props}>\n      <button\n        type=\"button\"\n        className={css(styles.toggleGroupButton, isSelected && styles.modifiers.selected)}\n        aria-pressed={isSelected}\n        onClick={handleChange}\n        {...(ariaLabel && { 'aria-label': ariaLabel })}\n        {...(isDisabled && { disabled: true })}\n        {...(buttonId && { id: buttonId })}\n      >\n        {icon ? <ToggleGroupItemElement variant={ToggleGroupItemVariant.icon}>{icon}</ToggleGroupItemElement> : null}\n        {text ? <ToggleGroupItemElement variant={ToggleGroupItemVariant.text}>{text}</ToggleGroupItemElement> : null}\n      </button>\n    </div>\n  );\n};\nToggleGroupItem.displayName = 'ToggleGroupItem';\n"]},"metadata":{},"sourceType":"module"}