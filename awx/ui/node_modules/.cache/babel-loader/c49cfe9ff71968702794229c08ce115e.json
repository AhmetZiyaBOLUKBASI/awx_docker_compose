{"ast":null,"code":"import { canUseDOM } from './util';\n/**\n * This function creates a ResizeObserver used to handle resize events for the given containerRef. If ResizeObserver\n * or the given containerRef are not available, a window resize event listener is used by default.\n *\n * Example 1:\n *\n * private containerRef = React.createRef<HTMLDivElement>();\n * private observer: any = () => {};\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n * }\n *\n * public componentWillUnmount() {\n *   this.observer();\n * }\n *\n * private handleResize = () => {\n *   if (this.containerRef.current && this.containerRef.current.clientWidth) {\n *     this.setState({ width: this.containerRef.current.clientWidth });\n *   }\n * };\n *\n * public render() {\n *   return (\n *     <div ref={this.containerRef} >\n *       <Chart width={this.state.width} ... />\n *     </div>\n *   );\n * }\n *\n * Example 2:\n *\n * private inputRef = React.createRef<HTMLInputElement>();\n * private observer: any = () => {};\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.inputRef.current, this.handleResize);\n * }\n *\n * public componentWillUnmount() {\n *   this.observer();\n * }\n *\n * private handleResize = () => {\n *   if (this.inputRef.current) {\n *     trimLeft(inputRef.current, String(this.props.value));\n *   }\n * };\n *\n * public render() {\n *   return (\n *     <input ref={this.inputRef} ... />\n *   );\n * }\n *\n * @param {Element} containerRefElement The container reference to observe\n * @param {Function} handleResize The function to call for resize events\n * @return {Function} The function used to unobserve resize events\n */\n\nexport var getResizeObserver = function getResizeObserver(containerRefElement, handleResize) {\n  var unobserve;\n\n  if (canUseDOM) {\n    var _window = window,\n        ResizeObserver = _window.ResizeObserver;\n\n    if (containerRefElement && ResizeObserver) {\n      var resizeObserver = new ResizeObserver(function (entries) {\n        // Wrap resize function in requestAnimationFrame to avoid \"ResizeObserver loop limit exceeded\" errors\n        window.requestAnimationFrame(function () {\n          if (Array.isArray(entries) && entries.length > 0) {\n            handleResize();\n          }\n        });\n      });\n      resizeObserver.observe(containerRefElement);\n\n      unobserve = function unobserve() {\n        return resizeObserver.unobserve(containerRefElement);\n      };\n    } else {\n      window.addEventListener('resize', handleResize);\n\n      unobserve = function unobserve() {\n        return window.removeEventListener('resize', handleResize);\n      };\n    }\n  }\n\n  return function () {\n    if (unobserve) {\n      unobserve();\n    }\n  };\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/helpers/resizeObserver.tsx"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,QAA1B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DG;;AACH,OAAO,IAAM,iBAAiB,GAAG,SAApB,iBAAoB,CAAC,mBAAD,EAA+B,YAA/B,EAA2D;AAC1F,MAAI,SAAJ;;AAEA,MAAI,SAAJ,EAAe;AACb,kBAA2B,MAA3B;AAAA,QAAQ,cAAR,WAAQ,cAAR;;AAEA,QAAI,mBAAmB,IAAI,cAA3B,EAA2C;AACzC,UAAM,cAAc,GAAG,IAAI,cAAJ,CAAmB,UAAC,OAAD,EAAiB;AACzD;AACA,QAAA,MAAM,CAAC,qBAAP,CAA6B,YAAK;AAChC,cAAI,KAAK,CAAC,OAAN,CAAc,OAAd,KAA0B,OAAO,CAAC,MAAR,GAAiB,CAA/C,EAAkD;AAChD,YAAA,YAAY;AACb;AACF,SAJD;AAKD,OAPsB,CAAvB;AAQA,MAAA,cAAc,CAAC,OAAf,CAAuB,mBAAvB;;AACA,MAAA,SAAS,GAAG;AAAA,eAAM,cAAc,CAAC,SAAf,CAAyB,mBAAzB,CAAN;AAAA,OAAZ;AACD,KAXD,MAWO;AACL,MAAA,MAAM,CAAC,gBAAP,CAAwB,QAAxB,EAAkC,YAAlC;;AACA,MAAA,SAAS,GAAG;AAAA,eAAM,MAAM,CAAC,mBAAP,CAA2B,QAA3B,EAAqC,YAArC,CAAN;AAAA,OAAZ;AACD;AACF;;AACD,SAAO,YAAK;AACV,QAAI,SAAJ,EAAe;AACb,MAAA,SAAS;AACV;AACF,GAJD;AAKD,CA3BM","sourcesContent":["import { canUseDOM } from './util';\n\n/**\n * This function creates a ResizeObserver used to handle resize events for the given containerRef. If ResizeObserver\n * or the given containerRef are not available, a window resize event listener is used by default.\n *\n * Example 1:\n *\n * private containerRef = React.createRef<HTMLDivElement>();\n * private observer: any = () => {};\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n * }\n *\n * public componentWillUnmount() {\n *   this.observer();\n * }\n *\n * private handleResize = () => {\n *   if (this.containerRef.current && this.containerRef.current.clientWidth) {\n *     this.setState({ width: this.containerRef.current.clientWidth });\n *   }\n * };\n *\n * public render() {\n *   return (\n *     <div ref={this.containerRef} >\n *       <Chart width={this.state.width} ... />\n *     </div>\n *   );\n * }\n *\n * Example 2:\n *\n * private inputRef = React.createRef<HTMLInputElement>();\n * private observer: any = () => {};\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.inputRef.current, this.handleResize);\n * }\n *\n * public componentWillUnmount() {\n *   this.observer();\n * }\n *\n * private handleResize = () => {\n *   if (this.inputRef.current) {\n *     trimLeft(inputRef.current, String(this.props.value));\n *   }\n * };\n *\n * public render() {\n *   return (\n *     <input ref={this.inputRef} ... />\n *   );\n * }\n *\n * @param {Element} containerRefElement The container reference to observe\n * @param {Function} handleResize The function to call for resize events\n * @return {Function} The function used to unobserve resize events\n */\nexport const getResizeObserver = (containerRefElement: Element, handleResize: () => void) => {\n  let unobserve: any;\n\n  if (canUseDOM) {\n    const { ResizeObserver } = window as any;\n\n    if (containerRefElement && ResizeObserver) {\n      const resizeObserver = new ResizeObserver((entries: any) => {\n        // Wrap resize function in requestAnimationFrame to avoid \"ResizeObserver loop limit exceeded\" errors\n        window.requestAnimationFrame(() => {\n          if (Array.isArray(entries) && entries.length > 0) {\n            handleResize();\n          }\n        });\n      });\n      resizeObserver.observe(containerRefElement);\n      unobserve = () => resizeObserver.unobserve(containerRefElement);\n    } else {\n      window.addEventListener('resize', handleResize);\n      unobserve = () => window.removeEventListener('resize', handleResize);\n    }\n  }\n  return () => {\n    if (unobserve) {\n      unobserve();\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}