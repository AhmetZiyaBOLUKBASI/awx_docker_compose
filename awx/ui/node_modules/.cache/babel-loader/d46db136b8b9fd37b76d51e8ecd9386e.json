{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem } from './ToolbarItem';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nexport var ToolbarFilter = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarFilter, _React$Component);\n\n  var _super = _createSuper(ToolbarFilter);\n\n  function ToolbarFilter(props) {\n    var _this;\n\n    _classCallCheck(this, ToolbarFilter);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isMounted: false\n    };\n    return _this;\n  }\n\n  _createClass(ToolbarFilter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          categoryName = _this$props.categoryName,\n          chips = _this$props.chips;\n      this.context.updateNumberFilters(typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString(), chips.length);\n      this.setState({\n        isMounted: true\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$props2 = this.props,\n          categoryName = _this$props2.categoryName,\n          chips = _this$props2.chips;\n      this.context.updateNumberFilters(typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString(), chips.length);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          chips = _a.chips,\n          deleteChipGroup = _a.deleteChipGroup,\n          deleteChip = _a.deleteChip,\n          chipGroupExpandedText = _a.chipGroupExpandedText,\n          chipGroupCollapsedText = _a.chipGroupCollapsedText,\n          categoryName = _a.categoryName,\n          showToolbarItem = _a.showToolbarItem,\n          props = __rest(_a, [\"children\", \"chips\", \"deleteChipGroup\", \"deleteChip\", \"chipGroupExpandedText\", \"chipGroupCollapsedText\", \"categoryName\", \"showToolbarItem\"]);\n\n      var _this$context = this.context,\n          isExpanded = _this$context.isExpanded,\n          chipGroupContentRef = _this$context.chipGroupContentRef;\n      var categoryKey = typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString();\n      var chipGroup = chips.length ? React.createElement(ToolbarItem, {\n        variant: \"chip-group\"\n      }, React.createElement(ChipGroup, {\n        key: categoryKey,\n        categoryName: typeof categoryName === 'string' ? categoryName : categoryName.name,\n        isClosable: deleteChipGroup !== undefined,\n        onClick: function onClick() {\n          return deleteChipGroup(categoryName);\n        },\n        collapsedText: chipGroupCollapsedText,\n        expandedText: chipGroupExpandedText\n      }, chips.map(function (chip) {\n        return typeof chip === 'string' ? React.createElement(Chip, {\n          key: chip,\n          onClick: function onClick() {\n            return deleteChip(categoryKey, chip);\n          }\n        }, chip) : React.createElement(Chip, {\n          key: chip.key,\n          onClick: function onClick() {\n            return deleteChip(categoryKey, chip);\n          }\n        }, chip.node);\n      }))) : null;\n\n      if (!isExpanded && this.state.isMounted) {\n        return React.createElement(React.Fragment, null, showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children), ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild));\n      }\n\n      return React.createElement(ToolbarContentContext.Consumer, null, function (_ref) {\n        var chipContainerRef = _ref.chipContainerRef;\n        return React.createElement(React.Fragment, null, showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children), chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current));\n      });\n    }\n  }]);\n\n  return ToolbarFilter;\n}(React.Component);\nToolbarFilter.displayName = 'ToolbarFilter';\nToolbarFilter.contextType = ToolbarContext;\nToolbarFilter.defaultProps = {\n  chips: [],\n  showToolbarItem: true\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarFilter.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem, ToolbarItemProps } from './ToolbarItem';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToolbarChipGroup {\n  /** A unique key to identify this chip group category */\n  key: string;\n  /** The category name to display for the chip group */\n  name: string;\n}\n\nexport interface ToolbarChip {\n  /** A unique key to identify this chip */\n  key: string;\n  /** The ReactNode to display in the chip */\n  node: React.ReactNode;\n}\n\nexport interface ToolbarFilterProps extends ToolbarItemProps {\n  /** An array of strings to be displayed as chips in the expandable content */\n  chips?: (string | ToolbarChip)[];\n  /** Callback passed by consumer used to close the entire chip group */\n  deleteChipGroup?: (category: string | ToolbarChipGroup) => void;\n  /** Callback passed by consumer used to delete a chip from the chips[] */\n  deleteChip?: (category: string | ToolbarChipGroup, chip: ToolbarChip | string) => void;\n  /** Customizable \"Show Less\" text string for the chip group */\n  chipGroupExpandedText?: string;\n  /** Customizeable template string for the chip group. Use variable \"${remaining}\" for the overflow chip count. */\n  chipGroupCollapsedText?: string;\n  /** Content to be rendered inside the data toolbar item associated with the chip group */\n  children: React.ReactNode;\n  /** Unique category name to be used as a label for the chip group */\n  categoryName: string | ToolbarChipGroup;\n  /** Flag to show the toolbar item */\n  showToolbarItem?: boolean;\n}\n\ninterface ToolbarFilterState {\n  isMounted: boolean;\n}\n\nexport class ToolbarFilter extends React.Component<ToolbarFilterProps, ToolbarFilterState> {\n  static displayName = 'ToolbarFilter';\n  static contextType = ToolbarContext;\n  context!: React.ContextType<typeof ToolbarContext>;\n  static defaultProps: PickOptional<ToolbarFilterProps> = {\n    chips: [] as (string | ToolbarChip)[],\n    showToolbarItem: true\n  };\n\n  constructor(props: ToolbarFilterProps) {\n    super(props);\n    this.state = {\n      isMounted: false\n    };\n  }\n\n  componentDidMount() {\n    const { categoryName, chips } = this.props;\n    this.context.updateNumberFilters(\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString(),\n      chips.length\n    );\n    this.setState({ isMounted: true });\n  }\n\n  componentDidUpdate() {\n    const { categoryName, chips } = this.props;\n    this.context.updateNumberFilters(\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString(),\n      chips.length\n    );\n  }\n\n  render() {\n    const {\n      children,\n      chips,\n      deleteChipGroup,\n      deleteChip,\n      chipGroupExpandedText,\n      chipGroupCollapsedText,\n      categoryName,\n      showToolbarItem,\n      ...props\n    } = this.props;\n    const { isExpanded, chipGroupContentRef } = this.context;\n    const categoryKey =\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString();\n\n    const chipGroup = chips.length ? (\n      <ToolbarItem variant=\"chip-group\">\n        <ChipGroup\n          key={categoryKey}\n          categoryName={typeof categoryName === 'string' ? categoryName : categoryName.name}\n          isClosable={deleteChipGroup !== undefined}\n          onClick={() => deleteChipGroup(categoryName)}\n          collapsedText={chipGroupCollapsedText}\n          expandedText={chipGroupExpandedText}\n        >\n          {chips.map(chip =>\n            typeof chip === 'string' ? (\n              <Chip key={chip} onClick={() => deleteChip(categoryKey, chip)}>\n                {chip}\n              </Chip>\n            ) : (\n              <Chip key={chip.key} onClick={() => deleteChip(categoryKey, chip)}>\n                {chip.node}\n              </Chip>\n            )\n          )}\n        </ChipGroup>\n      </ToolbarItem>\n    ) : null;\n\n    if (!isExpanded && this.state.isMounted) {\n      return (\n        <React.Fragment>\n          {showToolbarItem && <ToolbarItem {...props}>{children}</ToolbarItem>}\n          {ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild)}\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <ToolbarContentContext.Consumer>\n        {({ chipContainerRef }) => (\n          <React.Fragment>\n            {showToolbarItem && <ToolbarItem {...props}>{children}</ToolbarItem>}\n            {chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current)}\n          </React.Fragment>\n        )}\n      </ToolbarContentContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}