{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Pagination/pagination';\nimport { css } from '@patternfly/react-styles';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\nimport { Button, ButtonVariant } from '../Button';\nimport { pluralize } from '../../helpers';\nimport { KEY_CODES } from '../../helpers/constants';\nexport var Navigation = /*#__PURE__*/function (_React$Component) {\n  _inherits(Navigation, _React$Component);\n\n  var _super = _createSuper(Navigation);\n\n  function Navigation(props) {\n    var _this;\n\n    _classCallCheck(this, Navigation);\n\n    _this = _super.call(this, props);\n\n    _this.handleNewPage = function (_evt, newPage) {\n      var _this$props = _this.props,\n          perPage = _this$props.perPage,\n          onSetPage = _this$props.onSetPage;\n      var startIdx = (newPage - 1) * perPage;\n      var endIdx = newPage * perPage;\n      return onSetPage(_evt, newPage, perPage, startIdx, endIdx);\n    };\n\n    _this.state = {\n      userInputPage: _this.props.page\n    };\n    return _this;\n  }\n\n  _createClass(Navigation, [{\n    key: \"onChange\",\n    value: function onChange(event, lastPage) {\n      var inputPage = Navigation.parseInteger(event.target.value, lastPage);\n      this.setState({\n        userInputPage: Number.isNaN(inputPage) ? event.target.value : inputPage\n      });\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(event, page, lastPage, onPageInput) {\n      if (event.keyCode === KEY_CODES.ENTER) {\n        var inputPage = Navigation.parseInteger(this.state.userInputPage, lastPage);\n        onPageInput(event, Number.isNaN(inputPage) ? page : inputPage);\n        this.handleNewPage(event, Number.isNaN(inputPage) ? page : inputPage);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(lastState) {\n      if (this.props.page !== lastState.page && this.props.page <= this.props.lastPage && this.state.userInputPage !== this.props.page) {\n        this.setState({\n          userInputPage: this.props.page\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          page = _a.page,\n          perPage = _a.perPage,\n          onSetPage = _a.onSetPage,\n          isDisabled = _a.isDisabled,\n          itemCount = _a.itemCount,\n          lastPage = _a.lastPage,\n          firstPage = _a.firstPage,\n          pagesTitle = _a.pagesTitle,\n          pagesTitlePlural = _a.pagesTitlePlural,\n          toLastPage = _a.toLastPage,\n          toNextPage = _a.toNextPage,\n          toFirstPage = _a.toFirstPage,\n          toPreviousPage = _a.toPreviousPage,\n          currPage = _a.currPage,\n          paginationTitle = _a.paginationTitle,\n          ofWord = _a.ofWord,\n          onNextClick = _a.onNextClick,\n          onPreviousClick = _a.onPreviousClick,\n          onFirstClick = _a.onFirstClick,\n          onLastClick = _a.onLastClick,\n          onPageInput = _a.onPageInput,\n          className = _a.className,\n          isCompact = _a.isCompact,\n          props = __rest(_a, [\"page\", \"perPage\", \"onSetPage\", \"isDisabled\", \"itemCount\", \"lastPage\", \"firstPage\", \"pagesTitle\", \"pagesTitlePlural\", \"toLastPage\", \"toNextPage\", \"toFirstPage\", \"toPreviousPage\", \"currPage\", \"paginationTitle\", \"ofWord\", \"onNextClick\", \"onPreviousClick\", \"onFirstClick\", \"onLastClick\", \"onPageInput\", \"className\", \"isCompact\"]);\n\n      var userInputPage = this.state.userInputPage;\n      return React.createElement(\"nav\", Object.assign({\n        className: css(styles.paginationNav, className),\n        \"aria-label\": paginationTitle\n      }, props), !isCompact && React.createElement(\"div\", {\n        className: css(styles.paginationNavControl, styles.modifiers.first)\n      }, React.createElement(Button, {\n        variant: ButtonVariant.plain,\n        isDisabled: isDisabled || page === firstPage || page === 0,\n        \"aria-label\": toFirstPage,\n        \"data-action\": \"first\",\n        onClick: function onClick(event) {\n          onFirstClick(event, 1);\n\n          _this2.handleNewPage(event, 1);\n\n          _this2.setState({\n            userInputPage: 1\n          });\n        }\n      }, React.createElement(AngleDoubleLeftIcon, null))), React.createElement(\"div\", {\n        className: styles.paginationNavControl\n      }, React.createElement(Button, {\n        variant: ButtonVariant.plain,\n        isDisabled: isDisabled || page === firstPage || page === 0,\n        \"data-action\": \"previous\",\n        onClick: function onClick(event) {\n          var newPage = page - 1 >= 1 ? page - 1 : 1;\n          onPreviousClick(event, newPage);\n\n          _this2.handleNewPage(event, newPage);\n\n          _this2.setState({\n            userInputPage: newPage\n          });\n        },\n        \"aria-label\": toPreviousPage\n      }, React.createElement(AngleLeftIcon, null))), !isCompact && React.createElement(\"div\", {\n        className: styles.paginationNavPageSelect\n      }, React.createElement(\"input\", {\n        className: css(styles.formControl),\n        \"aria-label\": currPage,\n        type: \"number\",\n        disabled: isDisabled || itemCount && page === firstPage && page === lastPage && itemCount >= 0 || page === 0,\n        min: lastPage <= 0 && firstPage <= 0 ? 0 : 1,\n        max: lastPage,\n        value: userInputPage,\n        onKeyDown: function onKeyDown(event) {\n          return _this2.onKeyDown(event, page, lastPage, onPageInput);\n        },\n        onChange: function onChange(event) {\n          return _this2.onChange(event, lastPage);\n        }\n      }), (itemCount || itemCount === 0) && React.createElement(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, ofWord, \" \", pagesTitle ? pluralize(lastPage, pagesTitle, pagesTitlePlural) : lastPage)), React.createElement(\"div\", {\n        className: styles.paginationNavControl\n      }, React.createElement(Button, {\n        variant: ButtonVariant.plain,\n        isDisabled: isDisabled || page === lastPage,\n        \"aria-label\": toNextPage,\n        \"data-action\": \"next\",\n        onClick: function onClick(event) {\n          var newPage = page + 1 <= lastPage ? page + 1 : lastPage;\n          onNextClick(event, newPage);\n\n          _this2.handleNewPage(event, newPage);\n\n          _this2.setState({\n            userInputPage: newPage\n          });\n        }\n      }, React.createElement(AngleRightIcon, null))), !isCompact && React.createElement(\"div\", {\n        className: css(styles.paginationNavControl, styles.modifiers.last)\n      }, React.createElement(Button, {\n        variant: ButtonVariant.plain,\n        isDisabled: isDisabled || page === lastPage,\n        \"aria-label\": toLastPage,\n        \"data-action\": \"last\",\n        onClick: function onClick(event) {\n          onLastClick(event, lastPage);\n\n          _this2.handleNewPage(event, lastPage);\n\n          _this2.setState({\n            userInputPage: lastPage\n          });\n        }\n      }, React.createElement(AngleDoubleRightIcon, null))));\n    }\n  }], [{\n    key: \"parseInteger\",\n    value: function parseInteger(input, lastPage) {\n      // eslint-disable-next-line radix\n      var inputPage = Number.parseInt(input, 10);\n\n      if (!Number.isNaN(inputPage)) {\n        inputPage = inputPage > lastPage ? lastPage : inputPage;\n        inputPage = inputPage < 1 ? 1 : inputPage;\n      }\n\n      return inputPage;\n    }\n  }]);\n\n  return Navigation;\n}(React.Component);\nNavigation.displayName = 'Navigation';\nNavigation.defaultProps = {\n  className: '',\n  isDisabled: false,\n  isCompact: false,\n  lastPage: 0,\n  firstPage: 0,\n  pagesTitle: '',\n  pagesTitlePlural: '',\n  toLastPage: 'Go to last page',\n  toNextPage: 'Go to next page',\n  toFirstPage: 'Go to first page',\n  toPreviousPage: 'Go to previous page',\n  currPage: 'Current page',\n  paginationTitle: 'Pagination',\n  ofWord: 'of',\n  onNextClick: function onNextClick() {\n    return undefined;\n  },\n  onPreviousClick: function onPreviousClick() {\n    return undefined;\n  },\n  onFirstClick: function onFirstClick() {\n    return undefined;\n  },\n  onLastClick: function onLastClick() {\n    return undefined;\n  },\n  onPageInput: function onPageInput() {\n    return undefined;\n  }\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Pagination/Navigation.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Pagination/pagination';\nimport { css } from '@patternfly/react-styles';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\nimport { Button, ButtonVariant } from '../Button';\nimport { OnSetPage } from './Pagination';\nimport { pluralize, PickOptional } from '../../helpers';\nimport { KEY_CODES } from '../../helpers/constants';\n\nexport interface NavigationProps extends React.HTMLProps<HTMLElement> {\n  /** Additional classes for the container */\n  className?: string;\n  /** Flag indicating if the pagination is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating if the pagination is compact */\n  isCompact?: boolean;\n  /** Total number of items. */\n  itemCount?: number;\n  /** The number of the last page */\n  lastPage?: number;\n  /** The number of first page where pagination starts */\n  firstPage?: number;\n  /** The title of a page displayed beside the page number */\n  pagesTitle?: string;\n  /** The title of a page displayed beside the page number (the plural form) */\n  pagesTitlePlural?: string;\n  /** Accessible label for the button which moves to the last page */\n  toLastPage?: string;\n  /** Accessible label for the button which moves to the previous page */\n  toPreviousPage?: string;\n  /** Accessible label for the button which moves to the next page */\n  toNextPage?: string;\n  /** Accessible label for the button which moves to the first page */\n  toFirstPage?: string;\n  /** Accessible label for the input displaying the current page */\n  currPage?: string;\n  /** Accessible label for the pagination component */\n  paginationTitle?: string;\n  /** Accessible label for the English word \"of\" */\n  ofWord?: string;\n  /** The number of the current page */\n  page: React.ReactText;\n  /** Number of items per page. */\n  perPage?: number;\n  /** Function called when page is changed */\n  onSetPage: OnSetPage;\n  /** Function called when user clicks to navigate to next page */\n  onNextClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks to navigate to previous page */\n  onPreviousClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks to navigate to first page */\n  onFirstClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks to navigate to last page */\n  onLastClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user inputs page number */\n  onPageInput?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n}\n\nexport interface NavigationState {\n  userInputPage?: React.ReactText;\n}\n\nexport class Navigation extends React.Component<NavigationProps, NavigationState> {\n  static displayName = 'Navigation';\n  constructor(props: NavigationProps) {\n    super(props);\n    this.state = { userInputPage: this.props.page };\n  }\n\n  static defaultProps: PickOptional<NavigationProps> = {\n    className: '',\n    isDisabled: false,\n    isCompact: false,\n    lastPage: 0,\n    firstPage: 0,\n    pagesTitle: '',\n    pagesTitlePlural: '',\n    toLastPage: 'Go to last page',\n    toNextPage: 'Go to next page',\n    toFirstPage: 'Go to first page',\n    toPreviousPage: 'Go to previous page',\n    currPage: 'Current page',\n    paginationTitle: 'Pagination',\n    ofWord: 'of',\n    onNextClick: () => undefined as any,\n    onPreviousClick: () => undefined as any,\n    onFirstClick: () => undefined as any,\n    onLastClick: () => undefined as any,\n    onPageInput: () => undefined as any\n  };\n\n  private static parseInteger(input: React.ReactText, lastPage: number): number {\n    // eslint-disable-next-line radix\n    let inputPage = Number.parseInt(input as string, 10);\n    if (!Number.isNaN(inputPage)) {\n      inputPage = inputPage > lastPage ? lastPage : inputPage;\n      inputPage = inputPage < 1 ? 1 : inputPage;\n    }\n    return inputPage;\n  }\n\n  private onChange(event: React.ChangeEvent<HTMLInputElement>, lastPage: number): void {\n    const inputPage = Navigation.parseInteger(event.target.value, lastPage);\n    this.setState({ userInputPage: Number.isNaN(inputPage as number) ? event.target.value : inputPage });\n  }\n\n  private onKeyDown(\n    event: React.KeyboardEvent<HTMLInputElement>,\n    page: number | string,\n    lastPage: number,\n    onPageInput: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void\n  ): void {\n    if (event.keyCode === KEY_CODES.ENTER) {\n      const inputPage = Navigation.parseInteger(this.state.userInputPage, lastPage) as number;\n      onPageInput(event, Number.isNaN(inputPage) ? (page as number) : inputPage);\n      this.handleNewPage(event, Number.isNaN(inputPage) ? (page as number) : inputPage);\n    }\n  }\n\n  handleNewPage = (_evt: React.MouseEvent | React.KeyboardEvent | MouseEvent, newPage: number) => {\n    const { perPage, onSetPage } = this.props;\n    const startIdx = (newPage - 1) * perPage;\n    const endIdx = newPage * perPage;\n    return onSetPage(_evt, newPage, perPage, startIdx, endIdx);\n  };\n\n  componentDidUpdate(lastState: NavigationProps) {\n    if (\n      this.props.page !== lastState.page &&\n      this.props.page <= this.props.lastPage &&\n      this.state.userInputPage !== this.props.page\n    ) {\n      this.setState({ userInputPage: this.props.page });\n    }\n  }\n\n  render() {\n    const {\n      page,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      perPage,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onSetPage,\n      isDisabled,\n      itemCount,\n      lastPage,\n      firstPage,\n      pagesTitle,\n      pagesTitlePlural,\n      toLastPage,\n      toNextPage,\n      toFirstPage,\n      toPreviousPage,\n      currPage,\n      paginationTitle,\n      ofWord,\n      onNextClick,\n      onPreviousClick,\n      onFirstClick,\n      onLastClick,\n      onPageInput,\n      className,\n      isCompact,\n      ...props\n    } = this.props;\n    const { userInputPage } = this.state;\n    return (\n      <nav className={css(styles.paginationNav, className)} aria-label={paginationTitle} {...props}>\n        {!isCompact && (\n          <div className={css(styles.paginationNavControl, styles.modifiers.first)}>\n            <Button\n              variant={ButtonVariant.plain}\n              isDisabled={isDisabled || page === firstPage || page === 0}\n              aria-label={toFirstPage}\n              data-action=\"first\"\n              onClick={event => {\n                onFirstClick(event, 1);\n                this.handleNewPage(event, 1);\n                this.setState({ userInputPage: 1 });\n              }}\n            >\n              <AngleDoubleLeftIcon />\n            </Button>\n          </div>\n        )}\n        <div className={styles.paginationNavControl}>\n          <Button\n            variant={ButtonVariant.plain}\n            isDisabled={isDisabled || page === firstPage || page === 0}\n            data-action=\"previous\"\n            onClick={event => {\n              const newPage = (page as number) - 1 >= 1 ? (page as number) - 1 : 1;\n              onPreviousClick(event, newPage);\n              this.handleNewPage(event, newPage);\n              this.setState({ userInputPage: newPage });\n            }}\n            aria-label={toPreviousPage}\n          >\n            <AngleLeftIcon />\n          </Button>\n        </div>\n        {!isCompact && (\n          <div className={styles.paginationNavPageSelect}>\n            <input\n              className={css(styles.formControl)}\n              aria-label={currPage}\n              type=\"number\"\n              disabled={\n                isDisabled || (itemCount && page === firstPage && page === lastPage && itemCount >= 0) || page === 0\n              }\n              min={lastPage <= 0 && firstPage <= 0 ? 0 : 1}\n              max={lastPage}\n              value={userInputPage}\n              onKeyDown={event => this.onKeyDown(event, page, lastPage, onPageInput)}\n              onChange={event => this.onChange(event, lastPage)}\n            />\n            {(itemCount || itemCount === 0) && (\n              <span aria-hidden=\"true\">\n                {ofWord} {pagesTitle ? pluralize(lastPage, pagesTitle, pagesTitlePlural) : lastPage}\n              </span>\n            )}\n          </div>\n        )}\n        <div className={styles.paginationNavControl}>\n          <Button\n            variant={ButtonVariant.plain}\n            isDisabled={isDisabled || page === lastPage}\n            aria-label={toNextPage}\n            data-action=\"next\"\n            onClick={event => {\n              const newPage = (page as number) + 1 <= lastPage ? (page as number) + 1 : lastPage;\n              onNextClick(event, newPage);\n              this.handleNewPage(event, newPage);\n              this.setState({ userInputPage: newPage });\n            }}\n          >\n            <AngleRightIcon />\n          </Button>\n        </div>\n        {!isCompact && (\n          <div className={css(styles.paginationNavControl, styles.modifiers.last)}>\n            <Button\n              variant={ButtonVariant.plain}\n              isDisabled={isDisabled || page === lastPage}\n              aria-label={toLastPage}\n              data-action=\"last\"\n              onClick={event => {\n                onLastClick(event, lastPage);\n                this.handleNewPage(event, lastPage);\n                this.setState({ userInputPage: lastPage });\n              }}\n            >\n              <AngleDoubleRightIcon />\n            </Button>\n          </div>\n        )}\n      </nav>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}