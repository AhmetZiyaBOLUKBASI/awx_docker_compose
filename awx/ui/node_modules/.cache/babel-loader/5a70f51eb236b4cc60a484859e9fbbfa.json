{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Divider } from '../Divider';\nexport var TreeViewList = function TreeViewList(_a) {\n  var _a$isNested = _a.isNested,\n      isNested = _a$isNested === void 0 ? false : _a$isNested,\n      toolbar = _a.toolbar,\n      children = _a.children,\n      props = __rest(_a, [\"isNested\", \"toolbar\", \"children\"]);\n\n  return React.createElement(React.Fragment, null, toolbar && React.createElement(React.Fragment, null, toolbar, React.createElement(Divider, null)), React.createElement(\"ul\", Object.assign({\n    className: css('pf-c-tree-view__list'),\n    role: isNested ? 'group' : 'tree'\n  }, props), children));\n};\nTreeViewList.displayName = 'TreeViewList';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/TreeView/TreeViewList.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,OAAT,QAAwB,YAAxB;AAWA,OAAO,IAAM,YAAY,GAA+C,SAA3D,YAA2D,CAAC,EAAD,EAKhD;AALiD,oBAG/D,EAH+D,CACvE,QADuE;AAAA,MACvE,QADuE,4BAC5D,KAD4D;AAAA,MAEvE,OAFuE,GAG/D,EAH+D,CAEvE,OAFuE;AAAA,MAGvE,QAHuE,GAG/D,EAH+D,CAGvE,QAHuE;AAAA,MAIpE,KAJoE,GAI/D,MAAA,CAAA,EAAA,EAJ+D,CAAA,UAAA,EAAA,SAAA,EAAA,UAAA,CAI/D,CAJ+D;;AAKhD,SACvB,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACG,OAAO,IACN,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAP,EAAe,IAAf,EACG,OADH,EAEE,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ,IAAR,CAFF,CAFJ,EAOE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAI,IAAA,SAAS,EAAE,GAAG,CAAC,sBAAD,CAAlB;AAA4C,IAAA,IAAI,EAAE,QAAQ,GAAG,OAAH,GAAa;AAAvE,GAAA,EAAmF,KAAnF,CAAA,EACG,QADH,CAPF,CADuB;AAYxB,CAjBM;AAkBP,YAAY,CAAC,WAAb,GAA2B,cAA3B","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Divider } from '../Divider';\n\nexport interface TreeViewListProps extends React.HTMLProps<HTMLUListElement> {\n  /** Flag indicating if the tree view is nested under another tree view */\n  isNested?: boolean;\n  /** Toolbar to display above the tree view */\n  toolbar?: React.ReactNode;\n  /** Child nodes of the current tree view */\n  children: React.ReactNode;\n}\n\nexport const TreeViewList: React.FunctionComponent<TreeViewListProps> = ({\n  isNested = false,\n  toolbar,\n  children,\n  ...props\n}: TreeViewListProps) => (\n  <>\n    {toolbar && (\n      <React.Fragment>\n        {toolbar}\n        <Divider />\n      </React.Fragment>\n    )}\n    <ul className={css('pf-c-tree-view__list')} role={isNested ? 'group' : 'tree'} {...props}>\n      {children}\n    </ul>\n  </>\n);\nTreeViewList.displayName = 'TreeViewList';\n"]},"metadata":{},"sourceType":"module"}