{"ast":null,"code":"// @ts-nocheck\nimport getWindow from './getWindow';\nimport getNodeName from './getNodeName';\nimport getComputedStyle from './getComputedStyle';\nimport { isHTMLElement } from './instanceOf';\nimport isTableElement from './isTableElement';\nimport getParentNode from './getParentNode';\nimport getDocumentElement from './getDocumentElement';\n/**\n * @param element\n */\n\nfunction getTrueOffsetParent(element) {\n  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n  getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n\n  var offsetParent = element.offsetParent;\n\n  if (offsetParent) {\n    var html = getDocumentElement(offsetParent);\n\n    if (getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && getComputedStyle(html).position !== 'static') {\n      return html;\n    }\n  }\n\n  return offsetParent;\n} // `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\n\n/**\n * @param element\n */\n\n\nfunction getContainingBlock(element) {\n  var currentNode = getParentNode(element);\n\n  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n    // create a containing block.\n\n    if (css.transform !== 'none' || css.perspective !== 'none' || css.willChange && css.willChange !== 'auto') {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n\n/**\n * @param element\n */\n\n\nexport default function getOffsetParent(element) {\n  var window = getWindow(element);\n  var offsetParent = getTrueOffsetParent(element);\n\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n\n  if (offsetParent && getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static') {\n    return window;\n  }\n\n  return offsetParent || getContainingBlock(element) || window;\n}","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/dom-utils/getOffsetParent.ts"],"names":[],"mappings":"AAAA;AACA,OAAO,SAAP,MAAsB,aAAtB;AACA,OAAO,WAAP,MAAwB,eAAxB;AACA,OAAO,gBAAP,MAA6B,oBAA7B;AACA,SAAS,aAAT,QAA8B,cAA9B;AACA,OAAO,cAAP,MAA2B,kBAA3B;AACA,OAAO,aAAP,MAA0B,iBAA1B;AACA,OAAO,kBAAP,MAA+B,sBAA/B;AAEA;;AAEG;;AACH,SAAS,mBAAT,CAA6B,OAA7B,EAA6C;AAC3C,MACE,CAAC,aAAa,CAAC,OAAD,CAAd,IAA2B;AAC3B,EAAA,gBAAgB,CAAC,OAAD,CAAhB,CAA0B,QAA1B,KAAuC,OAFzC,EAGE;AACA,WAAO,IAAP;AACD;;AAED,MAAM,YAAY,GAAG,OAAO,CAAC,YAA7B;;AAEA,MAAI,YAAJ,EAAkB;AAChB,QAAM,IAAI,GAAG,kBAAkB,CAAC,YAAD,CAA/B;;AAEA,QACE,WAAW,CAAC,YAAD,CAAX,KAA8B,MAA9B,IACA,gBAAgB,CAAC,YAAD,CAAhB,CAA+B,QAA/B,KAA4C,QAD5C,IAEA,gBAAgB,CAAC,IAAD,CAAhB,CAAuB,QAAvB,KAAoC,QAHtC,EAIE;AACA,aAAO,IAAP;AACD;AACF;;AAED,SAAO,YAAP;AACD,C,CAED;AACA;;AACA;;AAEG;;;AACH,SAAS,kBAAT,CAA4B,OAA5B,EAA4C;AAC1C,MAAI,WAAW,GAAG,aAAa,CAAC,OAAD,CAA/B;;AAEA,SAAO,aAAa,CAAC,WAAD,CAAb,IAA8B,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,CAAyB,WAAW,CAAC,WAAD,CAApC,IAAqD,CAA1F,EAA6F;AAC3F,QAAM,GAAG,GAAG,gBAAgB,CAAC,WAAD,CAA5B,CAD2F,CAG3F;AACA;;AACA,QAAI,GAAG,CAAC,SAAJ,KAAkB,MAAlB,IAA4B,GAAG,CAAC,WAAJ,KAAoB,MAAhD,IAA2D,GAAG,CAAC,UAAJ,IAAkB,GAAG,CAAC,UAAJ,KAAmB,MAApG,EAA6G;AAC3G,aAAO,WAAP;AACD,KAFD,MAEO;AACL,MAAA,WAAW,GAAG,WAAW,CAAC,UAA1B;AACD;AACF;;AAED,SAAO,IAAP;AACD,C,CAED;AACA;;AACA;;AAEG;;;AACH,eAAc,SAAU,eAAV,CAA0B,OAA1B,EAA0C;AACtD,MAAM,MAAM,GAAG,SAAS,CAAC,OAAD,CAAxB;AAEA,MAAI,YAAY,GAAG,mBAAmB,CAAC,OAAD,CAAtC;;AAEA,SAAO,YAAY,IAAI,cAAc,CAAC,YAAD,CAA9B,IAAgD,gBAAgB,CAAC,YAAD,CAAhB,CAA+B,QAA/B,KAA4C,QAAnG,EAA6G;AAC3G,IAAA,YAAY,GAAG,mBAAmB,CAAC,YAAD,CAAlC;AACD;;AAED,MAAI,YAAY,IAAI,WAAW,CAAC,YAAD,CAAX,KAA8B,MAA9C,IAAwD,gBAAgB,CAAC,YAAD,CAAhB,CAA+B,QAA/B,KAA4C,QAAxG,EAAkH;AAChH,WAAO,MAAP;AACD;;AAED,SAAO,YAAY,IAAI,kBAAkB,CAAC,OAAD,CAAlC,IAA+C,MAAtD;AACD","sourcesContent":["// @ts-nocheck\nimport getWindow from './getWindow';\nimport getNodeName from './getNodeName';\nimport getComputedStyle from './getComputedStyle';\nimport { isHTMLElement } from './instanceOf';\nimport isTableElement from './isTableElement';\nimport getParentNode from './getParentNode';\nimport getDocumentElement from './getDocumentElement';\n\n/**\n * @param element\n */\nfunction getTrueOffsetParent(element: Element): Element | null | undefined {\n  if (\n    !isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n    getComputedStyle(element).position === 'fixed'\n  ) {\n    return null;\n  }\n\n  const offsetParent = element.offsetParent;\n\n  if (offsetParent) {\n    const html = getDocumentElement(offsetParent);\n\n    if (\n      getNodeName(offsetParent) === 'body' &&\n      getComputedStyle(offsetParent).position === 'static' &&\n      getComputedStyle(html).position !== 'static'\n    ) {\n      return html;\n    }\n  }\n\n  return offsetParent;\n}\n\n// `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\n/**\n * @param element\n */\nfunction getContainingBlock(element: Element) {\n  let currentNode = getParentNode(element);\n\n  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n    const css = getComputedStyle(currentNode);\n\n    // This is non-exhaustive but covers the most common CSS properties that\n    // create a containing block.\n    if (css.transform !== 'none' || css.perspective !== 'none' || (css.willChange && css.willChange !== 'auto')) {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return null;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n/**\n * @param element\n */\nexport default function getOffsetParent(element: Element) {\n  const window = getWindow(element);\n\n  let offsetParent = getTrueOffsetParent(element);\n\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n\n  if (offsetParent && getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static') {\n    return window;\n  }\n\n  return offsetParent || getContainingBlock(element) || window;\n}\n"]},"metadata":{},"sourceType":"module"}