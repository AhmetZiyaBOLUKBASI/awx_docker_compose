{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from'react';/**\n * useModal hook provides a way to read and update modal visibility\n * Param: boolean that sets initial modal state\n * Returns: {\n *  isModalOpen: boolean that indicates if modal is open\n *  toggleModal: function that toggles the modal open and close\n *  closeModal: function that closes modal\n * }\n */export default function useModal(){var isOpen=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var _useState=useState(isOpen),_useState2=_slicedToArray(_useState,2),isModalOpen=_useState2[0],setIsModalOpen=_useState2[1];function toggleModal(){setIsModalOpen(!isModalOpen);}function closeModal(){setIsModalOpen(false);}return{isModalOpen:isModalOpen,toggleModal:toggleModal,closeModal:closeModal};}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/hooks/useModal.js"],"names":["useState","useModal","isOpen","isModalOpen","setIsModalOpen","toggleModal","closeModal"],"mappings":"uGAAA,OAASA,QAAT,KAAyB,OAAzB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,cAAe,SAASC,CAAAA,QAAT,EAAkC,IAAhBC,CAAAA,MAAgB,2DAAP,KAAO,CAC/C,cAAsCF,QAAQ,CAACE,MAAD,CAA9C,wCAAOC,WAAP,eAAoBC,cAApB,eAEA,QAASC,CAAAA,WAAT,EAAuB,CACrBD,cAAc,CAAC,CAACD,WAAF,CAAd,CACD,CAED,QAASG,CAAAA,UAAT,EAAsB,CACpBF,cAAc,CAAC,KAAD,CAAd,CACD,CAED,MAAO,CACLD,WAAW,CAAXA,WADK,CAELE,WAAW,CAAXA,WAFK,CAGLC,UAAU,CAAVA,UAHK,CAAP,CAKD","sourcesContent":["import { useState } from 'react';\n\n/**\n * useModal hook provides a way to read and update modal visibility\n * Param: boolean that sets initial modal state\n * Returns: {\n *  isModalOpen: boolean that indicates if modal is open\n *  toggleModal: function that toggles the modal open and close\n *  closeModal: function that closes modal\n * }\n */\n\nexport default function useModal(isOpen = false) {\n  const [isModalOpen, setIsModalOpen] = useState(isOpen);\n\n  function toggleModal() {\n    setIsModalOpen(!isModalOpen);\n  }\n\n  function closeModal() {\n    setIsModalOpen(false);\n  }\n\n  return {\n    isModalOpen,\n    toggleModal,\n    closeModal,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}