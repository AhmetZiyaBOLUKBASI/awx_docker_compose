{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _objectWithoutProperties from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"id\",\"helperText\",\"name\",\"label\",\"tooltip\",\"tooltipMaxWidth\",\"validate\",\"isRequired\",\"type\"];import React from'react';import{useField}from'formik';import{FormGroup,TextArea}from'@patternfly/react-core';import Popover from'../Popover';import{jsx as _jsx}from\"react/jsx-runtime\";function ArrayTextField(props){var id=props.id,helperText=props.helperText,name=props.name,label=props.label,tooltip=props.tooltip,tooltipMaxWidth=props.tooltipMaxWidth,validate=props.validate,isRequired=props.isRequired,type=props.type,rest=_objectWithoutProperties(props,_excluded);var _useField=useField({name:name,validate:validate}),_useField2=_slicedToArray(_useField,3),field=_useField2[0],meta=_useField2[1],helpers=_useField2[2];var isValid=!(meta.touched&&meta.error);var value=field.value||[];return/*#__PURE__*/_jsx(FormGroup,{fieldId:id,helperText:helperText,helperTextInvalid:meta.error,isRequired:isRequired,validated:isValid?'default':'error',label:label,labelIcon:/*#__PURE__*/_jsx(Popover,{content:tooltip,maxWidth:tooltipMaxWidth}),children:/*#__PURE__*/_jsx(TextArea,_objectSpread(_objectSpread(_objectSpread({id:id,isRequired:isRequired,validated:isValid?'default':'error',resizeOrientation:\"vertical\"},rest),field),{},{value:value.join('\\n'),onChange:function onChange(val){if(val.trim()===''){helpers.setValue('');return;}helpers.setValue(val.split('\\n').map(function(v){return v.trim();}));}}))});}ArrayTextField.defaultProps={helperText:'',validate:function validate(){},isRequired:false,tooltip:null,tooltipMaxWidth:''};export default ArrayTextField;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/FormField/ArrayTextField.js"],"names":["React","useField","FormGroup","TextArea","Popover","ArrayTextField","props","id","helperText","name","label","tooltip","tooltipMaxWidth","validate","isRequired","type","rest","field","meta","helpers","isValid","touched","error","value","join","val","trim","setValue","split","map","v","defaultProps"],"mappings":"obAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,QAAT,KAAyB,QAAzB,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,wBAApC,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,C,2CAEA,QAASC,CAAAA,cAAT,CAAwBC,KAAxB,CAA+B,CAC7B,GACEC,CAAAA,EADF,CAWID,KAXJ,CACEC,EADF,CAEEC,UAFF,CAWIF,KAXJ,CAEEE,UAFF,CAGEC,IAHF,CAWIH,KAXJ,CAGEG,IAHF,CAIEC,KAJF,CAWIJ,KAXJ,CAIEI,KAJF,CAKEC,OALF,CAWIL,KAXJ,CAKEK,OALF,CAMEC,eANF,CAWIN,KAXJ,CAMEM,eANF,CAOEC,QAPF,CAWIP,KAXJ,CAOEO,QAPF,CAQEC,UARF,CAWIR,KAXJ,CAQEQ,UARF,CASEC,IATF,CAWIT,KAXJ,CASES,IATF,CAUKC,IAVL,0BAWIV,KAXJ,YAaA,cAA+BL,QAAQ,CAAC,CAAEQ,IAAI,CAAJA,IAAF,CAAQI,QAAQ,CAARA,QAAR,CAAD,CAAvC,wCAAOI,KAAP,eAAcC,IAAd,eAAoBC,OAApB,eACA,GAAMC,CAAAA,OAAO,CAAG,EAAEF,IAAI,CAACG,OAAL,EAAgBH,IAAI,CAACI,KAAvB,CAAhB,CACA,GAAMC,CAAAA,KAAK,CAAGN,KAAK,CAACM,KAAN,EAAe,EAA7B,CAEA,mBACE,KAAC,SAAD,EACE,OAAO,CAAEhB,EADX,CAEE,UAAU,CAAEC,UAFd,CAGE,iBAAiB,CAAEU,IAAI,CAACI,KAH1B,CAIE,UAAU,CAAER,UAJd,CAKE,SAAS,CAAEM,OAAO,CAAG,SAAH,CAAe,OALnC,CAME,KAAK,CAAEV,KANT,CAOE,SAAS,cAAE,KAAC,OAAD,EAAS,OAAO,CAAEC,OAAlB,CAA2B,QAAQ,CAAEC,eAArC,EAPb,uBASE,KAAC,QAAD,4CACE,EAAE,CAAEL,EADN,CAEE,UAAU,CAAEO,UAFd,CAGE,SAAS,CAAEM,OAAO,CAAG,SAAH,CAAe,OAHnC,CAIE,iBAAiB,CAAC,UAJpB,EAKMJ,IALN,EAMMC,KANN,MAOE,KAAK,CAAEM,KAAK,CAACC,IAAN,CAAW,IAAX,CAPT,CAQE,QAAQ,CAAE,kBAACC,GAAD,CAAS,CACjB,GAAIA,GAAG,CAACC,IAAJ,KAAe,EAAnB,CAAuB,CACrBP,OAAO,CAACQ,QAAR,CAAiB,EAAjB,EACA,OACD,CACDR,OAAO,CAACQ,QAAR,CAAiBF,GAAG,CAACG,KAAJ,CAAU,IAAV,EAAgBC,GAAhB,CAAoB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACJ,IAAF,EAAP,EAApB,CAAjB,EACD,CAdH,GATF,EADF,CA4BD,CAaDrB,cAAc,CAAC0B,YAAf,CAA8B,CAC5BvB,UAAU,CAAE,EADgB,CAE5BK,QAAQ,CAAE,mBAAM,CAAE,CAFU,CAG5BC,UAAU,CAAE,KAHgB,CAI5BH,OAAO,CAAE,IAJmB,CAK5BC,eAAe,CAAE,EALW,CAA9B,CAQA,cAAeP,CAAAA,cAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useField } from 'formik';\nimport { FormGroup, TextArea } from '@patternfly/react-core';\nimport Popover from '../Popover';\n\nfunction ArrayTextField(props) {\n  const {\n    id,\n    helperText,\n    name,\n    label,\n    tooltip,\n    tooltipMaxWidth,\n    validate,\n    isRequired,\n    type,\n    ...rest\n  } = props;\n\n  const [field, meta, helpers] = useField({ name, validate });\n  const isValid = !(meta.touched && meta.error);\n  const value = field.value || [];\n\n  return (\n    <FormGroup\n      fieldId={id}\n      helperText={helperText}\n      helperTextInvalid={meta.error}\n      isRequired={isRequired}\n      validated={isValid ? 'default' : 'error'}\n      label={label}\n      labelIcon={<Popover content={tooltip} maxWidth={tooltipMaxWidth} />}\n    >\n      <TextArea\n        id={id}\n        isRequired={isRequired}\n        validated={isValid ? 'default' : 'error'}\n        resizeOrientation=\"vertical\"\n        {...rest}\n        {...field}\n        value={value.join('\\n')}\n        onChange={(val) => {\n          if (val.trim() === '') {\n            helpers.setValue('');\n            return;\n          }\n          helpers.setValue(val.split('\\n').map((v) => v.trim()));\n        }}\n      />\n    </FormGroup>\n  );\n}\n\nArrayTextField.propTypes = {\n  helperText: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n  validate: PropTypes.func,\n  isRequired: PropTypes.bool,\n  tooltip: PropTypes.node,\n  tooltipMaxWidth: PropTypes.string,\n};\n\nArrayTextField.defaultProps = {\n  helperText: '',\n  validate: () => {},\n  isRequired: false,\n  tooltip: null,\n  tooltipMaxWidth: '',\n};\n\nexport default ArrayTextField;\n"]},"metadata":{},"sourceType":"module"}