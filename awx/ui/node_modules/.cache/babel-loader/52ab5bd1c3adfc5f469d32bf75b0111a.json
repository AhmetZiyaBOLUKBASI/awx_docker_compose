{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport { AccordionContext } from './AccordionContext';\nimport { AccordionExpandedContentBody } from './AccordionExpandedContentBody';\nexport var AccordionContent = function AccordionContent(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$id = _a.id,\n      id = _a$id === void 0 ? '' : _a$id,\n      _a$isHidden = _a.isHidden,\n      isHidden = _a$isHidden === void 0 ? false : _a$isHidden,\n      _a$isFixed = _a.isFixed,\n      isFixed = _a$isFixed === void 0 ? false : _a$isFixed,\n      _a$isCustomContent = _a.isCustomContent,\n      isCustomContent = _a$isCustomContent === void 0 ? false : _a$isCustomContent,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? '' : _a$ariaLabel,\n      component = _a.component,\n      props = __rest(_a, [\"className\", \"children\", \"id\", \"isHidden\", \"isFixed\", \"isCustomContent\", 'aria-label', \"component\"]);\n\n  return React.createElement(AccordionContext.Consumer, null, function (_ref) {\n    var ContentContainer = _ref.ContentContainer;\n    var Container = component || ContentContainer;\n    return React.createElement(Container, Object.assign({\n      id: id,\n      className: css(styles.accordionExpandedContent, isFixed && styles.modifiers.fixed, !isHidden && styles.modifiers.expanded, className),\n      hidden: isHidden,\n      \"aria-label\": ariaLabel\n    }, props), isCustomContent ? children : React.createElement(AccordionExpandedContentBody, null, children));\n  });\n};\nAccordionContent.displayName = 'AccordionContent';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Accordion/AccordionContent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,6DAAnB;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,SAAS,4BAAT,QAA6C,gCAA7C;AAqBA,OAAO,IAAM,gBAAgB,GAAmD,SAAnE,gBAAmE,CAAC,EAAD,EAUpD;AAVqD,qBAQtE,EARsE,CAC/E,SAD+E;AAAA,MAC/E,SAD+E,6BACnE,EADmE;AAAA,oBAQtE,EARsE,CAE/E,QAF+E;AAAA,MAE/E,QAF+E,4BAEpE,IAFoE;AAAA,cAQtE,EARsE,CAG/E,EAH+E;AAAA,MAG/E,EAH+E,sBAG1E,EAH0E;AAAA,oBAQtE,EARsE,CAI/E,QAJ+E;AAAA,MAI/E,QAJ+E,4BAIpE,KAJoE;AAAA,mBAQtE,EARsE,CAK/E,OAL+E;AAAA,MAK/E,OAL+E,2BAKrE,KALqE;AAAA,2BAQtE,EARsE,CAM/E,eAN+E;AAAA,MAM/E,eAN+E,mCAM7D,KAN6D;AAAA,qBAQtE,EARsE,CAO/E,YAP+E;AAAA,MAOjE,SAPiE,6BAOrD,EAPqD;AAAA,MAQ/E,SAR+E,GAQtE,EARsE,CAQ/E,SAR+E;AAAA,MAS5E,KAT4E,GASvE,MAAA,CAAA,EAAA,EATuE,CAAA,WAAA,EAAA,UAAA,EAAA,IAAA,EAAA,UAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,YAAA,EAAA,WAAA,CASvE,CATuE;;AAUpD,SAC3B,KAAA,CAAA,aAAA,CAAC,gBAAgB,CAAC,QAAlB,EAA0B,IAA1B,EACG,gBAAyB;AAAA,QAAtB,gBAAsB,QAAtB,gBAAsB;AACxB,QAAM,SAAS,GAAG,SAAS,IAAI,gBAA/B;AACA,WACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA;AACR,MAAA,EAAE,EAAE,EADI;AAER,MAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,wBADK,EAEZ,OAAO,IAAI,MAAM,CAAC,SAAP,CAAiB,KAFhB,EAGZ,CAAC,QAAD,IAAa,MAAM,CAAC,SAAP,CAAiB,QAHlB,EAIZ,SAJY,CAFN;AAQR,MAAA,MAAM,EAAE,QARA;AAQQ,oBACJ;AATJ,KAAA,EAUJ,KAVI,CAAV,EAYG,eAAe,GAAG,QAAH,GAAc,KAAA,CAAA,aAAA,CAAC,4BAAD,EAA6B,IAA7B,EAA+B,QAA/B,CAZhC,CADF;AAgBD,GAnBH,CAD2B;AAsB5B,CAhCM;AAiCP,gBAAgB,CAAC,WAAjB,GAA+B,kBAA/B","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport { AccordionContext } from './AccordionContext';\nimport { AccordionExpandedContentBody } from './AccordionExpandedContentBody';\n\nexport interface AccordionContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the Accordion  */\n  children?: React.ReactNode;\n  /** Additional classes added to the Accordion content  */\n  className?: string;\n  /** Identify the AccordionContent item  */\n  id?: string;\n  /** Flag to show if the expanded content of the Accordion item is visible  */\n  isHidden?: boolean;\n  /** Flag to indicate Accordion content is fixed  */\n  isFixed?: boolean;\n  /** Adds accessible text to the Accordion content */\n  'aria-label'?: string;\n  /** Component to use as content container */\n  component?: React.ElementType;\n  /** Flag indicating content is custom. Expanded content Body wrapper will be removed from children.  This allows multiple bodies to be rendered as content. */\n  isCustomContent?: React.ReactNode;\n}\n\nexport const AccordionContent: React.FunctionComponent<AccordionContentProps> = ({\n  className = '',\n  children = null,\n  id = '',\n  isHidden = false,\n  isFixed = false,\n  isCustomContent = false,\n  'aria-label': ariaLabel = '',\n  component,\n  ...props\n}: AccordionContentProps) => (\n  <AccordionContext.Consumer>\n    {({ ContentContainer }) => {\n      const Container = component || ContentContainer;\n      return (\n        <Container\n          id={id}\n          className={css(\n            styles.accordionExpandedContent,\n            isFixed && styles.modifiers.fixed,\n            !isHidden && styles.modifiers.expanded,\n            className\n          )}\n          hidden={isHidden}\n          aria-label={ariaLabel}\n          {...props}\n        >\n          {isCustomContent ? children : <AccordionExpandedContentBody>{children}</AccordionExpandedContentBody>}\n        </Container>\n      );\n    }}\n  </AccordionContext.Consumer>\n);\nAccordionContent.displayName = 'AccordionContent';\n"]},"metadata":{},"sourceType":"module"}