{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/SearchInput/search-input';\nimport { Button, ButtonVariant } from '../Button';\nimport { Badge } from '../Badge';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport { AdvancedSearchMenu } from './AdvancedSearchMenu';\nimport { TextInputGroup, TextInputGroupMain, TextInputGroupUtilities } from '../TextInputGroup';\nimport { InputGroup } from '../InputGroup';\n\nvar SearchInputBase = function SearchInputBase(_a) {\n  var className = _a.className,\n      _a$value = _a.value,\n      value = _a$value === void 0 ? '' : _a$value,\n      _a$attributes = _a.attributes,\n      attributes = _a$attributes === void 0 ? [] : _a$attributes,\n      formAdditionalItems = _a.formAdditionalItems,\n      _a$hasWordsAttrLabel = _a.hasWordsAttrLabel,\n      hasWordsAttrLabel = _a$hasWordsAttrLabel === void 0 ? 'Has words' : _a$hasWordsAttrLabel,\n      advancedSearchDelimiter = _a.advancedSearchDelimiter,\n      placeholder = _a.placeholder,\n      hint = _a.hint,\n      onChange = _a.onChange,\n      onSearch = _a.onSearch,\n      onClear = _a.onClear,\n      onToggleAdvancedSearch = _a.onToggleAdvancedSearch,\n      isAdvancedSearchOpen = _a.isAdvancedSearchOpen,\n      resultsCount = _a.resultsCount,\n      onNextClick = _a.onNextClick,\n      onPreviousClick = _a.onPreviousClick,\n      innerRef = _a.innerRef,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? 'Search input' : _a$ariaLabel,\n      _a$resetButtonLabel = _a.resetButtonLabel,\n      resetButtonLabel = _a$resetButtonLabel === void 0 ? 'Reset' : _a$resetButtonLabel,\n      _a$openMenuButtonAria = _a.openMenuButtonAriaLabel,\n      openMenuButtonAriaLabel = _a$openMenuButtonAria === void 0 ? 'Open advanced search' : _a$openMenuButtonAria,\n      _a$previousNavigation = _a.previousNavigationButtonAriaLabel,\n      previousNavigationButtonAriaLabel = _a$previousNavigation === void 0 ? 'Previous' : _a$previousNavigation,\n      _a$isPreviousNavigati = _a.isPreviousNavigationButtonDisabled,\n      isPreviousNavigationButtonDisabled = _a$isPreviousNavigati === void 0 ? false : _a$isPreviousNavigati,\n      _a$isNextNavigationBu = _a.isNextNavigationButtonDisabled,\n      isNextNavigationButtonDisabled = _a$isNextNavigationBu === void 0 ? false : _a$isNextNavigationBu,\n      _a$nextNavigationButt = _a.nextNavigationButtonAriaLabel,\n      nextNavigationButtonAriaLabel = _a$nextNavigationButt === void 0 ? 'Next' : _a$nextNavigationButt,\n      _a$submitSearchButton = _a.submitSearchButtonLabel,\n      submitSearchButtonLabel = _a$submitSearchButton === void 0 ? 'Search' : _a$submitSearchButton,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      props = __rest(_a, [\"className\", \"value\", \"attributes\", \"formAdditionalItems\", \"hasWordsAttrLabel\", \"advancedSearchDelimiter\", \"placeholder\", \"hint\", \"onChange\", \"onSearch\", \"onClear\", \"onToggleAdvancedSearch\", \"isAdvancedSearchOpen\", \"resultsCount\", \"onNextClick\", \"onPreviousClick\", \"innerRef\", 'aria-label', \"resetButtonLabel\", \"openMenuButtonAriaLabel\", \"previousNavigationButtonAriaLabel\", \"isPreviousNavigationButtonDisabled\", \"isNextNavigationButtonDisabled\", \"nextNavigationButtonAriaLabel\", \"submitSearchButtonLabel\", \"isDisabled\"]);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isSearchMenuOpen = _React$useState2[0],\n      setIsSearchMenuOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState(value),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      searchValue = _React$useState4[0],\n      setSearchValue = _React$useState4[1];\n\n  var searchInputRef = React.useRef(null);\n  var searchInputInputRef = innerRef || React.useRef(null);\n  React.useEffect(function () {\n    setSearchValue(value);\n  }, [value]);\n  React.useEffect(function () {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error('An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop');\n    }\n  });\n  React.useEffect(function () {\n    setIsSearchMenuOpen(isAdvancedSearchOpen);\n  }, [isAdvancedSearchOpen]);\n\n  var onChangeHandler = function onChangeHandler(value, event) {\n    if (onChange) {\n      onChange(value, event);\n    }\n\n    setSearchValue(value);\n  };\n\n  var onToggle = function onToggle(e) {\n    var isOpen = !isSearchMenuOpen;\n    setIsSearchMenuOpen(isOpen);\n\n    if (onToggleAdvancedSearch) {\n      onToggleAdvancedSearch(e, isOpen);\n    }\n  };\n\n  var onSearchHandler = function onSearchHandler(event) {\n    event.preventDefault();\n\n    if (onSearch) {\n      onSearch(value, event, getAttrValueMap());\n    }\n\n    setIsSearchMenuOpen(false);\n  };\n\n  var getAttrValueMap = function getAttrValueMap() {\n    var attrValue = {};\n    var pairs = searchValue.split(' ');\n    pairs.map(function (pair) {\n      var splitPair = pair.split(advancedSearchDelimiter);\n\n      if (splitPair.length === 2) {\n        attrValue[splitPair[0]] = splitPair[1];\n      } else if (splitPair.length === 1) {\n        attrValue.haswords = attrValue.hasOwnProperty('haswords') ? \"\".concat(attrValue.haswords, \" \").concat(splitPair[0]) : splitPair[0];\n      }\n    });\n    return attrValue;\n  };\n\n  var onEnter = function onEnter(event) {\n    if (event.key === 'Enter') {\n      onSearchHandler(event);\n    }\n  };\n\n  var onClearInput = function onClearInput(e) {\n    if (onClear) {\n      onClear(e);\n    }\n\n    if (searchInputInputRef && searchInputInputRef.current) {\n      searchInputInputRef.current.focus();\n    }\n  };\n\n  var buildSearchTextInputGroup = function buildSearchTextInputGroup() {\n    var _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var searchInputProps = __rest(_a, []);\n\n    return React.createElement(TextInputGroup, Object.assign({\n      isDisabled: isDisabled\n    }, searchInputProps), React.createElement(TextInputGroupMain, {\n      hint: hint,\n      icon: React.createElement(SearchIcon, null),\n      innerRef: searchInputInputRef,\n      value: searchValue,\n      placeholder: placeholder,\n      \"aria-label\": ariaLabel,\n      onKeyDown: onEnter,\n      onChange: onChangeHandler\n    }), value && React.createElement(TextInputGroupUtilities, null, resultsCount && React.createElement(Badge, {\n      isRead: true\n    }, resultsCount), !!onNextClick && !!onPreviousClick && React.createElement(\"div\", {\n      className: \"pf-c-text-input-group__group\"\n    }, React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      \"aria-label\": previousNavigationButtonAriaLabel,\n      isDisabled: isDisabled || isPreviousNavigationButtonDisabled,\n      onClick: onPreviousClick\n    }, React.createElement(AngleUpIcon, null)), React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      \"aria-label\": nextNavigationButtonAriaLabel,\n      isDisabled: isDisabled || isNextNavigationButtonDisabled,\n      onClick: onNextClick\n    }, React.createElement(AngleDownIcon, null))), !!onClear && React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      isDisabled: isDisabled,\n      \"aria-label\": resetButtonLabel,\n      onClick: onClearInput\n    }, React.createElement(TimesIcon, null))));\n  };\n\n  var buildSearchTextInputGroupWithExtraButtons = function buildSearchTextInputGroupWithExtraButtons() {\n    var _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var searchInputProps = __rest(_a, []);\n\n    return React.createElement(InputGroup, Object.assign({}, searchInputProps), buildSearchTextInputGroup(), (attributes.length > 0 || onToggleAdvancedSearch) && React.createElement(Button, {\n      className: isSearchMenuOpen && 'pf-m-expanded',\n      variant: ButtonVariant.control,\n      \"aria-label\": openMenuButtonAriaLabel,\n      onClick: onToggle,\n      isDisabled: isDisabled,\n      \"aria-expanded\": isSearchMenuOpen\n    }, React.createElement(CaretDownIcon, null)), !!onSearch && React.createElement(Button, {\n      type: \"submit\",\n      variant: ButtonVariant.control,\n      \"aria-label\": submitSearchButtonLabel,\n      onClick: onSearchHandler,\n      isDisabled: isDisabled || !searchValue\n    }, React.createElement(ArrowRightIcon, null)));\n  };\n\n  var searchInputProps = Object.assign(Object.assign({}, props), {\n    className: className && css(className),\n    innerRef: searchInputRef\n  });\n\n  if (!!onSearch || attributes.length > 0 || !!onToggleAdvancedSearch) {\n    if (attributes.length > 0) {\n      return React.createElement(\"div\", Object.assign({\n        className: css(className, styles.searchInput),\n        ref: searchInputRef\n      }, props), buildSearchTextInputGroupWithExtraButtons(), React.createElement(AdvancedSearchMenu, {\n        className: styles.searchInputMenu,\n        value: value,\n        parentRef: searchInputRef,\n        parentInputRef: searchInputInputRef,\n        onSearch: onSearch,\n        onClear: onClear,\n        onChange: onChange,\n        onToggleAdvancedMenu: onToggle,\n        resetButtonLabel: resetButtonLabel,\n        submitSearchButtonLabel: submitSearchButtonLabel,\n        attributes: attributes,\n        formAdditionalItems: formAdditionalItems,\n        hasWordsAttrLabel: hasWordsAttrLabel,\n        advancedSearchDelimiter: advancedSearchDelimiter,\n        getAttrValueMap: getAttrValueMap,\n        isSearchMenuOpen: isSearchMenuOpen\n      }));\n    }\n\n    return buildSearchTextInputGroupWithExtraButtons(Object.assign({}, searchInputProps));\n  }\n\n  return buildSearchTextInputGroup(searchInputProps);\n};\n\nSearchInputBase.displayName = 'SearchInputBase';\nexport var SearchInput = React.forwardRef(function (props, ref) {\n  return React.createElement(SearchInputBase, Object.assign({}, props, {\n    innerRef: ref\n  }));\n});\nSearchInput.displayName = 'SearchInput';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/SearchInput/SearchInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/SearchInput/search-input';\nimport { Button, ButtonVariant } from '../Button';\nimport { Badge } from '../Badge';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport { AdvancedSearchMenu } from './AdvancedSearchMenu';\nimport { TextInputGroup, TextInputGroupMain, TextInputGroupUtilities } from '../TextInputGroup';\nimport { InputGroup } from '../InputGroup';\n\nexport interface SearchAttribute {\n  /** The search attribute's value to be provided in the search input's query string.\n   * It should have no spaces and be unique for every attribute */\n  attr: string;\n  /** The search attribute's display name. It is used to label the field in the advanced search menu */\n  display: React.ReactNode;\n}\n\nexport interface SearchInputProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange' | 'results' | 'ref'> {\n  /** Additional classes added to the banner */\n  className?: string;\n  /** Value of the search input */\n  value?: string;\n  /** Flag indicating if search input is disabled */\n  isDisabled?: boolean;\n  /** An accessible label for the search input */\n  'aria-label'?: string;\n  /** placeholder text of the search input */\n  placeholder?: string;\n  /** @hide A reference object to attach to the input box */\n  innerRef?: React.RefObject<any>;\n  /** A callback for when the input value changes */\n  onChange?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** A suggestion for autocompleting */\n  hint?: string;\n\n  /** A callback for when the search button clicked changes */\n  onSearch?: (\n    value: string,\n    event: React.SyntheticEvent<HTMLButtonElement>,\n    attrValueMap: { [key: string]: string }\n  ) => void;\n  /** A callback for when the user clicks the clear button */\n  onClear?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** Label for the buttons which reset the advanced search form and clear the search input */\n  resetButtonLabel?: string;\n  /** Label for the buttons which called the onSearch event handler */\n  submitSearchButtonLabel?: string;\n  /** A callback for when the open advanced search button is clicked */\n  onToggleAdvancedSearch?: (event: React.SyntheticEvent<HTMLButtonElement>, isOpen?: boolean) => void;\n  /** A flag for controlling the open state of a custom advanced search implementation */\n  isAdvancedSearchOpen?: boolean;\n  /** Label for the button which opens the advanced search form menu */\n  openMenuButtonAriaLabel?: string;\n  /** Label for the button to navigate to previous result  */\n  previousNavigationButtonAriaLabel?: string;\n  /** Flag indicating if the previous navigation button is disabled */\n  isPreviousNavigationButtonDisabled?: boolean;\n  /** Label for the button to navigate to next result */\n  nextNavigationButtonAriaLabel?: string;\n  /** Flag indicating if the next navigation button is disabled */\n  isNextNavigationButtonDisabled?: boolean;\n  /** Function called when user clicks to navigate to next result */\n  onNextClick?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** Function called when user clicks to navigate to previous result */\n  onPreviousClick?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** The number of search results returned. Either a total number of results,\n   * or a string representing the current result over the total number of results. i.e. \"1 / 5\" */\n  resultsCount?: number | string;\n\n  /** Array of attribute values used for dynamically generated advanced search */\n  attributes?: string[] | SearchAttribute[];\n  /* Additional elements added after the attributes in the form.\n   * The new form elements can be wrapped in a FormGroup component for automatic formatting */\n  formAdditionalItems?: React.ReactNode;\n  /** Attribute label for strings unassociated with one of the provided listed attributes */\n  hasWordsAttrLabel?: React.ReactNode;\n  /** Delimiter in the query string for pairing attributes with search values.\n   * Required whenever attributes are passed as props */\n  advancedSearchDelimiter?: string;\n}\n\nconst SearchInputBase: React.FunctionComponent<SearchInputProps> = ({\n  className,\n  value = '',\n  attributes = [] as string[],\n  formAdditionalItems,\n  hasWordsAttrLabel = 'Has words',\n  advancedSearchDelimiter,\n  placeholder,\n  hint,\n  onChange,\n  onSearch,\n  onClear,\n  onToggleAdvancedSearch,\n  isAdvancedSearchOpen,\n  resultsCount,\n  onNextClick,\n  onPreviousClick,\n  innerRef,\n  'aria-label': ariaLabel = 'Search input',\n  resetButtonLabel = 'Reset',\n  openMenuButtonAriaLabel = 'Open advanced search',\n  previousNavigationButtonAriaLabel = 'Previous',\n  isPreviousNavigationButtonDisabled = false,\n  isNextNavigationButtonDisabled = false,\n  nextNavigationButtonAriaLabel = 'Next',\n  submitSearchButtonLabel = 'Search',\n  isDisabled = false,\n  ...props\n}: SearchInputProps) => {\n  const [isSearchMenuOpen, setIsSearchMenuOpen] = React.useState(false);\n  const [searchValue, setSearchValue] = React.useState(value);\n  const searchInputRef = React.useRef(null);\n  const searchInputInputRef = innerRef || React.useRef(null);\n\n  React.useEffect(() => {\n    setSearchValue(value);\n  }, [value]);\n\n  React.useEffect(() => {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop'\n      );\n    }\n  });\n\n  React.useEffect(() => {\n    setIsSearchMenuOpen(isAdvancedSearchOpen);\n  }, [isAdvancedSearchOpen]);\n\n  const onChangeHandler = (value: string, event: React.FormEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(value, event);\n    }\n    setSearchValue(value);\n  };\n\n  const onToggle = (e: React.SyntheticEvent<HTMLButtonElement>) => {\n    const isOpen = !isSearchMenuOpen;\n    setIsSearchMenuOpen(isOpen);\n    if (onToggleAdvancedSearch) {\n      onToggleAdvancedSearch(e, isOpen);\n    }\n  };\n\n  const onSearchHandler = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(value, event, getAttrValueMap());\n    }\n    setIsSearchMenuOpen(false);\n  };\n\n  const getAttrValueMap = () => {\n    const attrValue: { [key: string]: string } = {};\n    const pairs = searchValue.split(' ');\n    pairs.map(pair => {\n      const splitPair = pair.split(advancedSearchDelimiter);\n      if (splitPair.length === 2) {\n        attrValue[splitPair[0]] = splitPair[1];\n      } else if (splitPair.length === 1) {\n        attrValue.haswords = attrValue.hasOwnProperty('haswords')\n          ? `${attrValue.haswords} ${splitPair[0]}`\n          : splitPair[0];\n      }\n    });\n    return attrValue;\n  };\n\n  const onEnter = (event: React.KeyboardEvent<any>) => {\n    if (event.key === 'Enter') {\n      onSearchHandler(event);\n    }\n  };\n\n  const onClearInput = (e: React.SyntheticEvent<HTMLButtonElement>) => {\n    if (onClear) {\n      onClear(e);\n    }\n    if (searchInputInputRef && searchInputInputRef.current) {\n      searchInputInputRef.current.focus();\n    }\n  };\n\n  const buildSearchTextInputGroup = ({ ...searchInputProps } = {}) => (\n    <TextInputGroup isDisabled={isDisabled} {...searchInputProps}>\n      <TextInputGroupMain\n        hint={hint}\n        icon={<SearchIcon />}\n        innerRef={searchInputInputRef}\n        value={searchValue}\n        placeholder={placeholder}\n        aria-label={ariaLabel}\n        onKeyDown={onEnter}\n        onChange={onChangeHandler}\n      />\n      {value && (\n        <TextInputGroupUtilities>\n          {resultsCount && <Badge isRead>{resultsCount}</Badge>}\n          {!!onNextClick && !!onPreviousClick && (\n            <div className=\"pf-c-text-input-group__group\">\n              <Button\n                variant={ButtonVariant.plain}\n                aria-label={previousNavigationButtonAriaLabel}\n                isDisabled={isDisabled || isPreviousNavigationButtonDisabled}\n                onClick={onPreviousClick}\n              >\n                <AngleUpIcon />\n              </Button>\n              <Button\n                variant={ButtonVariant.plain}\n                aria-label={nextNavigationButtonAriaLabel}\n                isDisabled={isDisabled || isNextNavigationButtonDisabled}\n                onClick={onNextClick}\n              >\n                <AngleDownIcon />\n              </Button>\n            </div>\n          )}\n          {!!onClear && (\n            <Button\n              variant={ButtonVariant.plain}\n              isDisabled={isDisabled}\n              aria-label={resetButtonLabel}\n              onClick={onClearInput}\n            >\n              <TimesIcon />\n            </Button>\n          )}\n        </TextInputGroupUtilities>\n      )}\n    </TextInputGroup>\n  );\n\n  const buildSearchTextInputGroupWithExtraButtons = ({ ...searchInputProps } = {}) => (\n    <InputGroup {...searchInputProps}>\n      {buildSearchTextInputGroup()}\n      {(attributes.length > 0 || onToggleAdvancedSearch) && (\n        <Button\n          className={isSearchMenuOpen && 'pf-m-expanded'}\n          variant={ButtonVariant.control}\n          aria-label={openMenuButtonAriaLabel}\n          onClick={onToggle}\n          isDisabled={isDisabled}\n          aria-expanded={isSearchMenuOpen}\n        >\n          <CaretDownIcon />\n        </Button>\n      )}\n      {!!onSearch && (\n        <Button\n          type=\"submit\"\n          variant={ButtonVariant.control}\n          aria-label={submitSearchButtonLabel}\n          onClick={onSearchHandler}\n          isDisabled={isDisabled || !searchValue}\n        >\n          <ArrowRightIcon />\n        </Button>\n      )}\n    </InputGroup>\n  );\n\n  const searchInputProps = {\n    ...props,\n    className: className && css(className),\n    innerRef: searchInputRef\n  };\n\n  if (!!onSearch || attributes.length > 0 || !!onToggleAdvancedSearch) {\n    if (attributes.length > 0) {\n      return (\n        <div className={css(className, styles.searchInput)} ref={searchInputRef} {...props}>\n          {buildSearchTextInputGroupWithExtraButtons()}\n          <AdvancedSearchMenu\n            className={styles.searchInputMenu}\n            value={value}\n            parentRef={searchInputRef}\n            parentInputRef={searchInputInputRef}\n            onSearch={onSearch}\n            onClear={onClear}\n            onChange={onChange}\n            onToggleAdvancedMenu={onToggle}\n            resetButtonLabel={resetButtonLabel}\n            submitSearchButtonLabel={submitSearchButtonLabel}\n            attributes={attributes}\n            formAdditionalItems={formAdditionalItems}\n            hasWordsAttrLabel={hasWordsAttrLabel}\n            advancedSearchDelimiter={advancedSearchDelimiter}\n            getAttrValueMap={getAttrValueMap}\n            isSearchMenuOpen={isSearchMenuOpen}\n          />\n        </div>\n      );\n    }\n\n    return buildSearchTextInputGroupWithExtraButtons({ ...searchInputProps });\n  }\n  return buildSearchTextInputGroup(searchInputProps);\n};\nSearchInputBase.displayName = 'SearchInputBase';\n\nexport const SearchInput = React.forwardRef((props: SearchInputProps, ref: React.Ref<HTMLInputElement>) => (\n  <SearchInputBase {...props} innerRef={ref as React.MutableRefObject<any>} />\n));\nSearchInput.displayName = 'SearchInput';\n"]},"metadata":{},"sourceType":"module"}