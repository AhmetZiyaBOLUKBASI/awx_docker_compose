{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{i18n}from\"@lingui/core\";import React from'react';import{useFormikContext}from'formik';import StepName from'../LaunchPrompt/steps/StepName';import CredentialPasswordsStep from'../LaunchPrompt/steps/CredentialPasswordsStep';import{jsx as _jsx}from\"react/jsx-runtime\";var STEP_ID='credentialPasswords';var isValueMissing=function isValueMissing(val){return!val||val==='';};export default function useCredentialPasswordsStep(showStep,visitedSteps){var _useFormikContext=useFormikContext(),values=_useFormikContext.values,setFieldError=_useFormikContext.setFieldError;var hasError=showStep&&Object.keys(visitedSteps).includes(STEP_ID)&&checkForError(values);return{step:showStep?{id:STEP_ID,name:/*#__PURE__*/_jsx(StepName,{hasErrors:hasError,id:\"credential-passwords-step\",children:/*i18n*/i18n._(\"Credential passwords\")}),component:/*#__PURE__*/_jsx(CredentialPasswordsStep,{launchConfig:{}}),enableNext:true}:null,isReady:true,contentError:null,hasError:hasError,setTouched:function setTouched(setFieldTouched){Object.keys(values.credential_passwords).forEach(function(credentialValueKey){return setFieldTouched(\"credential_passwords['\".concat(credentialValueKey,\"']\"),true,false);});},validate:function validate(){var setPasswordFieldError=function setPasswordFieldError(fieldName){setFieldError(fieldName,/*i18n*/i18n._(\"This field may not be blank\"));};Object.entries(values.credentials[0].inputs).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];if(value==='ASK'&&isValueMissing(key==='password'?values.credential_passwords.ssh_password:values.credential_passwords[key])){setPasswordFieldError(key==='password'?\"credential_passwords.ssh_password\":\"credential_passwords.\".concat(key));}});}};}function checkForError(values){var _values$credentials$;var hasError=false;Object.entries((_values$credentials$=values.credentials[0])===null||_values$credentials$===void 0?void 0:_values$credentials$.inputs).forEach(function(_ref3){var _ref4=_slicedToArray(_ref3,2),key=_ref4[0],value=_ref4[1];if(value==='ASK'&&isValueMissing(key==='password'?values.credential_passwords.ssh_password:values.credential_passwords[key])){hasError=true;}});return hasError;}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/AdHocCommands/useAdHocCredentialPasswordStep.js"],"names":["React","useFormikContext","StepName","CredentialPasswordsStep","STEP_ID","isValueMissing","val","useCredentialPasswordsStep","showStep","visitedSteps","values","setFieldError","hasError","Object","keys","includes","checkForError","step","id","name","component","enableNext","isReady","contentError","setTouched","setFieldTouched","credential_passwords","forEach","credentialValueKey","validate","setPasswordFieldError","fieldName","entries","credentials","inputs","key","value","ssh_password"],"mappings":"sIAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,gBAAT,KAAiC,QAAjC,CAEA,MAAOC,CAAAA,QAAP,KAAqB,gCAArB,CACA,MAAOC,CAAAA,uBAAP,KAAoC,+CAApC,C,2CAEA,GAAMC,CAAAA,OAAO,CAAG,qBAAhB,CAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,GAAD,QAAS,CAACA,GAAD,EAAQA,GAAG,GAAK,EAAzB,EAAvB,CAEA,cAAe,SAASC,CAAAA,0BAAT,CAAoCC,QAApC,CAA8CC,YAA9C,CAA4D,CACzE,sBAAkCR,gBAAgB,EAAlD,CAAQS,MAAR,mBAAQA,MAAR,CAAgBC,aAAhB,mBAAgBA,aAAhB,CACA,GAAMC,CAAAA,QAAQ,CACZJ,QAAQ,EACRK,MAAM,CAACC,IAAP,CAAYL,YAAZ,EAA0BM,QAA1B,CAAmCX,OAAnC,CADA,EAEAY,aAAa,CAACN,MAAD,CAHf,CAIA,MAAO,CACLO,IAAI,CAAET,QAAQ,CACV,CACEU,EAAE,CAAEd,OADN,CAEEe,IAAI,cACF,KAAC,QAAD,EAAU,SAAS,CAAEP,QAArB,CAA+B,EAAE,CAAC,2BAAlC,kBACG,8BADH,EAHJ,CAOEQ,SAAS,cAAE,KAAC,uBAAD,EAAyB,YAAY,CAAE,EAAvC,EAPb,CAQEC,UAAU,CAAE,IARd,CADU,CAWV,IAZC,CAaLC,OAAO,CAAE,IAbJ,CAcLC,YAAY,CAAE,IAdT,CAeLX,QAAQ,CAARA,QAfK,CAgBLY,UAAU,CAAE,oBAACC,eAAD,CAAqB,CAC/BZ,MAAM,CAACC,IAAP,CAAYJ,MAAM,CAACgB,oBAAnB,EAAyCC,OAAzC,CAAiD,SAACC,kBAAD,QAC/CH,CAAAA,eAAe,iCACYG,kBADZ,OAEb,IAFa,CAGb,KAHa,CADgC,EAAjD,EAOD,CAxBI,CAyBLC,QAAQ,CAAE,mBAAM,CACd,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,SAAD,CAAe,CAC3CpB,aAAa,CAACoB,SAAD,SAAY,qCAAZ,CAAb,CACD,CAFD,CAIAlB,MAAM,CAACmB,OAAP,CAAetB,MAAM,CAACuB,WAAP,CAAmB,CAAnB,EAAsBC,MAArC,EAA6CP,OAA7C,CAAqD,cAAkB,kCAAhBQ,GAAgB,UAAXC,KAAW,UACrE,GACEA,KAAK,GAAK,KAAV,EACA/B,cAAc,CACZ8B,GAAG,GAAK,UAAR,CACIzB,MAAM,CAACgB,oBAAP,CAA4BW,YADhC,CAEI3B,MAAM,CAACgB,oBAAP,CAA4BS,GAA5B,CAHQ,CAFhB,CAOE,CACAL,qBAAqB,CACnBK,GAAG,GAAK,UAAR,oEAE4BA,GAF5B,CADmB,CAArB,CAKD,CACF,CAfD,EAgBD,CA9CI,CAAP,CAgDD,CAED,QAASnB,CAAAA,aAAT,CAAuBN,MAAvB,CAA+B,0BAC7B,GAAIE,CAAAA,QAAQ,CAAG,KAAf,CACAC,MAAM,CAACmB,OAAP,uBAAetB,MAAM,CAACuB,WAAP,CAAmB,CAAnB,CAAf,+CAAe,qBAAuBC,MAAtC,EAA8CP,OAA9C,CAAsD,eAAkB,mCAAhBQ,GAAgB,UAAXC,KAAW,UACtE,GACEA,KAAK,GAAK,KAAV,EACA/B,cAAc,CACZ8B,GAAG,GAAK,UAAR,CACIzB,MAAM,CAACgB,oBAAP,CAA4BW,YADhC,CAEI3B,MAAM,CAACgB,oBAAP,CAA4BS,GAA5B,CAHQ,CAFhB,CAOE,CACAvB,QAAQ,CAAG,IAAX,CACD,CACF,CAXD,EAYA,MAAOA,CAAAA,QAAP,CACD","sourcesContent":["import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { t } from '@lingui/macro';\nimport StepName from '../LaunchPrompt/steps/StepName';\nimport CredentialPasswordsStep from '../LaunchPrompt/steps/CredentialPasswordsStep';\n\nconst STEP_ID = 'credentialPasswords';\n\nconst isValueMissing = (val) => !val || val === '';\n\nexport default function useCredentialPasswordsStep(showStep, visitedSteps) {\n  const { values, setFieldError } = useFormikContext();\n  const hasError =\n    showStep &&\n    Object.keys(visitedSteps).includes(STEP_ID) &&\n    checkForError(values);\n  return {\n    step: showStep\n      ? {\n          id: STEP_ID,\n          name: (\n            <StepName hasErrors={hasError} id=\"credential-passwords-step\">\n              {t`Credential passwords`}\n            </StepName>\n          ),\n          component: <CredentialPasswordsStep launchConfig={{}} />,\n          enableNext: true,\n        }\n      : null,\n    isReady: true,\n    contentError: null,\n    hasError,\n    setTouched: (setFieldTouched) => {\n      Object.keys(values.credential_passwords).forEach((credentialValueKey) =>\n        setFieldTouched(\n          `credential_passwords['${credentialValueKey}']`,\n          true,\n          false\n        )\n      );\n    },\n    validate: () => {\n      const setPasswordFieldError = (fieldName) => {\n        setFieldError(fieldName, t`This field may not be blank`);\n      };\n\n      Object.entries(values.credentials[0].inputs).forEach(([key, value]) => {\n        if (\n          value === 'ASK' &&\n          isValueMissing(\n            key === 'password'\n              ? values.credential_passwords.ssh_password\n              : values.credential_passwords[key]\n          )\n        ) {\n          setPasswordFieldError(\n            key === 'password'\n              ? `credential_passwords.ssh_password`\n              : `credential_passwords.${key}`\n          );\n        }\n      });\n    },\n  };\n}\n\nfunction checkForError(values) {\n  let hasError = false;\n  Object.entries(values.credentials[0]?.inputs).forEach(([key, value]) => {\n    if (\n      value === 'ASK' &&\n      isValueMissing(\n        key === 'password'\n          ? values.credential_passwords.ssh_password\n          : values.credential_passwords[key]\n      )\n    ) {\n      hasError = true;\n    }\n  });\n  return hasError;\n}\n"]},"metadata":{},"sourceType":"module"}