{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { canUseDOM, KEY_CODES } from '../../helpers';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Backdrop/backdrop';\nimport { ModalContent } from './ModalContent';\nimport { getDefaultOUIAId } from '../../helpers';\nexport var ModalVariant;\n\n(function (ModalVariant) {\n  ModalVariant[\"small\"] = \"small\";\n  ModalVariant[\"medium\"] = \"medium\";\n  ModalVariant[\"large\"] = \"large\";\n  ModalVariant[\"default\"] = \"default\";\n})(ModalVariant || (ModalVariant = {}));\n\nexport var Modal = /*#__PURE__*/function (_React$Component) {\n  _inherits(Modal, _React$Component);\n\n  var _super = _createSuper(Modal);\n\n  function Modal(props) {\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    _this = _super.call(this, props);\n    _this.boxId = '';\n    _this.labelId = '';\n    _this.descriptorId = '';\n\n    _this.handleEscKeyClick = function (event) {\n      var onEscapePress = _this.props.onEscapePress;\n\n      if (event.keyCode === KEY_CODES.ESCAPE_KEY && _this.props.isOpen) {\n        onEscapePress ? onEscapePress(event) : _this.props.onClose();\n      }\n    };\n\n    _this.getElement = function (appendTo) {\n      if (typeof appendTo === 'function') {\n        return appendTo();\n      }\n\n      return appendTo || document.body;\n    };\n\n    _this.toggleSiblingsFromScreenReaders = function (hide) {\n      var appendTo = _this.props.appendTo;\n\n      var target = _this.getElement(appendTo);\n\n      var bodyChildren = target.children;\n\n      for (var _i = 0, _Array$from = Array.from(bodyChildren); _i < _Array$from.length; _i++) {\n        var child = _Array$from[_i];\n\n        if (child !== _this.state.container) {\n          hide ? child.setAttribute('aria-hidden', '' + hide) : child.removeAttribute('aria-hidden');\n        }\n      }\n    };\n\n    _this.isEmpty = function (value) {\n      return value === null || value === undefined || value === '';\n    };\n\n    var boxIdNum = Modal.currentId++;\n    var labelIdNum = boxIdNum + 1;\n    var descriptorIdNum = boxIdNum + 2;\n    _this.boxId = props.id || \"pf-modal-part-\".concat(boxIdNum);\n    _this.labelId = \"pf-modal-part-\".concat(labelIdNum);\n    _this.descriptorId = \"pf-modal-part-\".concat(descriptorIdNum);\n    _this.state = {\n      container: undefined,\n      ouiaStateId: getDefaultOUIAId(Modal.displayName, props.variant)\n    };\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          appendTo = _this$props.appendTo,\n          title = _this$props.title,\n          ariaLabel = _this$props['aria-label'],\n          ariaLabelledby = _this$props['aria-labelledby'],\n          hasNoBodyWrapper = _this$props.hasNoBodyWrapper,\n          header = _this$props.header;\n      var target = this.getElement(appendTo);\n      var container = document.createElement('div');\n      this.setState({\n        container: container\n      });\n      target.appendChild(container);\n      target.addEventListener('keydown', this.handleEscKeyClick, false);\n\n      if (this.props.isOpen) {\n        target.classList.add(css(styles.backdropOpen));\n      } else {\n        target.classList.remove(css(styles.backdropOpen));\n      }\n\n      if (this.isEmpty(title) && this.isEmpty(ariaLabel) && this.isEmpty(ariaLabelledby)) {\n        // eslint-disable-next-line no-console\n        console.error('Modal: Specify at least one of: title, aria-label, aria-labelledby.');\n      }\n\n      if (this.isEmpty(ariaLabel) && this.isEmpty(ariaLabelledby) && (hasNoBodyWrapper || header)) {\n        // eslint-disable-next-line no-console\n        console.error('Modal: When using hasNoBodyWrapper or setting a custom header, ensure you assign an accessible name to the the modal container with aria-label or aria-labelledby.');\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var appendTo = this.props.appendTo;\n      var target = this.getElement(appendTo);\n\n      if (this.props.isOpen) {\n        target.classList.add(css(styles.backdropOpen));\n        this.toggleSiblingsFromScreenReaders(true);\n      } else {\n        target.classList.remove(css(styles.backdropOpen));\n        this.toggleSiblingsFromScreenReaders(false);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var appendTo = this.props.appendTo;\n      var target = this.getElement(appendTo);\n\n      if (this.state.container) {\n        target.removeChild(this.state.container);\n      }\n\n      target.removeEventListener('keydown', this.handleEscKeyClick, false);\n      target.classList.remove(css(styles.backdropOpen));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          appendTo = _a.appendTo,\n          onEscapePress = _a.onEscapePress,\n          ariaLabelledby = _a['aria-labelledby'],\n          ariaLabel = _a['aria-label'],\n          ariaDescribedby = _a['aria-describedby'],\n          bodyAriaLabel = _a.bodyAriaLabel,\n          bodyAriaRole = _a.bodyAriaRole,\n          title = _a.title,\n          titleIconVariant = _a.titleIconVariant,\n          titleLabel = _a.titleLabel,\n          ouiaId = _a.ouiaId,\n          ouiaSafe = _a.ouiaSafe,\n          props = __rest(_a, [\"appendTo\", \"onEscapePress\", 'aria-labelledby', 'aria-label', 'aria-describedby', \"bodyAriaLabel\", \"bodyAriaRole\", \"title\", \"titleIconVariant\", \"titleLabel\", \"ouiaId\", \"ouiaSafe\"]);\n\n      var container = this.state.container;\n\n      if (!canUseDOM || !container) {\n        return null;\n      }\n\n      return ReactDOM.createPortal(React.createElement(ModalContent, Object.assign({}, props, {\n        boxId: this.boxId,\n        labelId: this.labelId,\n        descriptorId: this.descriptorId,\n        title: title,\n        titleIconVariant: titleIconVariant,\n        titleLabel: titleLabel,\n        \"aria-label\": ariaLabel,\n        \"aria-describedby\": ariaDescribedby,\n        \"aria-labelledby\": ariaLabelledby,\n        bodyAriaLabel: bodyAriaLabel,\n        bodyAriaRole: bodyAriaRole,\n        ouiaId: ouiaId !== undefined ? ouiaId : this.state.ouiaStateId,\n        ouiaSafe: ouiaSafe\n      })), container);\n    }\n  }]);\n\n  return Modal;\n}(React.Component);\nModal.displayName = 'Modal';\nModal.currentId = 0;\nModal.defaultProps = {\n  className: '',\n  isOpen: false,\n  title: '',\n  titleIconVariant: null,\n  titleLabel: '',\n  'aria-label': '',\n  showClose: true,\n  'aria-describedby': '',\n  'aria-labelledby': '',\n  id: undefined,\n  actions: [],\n  onClose: function onClose() {\n    return undefined;\n  },\n  variant: 'default',\n  hasNoBodyWrapper: false,\n  appendTo: function appendTo() {\n    return document.body;\n  },\n  ouiaSafe: true\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Modal/Modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { canUseDOM, KEY_CODES, PickOptional } from '../../helpers';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Backdrop/backdrop';\nimport { ModalContent } from './ModalContent';\nimport { OUIAProps, getDefaultOUIAId } from '../../helpers';\n\nexport interface ModalProps extends React.HTMLProps<HTMLDivElement>, OUIAProps {\n  /** Content rendered inside the Modal. */\n  children: React.ReactNode;\n  /** Additional classes added to the Modal */\n  className?: string;\n  /** Flag to show the modal */\n  isOpen?: boolean;\n  /** Complex header (more than just text), supersedes title for header content */\n  header?: React.ReactNode;\n  /** Optional help section for the Modal Header */\n  help?: React.ReactNode;\n  /** Simple text content of the Modal Header, also used for aria-label on the body */\n  title?: string;\n  /** Optional alert icon (or other) to show before the title of the Modal Header\n   * When the predefined alert types are used the default styling\n   * will be automatically applied */\n  titleIconVariant?: 'success' | 'danger' | 'warning' | 'info' | 'default' | React.ComponentType<any>;\n  /** Optional title label text for screen readers */\n  titleLabel?: string;\n  /** Id to use for Modal Box label */\n  'aria-labelledby'?: string | null;\n  /** Accessible descriptor of modal */\n  'aria-label'?: string;\n  /** Id to use for Modal Box descriptor */\n  'aria-describedby'?: string;\n  /** Accessible label applied to the modal box body. This should be used to communicate important information about the modal box body div if needed, such as that it is scrollable */\n  bodyAriaLabel?: string;\n  /** Accessible role applied to the modal box body. This will default to region if a body aria label is applied. Set to a more appropriate role as applicable based on the modal content and context */\n  bodyAriaRole?: string;\n  /** Flag to show the close button in the header area of the modal */\n  showClose?: boolean;\n  /** Custom footer */\n  footer?: React.ReactNode;\n  /** Action buttons to add to the standard Modal Footer, ignored if `footer` is given */\n  actions?: any;\n  /** A callback for when the close button is clicked */\n  onClose?: () => void;\n  /** Default width of the Modal. */\n  width?: number | string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag to disable focus trap */\n  disableFocusTrap?: boolean;\n  /** Description of the modal */\n  description?: React.ReactNode;\n  /** Variant of the modal */\n  variant?: 'small' | 'medium' | 'large' | 'default';\n  /** Alternate position of the modal */\n  position?: 'top';\n  /** Offset from alternate position. Can be any valid CSS length/percentage */\n  positionOffset?: string;\n  /** Flag indicating if modal content should be placed in a modal box body wrapper */\n  hasNoBodyWrapper?: boolean;\n  /** An ID to use for the ModalBox container */\n  id?: string;\n  /** Modal handles pressing of the Escape key and closes the modal. If you want to handle this yourself you can use this callback function */\n  onEscapePress?: (event: KeyboardEvent) => void;\n}\n\nexport enum ModalVariant {\n  small = 'small',\n  medium = 'medium',\n  large = 'large',\n  default = 'default'\n}\n\ninterface ModalState {\n  container: HTMLElement;\n  ouiaStateId: string;\n}\n\nexport class Modal extends React.Component<ModalProps, ModalState> {\n  static displayName = 'Modal';\n  static currentId = 0;\n  boxId = '';\n  labelId = '';\n  descriptorId = '';\n\n  static defaultProps: PickOptional<ModalProps> = {\n    className: '',\n    isOpen: false,\n    title: '',\n    titleIconVariant: null,\n    titleLabel: '',\n    'aria-label': '',\n    showClose: true,\n    'aria-describedby': '',\n    'aria-labelledby': '',\n    id: undefined,\n    actions: [] as any[],\n    onClose: () => undefined as any,\n    variant: 'default',\n    hasNoBodyWrapper: false,\n    appendTo: () => document.body,\n    ouiaSafe: true\n  };\n\n  constructor(props: ModalProps) {\n    super(props);\n    const boxIdNum = Modal.currentId++;\n    const labelIdNum = boxIdNum + 1;\n    const descriptorIdNum = boxIdNum + 2;\n    this.boxId = props.id || `pf-modal-part-${boxIdNum}`;\n    this.labelId = `pf-modal-part-${labelIdNum}`;\n    this.descriptorId = `pf-modal-part-${descriptorIdNum}`;\n\n    this.state = {\n      container: undefined,\n      ouiaStateId: getDefaultOUIAId(Modal.displayName, props.variant)\n    };\n  }\n\n  handleEscKeyClick = (event: KeyboardEvent): void => {\n    const { onEscapePress } = this.props;\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY && this.props.isOpen) {\n      onEscapePress ? onEscapePress(event) : this.props.onClose();\n    }\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  toggleSiblingsFromScreenReaders = (hide: boolean) => {\n    const { appendTo } = this.props;\n    const target: HTMLElement = this.getElement(appendTo);\n    const bodyChildren = target.children;\n    for (const child of Array.from(bodyChildren)) {\n      if (child !== this.state.container) {\n        hide ? child.setAttribute('aria-hidden', '' + hide) : child.removeAttribute('aria-hidden');\n      }\n    }\n  };\n\n  isEmpty = (value: string | null) => value === null || value === undefined || value === '';\n\n  componentDidMount() {\n    const {\n      appendTo,\n      title,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      hasNoBodyWrapper,\n      header\n    } = this.props;\n    const target: HTMLElement = this.getElement(appendTo);\n    const container = document.createElement('div');\n    this.setState({ container });\n    target.appendChild(container);\n    target.addEventListener('keydown', this.handleEscKeyClick, false);\n\n    if (this.props.isOpen) {\n      target.classList.add(css(styles.backdropOpen));\n    } else {\n      target.classList.remove(css(styles.backdropOpen));\n    }\n\n    if (this.isEmpty(title) && this.isEmpty(ariaLabel) && this.isEmpty(ariaLabelledby)) {\n      // eslint-disable-next-line no-console\n      console.error('Modal: Specify at least one of: title, aria-label, aria-labelledby.');\n    }\n\n    if (this.isEmpty(ariaLabel) && this.isEmpty(ariaLabelledby) && (hasNoBodyWrapper || header)) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Modal: When using hasNoBodyWrapper or setting a custom header, ensure you assign an accessible name to the the modal container with aria-label or aria-labelledby.'\n      );\n    }\n  }\n\n  componentDidUpdate() {\n    const { appendTo } = this.props;\n    const target: HTMLElement = this.getElement(appendTo);\n    if (this.props.isOpen) {\n      target.classList.add(css(styles.backdropOpen));\n      this.toggleSiblingsFromScreenReaders(true);\n    } else {\n      target.classList.remove(css(styles.backdropOpen));\n      this.toggleSiblingsFromScreenReaders(false);\n    }\n  }\n\n  componentWillUnmount() {\n    const { appendTo } = this.props;\n    const target: HTMLElement = this.getElement(appendTo);\n    if (this.state.container) {\n      target.removeChild(this.state.container);\n    }\n    target.removeEventListener('keydown', this.handleEscKeyClick, false);\n    target.classList.remove(css(styles.backdropOpen));\n  }\n\n  render() {\n    const {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      appendTo,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onEscapePress,\n      'aria-labelledby': ariaLabelledby,\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedby,\n      bodyAriaLabel,\n      bodyAriaRole,\n      title,\n      titleIconVariant,\n      titleLabel,\n      ouiaId,\n      ouiaSafe,\n      ...props\n    } = this.props;\n    const { container } = this.state;\n\n    if (!canUseDOM || !container) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(\n      <ModalContent\n        {...props}\n        boxId={this.boxId}\n        labelId={this.labelId}\n        descriptorId={this.descriptorId}\n        title={title}\n        titleIconVariant={titleIconVariant}\n        titleLabel={titleLabel}\n        aria-label={ariaLabel}\n        aria-describedby={ariaDescribedby}\n        aria-labelledby={ariaLabelledby}\n        bodyAriaLabel={bodyAriaLabel}\n        bodyAriaRole={bodyAriaRole}\n        ouiaId={ouiaId !== undefined ? ouiaId : this.state.ouiaStateId}\n        ouiaSafe={ouiaSafe}\n      />,\n      container\n    ) as React.ReactElement;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}