{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { Progress } from '../Progress';\nimport { Button } from '../Button';\nimport FileIcon from '@patternfly/react-icons/dist/esm/icons/file-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nexport var MultipleFileUploadStatusItem = function MultipleFileUploadStatusItem(_a) {\n  var className = _a.className,\n      file = _a.file,\n      fileIcon = _a.fileIcon,\n      _a$onReadStarted = _a.onReadStarted,\n      onReadStarted = _a$onReadStarted === void 0 ? function () {} : _a$onReadStarted,\n      _a$onReadFinished = _a.onReadFinished,\n      onReadFinished = _a$onReadFinished === void 0 ? function () {} : _a$onReadFinished,\n      _a$onReadSuccess = _a.onReadSuccess,\n      onReadSuccess = _a$onReadSuccess === void 0 ? function () {} : _a$onReadSuccess,\n      _a$onReadFail = _a.onReadFail,\n      onReadFail = _a$onReadFail === void 0 ? function () {} : _a$onReadFail,\n      _a$onClearClick = _a.onClearClick,\n      onClearClick = _a$onClearClick === void 0 ? function () {} : _a$onClearClick,\n      customFileHandler = _a.customFileHandler,\n      fileName = _a.fileName,\n      fileSize = _a.fileSize,\n      progressValue = _a.progressValue,\n      progressVariant = _a.progressVariant,\n      progressAriaLabel = _a.progressAriaLabel,\n      progressAriaLabelledBy = _a.progressAriaLabelledBy,\n      progressId = _a.progressId,\n      _a$buttonAriaLabel = _a.buttonAriaLabel,\n      buttonAriaLabel = _a$buttonAriaLabel === void 0 ? 'Remove from list' : _a$buttonAriaLabel,\n      props = __rest(_a, [\"className\", \"file\", \"fileIcon\", \"onReadStarted\", \"onReadFinished\", \"onReadSuccess\", \"onReadFail\", \"onClearClick\", \"customFileHandler\", \"fileName\", \"fileSize\", \"progressValue\", \"progressVariant\", \"progressAriaLabel\", \"progressAriaLabelledBy\", \"progressId\", \"buttonAriaLabel\"]);\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loadPercentage = _React$useState2[0],\n      setLoadPercentage = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      loadResult = _React$useState4[0],\n      setLoadResult = _React$useState4[1];\n\n  function readFile(file) {\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader();\n\n      reader.onload = function () {\n        return resolve(reader.result);\n      };\n\n      reader.onerror = function () {\n        return reject(reader.error);\n      };\n\n      reader.onprogress = function (data) {\n        if (data.lengthComputable) {\n          setLoadPercentage(data.loaded / data.total * 100);\n        }\n      };\n\n      reader.readAsDataURL(file);\n    });\n  }\n\n  React.useEffect(function () {\n    if (customFileHandler) {\n      customFileHandler(file);\n    } else {\n      onReadStarted(file);\n      readFile(file).then(function (data) {\n        setLoadResult('success');\n        setLoadPercentage(100);\n        onReadFinished(file);\n        onReadSuccess(data, file);\n      }).catch(function (error) {\n        onReadFinished(file);\n        onReadFail(error, file);\n        setLoadResult('danger');\n      });\n    }\n  }, []);\n\n  var getHumanReadableFileSize = function getHumanReadableFileSize(size) {\n    var prefixes = ['', 'K', 'M', 'G', 'T'];\n    var prefixUnit = 0;\n\n    while (size >= 1000) {\n      prefixUnit += 1;\n      size = size / 1000;\n    }\n\n    if (prefixUnit >= prefixes.length) {\n      return 'File size too large';\n    }\n\n    return \"\".concat(Math.round(size)).concat(prefixes[prefixUnit], \"B\");\n  };\n\n  var title = React.createElement(\"span\", {\n    className: styles.multipleFileUploadStatusItemProgress\n  }, React.createElement(\"span\", {\n    className: styles.multipleFileUploadStatusItemProgressText\n  }, fileName || (file === null || file === void 0 ? void 0 : file.name) || ''), React.createElement(\"span\", {\n    className: styles.multipleFileUploadStatusItemProgressSize\n  }, fileSize || getHumanReadableFileSize((file === null || file === void 0 ? void 0 : file.size) || 0)));\n  return React.createElement(\"li\", Object.assign({\n    className: css(styles.multipleFileUploadStatusItem, className)\n  }, props), React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusItemIcon\n  }, fileIcon || React.createElement(FileIcon, null)), React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusItemMain\n  }, React.createElement(Progress, {\n    title: title,\n    value: progressValue || loadPercentage,\n    variant: progressVariant || loadResult,\n    \"aria-label\": progressAriaLabel,\n    \"aria-labelledby\": progressAriaLabelledBy,\n    id: progressId\n  })), React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusItemClose\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": buttonAriaLabel,\n    onClick: onClearClick\n  }, React.createElement(TimesCircleIcon, null))));\n};\nMultipleFileUploadStatusItem.displayName = 'MultipleFileUploadStatusItem';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/MultipleFileUpload/MultipleFileUploadStatusItem.tsx"],"names":[],"mappings":";;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,iFAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,QAAT,QAAyB,aAAzB;AACA,SAAS,MAAT,QAAuB,WAAvB;AACA,OAAO,QAAP,MAAqB,kDAArB;AACA,OAAO,eAAP,MAA4B,0DAA5B;AA6CA,OAAO,IAAM,4BAA4B,GAA+D,SAA3F,4BAA2F,CAAC,EAAD,EAmBhE;AAnBiE,MACvG,SADuG,GAiBnE,EAjBmE,CACvG,SADuG;AAAA,MAEvG,IAFuG,GAiBnE,EAjBmE,CAEvG,IAFuG;AAAA,MAGvG,QAHuG,GAiBnE,EAjBmE,CAGvG,QAHuG;AAAA,yBAiBnE,EAjBmE,CAIvG,aAJuG;AAAA,MAIvG,aAJuG,iCAIvF,YAAK,CAAG,CAJ+E;AAAA,0BAiBnE,EAjBmE,CAKvG,cALuG;AAAA,MAKvG,cALuG,kCAKtF,YAAK,CAAG,CAL8E;AAAA,yBAiBnE,EAjBmE,CAMvG,aANuG;AAAA,MAMvG,aANuG,iCAMvF,YAAK,CAAG,CAN+E;AAAA,sBAiBnE,EAjBmE,CAOvG,UAPuG;AAAA,MAOvG,UAPuG,8BAO1F,YAAK,CAAG,CAPkF;AAAA,wBAiBnE,EAjBmE,CAQvG,YARuG;AAAA,MAQvG,YARuG,gCAQxF,YAAK,CAAG,CARgF;AAAA,MASvG,iBATuG,GAiBnE,EAjBmE,CASvG,iBATuG;AAAA,MAUvG,QAVuG,GAiBnE,EAjBmE,CAUvG,QAVuG;AAAA,MAWvG,QAXuG,GAiBnE,EAjBmE,CAWvG,QAXuG;AAAA,MAYvG,aAZuG,GAiBnE,EAjBmE,CAYvG,aAZuG;AAAA,MAavG,eAbuG,GAiBnE,EAjBmE,CAavG,eAbuG;AAAA,MAcvG,iBAduG,GAiBnE,EAjBmE,CAcvG,iBAduG;AAAA,MAevG,sBAfuG,GAiBnE,EAjBmE,CAevG,sBAfuG;AAAA,MAgBvG,UAhBuG,GAiBnE,EAjBmE,CAgBvG,UAhBuG;AAAA,2BAiBnE,EAjBmE,CAiBvG,eAjBuG;AAAA,MAiBvG,eAjBuG,mCAiBrF,kBAjBqF;AAAA,MAkBpG,KAlBoG,GAkB/F,MAAA,CAAA,EAAA,EAlB+F,CAAA,WAAA,EAAA,MAAA,EAAA,UAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,eAAA,EAAA,YAAA,EAAA,cAAA,EAAA,mBAAA,EAAA,UAAA,EAAA,UAAA,EAAA,eAAA,EAAA,iBAAA,EAAA,mBAAA,EAAA,wBAAA,EAAA,YAAA,EAAA,iBAAA,CAkB/F,CAlB+F;;AAoBvG,wBAA4C,KAAK,CAAC,QAAN,CAAe,CAAf,CAA5C;AAAA;AAAA,MAAO,cAAP;AAAA,MAAuB,iBAAvB;;AACA,yBAAoC,KAAK,CAAC,QAAN,EAApC;AAAA;AAAA,MAAO,UAAP;AAAA,MAAmB,aAAnB;;AAEA,WAAS,QAAT,CAAkB,IAAlB,EAA4B;AAC1B,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACrC,UAAM,MAAM,GAAG,IAAI,UAAJ,EAAf;;AACA,MAAA,MAAM,CAAC,MAAP,GAAgB;AAAA,eAAM,OAAO,CAAC,MAAM,CAAC,MAAR,CAAb;AAAA,OAAhB;;AACA,MAAA,MAAM,CAAC,OAAP,GAAiB;AAAA,eAAM,MAAM,CAAC,MAAM,CAAC,KAAR,CAAZ;AAAA,OAAjB;;AACA,MAAA,MAAM,CAAC,UAAP,GAAoB,UAAA,IAAI,EAAG;AACzB,YAAI,IAAI,CAAC,gBAAT,EAA2B;AACzB,UAAA,iBAAiB,CAAE,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,KAApB,GAA6B,GAA9B,CAAjB;AACD;AACF,OAJD;;AAKA,MAAA,MAAM,CAAC,aAAP,CAAqB,IAArB;AACD,KAVM,CAAP;AAWD;;AAED,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAK;AACnB,QAAI,iBAAJ,EAAuB;AACrB,MAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,KAFD,MAEO;AACL,MAAA,aAAa,CAAC,IAAD,CAAb;AACA,MAAA,QAAQ,CAAC,IAAD,CAAR,CACG,IADH,CACQ,UAAA,IAAI,EAAG;AACX,QAAA,aAAa,CAAC,SAAD,CAAb;AACA,QAAA,iBAAiB,CAAC,GAAD,CAAjB;AACA,QAAA,cAAc,CAAC,IAAD,CAAd;AACA,QAAA,aAAa,CAAC,IAAD,EAAiB,IAAjB,CAAb;AACD,OANH,EAOG,KAPH,CAOS,UAAC,KAAD,EAAwB;AAC7B,QAAA,cAAc,CAAC,IAAD,CAAd;AACA,QAAA,UAAU,CAAC,KAAD,EAAQ,IAAR,CAAV;AACA,QAAA,aAAa,CAAC,QAAD,CAAb;AACD,OAXH;AAYD;AACF,GAlBD,EAkBG,EAlBH;;AAoBA,MAAM,wBAAwB,GAAG,SAA3B,wBAA2B,CAAC,IAAD,EAAiB;AAChD,QAAM,QAAQ,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,CAAjB;AACA,QAAI,UAAU,GAAG,CAAjB;;AACA,WAAO,IAAI,IAAI,IAAf,EAAqB;AACnB,MAAA,UAAU,IAAI,CAAd;AACA,MAAA,IAAI,GAAG,IAAI,GAAG,IAAd;AACD;;AAED,QAAI,UAAU,IAAI,QAAQ,CAAC,MAA3B,EAAmC;AACjC,aAAO,qBAAP;AACD;;AAED,qBAAU,IAAI,CAAC,KAAL,CAAW,IAAX,CAAV,SAA6B,QAAQ,CAAC,UAAD,CAArC;AACD,GAbD;;AAeA,MAAM,KAAK,GACT,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,MAAM,CAAC;AAAxB,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,MAAM,CAAC;AAAxB,GAAA,EAAmE,QAAQ,KAAI,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,IAAV,CAAR,IAA0B,EAA7F,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,MAAM,CAAC;AAAxB,GAAA,EACG,QAAQ,IAAI,wBAAwB,CAAC,CAAA,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,IAAN,KAAc,CAAf,CADvC,CAFF,CADF;AASA,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAI,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,4BAAR,EAAsC,SAAtC;AAAlB,GAAA,EAAwE,KAAxE,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,MAAM,CAAC;AAAvB,GAAA,EAA0D,QAAQ,IAAI,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS,IAAT,CAAtE,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,MAAM,CAAC;AAAvB,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AACP,IAAA,KAAK,EAAE,KADA;AAEP,IAAA,KAAK,EAAE,aAAa,IAAI,cAFjB;AAGP,IAAA,OAAO,EAAE,eAAe,IAAI,UAHrB;AAG+B,kBAC1B,iBAJL;AAIsB,uBACZ,sBALV;AAMP,IAAA,EAAE,EAAE;AANG,GAAT,CADF,CAFF,EAYE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,MAAM,CAAC;AAAvB,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,IAAA,OAAO,EAAC,OAAT;AAAgB,kBAAa,eAA7B;AAA8C,IAAA,OAAO,EAAE;AAAvD,GAAP,EACE,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB,IAAhB,CADF,CADF,CAZF,CADF;AAoBD,CArGM;AAuGP,4BAA4B,CAAC,WAA7B,GAA2C,8BAA3C","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { Progress } from '../Progress';\nimport { Button } from '../Button';\nimport FileIcon from '@patternfly/react-icons/dist/esm/icons/file-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\n\nexport interface MultipleFileUploadStatusItemProps extends React.HTMLProps<HTMLLIElement> {\n  /** Class to add to outer div */\n  className?: string;\n  /** Adds accessibility text to the status item deletion button */\n  buttonAriaLabel?: string;\n  /** The file object being represented by the status item */\n  file?: File;\n  /** A callback for when a selected file starts loading */\n  onReadStarted?: (fileHandle: File) => void;\n  /** A callback for when a selected file finishes loading */\n  onReadFinished?: (fileHandle: File) => void;\n  /** A callback for when the FileReader successfully reads the file */\n  onReadSuccess?: (data: string, file: File) => void;\n  /** A callback for when the FileReader API fails */\n  onReadFail?: (error: DOMException, onReadFail: File) => void;\n  /** Clear button was clicked */\n  onClearClick?: React.MouseEventHandler<HTMLButtonElement>;\n\n  // Props to bypass built in behavior\n\n  /** A callback to process file reading in a custom way */\n  customFileHandler?: (file: File) => void;\n  /** A custom icon to show in place of the generic file icon */\n  fileIcon?: React.ReactNode;\n  /** A custom name to display for the file rather than using built in functionality to auto-fill it */\n  fileName?: string;\n  /** A custom file size to display for the file rather than using built in functionality to auto-fill it */\n  fileSize?: number;\n  /** A custom value to display for the progress component rather than using built in functionality to auto-fill it */\n  progressValue?: number;\n  /** A custom variant to apply to the progress component rather than using built in functionality to auto-fill it */\n  progressVariant?: 'danger' | 'success' | 'warning';\n\n  // Props passed through to the progress component\n\n  /** Adds accessible text to the progress bar. Required when title not used and there is not any label associated with the progress bar */\n  progressAriaLabel?: string;\n  /** Associates the progress bar with it's label for accessibility purposes. Required when title not used */\n  progressAriaLabelledBy?: string;\n  /** Unique identifier for progress. Generated if not specified. */\n  progressId?: string;\n}\n\nexport const MultipleFileUploadStatusItem: React.FunctionComponent<MultipleFileUploadStatusItemProps> = ({\n  className,\n  file,\n  fileIcon,\n  onReadStarted = () => {},\n  onReadFinished = () => {},\n  onReadSuccess = () => {},\n  onReadFail = () => {},\n  onClearClick = () => {},\n  customFileHandler,\n  fileName,\n  fileSize,\n  progressValue,\n  progressVariant,\n  progressAriaLabel,\n  progressAriaLabelledBy,\n  progressId,\n  buttonAriaLabel = 'Remove from list',\n  ...props\n}: MultipleFileUploadStatusItemProps) => {\n  const [loadPercentage, setLoadPercentage] = React.useState(0);\n  const [loadResult, setLoadResult] = React.useState<undefined | 'danger' | 'success'>();\n\n  function readFile(file: File) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = () => reject(reader.error);\n      reader.onprogress = data => {\n        if (data.lengthComputable) {\n          setLoadPercentage((data.loaded / data.total) * 100);\n        }\n      };\n      reader.readAsDataURL(file);\n    });\n  }\n\n  React.useEffect(() => {\n    if (customFileHandler) {\n      customFileHandler(file);\n    } else {\n      onReadStarted(file);\n      readFile(file)\n        .then(data => {\n          setLoadResult('success');\n          setLoadPercentage(100);\n          onReadFinished(file);\n          onReadSuccess(data as string, file);\n        })\n        .catch((error: DOMException) => {\n          onReadFinished(file);\n          onReadFail(error, file);\n          setLoadResult('danger');\n        });\n    }\n  }, []);\n\n  const getHumanReadableFileSize = (size: number) => {\n    const prefixes = ['', 'K', 'M', 'G', 'T'];\n    let prefixUnit = 0;\n    while (size >= 1000) {\n      prefixUnit += 1;\n      size = size / 1000;\n    }\n\n    if (prefixUnit >= prefixes.length) {\n      return 'File size too large';\n    }\n\n    return `${Math.round(size)}${prefixes[prefixUnit]}B`;\n  };\n\n  const title = (\n    <span className={styles.multipleFileUploadStatusItemProgress}>\n      <span className={styles.multipleFileUploadStatusItemProgressText}>{fileName || file?.name || ''}</span>\n      <span className={styles.multipleFileUploadStatusItemProgressSize}>\n        {fileSize || getHumanReadableFileSize(file?.size || 0)}\n      </span>\n    </span>\n  );\n\n  return (\n    <li className={css(styles.multipleFileUploadStatusItem, className)} {...props}>\n      <div className={styles.multipleFileUploadStatusItemIcon}>{fileIcon || <FileIcon />}</div>\n      <div className={styles.multipleFileUploadStatusItemMain}>\n        <Progress\n          title={title}\n          value={progressValue || loadPercentage}\n          variant={progressVariant || loadResult}\n          aria-label={progressAriaLabel}\n          aria-labelledby={progressAriaLabelledBy}\n          id={progressId}\n        />\n      </div>\n      <div className={styles.multipleFileUploadStatusItemClose}>\n        <Button variant=\"plain\" aria-label={buttonAriaLabel} onClick={onClearClick}>\n          <TimesCircleIcon />\n        </Button>\n      </div>\n    </li>\n  );\n};\n\nMultipleFileUploadStatusItem.displayName = 'MultipleFileUploadStatusItem';\n"]},"metadata":{},"sourceType":"module"}