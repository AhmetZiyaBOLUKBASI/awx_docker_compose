{"ast":null,"code":"import _taggedTemplateLiteral from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject;import{Trans}from\"@lingui/react\";import{i18n}from\"@lingui/core\";import React from'react';import styled from'styled-components';import{DateTime}from'luxon';import{formatDateString}from'util/dates';import{DetailList,Detail}from'../../DetailList';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Label=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  margin-bottom: var(--pf-global--spacer--sm);\\n  font-weight: var(--pf-global--FontWeight--bold);\\n\"])));export default function FrequencyDetails(_ref){var type=_ref.type,label=_ref.label,options=_ref.options,timezone=_ref.timezone;var getRunEveryLabel=function getRunEveryLabel(){var interval=options.interval;switch(type){case'minute':return/*#__PURE__*/_jsx(Trans,{id:\"{interval, plural, one {{interval} minute} other {{interval} minutes}}\",values:{interval:interval}});case'hour':return/*#__PURE__*/_jsx(Trans,{id:\"{interval, plural, one {{interval} hour} other {{interval} hours}}\",values:{interval:interval}});case'day':return/*#__PURE__*/_jsx(Trans,{id:\"{interval, plural, one {{interval} day} other {{interval} days}}\",values:{interval:interval}});case'week':return/*#__PURE__*/_jsx(Trans,{id:\"{interval, plural, one {{interval} week} other {{interval} weeks}}\",values:{interval:interval}});case'month':return/*#__PURE__*/_jsx(Trans,{id:\"{interval, plural, one {{interval} month} other {{interval} months}}\",values:{interval:interval}});case'year':return/*#__PURE__*/_jsx(Trans,{id:\"{interval, plural, one {{interval} year} other {{interval} years}}\",values:{interval:interval}});default:throw new Error(/*i18n*/i18n._(\"Frequency did not match an expected value\"));}};var weekdays={0:/*i18n*/i18n._(\"Monday\"),1:/*i18n*/i18n._(\"Tuesday\"),2:/*i18n*/i18n._(\"Wednesday\"),3:/*i18n*/i18n._(\"Thursday\"),4:/*i18n*/i18n._(\"Friday\"),5:/*i18n*/i18n._(\"Saturday\"),6:/*i18n*/i18n._(\"Sunday\")};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Label,{children:label}),/*#__PURE__*/_jsxs(DetailList,{gutter:\"sm\",children:[/*#__PURE__*/_jsx(Detail,{label:/*i18n*/i18n._(\"Run every\"),value:getRunEveryLabel()}),type==='week'?/*#__PURE__*/_jsx(Detail,{label:/*i18n*/i18n._(\"On days\"),value:options.daysOfWeek.sort(sortWeekday).map(function(d){return weekdays[d.weekday];}).join(', ')}):null,/*#__PURE__*/_jsx(RunOnDetail,{type:type,options:options}),/*#__PURE__*/_jsx(Detail,{label:/*i18n*/i18n._(\"End\"),value:getEndValue(type,options,timezone)})]})]});}function sortWeekday(a,b){if(a.weekday===6)return-1;if(b.weekday===6)return 1;return a.weekday-b.weekday;}function RunOnDetail(_ref2){var type=_ref2.type,options=_ref2.options;if(type==='month'){if(options.runOn==='day'){return/*#__PURE__*/_jsx(Detail,{label:/*i18n*/i18n._(\"Run on\"),value:/*i18n*/i18n._(\"Day {0}\",{0:options.runOnDayNumber})});}var dayOfWeek=options.runOnTheDay;return/*#__PURE__*/_jsx(Detail,{label:/*i18n*/i18n._(\"Run on\"),value:options.runOnDayNumber===-1?/*i18n*/i18n._(\"The last {dayOfWeek}\",{dayOfWeek:dayOfWeek}):/*#__PURE__*/_jsx(Trans,{id:\"{0, selectordinal, one {The first {dayOfWeek}} two {The second {dayOfWeek}} =3 {The third {dayOfWeek}} =4 {The fourth {dayOfWeek}} =5 {The fifth {dayOfWeek}}}\",values:{0:options.runOnDayNumber,dayOfWeek:dayOfWeek}})});}if(type==='year'){var months={1:/*i18n*/i18n._(\"January\"),2:/*i18n*/i18n._(\"February\"),3:/*i18n*/i18n._(\"March\"),4:/*i18n*/i18n._(\"April\"),5:/*i18n*/i18n._(\"May\"),6:/*i18n*/i18n._(\"June\"),7:/*i18n*/i18n._(\"July\"),8:/*i18n*/i18n._(\"August\"),9:/*i18n*/i18n._(\"September\"),10:/*i18n*/i18n._(\"October\"),11:/*i18n*/i18n._(\"November\"),12:/*i18n*/i18n._(\"December\")};if(options.runOn==='day'){return/*#__PURE__*/_jsx(Detail,{label:/*i18n*/i18n._(\"Run on\"),value:\"\".concat(months[options.runOnTheMonth],\" \").concat(options.runOnDayMonth)});}var weekdays={sunday:/*i18n*/i18n._(\"Sunday\"),monday:/*i18n*/i18n._(\"Monday\"),tuesday:/*i18n*/i18n._(\"Tuesday\"),wednesday:/*i18n*/i18n._(\"Wednesday\"),thursday:/*i18n*/i18n._(\"Thursday\"),friday:/*i18n*/i18n._(\"Friday\"),saturday:/*i18n*/i18n._(\"Saturday\"),day:/*i18n*/i18n._(\"day\"),weekday:/*i18n*/i18n._(\"weekday\"),weekendDay:/*i18n*/i18n._(\"weekend day\")};var weekday=weekdays[options.runOnTheDay];var month=months[options.runOnTheMonth];return/*#__PURE__*/_jsx(Detail,{label:/*i18n*/i18n._(\"Run on\"),value:options.runOnTheOccurrence===-1?/*i18n*/i18n._(\"The last {weekday} of {month}\",{weekday:weekday,month:month}):/*#__PURE__*/_jsx(Trans,{id:\"{0, selectordinal, one {The first {weekday} of {month}} two {The second {weekday} of {month}} =3 {The third {weekday} of {month}} =4 {The fourth {weekday} of {month}} =5 {The fifth {weekday} of {month}}}\",values:{0:options.runOnTheOccurrence,weekday:weekday,month:month}})});}return null;}function getEndValue(type,options,timezone){if(options.end==='never'){return(/*i18n*/i18n._(\"Never\"));}if(options.end==='after'){var numOccurrences=options.occurrences;return/*#__PURE__*/_jsx(Trans,{id:\"{numOccurrences, plural, one {After {numOccurrences} occurrence} other {After {numOccurrences} occurrences}}\",values:{numOccurrences:numOccurrences}});}var date=DateTime.fromFormat(\"\".concat(options.endDate,\" \").concat(options.endTime),'yyyy-MM-dd h:mm a',{zone:timezone});return formatDateString(date,timezone);}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/Schedule/ScheduleDetail/FrequencyDetails.js"],"names":["React","styled","DateTime","formatDateString","DetailList","Detail","Label","div","FrequencyDetails","type","label","options","timezone","getRunEveryLabel","interval","Error","weekdays","daysOfWeek","sort","sortWeekday","map","d","weekday","join","getEndValue","a","b","RunOnDetail","runOn","runOnDayNumber","dayOfWeek","runOnTheDay","months","runOnTheMonth","runOnDayMonth","sunday","monday","tuesday","wednesday","thursday","friday","saturday","day","weekendDay","month","runOnTheOccurrence","end","numOccurrences","occurrences","date","fromFormat","endDate","endTime","zone"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { t, Plural, SelectOrdinal } from '@lingui/macro';\nimport { DateTime } from 'luxon';\nimport { formatDateString } from 'util/dates';\nimport { DetailList, Detail } from '../../DetailList';\n\nconst Label = styled.div`\n  margin-bottom: var(--pf-global--spacer--sm);\n  font-weight: var(--pf-global--FontWeight--bold);\n`;\n\nexport default function FrequencyDetails({ type, label, options, timezone }) {\n  const getRunEveryLabel = () => {\n    const { interval } = options;\n    switch (type) {\n      case 'minute':\n        return (\n          <Plural\n            value={interval}\n            one=\"{interval} minute\"\n            other=\"{interval} minutes\"\n          />\n        );\n      case 'hour':\n        return (\n          <Plural\n            value={interval}\n            one=\"{interval} hour\"\n            other=\"{interval} hours\"\n          />\n        );\n      case 'day':\n        return (\n          <Plural\n            value={interval}\n            one=\"{interval} day\"\n            other=\"{interval} days\"\n          />\n        );\n      case 'week':\n        return (\n          <Plural\n            value={interval}\n            one=\"{interval} week\"\n            other=\"{interval} weeks\"\n          />\n        );\n      case 'month':\n        return (\n          <Plural\n            value={interval}\n            one=\"{interval} month\"\n            other=\"{interval} months\"\n          />\n        );\n      case 'year':\n        return (\n          <Plural\n            value={interval}\n            one=\"{interval} year\"\n            other=\"{interval} years\"\n          />\n        );\n      default:\n        throw new Error(t`Frequency did not match an expected value`);\n    }\n  };\n\n  const weekdays = {\n    0: t`Monday`,\n    1: t`Tuesday`,\n    2: t`Wednesday`,\n    3: t`Thursday`,\n    4: t`Friday`,\n    5: t`Saturday`,\n    6: t`Sunday`,\n  };\n\n  return (\n    <div>\n      <Label>{label}</Label>\n      <DetailList gutter=\"sm\">\n        <Detail label={t`Run every`} value={getRunEveryLabel()} />\n        {type === 'week' ? (\n          <Detail\n            label={t`On days`}\n            value={options.daysOfWeek\n              .sort(sortWeekday)\n              .map((d) => weekdays[d.weekday])\n              .join(', ')}\n          />\n        ) : null}\n        <RunOnDetail type={type} options={options} />\n        <Detail label={t`End`} value={getEndValue(type, options, timezone)} />\n      </DetailList>\n    </div>\n  );\n}\n\nfunction sortWeekday(a, b) {\n  if (a.weekday === 6) return -1;\n  if (b.weekday === 6) return 1;\n  return a.weekday - b.weekday;\n}\n\nfunction RunOnDetail({ type, options }) {\n  if (type === 'month') {\n    if (options.runOn === 'day') {\n      return (\n        <Detail label={t`Run on`} value={t`Day ${options.runOnDayNumber}`} />\n      );\n    }\n    const dayOfWeek = options.runOnTheDay;\n    return (\n      <Detail\n        label={t`Run on`}\n        value={\n          options.runOnDayNumber === -1 ? (\n            t`The last ${dayOfWeek}`\n          ) : (\n            <SelectOrdinal\n              value={options.runOnDayNumber}\n              one={`The first ${dayOfWeek}`}\n              two={`The second ${dayOfWeek}`}\n              _3={`The third ${dayOfWeek}`}\n              _4={`The fourth ${dayOfWeek}`}\n              _5={`The fifth ${dayOfWeek}`}\n            />\n          )\n        }\n      />\n    );\n  }\n  if (type === 'year') {\n    const months = {\n      1: t`January`,\n      2: t`February`,\n      3: t`March`,\n      4: t`April`,\n      5: t`May`,\n      6: t`June`,\n      7: t`July`,\n      8: t`August`,\n      9: t`September`,\n      10: t`October`,\n      11: t`November`,\n      12: t`December`,\n    };\n    if (options.runOn === 'day') {\n      return (\n        <Detail\n          label={t`Run on`}\n          value={`${months[options.runOnTheMonth]} ${options.runOnDayMonth}`}\n        />\n      );\n    }\n    const weekdays = {\n      sunday: t`Sunday`,\n      monday: t`Monday`,\n      tuesday: t`Tuesday`,\n      wednesday: t`Wednesday`,\n      thursday: t`Thursday`,\n      friday: t`Friday`,\n      saturday: t`Saturday`,\n      day: t`day`,\n      weekday: t`weekday`,\n      weekendDay: t`weekend day`,\n    };\n    const weekday = weekdays[options.runOnTheDay];\n    const month = months[options.runOnTheMonth];\n    return (\n      <Detail\n        label={t`Run on`}\n        value={\n          options.runOnTheOccurrence === -1 ? (\n            t`The last ${weekday} of ${month}`\n          ) : (\n            <SelectOrdinal\n              value={options.runOnTheOccurrence}\n              one={`The first ${weekday} of ${month}`}\n              two={`The second ${weekday} of ${month}`}\n              _3={`The third ${weekday} of ${month}`}\n              _4={`The fourth ${weekday} of ${month}`}\n              _5={`The fifth ${weekday} of ${month}`}\n            />\n          )\n        }\n      />\n    );\n  }\n  return null;\n}\n\nfunction getEndValue(type, options, timezone) {\n  if (options.end === 'never') {\n    return t`Never`;\n  }\n  if (options.end === 'after') {\n    const numOccurrences = options.occurrences;\n    return (\n      <Plural\n        value={numOccurrences}\n        one=\"After {numOccurrences} occurrence\"\n        other=\"After {numOccurrences} occurrences\"\n      />\n    );\n  }\n\n  const date = DateTime.fromFormat(\n    `${options.endDate} ${options.endTime}`,\n    'yyyy-MM-dd h:mm a',\n    {\n      zone: timezone,\n    }\n  );\n  return formatDateString(date, timezone);\n}\n"]},"metadata":{},"sourceType":"module"}