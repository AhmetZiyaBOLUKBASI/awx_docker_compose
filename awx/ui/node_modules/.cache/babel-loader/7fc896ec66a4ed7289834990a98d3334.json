{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _taggedTemplateLiteral from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _excluded=[\"credential\",\"credentialTypes\",\"inputSources\",\"onSubmit\",\"onCancel\",\"submitError\",\"isOrgLookupDisabled\"],_excluded2=[\"credential_type\"];var _templateObject,_templateObject2;import{i18n}from\"@lingui/core\";import React,{useCallback,useEffect,useState}from'react';import{useLocation}from'react-router-dom';import{Formik,useField,useFormikContext}from'formik';import{ActionGroup,Button,Form,FormGroup,Select as PFSelect,SelectOption as PFSelectOption,SelectVariant,Tooltip}from'@patternfly/react-core';import styled from'styled-components';import FormField,{FormSubmitError}from'components/FormField';import{FormColumnLayout,FormFullWidthLayout}from'components/FormLayout';import{required}from'util/validators';import OrganizationLookup from'components/Lookup/OrganizationLookup';import TypeInputsSubForm from'./TypeInputsSubForm';import ExternalTestModal from'./ExternalTestModal';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Select=styled(PFSelect)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  ul {\\n    max-width: 495px;\\n  }\\n  \",\"\\n\"])),function(props){return props.isDisabled?\"cursor: not-allowed\":null;});var SelectOption=styled(PFSelectOption)(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  white-space: nowrap;\\n  text-overflow: ellipsis;\\n  overflow: hidden;\\n\"])));function CredentialFormFields(_ref){var _credentialTypes$cred,_credentialTypes$cred2,_credentialTypes$cred3;var initialTypeId=_ref.initialTypeId,credentialTypes=_ref.credentialTypes;var _useLocation=useLocation(),pathname=_useLocation.pathname;var _useFormikContext=useFormikContext(),setFieldValue=_useFormikContext.setFieldValue,initialValues=_useFormikContext.initialValues,setFieldTouched=_useFormikContext.setFieldTouched;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isSelectOpen=_useState2[0],setIsSelectOpen=_useState2[1];var _useField=useField({name:'credential_type',validate:required(/*i18n*/i18n._(\"Select a value for this field\"))}),_useField2=_slicedToArray(_useField,3),credTypeField=_useField2[0],credTypeMeta=_useField2[1],credTypeHelpers=_useField2[2];var _useState3=useState(initialTypeId),_useState4=_slicedToArray(_useState3,2),credentialTypeId=_useState4[0],setCredentialTypeId=_useState4[1];var isGalaxyCredential=!!credentialTypeId&&((_credentialTypes$cred=credentialTypes[credentialTypeId])===null||_credentialTypes$cred===void 0?void 0:_credentialTypes$cred.kind)==='galaxy';var _useField3=useField('organization'),_useField4=_slicedToArray(_useField3,3),orgField=_useField4[0],orgMeta=_useField4[1],orgHelpers=_useField4[2];var credentialTypeOptions=Object.keys(credentialTypes).map(function(key){return{value:credentialTypes[key].id,key:credentialTypes[key].id,label:credentialTypes[key].name};}).sort(function(a,b){return a.label.toLowerCase()>b.label.toLowerCase()?1:-1;});var resetSubFormFields=useCallback(function(newCredentialTypeId){var fields=credentialTypes[newCredentialTypeId].inputs.fields||[];fields.forEach(function(_ref2){var ask_at_runtime=_ref2.ask_at_runtime,type=_ref2.type,id=_ref2.id,choices=_ref2.choices,defaultValue=_ref2.default;if(parseInt(newCredentialTypeId,10)===initialTypeId){setFieldValue(\"inputs.\".concat(id),initialValues.inputs[id]);if(ask_at_runtime){setFieldValue(\"passwordPrompts.\".concat(id),initialValues.passwordPrompts[id]);}}else{switch(type){case'string':setFieldValue(\"inputs.\".concat(id),defaultValue||'');break;case'boolean':setFieldValue(\"inputs.\".concat(id),defaultValue||false);break;default:break;}if(choices){setFieldValue(\"inputs.\".concat(id),defaultValue);}if(ask_at_runtime){setFieldValue(\"passwordPrompts.\".concat(id),false);}}setFieldTouched(\"inputs.\".concat(id),false);});},[credentialTypes,initialTypeId,initialValues.inputs,initialValues.passwordPrompts,setFieldTouched,setFieldValue]);useEffect(function(){if(credentialTypeId){resetSubFormFields(credentialTypeId);}},[resetSubFormFields,credentialTypeId]);var handleOrganizationUpdate=useCallback(function(value){setFieldValue('organization',value);setFieldTouched('organization',true,false);},[setFieldValue,setFieldTouched]);var isCredentialTypeDisabled=pathname.includes('edit');var credentialTypeSelect=/*#__PURE__*/_jsx(Select,{isDisabled:isCredentialTypeDisabled,ouiaId:\"CredentialForm-credential_type\",\"aria-label\":/*i18n*/i18n._(\"Credential Type\"),typeAheadAriaLabel:/*i18n*/i18n._(\"Select Credential Type\"),isOpen:isSelectOpen,variant:SelectVariant.typeahead,onToggle:setIsSelectOpen,onSelect:function onSelect(event,value){setCredentialTypeId(value);credTypeHelpers.setValue(value);setIsSelectOpen(false);},selections:credTypeField.value,placeholder:/*i18n*/i18n._(\"Select a credential Type\"),isCreatable:false,maxHeight:\"300px\",width:\"100%\",noResultsFoundText:/*i18n*/i18n._(\"No results found\"),children:credentialTypeOptions.map(function(credType){return/*#__PURE__*/_jsx(SelectOption,{value:credType.value,\"data-cy\":\"\".concat(credType.id,\"-credential-type-select-option\"),children:credType.label},credType.value);})});return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(FormField,{id:\"credential-name\",label:/*i18n*/i18n._(\"Name\"),name:\"name\",type:\"text\",validate:required(null),isRequired:true}),/*#__PURE__*/_jsx(FormField,{id:\"credential-description\",label:/*i18n*/i18n._(\"Description\"),name:\"description\",type:\"text\"}),/*#__PURE__*/_jsx(OrganizationLookup,{helperTextInvalid:orgMeta.error,isValid:!orgMeta.touched||!orgMeta.error,onBlur:function onBlur(){return orgHelpers.setTouched();},onChange:handleOrganizationUpdate,value:orgField.value,touched:orgMeta.touched,error:orgMeta.error,required:isGalaxyCredential,isDisabled:initialValues.isOrgLookupDisabled,validate:isGalaxyCredential?required(/*i18n*/i18n._(\"Galaxy credentials must be owned by an Organization.\")):undefined}),/*#__PURE__*/_jsx(FormGroup,{fieldId:\"credential-Type\",helperTextInvalid:credTypeMeta.error,isRequired:true,validated:!credTypeMeta.touched||!credTypeMeta.error?'default':'error',label:/*i18n*/i18n._(\"Credential Type\"),children:isCredentialTypeDisabled?/*#__PURE__*/_jsx(Tooltip,{content:\"You cannot change the credential type of a credential,\\n              as it may break the functionality of the resources using it.\",children:credentialTypeSelect}):credentialTypeSelect}),credentialTypeId!==undefined&&credentialTypeId!==''&&((_credentialTypes$cred2=credentialTypes[credentialTypeId])===null||_credentialTypes$cred2===void 0?void 0:(_credentialTypes$cred3=_credentialTypes$cred2.inputs)===null||_credentialTypes$cred3===void 0?void 0:_credentialTypes$cred3.fields)&&/*#__PURE__*/_jsx(TypeInputsSubForm,{credentialType:credentialTypes[credentialTypeId]})]});}function CredentialForm(_ref3){var _credential$summary_f,_credentialTypes$init;var _ref3$credential=_ref3.credential,credential=_ref3$credential===void 0?{}:_ref3$credential,credentialTypes=_ref3.credentialTypes,inputSources=_ref3.inputSources,_onSubmit=_ref3.onSubmit,onCancel=_ref3.onCancel,submitError=_ref3.submitError,isOrgLookupDisabled=_ref3.isOrgLookupDisabled,rest=_objectWithoutProperties(_ref3,_excluded);var initialTypeId=credential===null||credential===void 0?void 0:credential.credential_type;var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),showExternalTestModal=_useState6[0],setShowExternalTestModal=_useState6[1];var initialValues={name:credential.name||'',description:credential.description||'',organization:(credential===null||credential===void 0?void 0:(_credential$summary_f=credential.summary_fields)===null||_credential$summary_f===void 0?void 0:_credential$summary_f.organization)||null,credential_type:((_credentialTypes$init=credentialTypes[initialTypeId])===null||_credentialTypes$init===void 0?void 0:_credentialTypes$init.name)||'',inputs:_objectSpread({},credential===null||credential===void 0?void 0:credential.inputs),passwordPrompts:{},isOrgLookupDisabled:isOrgLookupDisabled||false};Object.values(credentialTypes).forEach(function(credentialType){if(!credential.id||credential.credential_type===credentialType.id){var fields=credentialType.inputs.fields||[];fields.forEach(function(_ref4){var ask_at_runtime=_ref4.ask_at_runtime,type=_ref4.type,id=_ref4.id,choices=_ref4.choices,defaultValue=_ref4.default;if(credential!==null&&credential!==void 0&&credential.inputs&&id in credential.inputs){if(ask_at_runtime){initialValues.passwordPrompts[id]=credential.inputs[id]==='ASK'||false;initialValues.inputs[id]=credential.inputs[id]==='ASK'?'':credential.inputs[id];}else{initialValues.inputs[id]=credential.inputs[id];}}else{switch(type){case'string':initialValues.inputs[id]=defaultValue||'';break;case'boolean':initialValues.inputs[id]=defaultValue||false;break;default:break;}if(choices){initialValues.inputs[id]=defaultValue;}if(ask_at_runtime){initialValues.passwordPrompts[id]=false;}}});}});Object.values(inputSources).forEach(function(inputSource){initialValues.inputs[inputSource.input_field_name]={credential:inputSource.summary_fields.source_credential,inputs:inputSource.metadata};});return/*#__PURE__*/_jsx(Formik,{initialValues:initialValues,onSubmit:function onSubmit(values){var credential_type=values.credential_type,actualValues=_objectWithoutProperties(values,_excluded2);// credential_type could be the raw id or the displayed name value.\n// If it's the name, replace it with the id before making the request.\nactualValues.credential_type=Object.keys(credentialTypes).find(function(key){return credentialTypes[key].name===credential_type;})||credential_type;_onSubmit(actualValues);},children:function children(formik){var _formik$values,_credentialTypes$form;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Form,{autoComplete:\"off\",onSubmit:formik.handleSubmit,children:/*#__PURE__*/_jsxs(FormColumnLayout,{children:[/*#__PURE__*/_jsx(CredentialFormFields,_objectSpread({initialTypeId:initialTypeId,credentialTypes:credentialTypes},rest)),/*#__PURE__*/_jsx(FormSubmitError,{error:submitError}),/*#__PURE__*/_jsx(FormFullWidthLayout,{children:/*#__PURE__*/_jsxs(ActionGroup,{children:[/*#__PURE__*/_jsx(Button,{ouiaId:\"credential-form-save-button\",id:\"credential-form-save-button\",\"aria-label\":/*i18n*/i18n._(\"Save\"),variant:\"primary\",type:\"button\",onClick:formik.handleSubmit,children:/*i18n*/i18n._(\"Save\")}),(formik===null||formik===void 0?void 0:(_formik$values=formik.values)===null||_formik$values===void 0?void 0:_formik$values.credential_type)&&((_credentialTypes$form=credentialTypes[formik.values.credential_type])===null||_credentialTypes$form===void 0?void 0:_credentialTypes$form.kind)==='external'&&/*#__PURE__*/_jsx(Button,{ouiaId:\"credential-form-test-button\",id:\"credential-form-test-button\",\"aria-label\":/*i18n*/i18n._(\"Test\"),variant:\"secondary\",type:\"button\",onClick:function onClick(){return setShowExternalTestModal(true);},isDisabled:!formik.isValid,children:/*i18n*/i18n._(\"Test\")}),/*#__PURE__*/_jsx(Button,{ouiaId:\"credential-form-cancel-button\",id:\"credential-form-cancel-button\",\"aria-label\":/*i18n*/i18n._(\"Cancel\"),variant:\"link\",type:\"button\",onClick:onCancel,children:/*i18n*/i18n._(\"Cancel\")})]})})]})}),showExternalTestModal&&/*#__PURE__*/_jsx(ExternalTestModal,{credential:credential,credentialType:credentialTypes[formik.values.credential_type],credentialFormValues:formik.values,onClose:function onClose(){return setShowExternalTestModal(false);}})]});}});}CredentialForm.defaultProps={credential:{},inputSources:{},submitError:null};export default CredentialForm;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Credential/shared/CredentialForm.js"],"names":["React","useCallback","useEffect","useState","useLocation","Formik","useField","useFormikContext","ActionGroup","Button","Form","FormGroup","Select","PFSelect","SelectOption","PFSelectOption","SelectVariant","Tooltip","styled","FormField","FormSubmitError","FormColumnLayout","FormFullWidthLayout","required","OrganizationLookup","TypeInputsSubForm","ExternalTestModal","props","isDisabled","CredentialFormFields","initialTypeId","credentialTypes","pathname","setFieldValue","initialValues","setFieldTouched","isSelectOpen","setIsSelectOpen","name","validate","credTypeField","credTypeMeta","credTypeHelpers","credentialTypeId","setCredentialTypeId","isGalaxyCredential","kind","orgField","orgMeta","orgHelpers","credentialTypeOptions","Object","keys","map","key","value","id","label","sort","a","b","toLowerCase","resetSubFormFields","newCredentialTypeId","fields","inputs","forEach","ask_at_runtime","type","choices","defaultValue","default","parseInt","passwordPrompts","handleOrganizationUpdate","isCredentialTypeDisabled","includes","credentialTypeSelect","typeahead","event","setValue","credType","error","touched","setTouched","isOrgLookupDisabled","undefined","CredentialForm","credential","inputSources","onSubmit","onCancel","submitError","rest","credential_type","showExternalTestModal","setShowExternalTestModal","description","organization","summary_fields","values","credentialType","inputSource","input_field_name","source_credential","metadata","actualValues","find","formik","handleSubmit","isValid","defaultProps"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { shape } from 'prop-types';\nimport { Formik, useField, useFormikContext } from 'formik';\n\nimport { t } from '@lingui/macro';\nimport {\n  ActionGroup,\n  Button,\n  Form,\n  FormGroup,\n  Select as PFSelect,\n  SelectOption as PFSelectOption,\n  SelectVariant,\n  Tooltip,\n} from '@patternfly/react-core';\nimport styled from 'styled-components';\nimport FormField, { FormSubmitError } from 'components/FormField';\nimport { FormColumnLayout, FormFullWidthLayout } from 'components/FormLayout';\nimport { required } from 'util/validators';\nimport OrganizationLookup from 'components/Lookup/OrganizationLookup';\nimport TypeInputsSubForm from './TypeInputsSubForm';\nimport ExternalTestModal from './ExternalTestModal';\n\nconst Select = styled(PFSelect)`\n  ul {\n    max-width: 495px;\n  }\n  ${(props) => (props.isDisabled ? `cursor: not-allowed` : null)}\n`;\n\nconst SelectOption = styled(PFSelectOption)`\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nfunction CredentialFormFields({ initialTypeId, credentialTypes }) {\n  const { pathname } = useLocation();\n  const { setFieldValue, initialValues, setFieldTouched } = useFormikContext();\n  const [isSelectOpen, setIsSelectOpen] = useState(false);\n  const [credTypeField, credTypeMeta, credTypeHelpers] = useField({\n    name: 'credential_type',\n    validate: required(t`Select a value for this field`),\n  });\n\n  const [credentialTypeId, setCredentialTypeId] = useState(initialTypeId);\n\n  const isGalaxyCredential =\n    !!credentialTypeId && credentialTypes[credentialTypeId]?.kind === 'galaxy';\n\n  const [orgField, orgMeta, orgHelpers] = useField('organization');\n\n  const credentialTypeOptions = Object.keys(credentialTypes)\n    .map((key) => ({\n      value: credentialTypes[key].id,\n      key: credentialTypes[key].id,\n      label: credentialTypes[key].name,\n    }))\n    .sort((a, b) => (a.label.toLowerCase() > b.label.toLowerCase() ? 1 : -1));\n\n  const resetSubFormFields = useCallback(\n    (newCredentialTypeId) => {\n      const fields = credentialTypes[newCredentialTypeId].inputs.fields || [];\n      fields.forEach(\n        ({ ask_at_runtime, type, id, choices, default: defaultValue }) => {\n          if (parseInt(newCredentialTypeId, 10) === initialTypeId) {\n            setFieldValue(`inputs.${id}`, initialValues.inputs[id]);\n            if (ask_at_runtime) {\n              setFieldValue(\n                `passwordPrompts.${id}`,\n                initialValues.passwordPrompts[id]\n              );\n            }\n          } else {\n            switch (type) {\n              case 'string':\n                setFieldValue(`inputs.${id}`, defaultValue || '');\n                break;\n              case 'boolean':\n                setFieldValue(`inputs.${id}`, defaultValue || false);\n                break;\n              default:\n                break;\n            }\n\n            if (choices) {\n              setFieldValue(`inputs.${id}`, defaultValue);\n            }\n\n            if (ask_at_runtime) {\n              setFieldValue(`passwordPrompts.${id}`, false);\n            }\n          }\n          setFieldTouched(`inputs.${id}`, false);\n        }\n      );\n    },\n    [\n      credentialTypes,\n      initialTypeId,\n      initialValues.inputs,\n      initialValues.passwordPrompts,\n      setFieldTouched,\n      setFieldValue,\n    ]\n  );\n\n  useEffect(() => {\n    if (credentialTypeId) {\n      resetSubFormFields(credentialTypeId);\n    }\n  }, [resetSubFormFields, credentialTypeId]);\n\n  const handleOrganizationUpdate = useCallback(\n    (value) => {\n      setFieldValue('organization', value);\n      setFieldTouched('organization', true, false);\n    },\n    [setFieldValue, setFieldTouched]\n  );\n\n  const isCredentialTypeDisabled = pathname.includes('edit');\n  const credentialTypeSelect = (\n    <Select\n      isDisabled={isCredentialTypeDisabled}\n      ouiaId=\"CredentialForm-credential_type\"\n      aria-label={t`Credential Type`}\n      typeAheadAriaLabel={t`Select Credential Type`}\n      isOpen={isSelectOpen}\n      variant={SelectVariant.typeahead}\n      onToggle={setIsSelectOpen}\n      onSelect={(event, value) => {\n        setCredentialTypeId(value);\n        credTypeHelpers.setValue(value);\n        setIsSelectOpen(false);\n      }}\n      selections={credTypeField.value}\n      placeholder={t`Select a credential Type`}\n      isCreatable={false}\n      maxHeight=\"300px\"\n      width=\"100%\"\n      noResultsFoundText={t`No results found`}\n    >\n      {credentialTypeOptions.map((credType) => (\n        <SelectOption\n          key={credType.value}\n          value={credType.value}\n          data-cy={`${credType.id}-credential-type-select-option`}\n        >\n          {credType.label}\n        </SelectOption>\n      ))}\n    </Select>\n  );\n\n  return (\n    <>\n      <FormField\n        id=\"credential-name\"\n        label={t`Name`}\n        name=\"name\"\n        type=\"text\"\n        validate={required(null)}\n        isRequired\n      />\n      <FormField\n        id=\"credential-description\"\n        label={t`Description`}\n        name=\"description\"\n        type=\"text\"\n      />\n      <OrganizationLookup\n        helperTextInvalid={orgMeta.error}\n        isValid={!orgMeta.touched || !orgMeta.error}\n        onBlur={() => orgHelpers.setTouched()}\n        onChange={handleOrganizationUpdate}\n        value={orgField.value}\n        touched={orgMeta.touched}\n        error={orgMeta.error}\n        required={isGalaxyCredential}\n        isDisabled={initialValues.isOrgLookupDisabled}\n        validate={\n          isGalaxyCredential\n            ? required(t`Galaxy credentials must be owned by an Organization.`)\n            : undefined\n        }\n      />\n      <FormGroup\n        fieldId=\"credential-Type\"\n        helperTextInvalid={credTypeMeta.error}\n        isRequired\n        validated={\n          !credTypeMeta.touched || !credTypeMeta.error ? 'default' : 'error'\n        }\n        label={t`Credential Type`}\n      >\n        {isCredentialTypeDisabled ? (\n          <Tooltip\n            content={`You cannot change the credential type of a credential,\n              as it may break the functionality of the resources using it.`}\n          >\n            {credentialTypeSelect}\n          </Tooltip>\n        ) : (\n          credentialTypeSelect\n        )}\n      </FormGroup>\n      {credentialTypeId !== undefined &&\n        credentialTypeId !== '' &&\n        credentialTypes[credentialTypeId]?.inputs?.fields && (\n          <TypeInputsSubForm\n            credentialType={credentialTypes[credentialTypeId]}\n          />\n        )}\n    </>\n  );\n}\n\nfunction CredentialForm({\n  credential = {},\n  credentialTypes,\n  inputSources,\n  onSubmit,\n  onCancel,\n  submitError,\n  isOrgLookupDisabled,\n  ...rest\n}) {\n  const initialTypeId = credential?.credential_type;\n\n  const [showExternalTestModal, setShowExternalTestModal] = useState(false);\n  const initialValues = {\n    name: credential.name || '',\n    description: credential.description || '',\n    organization: credential?.summary_fields?.organization || null,\n    credential_type: credentialTypes[initialTypeId]?.name || '',\n    inputs: { ...credential?.inputs },\n    passwordPrompts: {},\n    isOrgLookupDisabled: isOrgLookupDisabled || false,\n  };\n\n  Object.values(credentialTypes).forEach((credentialType) => {\n    if (!credential.id || credential.credential_type === credentialType.id) {\n      const fields = credentialType.inputs.fields || [];\n      fields.forEach(\n        ({ ask_at_runtime, type, id, choices, default: defaultValue }) => {\n          if (credential?.inputs && id in credential.inputs) {\n            if (ask_at_runtime) {\n              initialValues.passwordPrompts[id] =\n                credential.inputs[id] === 'ASK' || false;\n              initialValues.inputs[id] =\n                credential.inputs[id] === 'ASK' ? '' : credential.inputs[id];\n            } else {\n              initialValues.inputs[id] = credential.inputs[id];\n            }\n          } else {\n            switch (type) {\n              case 'string':\n                initialValues.inputs[id] = defaultValue || '';\n                break;\n              case 'boolean':\n                initialValues.inputs[id] = defaultValue || false;\n                break;\n              default:\n                break;\n            }\n\n            if (choices) {\n              initialValues.inputs[id] = defaultValue;\n            }\n\n            if (ask_at_runtime) {\n              initialValues.passwordPrompts[id] = false;\n            }\n          }\n        }\n      );\n    }\n  });\n\n  Object.values(inputSources).forEach((inputSource) => {\n    initialValues.inputs[inputSource.input_field_name] = {\n      credential: inputSource.summary_fields.source_credential,\n      inputs: inputSource.metadata,\n    };\n  });\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={(values) => {\n        const { credential_type, ...actualValues } = values;\n        // credential_type could be the raw id or the displayed name value.\n        // If it's the name, replace it with the id before making the request.\n        actualValues.credential_type =\n          Object.keys(credentialTypes).find(\n            (key) => credentialTypes[key].name === credential_type\n          ) || credential_type;\n        onSubmit(actualValues);\n      }}\n    >\n      {(formik) => (\n        <>\n          <Form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\n            <FormColumnLayout>\n              <CredentialFormFields\n                initialTypeId={initialTypeId}\n                credentialTypes={credentialTypes}\n                {...rest}\n              />\n              <FormSubmitError error={submitError} />\n              <FormFullWidthLayout>\n                <ActionGroup>\n                  <Button\n                    ouiaId=\"credential-form-save-button\"\n                    id=\"credential-form-save-button\"\n                    aria-label={t`Save`}\n                    variant=\"primary\"\n                    type=\"button\"\n                    onClick={formik.handleSubmit}\n                  >\n                    {t`Save`}\n                  </Button>\n                  {formik?.values?.credential_type &&\n                    credentialTypes[formik.values.credential_type]?.kind ===\n                      'external' && (\n                      <Button\n                        ouiaId=\"credential-form-test-button\"\n                        id=\"credential-form-test-button\"\n                        aria-label={t`Test`}\n                        variant=\"secondary\"\n                        type=\"button\"\n                        onClick={() => setShowExternalTestModal(true)}\n                        isDisabled={!formik.isValid}\n                      >\n                        {t`Test`}\n                      </Button>\n                    )}\n                  <Button\n                    ouiaId=\"credential-form-cancel-button\"\n                    id=\"credential-form-cancel-button\"\n                    aria-label={t`Cancel`}\n                    variant=\"link\"\n                    type=\"button\"\n                    onClick={onCancel}\n                  >\n                    {t`Cancel`}\n                  </Button>\n                </ActionGroup>\n              </FormFullWidthLayout>\n            </FormColumnLayout>\n          </Form>\n          {showExternalTestModal && (\n            <ExternalTestModal\n              credential={credential}\n              credentialType={credentialTypes[formik.values.credential_type]}\n              credentialFormValues={formik.values}\n              onClose={() => setShowExternalTestModal(false)}\n            />\n          )}\n        </>\n      )}\n    </Formik>\n  );\n}\n\nCredentialForm.propTypes = {\n  credentialTypes: shape({}).isRequired,\n  credential: shape({}),\n  inputSources: shape({}),\n  submitError: shape({}),\n};\n\nCredentialForm.defaultProps = {\n  credential: {},\n  inputSources: {},\n  submitError: null,\n};\n\nexport default CredentialForm;\n"]},"metadata":{},"sourceType":"module"}