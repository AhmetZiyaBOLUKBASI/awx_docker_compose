{"ast":null,"code":"import _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\n * body-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport { columnsAreEqual } from './columns-are-equal';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nexport var BodyRow = /*#__PURE__*/function (_React$Component) {\n  _inherits(BodyRow, _React$Component);\n\n  var _super = _createSuper(BodyRow);\n\n  function BodyRow() {\n    _classCallCheck(this, BodyRow);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BodyRow, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      var _this$props = this.props,\n          columns = _this$props.columns,\n          rowData = _this$props.rowData; // Check for row based override.\n\n      var renderers = nextProps.renderers;\n\n      if (renderers && renderers.row && renderers.row.shouldComponentUpdate) {\n        if (typeof renderers.row.shouldComponentUpdate === 'function') {\n          return renderers.row.shouldComponentUpdate.call(this, nextProps, {}, {});\n        }\n\n        return true;\n      }\n\n      return !(columnsAreEqual(columns, nextProps.columns) && isEqual(rowData, nextProps.rowData));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          columns = _this$props2.columns,\n          renderers = _this$props2.renderers,\n          onRow = _this$props2.onRow,\n          rowKey = _this$props2.rowKey,\n          rowIndex = _this$props2.rowIndex,\n          rowData = _this$props2.rowData;\n      return React.createElement(renderers.row, onRow(rowData, {\n        rowIndex: rowIndex,\n        rowKey: rowKey\n      }), columns.map(function (column, columnIndex) {\n        var property = column.property,\n            cell = column.cell,\n            props = column.props;\n        var evaluatedProperty = property || cell && cell.property;\n\n        var _ref = cell || {},\n            _ref$transforms = _ref.transforms,\n            transforms = _ref$transforms === void 0 ? [] : _ref$transforms,\n            _ref$formatters = _ref.formatters,\n            formatters = _ref$formatters === void 0 ? [] : _ref$formatters;\n\n        var extraParameters = {\n          columnIndex: columnIndex,\n          property: evaluatedProperty,\n          column: column,\n          rowData: rowData,\n          rowIndex: rowIndex,\n          rowKey: rowKey\n        };\n        var transformed = evaluateTransforms(transforms, rowData[evaluatedProperty], extraParameters);\n\n        if (!transformed) {\n          // eslint-disable-next-line no-console\n          console.warn('Table.Body - Failed to receive a transformed result');\n        }\n\n        var additionalFormaters = [];\n\n        if (rowData[evaluatedProperty]) {\n          additionalFormaters = rowData[evaluatedProperty].formatters;\n        }\n\n        return React.createElement(renderers.cell, Object.assign({\n          key: \"col-\".concat(columnIndex, \"-row-\").concat(rowIndex)\n        }, mergeProps(props, cell && cell.props, transformed)), !rowData.fullWidth && transformed.children || evaluateFormatters([].concat(_toConsumableArray(formatters), _toConsumableArray(additionalFormaters)))(rowData[\"_\".concat(evaluatedProperty)] || rowData[evaluatedProperty], extraParameters));\n      }));\n    }\n  }]);\n\n  return BodyRow;\n}(React.Component);\nBodyRow.displayName = 'BodyRow';\nBodyRow.defaultProps = {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onRow: function onRow() {\n    return {};\n  }\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/base/body-row.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * body-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport { columnsAreEqual } from './columns-are-equal';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nimport { createElementType, formatterValueType, ColumnType, ColumnsType, RowType, RendererType } from './types';\n\nexport interface BodyRowProps {\n  columns: ColumnsType;\n  renderers: RendererType;\n  onRow?: Function;\n  rowIndex: number;\n  rowData: RowType;\n  rowKey: string;\n}\n\nexport class BodyRow extends React.Component<BodyRowProps, {}> {\n  static displayName = 'BodyRow';\n  static defaultProps = {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onRow: (...args: any) => ({})\n  };\n\n  shouldComponentUpdate(nextProps: BodyRowProps) {\n    const { columns, rowData } = this.props;\n\n    // Check for row based override.\n    const { renderers } = nextProps;\n\n    if (renderers && renderers.row && (renderers.row as React.Component).shouldComponentUpdate) {\n      if (typeof (renderers.row as React.Component).shouldComponentUpdate === 'function') {\n        return (renderers.row as React.Component).shouldComponentUpdate.call(this, nextProps, {}, {});\n      }\n\n      return true;\n    }\n\n    return !(columnsAreEqual(columns, nextProps.columns) && isEqual(rowData, nextProps.rowData));\n  }\n  render() {\n    const { columns, renderers, onRow, rowKey, rowIndex, rowData } = this.props;\n\n    return React.createElement(\n      renderers.row as createElementType,\n      onRow(rowData, { rowIndex, rowKey }),\n      (columns as []).map((column: ColumnType, columnIndex: number) => {\n        const { property, cell, props } = column;\n        const evaluatedProperty = (property || (cell && cell.property)) as string;\n        const { transforms = [], formatters = [] } = cell || {};\n        const extraParameters = {\n          columnIndex,\n          property: evaluatedProperty,\n          column,\n          rowData,\n          rowIndex,\n          rowKey\n        };\n        const transformed = evaluateTransforms(transforms, rowData[evaluatedProperty], extraParameters);\n\n        if (!transformed) {\n          // eslint-disable-next-line no-console\n          console.warn('Table.Body - Failed to receive a transformed result');\n        }\n\n        let additionalFormaters = [];\n        if (rowData[evaluatedProperty]) {\n          additionalFormaters = rowData[evaluatedProperty].formatters;\n        }\n\n        return React.createElement(\n          renderers.cell as createElementType,\n          {\n            key: `col-${columnIndex}-row-${rowIndex}`,\n            ...mergeProps(props, cell && cell.props, transformed)\n          },\n          (!rowData.fullWidth && transformed.children) ||\n            evaluateFormatters([...formatters, ...additionalFormaters])(\n              rowData[`_${evaluatedProperty}`] || (rowData[evaluatedProperty] as formatterValueType),\n              extraParameters\n            )\n        );\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}