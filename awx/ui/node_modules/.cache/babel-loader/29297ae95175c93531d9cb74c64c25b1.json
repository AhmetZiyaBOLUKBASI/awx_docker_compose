{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { keyHandler, formatBreakpointMods } from '../../helpers/util';\nimport { DropdownPosition, DropdownArrowContext, DropdownContext } from './dropdownConstants';\nexport var DropdownMenu = /*#__PURE__*/function (_React$Component) {\n  _inherits(DropdownMenu, _React$Component);\n\n  var _super = _createSuper(DropdownMenu);\n\n  function DropdownMenu() {\n    var _this;\n\n    _classCallCheck(this, DropdownMenu);\n\n    _this = _super.apply(this, arguments);\n    _this.refsCollection = [];\n\n    _this.componentWillUnmount = function () {\n      document.removeEventListener('keydown', _this.onKeyDown);\n    };\n\n    _this.onKeyDown = function (event) {\n      if (!_this.props.isOpen || !Array.from(document.activeElement.classList).find(function (className) {\n        return DropdownMenu.validToggleClasses.concat(_this.context.toggleClass).includes(className);\n      })) {\n        return;\n      }\n\n      var refs = _this.refsCollection;\n\n      if (event.key === 'ArrowDown') {\n        var firstFocusTargetCollection = refs.find(function (ref) {\n          return ref && ref[0] && !ref[0].hasAttribute('disabled');\n        });\n        DropdownMenu.focusFirstRef(firstFocusTargetCollection);\n        event.stopPropagation();\n      } else if (event.key === 'ArrowUp') {\n        var collectionLength = refs.length;\n        var lastFocusTargetCollection = refs.slice(collectionLength - 1, collectionLength);\n        var lastFocusTarget = lastFocusTargetCollection && lastFocusTargetCollection[0];\n        DropdownMenu.focusFirstRef(lastFocusTarget);\n        event.stopPropagation();\n      }\n    };\n\n    _this.childKeyHandler = function (index, innerIndex, position) {\n      var custom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      keyHandler(index, innerIndex, position, _this.refsCollection, _this.props.isGrouped ? _this.refsCollection : React.Children.toArray(_this.props.children), custom);\n    };\n\n    _this.sendRef = function (index, nodes, isDisabled, isSeparator) {\n      _this.refsCollection[index] = [];\n      nodes.map(function (node, innerIndex) {\n        if (!node) {\n          _this.refsCollection[index][innerIndex] = null;\n        } else if (!node.getAttribute) {\n          // eslint-disable-next-line react/no-find-dom-node\n          _this.refsCollection[index][innerIndex] = ReactDOM.findDOMNode(node);\n        } else if (isSeparator) {\n          _this.refsCollection[index][innerIndex] = null;\n        } else {\n          _this.refsCollection[index][innerIndex] = node;\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DropdownMenu, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('keydown', this.onKeyDown);\n      var autoFocus = this.props.autoFocus;\n\n      if (autoFocus) {\n        // Focus first non-disabled element\n        var focusTargetCollection = this.refsCollection.find(function (ref) {\n          return ref && ref[0] && !ref[0].hasAttribute('disabled');\n        });\n        var focusTarget = focusTargetCollection && focusTargetCollection[0];\n\n        if (focusTarget && focusTarget.focus) {\n          setTimeout(function () {\n            return focusTarget.focus();\n          });\n        }\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      // reset refsCollection before updating to account for child removal between mounts\n      this.refsCollection = [];\n      return true;\n    }\n  }, {\n    key: \"extendChildren\",\n    value: function extendChildren() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          isGrouped = _this$props.isGrouped;\n\n      if (isGrouped) {\n        var index = 0;\n        return React.Children.map(children, function (groupedChildren) {\n          var group = groupedChildren;\n          var props = {};\n\n          if (group.props && group.props.children) {\n            if (Array.isArray(group.props.children)) {\n              props.children = React.Children.map(group.props.children, function (option) {\n                return React.cloneElement(option, {\n                  index: index++\n                });\n              });\n            } else {\n              props.children = React.cloneElement(group.props.children, {\n                index: index++\n              });\n            }\n          }\n\n          return React.cloneElement(group, props);\n        });\n      }\n\n      return React.Children.map(children, function (child, index) {\n        return React.cloneElement(child, {\n          index: index\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          className = _a.className,\n          isOpen = _a.isOpen,\n          position = _a.position,\n          children = _a.children,\n          component = _a.component,\n          isGrouped = _a.isGrouped,\n          setMenuComponentRef = _a.setMenuComponentRef,\n          openedOnEnter = _a.openedOnEnter,\n          alignments = _a.alignments,\n          props = __rest(_a, [\"className\", \"isOpen\", \"position\", \"children\", \"component\", \"isGrouped\", \"setMenuComponentRef\", \"openedOnEnter\", \"alignments\"]);\n\n      return React.createElement(DropdownArrowContext.Provider, {\n        value: {\n          keyHandler: this.childKeyHandler,\n          sendRef: this.sendRef\n        }\n      }, component === 'div' ? React.createElement(DropdownContext.Consumer, null, function (_ref) {\n        var onSelect = _ref.onSelect,\n            menuClass = _ref.menuClass;\n        return React.createElement(\"div\", {\n          className: css(menuClass, position === DropdownPosition.right && styles.modifiers.alignRight, formatBreakpointMods(alignments, styles, 'align-'), className),\n          hidden: !isOpen,\n          onClick: function onClick(event) {\n            return onSelect && onSelect(event);\n          },\n          ref: setMenuComponentRef\n        }, children);\n      }) : isGrouped && React.createElement(DropdownContext.Consumer, null, function (_ref2) {\n        var menuClass = _ref2.menuClass,\n            menuComponent = _ref2.menuComponent;\n        var MenuComponent = menuComponent || 'div';\n        return React.createElement(MenuComponent, Object.assign({}, props, {\n          className: css(menuClass, position === DropdownPosition.right && styles.modifiers.alignRight, formatBreakpointMods(alignments, styles, 'align-'), className),\n          hidden: !isOpen,\n          role: \"menu\",\n          ref: setMenuComponentRef\n        }), _this2.extendChildren());\n      }) || React.createElement(DropdownContext.Consumer, null, function (_ref3) {\n        var menuClass = _ref3.menuClass,\n            menuComponent = _ref3.menuComponent;\n        var MenuComponent = menuComponent || component;\n        return React.createElement(MenuComponent, Object.assign({}, props, {\n          className: css(menuClass, position === DropdownPosition.right && styles.modifiers.alignRight, formatBreakpointMods(alignments, styles, 'align-'), className),\n          hidden: !isOpen,\n          role: \"menu\",\n          ref: setMenuComponentRef\n        }), _this2.extendChildren());\n      }));\n    }\n  }]);\n\n  return DropdownMenu;\n}(React.Component);\nDropdownMenu.displayName = 'DropdownMenu';\nDropdownMenu.defaultProps = {\n  className: '',\n  isOpen: true,\n  openedOnEnter: false,\n  autoFocus: true,\n  position: DropdownPosition.left,\n  component: 'ul',\n  isGrouped: false,\n  setMenuComponentRef: null\n};\nDropdownMenu.validToggleClasses = [styles.dropdownToggle, styles.dropdownToggleButton];\n\nDropdownMenu.focusFirstRef = function (refCollection) {\n  if (refCollection && refCollection[0] && refCollection[0].focus) {\n    setTimeout(function () {\n      return refCollection[0].focus();\n    });\n  }\n};\n\nDropdownMenu.contextType = DropdownContext;","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Dropdown/DropdownMenu.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { keyHandler, formatBreakpointMods } from '../../helpers/util';\nimport { DropdownPosition, DropdownArrowContext, DropdownContext } from './dropdownConstants';\n\nexport interface DropdownMenuProps {\n  /** Anything which can be rendered as dropdown items */\n  children?: React.ReactNode;\n  /** Classess applied to root element of dropdown menu */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** @deprecated - no longer used */\n  openedOnEnter?: boolean;\n  /** Flag to indicate if the first dropdown item should gain initial focus, set false when adding\n   * a specific auto-focus item (like a current selection) otherwise leave as true\n   */\n  autoFocus?: boolean;\n  /** Indicates which component will be used as dropdown menu */\n  component?: React.ReactNode;\n  /** Indicates where menu will be alligned horizontally */\n  position?: DropdownPosition | 'right' | 'left';\n  /** Indicates how the menu will align at screen size breakpoints */\n  alignments?: {\n    sm?: 'right' | 'left';\n    md?: 'right' | 'left';\n    lg?: 'right' | 'left';\n    xl?: 'right' | 'left';\n    '2xl'?: 'right' | 'left';\n  };\n  /** Flag to indicate if menu is grouped */\n  isGrouped?: boolean;\n  // Function to call on component mount\n  setMenuComponentRef?: any;\n}\n\nexport interface DropdownMenuItem extends React.HTMLAttributes<any> {\n  isDisabled: boolean;\n  disabled: boolean;\n  isHovered: boolean;\n  ref: HTMLElement;\n}\n\nexport class DropdownMenu extends React.Component<DropdownMenuProps> {\n  static displayName = 'DropdownMenu';\n  context!: React.ContextType<typeof DropdownContext>;\n  refsCollection = [] as HTMLElement[][];\n\n  static defaultProps: DropdownMenuProps = {\n    className: '',\n    isOpen: true,\n    openedOnEnter: false,\n    autoFocus: true,\n    position: DropdownPosition.left,\n    component: 'ul',\n    isGrouped: false,\n    setMenuComponentRef: null\n  };\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onKeyDown);\n    const { autoFocus } = this.props;\n\n    if (autoFocus) {\n      // Focus first non-disabled element\n      const focusTargetCollection = this.refsCollection.find(ref => ref && ref[0] && !ref[0].hasAttribute('disabled'));\n      const focusTarget = focusTargetCollection && focusTargetCollection[0];\n      if (focusTarget && focusTarget.focus) {\n        setTimeout(() => focusTarget.focus());\n      }\n    }\n  }\n\n  componentWillUnmount = () => {\n    document.removeEventListener('keydown', this.onKeyDown);\n  };\n\n  static validToggleClasses = [styles.dropdownToggle, styles.dropdownToggleButton] as string[];\n  static focusFirstRef = (refCollection: HTMLElement[]) => {\n    if (refCollection && refCollection[0] && refCollection[0].focus) {\n      setTimeout(() => refCollection[0].focus());\n    }\n  };\n\n  onKeyDown = (event: any) => {\n    if (\n      !this.props.isOpen ||\n      !Array.from(document.activeElement.classList).find(className =>\n        DropdownMenu.validToggleClasses.concat(this.context.toggleClass).includes(className)\n      )\n    ) {\n      return;\n    }\n    const refs = this.refsCollection;\n    if (event.key === 'ArrowDown') {\n      const firstFocusTargetCollection = refs.find(ref => ref && ref[0] && !ref[0].hasAttribute('disabled'));\n      DropdownMenu.focusFirstRef(firstFocusTargetCollection);\n      event.stopPropagation();\n    } else if (event.key === 'ArrowUp') {\n      const collectionLength = refs.length;\n      const lastFocusTargetCollection = refs.slice(collectionLength - 1, collectionLength);\n      const lastFocusTarget = lastFocusTargetCollection && lastFocusTargetCollection[0];\n      DropdownMenu.focusFirstRef(lastFocusTarget);\n      event.stopPropagation();\n    }\n  };\n\n  shouldComponentUpdate() {\n    // reset refsCollection before updating to account for child removal between mounts\n    this.refsCollection = [] as HTMLElement[][];\n    return true;\n  }\n\n  childKeyHandler = (index: number, innerIndex: number, position: string, custom = false) => {\n    keyHandler(\n      index,\n      innerIndex,\n      position,\n      this.refsCollection,\n      this.props.isGrouped ? this.refsCollection : React.Children.toArray(this.props.children),\n      custom\n    );\n  };\n\n  sendRef = (index: number, nodes: any[], isDisabled: boolean, isSeparator: boolean) => {\n    this.refsCollection[index] = [];\n    nodes.map((node, innerIndex) => {\n      if (!node) {\n        this.refsCollection[index][innerIndex] = null;\n      } else if (!node.getAttribute) {\n        // eslint-disable-next-line react/no-find-dom-node\n        this.refsCollection[index][innerIndex] = ReactDOM.findDOMNode(node) as HTMLElement;\n      } else if (isSeparator) {\n        this.refsCollection[index][innerIndex] = null;\n      } else {\n        this.refsCollection[index][innerIndex] = node;\n      }\n    });\n  };\n\n  extendChildren() {\n    const { children, isGrouped } = this.props;\n    if (isGrouped) {\n      let index = 0;\n      return React.Children.map(children, groupedChildren => {\n        const group = groupedChildren as React.ReactElement;\n        const props: { children?: React.ReactNode } = {};\n        if (group.props && group.props.children) {\n          if (Array.isArray(group.props.children)) {\n            props.children = React.Children.map(group.props.children, option =>\n              React.cloneElement(option as React.ReactElement, {\n                index: index++\n              })\n            );\n          } else {\n            props.children = React.cloneElement(group.props.children as React.ReactElement, {\n              index: index++\n            });\n          }\n        }\n        return React.cloneElement(group, props);\n      });\n    }\n    return React.Children.map(children, (child, index) =>\n      React.cloneElement(child as React.ReactElement, {\n        index\n      })\n    );\n  }\n\n  render() {\n    const {\n      className,\n      isOpen,\n      position,\n      children,\n      component,\n      isGrouped,\n      setMenuComponentRef,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      openedOnEnter,\n      alignments,\n      ...props\n    } = this.props;\n    return (\n      <DropdownArrowContext.Provider\n        value={{\n          keyHandler: this.childKeyHandler,\n          sendRef: this.sendRef\n        }}\n      >\n        {component === 'div' ? (\n          <DropdownContext.Consumer>\n            {({ onSelect, menuClass }) => (\n              <div\n                className={css(\n                  menuClass,\n                  position === DropdownPosition.right && styles.modifiers.alignRight,\n                  formatBreakpointMods(alignments, styles, 'align-'),\n                  className\n                )}\n                hidden={!isOpen}\n                onClick={event => onSelect && onSelect(event)}\n                ref={setMenuComponentRef}\n              >\n                {children}\n              </div>\n            )}\n          </DropdownContext.Consumer>\n        ) : (\n          (isGrouped && (\n            <DropdownContext.Consumer>\n              {({ menuClass, menuComponent }) => {\n                const MenuComponent = (menuComponent || 'div') as any;\n                return (\n                  <MenuComponent\n                    {...props}\n                    className={css(\n                      menuClass,\n                      position === DropdownPosition.right && styles.modifiers.alignRight,\n                      formatBreakpointMods(alignments, styles, 'align-'),\n                      className\n                    )}\n                    hidden={!isOpen}\n                    role=\"menu\"\n                    ref={setMenuComponentRef}\n                  >\n                    {this.extendChildren()}\n                  </MenuComponent>\n                );\n              }}\n            </DropdownContext.Consumer>\n          )) || (\n            <DropdownContext.Consumer>\n              {({ menuClass, menuComponent }) => {\n                const MenuComponent = (menuComponent || component) as any;\n                return (\n                  <MenuComponent\n                    {...props}\n                    className={css(\n                      menuClass,\n                      position === DropdownPosition.right && styles.modifiers.alignRight,\n                      formatBreakpointMods(alignments, styles, 'align-'),\n                      className\n                    )}\n                    hidden={!isOpen}\n                    role=\"menu\"\n                    ref={setMenuComponentRef}\n                  >\n                    {this.extendChildren()}\n                  </MenuComponent>\n                );\n              }}\n            </DropdownContext.Consumer>\n          )\n        )}\n      </DropdownArrowContext.Provider>\n    );\n  }\n}\n\nDropdownMenu.contextType = DropdownContext;\n"]},"metadata":{},"sourceType":"module"}