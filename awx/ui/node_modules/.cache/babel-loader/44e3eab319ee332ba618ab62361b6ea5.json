{"ast":null,"code":"import{Trans}from\"@lingui/react\";import React from'react';import ActivityStream from'screens/ActivityStream';import Applications from'screens/Application';import CredentialTypes from'screens/CredentialType';import Credentials from'screens/Credential';import Dashboard from'screens/Dashboard';import ExecutionEnvironments from'screens/ExecutionEnvironment';import Hosts from'screens/Host';import Instances from'screens/Instances';import InstanceGroups from'screens/InstanceGroup';import Inventory from'screens/Inventory';import ManagementJobs from'screens/ManagementJob';import NotificationTemplates from'screens/NotificationTemplate';import Organizations from'screens/Organization';import Projects from'screens/Project';import Schedules from'screens/Schedule';import Settings from'screens/Setting';import Teams from'screens/Team';import Templates from'screens/Template';import TopologyView from'screens/TopologyView';import Users from'screens/User';import WorkflowApprovals from'screens/WorkflowApproval';import{Jobs}from'screens/Job';import{jsx as _jsx}from\"react/jsx-runtime\";function getRouteConfig(){var userProfile=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var routeConfig=[{groupTitle:/*#__PURE__*/_jsx(Trans,{id:\"Views\"}),groupId:'views_group',routes:[{title:/*#__PURE__*/_jsx(Trans,{id:\"Dashboard\"}),path:'/home',screen:Dashboard},{title:/*#__PURE__*/_jsx(Trans,{id:\"Jobs\"}),path:'/jobs',screen:Jobs},{title:/*#__PURE__*/_jsx(Trans,{id:\"Schedules\"}),path:'/schedules',screen:Schedules},{title:/*#__PURE__*/_jsx(Trans,{id:\"Activity Stream\"}),path:'/activity_stream',screen:ActivityStream},{title:/*#__PURE__*/_jsx(Trans,{id:\"Workflow Approvals\"}),path:'/workflow_approvals',screen:WorkflowApprovals}]},{groupTitle:/*#__PURE__*/_jsx(Trans,{id:\"Resources\"}),groupId:'resources_group',routes:[{title:/*#__PURE__*/_jsx(Trans,{id:\"Templates\"}),path:'/templates',screen:Templates},{title:/*#__PURE__*/_jsx(Trans,{id:\"Credentials\"}),path:'/credentials',screen:Credentials},{title:/*#__PURE__*/_jsx(Trans,{id:\"Projects\"}),path:'/projects',screen:Projects},{title:/*#__PURE__*/_jsx(Trans,{id:\"Inventories\"}),path:'/inventories',screen:Inventory},{title:/*#__PURE__*/_jsx(Trans,{id:\"Hosts\"}),path:'/hosts',screen:Hosts}]},{groupTitle:/*#__PURE__*/_jsx(Trans,{id:\"Access\"}),groupId:'access_group',routes:[{title:/*#__PURE__*/_jsx(Trans,{id:\"Organizations\"}),path:'/organizations',screen:Organizations},{title:/*#__PURE__*/_jsx(Trans,{id:\"Users\"}),path:'/users',screen:Users},{title:/*#__PURE__*/_jsx(Trans,{id:\"Teams\"}),path:'/teams',screen:Teams}]},{groupTitle:/*#__PURE__*/_jsx(Trans,{id:\"Administration\"}),groupId:'administration_group',routes:[{title:/*#__PURE__*/_jsx(Trans,{id:\"Credential Types\"}),path:'/credential_types',screen:CredentialTypes},{title:/*#__PURE__*/_jsx(Trans,{id:\"Notifications\"}),path:'/notification_templates',screen:NotificationTemplates},{title:/*#__PURE__*/_jsx(Trans,{id:\"Management Jobs\"}),path:'/management_jobs',screen:ManagementJobs},{title:/*#__PURE__*/_jsx(Trans,{id:\"Instance Groups\"}),path:'/instance_groups',screen:InstanceGroups},{title:/*#__PURE__*/_jsx(Trans,{id:\"Instances\"}),path:'/instances',screen:Instances},{title:/*#__PURE__*/_jsx(Trans,{id:\"Applications\"}),path:'/applications',screen:Applications},{title:/*#__PURE__*/_jsx(Trans,{id:\"Execution Environments\"}),path:'/execution_environments',screen:ExecutionEnvironments},{title:/*#__PURE__*/_jsx(Trans,{id:\"Topology View\"}),path:'/topology_view',screen:TopologyView}]},{groupTitle:/*#__PURE__*/_jsx(Trans,{id:\"Settings\"}),groupId:'settings',routes:[{title:/*#__PURE__*/_jsx(Trans,{id:\"Settings\"}),path:'/settings',screen:Settings}]}];var deleteRoute=function deleteRoute(name){routeConfig.forEach(function(group){group.routes=group.routes.filter(function(_ref){var path=_ref.path;return!path.includes(name);});});routeConfig=routeConfig.filter(function(groups){return groups.routes.length;});};var deleteRouteGroup=function deleteRouteGroup(name){routeConfig=routeConfig.filter(function(_ref2){var groupId=_ref2.groupId;return!groupId.includes(name);});};if(userProfile!==null&&userProfile!==void 0&&userProfile.isSuperUser||userProfile!==null&&userProfile!==void 0&&userProfile.isSystemAuditor)return routeConfig;deleteRouteGroup('settings');deleteRoute('management_jobs');if(userProfile!==null&&userProfile!==void 0&&userProfile.isOrgAdmin)return routeConfig;deleteRoute('instance_groups');deleteRoute('topology_view');if(!(userProfile!==null&&userProfile!==void 0&&userProfile.isNotificationAdmin))deleteRoute('notification_templates');return routeConfig;}export default getRouteConfig;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/routeConfig.js"],"names":["React","ActivityStream","Applications","CredentialTypes","Credentials","Dashboard","ExecutionEnvironments","Hosts","Instances","InstanceGroups","Inventory","ManagementJobs","NotificationTemplates","Organizations","Projects","Schedules","Settings","Teams","Templates","TopologyView","Users","WorkflowApprovals","Jobs","getRouteConfig","userProfile","routeConfig","groupTitle","groupId","routes","title","path","screen","deleteRoute","name","forEach","group","filter","includes","groups","length","deleteRouteGroup","isSuperUser","isSystemAuditor","isOrgAdmin","isNotificationAdmin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Trans } from '@lingui/macro';\n\nimport ActivityStream from 'screens/ActivityStream';\nimport Applications from 'screens/Application';\nimport CredentialTypes from 'screens/CredentialType';\nimport Credentials from 'screens/Credential';\nimport Dashboard from 'screens/Dashboard';\nimport ExecutionEnvironments from 'screens/ExecutionEnvironment';\nimport Hosts from 'screens/Host';\nimport Instances from 'screens/Instances';\nimport InstanceGroups from 'screens/InstanceGroup';\nimport Inventory from 'screens/Inventory';\nimport ManagementJobs from 'screens/ManagementJob';\nimport NotificationTemplates from 'screens/NotificationTemplate';\nimport Organizations from 'screens/Organization';\nimport Projects from 'screens/Project';\nimport Schedules from 'screens/Schedule';\nimport Settings from 'screens/Setting';\nimport Teams from 'screens/Team';\nimport Templates from 'screens/Template';\nimport TopologyView from 'screens/TopologyView';\nimport Users from 'screens/User';\nimport WorkflowApprovals from 'screens/WorkflowApproval';\nimport { Jobs } from 'screens/Job';\n\nfunction getRouteConfig(userProfile = {}) {\n  let routeConfig = [\n    {\n      groupTitle: <Trans>Views</Trans>,\n      groupId: 'views_group',\n      routes: [\n        {\n          title: <Trans>Dashboard</Trans>,\n          path: '/home',\n          screen: Dashboard,\n        },\n        {\n          title: <Trans>Jobs</Trans>,\n          path: '/jobs',\n          screen: Jobs,\n        },\n        {\n          title: <Trans>Schedules</Trans>,\n          path: '/schedules',\n          screen: Schedules,\n        },\n        {\n          title: <Trans>Activity Stream</Trans>,\n          path: '/activity_stream',\n          screen: ActivityStream,\n        },\n        {\n          title: <Trans>Workflow Approvals</Trans>,\n          path: '/workflow_approvals',\n          screen: WorkflowApprovals,\n        },\n      ],\n    },\n    {\n      groupTitle: <Trans>Resources</Trans>,\n      groupId: 'resources_group',\n      routes: [\n        {\n          title: <Trans>Templates</Trans>,\n          path: '/templates',\n          screen: Templates,\n        },\n        {\n          title: <Trans>Credentials</Trans>,\n          path: '/credentials',\n          screen: Credentials,\n        },\n        {\n          title: <Trans>Projects</Trans>,\n          path: '/projects',\n          screen: Projects,\n        },\n        {\n          title: <Trans>Inventories</Trans>,\n          path: '/inventories',\n          screen: Inventory,\n        },\n        {\n          title: <Trans>Hosts</Trans>,\n          path: '/hosts',\n          screen: Hosts,\n        },\n      ],\n    },\n    {\n      groupTitle: <Trans>Access</Trans>,\n      groupId: 'access_group',\n      routes: [\n        {\n          title: <Trans>Organizations</Trans>,\n          path: '/organizations',\n          screen: Organizations,\n        },\n        {\n          title: <Trans>Users</Trans>,\n          path: '/users',\n          screen: Users,\n        },\n        {\n          title: <Trans>Teams</Trans>,\n          path: '/teams',\n          screen: Teams,\n        },\n      ],\n    },\n    {\n      groupTitle: <Trans>Administration</Trans>,\n      groupId: 'administration_group',\n      routes: [\n        {\n          title: <Trans>Credential Types</Trans>,\n          path: '/credential_types',\n          screen: CredentialTypes,\n        },\n        {\n          title: <Trans>Notifications</Trans>,\n          path: '/notification_templates',\n          screen: NotificationTemplates,\n        },\n        {\n          title: <Trans>Management Jobs</Trans>,\n          path: '/management_jobs',\n          screen: ManagementJobs,\n        },\n        {\n          title: <Trans>Instance Groups</Trans>,\n          path: '/instance_groups',\n          screen: InstanceGroups,\n        },\n        {\n          title: <Trans>Instances</Trans>,\n          path: '/instances',\n          screen: Instances,\n        },\n        {\n          title: <Trans>Applications</Trans>,\n          path: '/applications',\n          screen: Applications,\n        },\n        {\n          title: <Trans>Execution Environments</Trans>,\n          path: '/execution_environments',\n          screen: ExecutionEnvironments,\n        },\n        {\n          title: <Trans>Topology View</Trans>,\n          path: '/topology_view',\n          screen: TopologyView,\n        },\n      ],\n    },\n    {\n      groupTitle: <Trans>Settings</Trans>,\n      groupId: 'settings',\n      routes: [\n        {\n          title: <Trans>Settings</Trans>,\n          path: '/settings',\n          screen: Settings,\n        },\n      ],\n    },\n  ];\n\n  const deleteRoute = (name) => {\n    routeConfig.forEach((group) => {\n      group.routes = group.routes.filter(({ path }) => !path.includes(name));\n    });\n    routeConfig = routeConfig.filter((groups) => groups.routes.length);\n  };\n\n  const deleteRouteGroup = (name) => {\n    routeConfig = routeConfig.filter(({ groupId }) => !groupId.includes(name));\n  };\n\n  if (userProfile?.isSuperUser || userProfile?.isSystemAuditor)\n    return routeConfig;\n  deleteRouteGroup('settings');\n  deleteRoute('management_jobs');\n  if (userProfile?.isOrgAdmin) return routeConfig;\n  deleteRoute('instance_groups');\n  deleteRoute('topology_view');\n  if (!userProfile?.isNotificationAdmin) deleteRoute('notification_templates');\n\n  return routeConfig;\n}\n\nexport default getRouteConfig;\n"]},"metadata":{},"sourceType":"module"}