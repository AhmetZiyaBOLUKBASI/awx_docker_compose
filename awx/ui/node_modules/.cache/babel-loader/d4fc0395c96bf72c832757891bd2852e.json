{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Skeleton/skeleton';\nimport { css } from '@patternfly/react-styles';\nexport var Skeleton = function Skeleton(_a) {\n  var className = _a.className,\n      width = _a.width,\n      height = _a.height,\n      fontSize = _a.fontSize,\n      shape = _a.shape,\n      screenreaderText = _a.screenreaderText,\n      props = __rest(_a, [\"className\", \"width\", \"height\", \"fontSize\", \"shape\", \"screenreaderText\"]);\n\n  var fontHeightClassName = fontSize ? Object.values(styles.modifiers).find(function (key) {\n    return key === \"pf-m-text-\".concat(fontSize);\n  }) : undefined;\n  return React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.skeleton, fontSize && fontHeightClassName, shape === 'circle' && styles.modifiers.circle, shape === 'square' && styles.modifiers.square, className)\n  }, (width || height) && {\n    style: Object.assign({\n      '--pf-c-skeleton--Width': width ? width : undefined,\n      '--pf-c-skeleton--Height': height ? height : undefined\n    }, props.style)\n  }), React.createElement(\"span\", {\n    className: \"pf-u-screen-reader\"\n  }, screenreaderText));\n};\nSkeleton.displayName = 'Skeleton';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Skeleton/Skeleton.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,2DAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AAiBA,OAAO,IAAM,QAAQ,GAA2C,SAAnD,QAAmD,CAAC,EAAD,EAQ5C;AAR6C,MAC/D,SAD+D,GAM/C,EAN+C,CAC/D,SAD+D;AAAA,MAE/D,KAF+D,GAM/C,EAN+C,CAE/D,KAF+D;AAAA,MAG/D,MAH+D,GAM/C,EAN+C,CAG/D,MAH+D;AAAA,MAI/D,QAJ+D,GAM/C,EAN+C,CAI/D,QAJ+D;AAAA,MAK/D,KAL+D,GAM/C,EAN+C,CAK/D,KAL+D;AAAA,MAM/D,gBAN+D,GAM/C,EAN+C,CAM/D,gBAN+D;AAAA,MAO5D,KAP4D,GAOvD,MAAA,CAAA,EAAA,EAPuD,CAAA,WAAA,EAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,OAAA,EAAA,kBAAA,CAOvD,CAPuD;;AAS/D,MAAM,mBAAmB,GAAG,QAAQ,GAChC,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,SAArB,EAAgC,IAAhC,CAAqC,UAAA,GAAG;AAAA,WAAI,GAAG,yBAAkB,QAAlB,CAAP;AAAA,GAAxC,CADgC,GAEhC,SAFJ;AAIA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACM,KADN,EACW;AACT,IAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,QADK,EAEZ,QAAQ,IAAI,mBAFA,EAGZ,KAAK,KAAK,QAAV,IAAsB,MAAM,CAAC,SAAP,CAAiB,MAH3B,EAIZ,KAAK,KAAK,QAAV,IAAsB,MAAM,CAAC,SAAP,CAAiB,MAJ3B,EAKZ,SALY;AADL,GADX,EASO,CAAC,KAAK,IAAI,MAAV,KAAqB;AACxB,IAAA,KAAK,EAAE,MAAA,CAAA,MAAA,CAAA;AACL,gCAA0B,KAAK,GAAG,KAAH,GAAW,SADrC;AAEL,iCAA2B,MAAM,GAAG,MAAH,GAAY;AAFxC,KAAA,EAGF,KAAK,CAAC,KAHJ;AADiB,GAT5B,CAAA,EAiBE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAC;AAAhB,GAAA,EAAsC,gBAAtC,CAjBF,CADF;AAqBD,CAlCM;AAmCP,QAAQ,CAAC,WAAT,GAAuB,UAAvB","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Skeleton/skeleton';\nimport { css } from '@patternfly/react-styles';\n\nexport interface SkeletonProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the Skeleton */\n  className?: string;\n  /** The width of the Skeleton. Must specify pixels or percentage. */\n  width?: string;\n  /** The height of the Skeleton. Must specify pixels or percentage. */\n  height?: string;\n  /** The font size height of the Skeleton */\n  fontSize?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl';\n  /** The shape of the Skeleton */\n  shape?: 'circle' | 'square';\n  /** Text read just to screen reader users */\n  screenreaderText?: string;\n}\n\nexport const Skeleton: React.FunctionComponent<SkeletonProps> = ({\n  className,\n  width,\n  height,\n  fontSize,\n  shape,\n  screenreaderText,\n  ...props\n}: SkeletonProps) => {\n  const fontHeightClassName = fontSize\n    ? Object.values(styles.modifiers).find(key => key === `pf-m-text-${fontSize}`)\n    : undefined;\n\n  return (\n    <div\n      {...props}\n      className={css(\n        styles.skeleton,\n        fontSize && fontHeightClassName,\n        shape === 'circle' && styles.modifiers.circle,\n        shape === 'square' && styles.modifiers.square,\n        className\n      )}\n      {...((width || height) && {\n        style: {\n          '--pf-c-skeleton--Width': width ? width : undefined,\n          '--pf-c-skeleton--Height': height ? height : undefined,\n          ...props.style\n        } as React.CSSProperties\n      })}\n    >\n      <span className=\"pf-u-screen-reader\">{screenreaderText}</span>\n    </div>\n  );\n};\nSkeleton.displayName = 'Skeleton';\n"]},"metadata":{},"sourceType":"module"}