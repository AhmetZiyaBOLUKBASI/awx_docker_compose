{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { CollapseColumn } from '../../CollapseColumn';\nimport { ExpandableRowContent } from '../../ExpandableRowContent';\nexport var collapsible = function collapsible(value, _ref) {\n  var rowIndex = _ref.rowIndex,\n      columnIndex = _ref.columnIndex,\n      rowData = _ref.rowData,\n      column = _ref.column,\n      property = _ref.property;\n  var _column$extraParams = column.extraParams,\n      onCollapse = _column$extraParams.onCollapse,\n      _column$extraParams$r = _column$extraParams.rowLabeledBy,\n      rowLabeledBy = _column$extraParams$r === void 0 ? 'simple-node' : _column$extraParams$r,\n      _column$extraParams$e = _column$extraParams.expandId,\n      expandId = _column$extraParams$e === void 0 ? 'expand-toggle' : _column$extraParams$e,\n      allRowsExpanded = _column$extraParams.allRowsExpanded,\n      collapseAllAriaLabel = _column$extraParams.collapseAllAriaLabel;\n  var extraData = {\n    rowIndex: rowIndex,\n    columnIndex: columnIndex,\n    column: column,\n    property: property\n  };\n  var rowId = rowIndex !== undefined ? rowIndex : -1;\n  var customProps = Object.assign({}, rowId !== -1 ? {\n    isOpen: rowData === null || rowData === void 0 ? void 0 : rowData.isOpen,\n    'aria-labelledby': \"\".concat(rowLabeledBy).concat(rowId, \" \").concat(expandId).concat(rowId)\n  } : {\n    isOpen: allRowsExpanded,\n    'aria-label': collapseAllAriaLabel || 'Expand all rows'\n  });\n  /**\n   * @param {React.MouseEvent} event - Mouse event\n   */\n\n  function onToggle(event) {\n    var open = rowData ? !rowData.isOpen : !allRowsExpanded; // tslint:disable-next-line:no-unused-expression\n\n    onCollapse && onCollapse(event, rowIndex, open, rowData, extraData);\n  }\n\n  return {\n    className: ((rowData === null || rowData === void 0 ? void 0 : rowData.isOpen) !== undefined || rowId === -1) && css(styles.tableToggle),\n    isVisible: !(rowData === null || rowData === void 0 ? void 0 : rowData.fullWidth),\n    children: React.createElement(CollapseColumn, Object.assign({\n      \"aria-labelledby\": \"\".concat(rowLabeledBy).concat(rowId, \" \").concat(expandId).concat(rowId),\n      onToggle: onToggle,\n      id: expandId + rowId\n    }, customProps), value)\n  };\n};\nexport var expandable = function expandable(value, _ref2) {\n  var rowData = _ref2.rowData;\n  return rowData && rowData.hasOwnProperty('parent') ? React.createElement(ExpandableRowContent, null, value) : value;\n};\nexport var expandedRow = function expandedRow(colSpan) {\n  var additionalColSpan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  var expandedRowFormatter = function expandedRowFormatter(value, _ref3) {\n    var columnIndex = _ref3.columnIndex,\n        rowIndex = _ref3.rowIndex,\n        rowData = _ref3.rowData,\n        _ref3$column$extraPar = _ref3.column.extraParams.contentId,\n        contentId = _ref3$column$extraPar === void 0 ? 'expanded-content' : _ref3$column$extraPar;\n    return value && rowData.hasOwnProperty('parent') && {\n      colSpan: !rowData.cells || rowData.cells.length === 1 ? colSpan + (rowData.fullWidth ? additionalColSpan + 1 : 0) : 1,\n      id: contentId + rowIndex + (columnIndex ? '-' + columnIndex : ''),\n      className: rowData.noPadding && css(styles.modifiers.noPadding)\n    };\n  };\n\n  return expandedRowFormatter;\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/utils/decorators/collapsible.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { CollapseColumn } from '../../CollapseColumn';\nimport { ExpandableRowContent } from '../../ExpandableRowContent';\nimport { IExtra, IFormatterValueType, IFormatter, decoratorReturnType } from '../../TableTypes';\n\nexport const collapsible: IFormatter = (\n  value: IFormatterValueType,\n  { rowIndex, columnIndex, rowData, column, property }: IExtra\n) => {\n  const {\n    extraParams: {\n      onCollapse,\n      rowLabeledBy = 'simple-node',\n      expandId = 'expand-toggle',\n      allRowsExpanded,\n      collapseAllAriaLabel\n    }\n  } = column;\n  const extraData = {\n    rowIndex,\n    columnIndex,\n    column,\n    property\n  };\n\n  const rowId = rowIndex !== undefined ? rowIndex : -1;\n\n  const customProps = {\n    ...(rowId !== -1\n      ? {\n          isOpen: rowData?.isOpen,\n          'aria-labelledby': `${rowLabeledBy}${rowId} ${expandId}${rowId}`\n        }\n      : {\n          isOpen: allRowsExpanded,\n          'aria-label': collapseAllAriaLabel || 'Expand all rows'\n        })\n  };\n\n  /**\n   * @param {React.MouseEvent} event - Mouse event\n   */\n  function onToggle(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    const open = rowData ? !rowData.isOpen : !allRowsExpanded;\n    // tslint:disable-next-line:no-unused-expression\n    onCollapse && onCollapse(event, rowIndex, open, rowData, extraData);\n  }\n\n  return {\n    className: (rowData?.isOpen !== undefined || rowId === -1) && css(styles.tableToggle),\n    isVisible: !rowData?.fullWidth,\n    children: (\n      <CollapseColumn\n        aria-labelledby={`${rowLabeledBy}${rowId} ${expandId}${rowId}`}\n        onToggle={onToggle}\n        id={expandId + rowId}\n        {...customProps}\n      >\n        {value as React.ReactNode}\n      </CollapseColumn>\n    )\n  };\n};\n\nexport const expandable: IFormatter = (value: IFormatterValueType, { rowData }: IExtra) =>\n  rowData && rowData.hasOwnProperty('parent') ? (\n    <ExpandableRowContent>{value as React.ReactNode}</ExpandableRowContent>\n  ) : (\n    value\n  );\n\nexport const expandedRow = (colSpan?: number, additionalColSpan: number = 0) => {\n  const expandedRowFormatter = (\n    value: IFormatterValueType,\n    {\n      columnIndex,\n      rowIndex,\n      rowData,\n      column: {\n        extraParams: { contentId = 'expanded-content' }\n      }\n    }: IExtra\n  ): decoratorReturnType =>\n    value &&\n    rowData.hasOwnProperty('parent') && {\n      colSpan:\n        !rowData.cells || rowData.cells.length === 1 ? colSpan + (rowData.fullWidth ? additionalColSpan + 1 : 0) : 1,\n      id: contentId + rowIndex + (columnIndex ? '-' + columnIndex : ''),\n      className: rowData.noPadding && css(styles.modifiers.noPadding)\n    };\n  return expandedRowFormatter;\n};\n"]},"metadata":{},"sourceType":"module"}