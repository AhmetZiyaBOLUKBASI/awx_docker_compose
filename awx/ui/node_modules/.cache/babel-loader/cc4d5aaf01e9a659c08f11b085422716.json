{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport var WizardNavItem = function WizardNavItem(_a) {\n  var _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$content = _a.content,\n      content = _a$content === void 0 ? '' : _a$content,\n      _a$isCurrent = _a.isCurrent,\n      isCurrent = _a$isCurrent === void 0 ? false : _a$isCurrent,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      step = _a.step,\n      _a$onNavItemClick = _a.onNavItemClick,\n      onNavItemClick = _a$onNavItemClick === void 0 ? function () {\n    return undefined;\n  } : _a$onNavItemClick,\n      _a$navItemComponent = _a.navItemComponent,\n      navItemComponent = _a$navItemComponent === void 0 ? 'button' : _a$navItemComponent,\n      _a$href = _a.href,\n      href = _a$href === void 0 ? null : _a$href,\n      _a$isExpandable = _a.isExpandable,\n      isExpandable = _a$isExpandable === void 0 ? false : _a$isExpandable,\n      id = _a.id,\n      rest = __rest(_a, [\"children\", \"content\", \"isCurrent\", \"isDisabled\", \"step\", \"onNavItemClick\", \"navItemComponent\", \"href\", \"isExpandable\", \"id\"]);\n\n  var NavItemComponent = navItemComponent;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isExpanded = _React$useState2[0],\n      setIsExpanded = _React$useState2[1];\n\n  React.useEffect(function () {\n    setIsExpanded(isCurrent);\n  }, [isCurrent]);\n\n  if (navItemComponent === 'a' && !href && process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.error('WizardNavItem: When using an anchor, please provide an href');\n  }\n\n  var btnProps = {\n    disabled: isDisabled\n  };\n  var linkProps = {\n    tabIndex: isDisabled ? -1 : undefined,\n    href: href\n  };\n  return React.createElement(\"li\", {\n    className: css(styles.wizardNavItem, isExpandable && styles.modifiers.expandable, isExpandable && isExpanded && styles.modifiers.expanded)\n  }, React.createElement(NavItemComponent, Object.assign({}, rest, navItemComponent === 'a' ? Object.assign({}, linkProps) : Object.assign({}, btnProps), id && {\n    id: id.toString()\n  }, {\n    onClick: function onClick() {\n      return isExpandable ? setIsExpanded(!isExpanded || isCurrent) : onNavItemClick(step);\n    },\n    className: css(styles.wizardNavLink, isCurrent && styles.modifiers.current, isDisabled && styles.modifiers.disabled),\n    \"aria-disabled\": isDisabled ? true : null,\n    \"aria-current\": isCurrent && !children ? 'step' : false\n  }, isExpandable && {\n    'aria-expanded': isExpanded\n  }), isExpandable ? React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: css(styles.wizardNavLinkText)\n  }, content), React.createElement(\"span\", {\n    className: css(styles.wizardNavLinkToggle)\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardNavLinkToggleIcon)\n  }, React.createElement(AngleRightIcon, null)))) : content), children);\n};\nWizardNavItem.displayName = 'WizardNavItem';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Wizard/WizardNavItem.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\n\nexport interface WizardNavItemProps {\n  /** Can nest a WizardNav component for substeps */\n  children?: React.ReactNode;\n  /** The content to display in the nav item */\n  content?: React.ReactNode;\n  /** Whether the nav item is the currently active item */\n  isCurrent?: boolean;\n  /** Whether the nav item is disabled */\n  isDisabled?: boolean;\n  /** The step passed into the onNavItemClick callback */\n  step: number;\n  /** Callback for when the nav item is clicked */\n  onNavItemClick?: (step: number) => any;\n  /** Component used to render WizardNavItem */\n  navItemComponent?: 'button' | 'a';\n  /** An optional url to use for when using an anchor component */\n  href?: string;\n  /** Flag indicating that this NavItem has child steps and is expandable */\n  isExpandable?: boolean;\n  /** The id for the nav item */\n  id?: string | number;\n}\n\nexport const WizardNavItem: React.FunctionComponent<WizardNavItemProps> = ({\n  children = null,\n  content = '',\n  isCurrent = false,\n  isDisabled = false,\n  step,\n  onNavItemClick = () => undefined,\n  navItemComponent = 'button',\n  href = null,\n  isExpandable = false,\n  id,\n  ...rest\n}: WizardNavItemProps) => {\n  const NavItemComponent = navItemComponent;\n\n  const [isExpanded, setIsExpanded] = React.useState(false);\n\n  React.useEffect(() => {\n    setIsExpanded(isCurrent);\n  }, [isCurrent]);\n\n  if (navItemComponent === 'a' && !href && process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.error('WizardNavItem: When using an anchor, please provide an href');\n  }\n\n  const btnProps = {\n    disabled: isDisabled\n  };\n\n  const linkProps = {\n    tabIndex: isDisabled ? -1 : undefined,\n    href\n  };\n\n  return (\n    <li\n      className={css(\n        styles.wizardNavItem,\n        isExpandable && styles.modifiers.expandable,\n        isExpandable && isExpanded && styles.modifiers.expanded\n      )}\n    >\n      <NavItemComponent\n        {...rest}\n        {...(navItemComponent === 'a' ? { ...linkProps } : { ...btnProps })}\n        {...(id && { id: id.toString() })}\n        onClick={() => (isExpandable ? setIsExpanded(!isExpanded || isCurrent) : onNavItemClick(step))}\n        className={css(\n          styles.wizardNavLink,\n          isCurrent && styles.modifiers.current,\n          isDisabled && styles.modifiers.disabled\n        )}\n        aria-disabled={isDisabled ? true : null}\n        aria-current={isCurrent && !children ? 'step' : false}\n        {...(isExpandable && { 'aria-expanded': isExpanded })}\n      >\n        {isExpandable ? (\n          <>\n            <span className={css(styles.wizardNavLinkText)}>{content}</span>\n            <span className={css(styles.wizardNavLinkToggle)}>\n              <span className={css(styles.wizardNavLinkToggleIcon)}>\n                <AngleRightIcon />\n              </span>\n            </span>\n          </>\n        ) : (\n          content\n        )}\n      </NavItemComponent>\n      {children}\n    </li>\n  );\n};\nWizardNavItem.displayName = 'WizardNavItem';\n"]},"metadata":{},"sourceType":"module"}