{"ast":null,"code":"import{i18n}from\"@lingui/core\";import React from'react';import{Link,Redirect,Route,Switch,useRouteMatch}from'react-router-dom';import{PageSection,Card}from'@patternfly/react-core';import ContentError from'components/ContentError';import GitHubDetail from'./GitHubDetail';import GitHubEdit from'./GitHubEdit';import GitHubOrgEdit from'./GitHubOrgEdit';import GitHubTeamEdit from'./GitHubTeamEdit';import GitHubEnterpriseEdit from'./GitHubEnterpriseEdit';import GitHubEnterpriseOrgEdit from'./GitHubEnterpriseOrgEdit';import GitHubEnterpriseTeamEdit from'./GitHubEnterpriseTeamEdit';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function GitHub(){var baseURL='/settings/github';var baseRoute=useRouteMatch({path:'/settings/github',exact:true});var categoryRoute=useRouteMatch({path:'/settings/github/:category',exact:true});return/*#__PURE__*/_jsx(PageSection,{children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(Switch,{children:[baseRoute&&/*#__PURE__*/_jsx(Redirect,{to:\"\".concat(baseURL,\"/default/details\"),exact:true}),categoryRoute&&/*#__PURE__*/_jsx(Redirect,{to:\"\".concat(baseURL,\"/\").concat(categoryRoute.params.category,\"/details\"),exact:true}),/*#__PURE__*/_jsx(Route,{path:\"\".concat(baseURL,\"/:category/details\"),children:/*#__PURE__*/_jsx(GitHubDetail,{})}),/*#__PURE__*/_jsx(Route,{path:\"\".concat(baseURL,\"/default/edit\"),children:/*#__PURE__*/_jsx(GitHubEdit,{})}),/*#__PURE__*/_jsx(Route,{path:\"\".concat(baseURL,\"/organization/edit\"),children:/*#__PURE__*/_jsx(GitHubOrgEdit,{})}),/*#__PURE__*/_jsx(Route,{path:\"\".concat(baseURL,\"/team/edit\"),children:/*#__PURE__*/_jsx(GitHubTeamEdit,{})}),/*#__PURE__*/_jsx(Route,{path:\"\".concat(baseURL,\"/enterprise/edit\"),children:/*#__PURE__*/_jsx(GitHubEnterpriseEdit,{})}),/*#__PURE__*/_jsx(Route,{path:\"\".concat(baseURL,\"/enterprise_organization/edit\"),children:/*#__PURE__*/_jsx(GitHubEnterpriseOrgEdit,{})}),/*#__PURE__*/_jsx(Route,{path:\"\".concat(baseURL,\"/enterprise_team/edit\"),children:/*#__PURE__*/_jsx(GitHubEnterpriseTeamEdit,{})}),/*#__PURE__*/_jsx(Route,{path:\"\".concat(baseURL,\"/*\"),children:/*#__PURE__*/_jsx(ContentError,{isNotFound:true,children:/*#__PURE__*/_jsx(Link,{to:\"\".concat(baseURL,\"/default/details\"),children:/*i18n*/i18n._(\"View GitHub Settings\")})})},\"not-found\")]})})});}export default GitHub;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Setting/GitHub/GitHub.js"],"names":["React","Link","Redirect","Route","Switch","useRouteMatch","PageSection","Card","ContentError","GitHubDetail","GitHubEdit","GitHubOrgEdit","GitHubTeamEdit","GitHubEnterpriseEdit","GitHubEnterpriseOrgEdit","GitHubEnterpriseTeamEdit","GitHub","baseURL","baseRoute","path","exact","categoryRoute","params","category"],"mappings":"+BAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,CAAeC,QAAf,CAAyBC,KAAzB,CAAgCC,MAAhC,CAAwCC,aAAxC,KAA6D,kBAA7D,CAGA,OAASC,WAAT,CAAsBC,IAAtB,KAAkC,wBAAlC,CACA,MAAOC,CAAAA,YAAP,KAAyB,yBAAzB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,oBAAP,KAAiC,wBAAjC,CACA,MAAOC,CAAAA,uBAAP,KAAoC,2BAApC,CACA,MAAOC,CAAAA,wBAAP,KAAqC,4BAArC,C,wFAEA,QAASC,CAAAA,MAAT,EAAkB,CAChB,GAAMC,CAAAA,OAAO,CAAG,kBAAhB,CACA,GAAMC,CAAAA,SAAS,CAAGb,aAAa,CAAC,CAAEc,IAAI,CAAE,kBAAR,CAA4BC,KAAK,CAAE,IAAnC,CAAD,CAA/B,CACA,GAAMC,CAAAA,aAAa,CAAGhB,aAAa,CAAC,CAClCc,IAAI,CAAE,4BAD4B,CAElCC,KAAK,CAAE,IAF2B,CAAD,CAAnC,CAKA,mBACE,KAAC,WAAD,wBACE,KAAC,IAAD,wBACE,MAAC,MAAD,YACGF,SAAS,eAAI,KAAC,QAAD,EAAU,EAAE,WAAKD,OAAL,oBAAZ,CAA4C,KAAK,KAAjD,EADhB,CAEGI,aAAa,eACZ,KAAC,QAAD,EACE,EAAE,WAAKJ,OAAL,aAAgBI,aAAa,CAACC,MAAd,CAAqBC,QAArC,YADJ,CAEE,KAAK,KAFP,EAHJ,cAQE,KAAC,KAAD,EAAO,IAAI,WAAKN,OAAL,sBAAX,uBACE,KAAC,YAAD,IADF,EARF,cAWE,KAAC,KAAD,EAAO,IAAI,WAAKA,OAAL,iBAAX,uBACE,KAAC,UAAD,IADF,EAXF,cAcE,KAAC,KAAD,EAAO,IAAI,WAAKA,OAAL,sBAAX,uBACE,KAAC,aAAD,IADF,EAdF,cAiBE,KAAC,KAAD,EAAO,IAAI,WAAKA,OAAL,cAAX,uBACE,KAAC,cAAD,IADF,EAjBF,cAoBE,KAAC,KAAD,EAAO,IAAI,WAAKA,OAAL,oBAAX,uBACE,KAAC,oBAAD,IADF,EApBF,cAuBE,KAAC,KAAD,EAAO,IAAI,WAAKA,OAAL,iCAAX,uBACE,KAAC,uBAAD,IADF,EAvBF,cA0BE,KAAC,KAAD,EAAO,IAAI,WAAKA,OAAL,yBAAX,uBACE,KAAC,wBAAD,IADF,EA1BF,cA6BE,KAAC,KAAD,EAAuB,IAAI,WAAKA,OAAL,MAA3B,uBACE,KAAC,YAAD,EAAc,UAAU,KAAxB,uBACE,KAAC,IAAD,EAAM,EAAE,WAAKA,OAAL,oBAAR,kBACG,8BADH,EADF,EADF,EAAW,WAAX,CA7BF,GADF,EADF,EADF,CA2CD,CAED,cAAeD,CAAAA,MAAf","sourcesContent":["import React from 'react';\nimport { Link, Redirect, Route, Switch, useRouteMatch } from 'react-router-dom';\n\nimport { t } from '@lingui/macro';\nimport { PageSection, Card } from '@patternfly/react-core';\nimport ContentError from 'components/ContentError';\nimport GitHubDetail from './GitHubDetail';\nimport GitHubEdit from './GitHubEdit';\nimport GitHubOrgEdit from './GitHubOrgEdit';\nimport GitHubTeamEdit from './GitHubTeamEdit';\nimport GitHubEnterpriseEdit from './GitHubEnterpriseEdit';\nimport GitHubEnterpriseOrgEdit from './GitHubEnterpriseOrgEdit';\nimport GitHubEnterpriseTeamEdit from './GitHubEnterpriseTeamEdit';\n\nfunction GitHub() {\n  const baseURL = '/settings/github';\n  const baseRoute = useRouteMatch({ path: '/settings/github', exact: true });\n  const categoryRoute = useRouteMatch({\n    path: '/settings/github/:category',\n    exact: true,\n  });\n\n  return (\n    <PageSection>\n      <Card>\n        <Switch>\n          {baseRoute && <Redirect to={`${baseURL}/default/details`} exact />}\n          {categoryRoute && (\n            <Redirect\n              to={`${baseURL}/${categoryRoute.params.category}/details`}\n              exact\n            />\n          )}\n          <Route path={`${baseURL}/:category/details`}>\n            <GitHubDetail />\n          </Route>\n          <Route path={`${baseURL}/default/edit`}>\n            <GitHubEdit />\n          </Route>\n          <Route path={`${baseURL}/organization/edit`}>\n            <GitHubOrgEdit />\n          </Route>\n          <Route path={`${baseURL}/team/edit`}>\n            <GitHubTeamEdit />\n          </Route>\n          <Route path={`${baseURL}/enterprise/edit`}>\n            <GitHubEnterpriseEdit />\n          </Route>\n          <Route path={`${baseURL}/enterprise_organization/edit`}>\n            <GitHubEnterpriseOrgEdit />\n          </Route>\n          <Route path={`${baseURL}/enterprise_team/edit`}>\n            <GitHubEnterpriseTeamEdit />\n          </Route>\n          <Route key=\"not-found\" path={`${baseURL}/*`}>\n            <ContentError isNotFound>\n              <Link to={`${baseURL}/default/details`}>\n                {t`View GitHub Settings`}\n              </Link>\n            </ContentError>\n          </Route>\n        </Switch>\n      </Card>\n    </PageSection>\n  );\n}\n\nexport default GitHub;\n"]},"metadata":{},"sourceType":"module"}