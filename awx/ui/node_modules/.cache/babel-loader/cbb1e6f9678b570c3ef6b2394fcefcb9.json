{"ast":null,"code":"import * as React from 'react';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nexport var EditableTextCell = function EditableTextCell(_ref) {\n  var value = _ref.value,\n      rowIndex = _ref.rowIndex,\n      cellIndex = _ref.cellIndex,\n      props = _ref.props,\n      handleTextInputChange = _ref.handleTextInputChange,\n      inputAriaLabel = _ref.inputAriaLabel,\n      _ref$isDisabled = _ref.isDisabled,\n      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: inlineStyles.inlineEditValue\n  }, value), React.createElement(\"div\", {\n    className: inlineStyles.inlineEditInput\n  }, React.createElement(TextInput, {\n    isDisabled: isDisabled,\n    value: props.editableValue !== undefined ? props.editableValue : value,\n    validated: props.isValid !== false ? 'default' : 'error',\n    type: \"text\",\n    onChange: function onChange(newValue, event) {\n      handleTextInputChange(newValue, event, rowIndex, cellIndex);\n    },\n    \"aria-label\": inputAriaLabel\n  }), React.createElement(\"div\", {\n    className: css(formStyles.formHelperText, formStyles.modifiers.error),\n    \"aria-live\": \"polite\"\n  }, props.errorText)));\n};\nEditableTextCell.displayName = 'EditableTextCell';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/EditableTextCell.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,SAAT,QAA0B,sDAA1B;AACA,OAAO,YAAP,MAAyB,gEAAzB;AACA,OAAO,UAAP,MAAuB,mDAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AAyBA,OAAO,IAAM,gBAAgB,GAA+C,SAA/D,gBAA+D;AAAA,MAC1E,KAD0E,QAC1E,KAD0E;AAAA,MAE1E,QAF0E,QAE1E,QAF0E;AAAA,MAG1E,SAH0E,QAG1E,SAH0E;AAAA,MAI1E,KAJ0E,QAI1E,KAJ0E;AAAA,MAK1E,qBAL0E,QAK1E,qBAL0E;AAAA,MAM1E,cAN0E,QAM1E,cAN0E;AAAA,6BAO1E,UAP0E;AAAA,MAO1E,UAP0E,gCAO7D,KAP6D;AAAA,SAS1E,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAP,EAAe,IAAf,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,YAAY,CAAC;AAA7B,GAAA,EAA+C,KAA/C,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,YAAY,CAAC;AAA7B,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;AACR,IAAA,UAAU,EAAE,UADJ;AAER,IAAA,KAAK,EAAE,KAAK,CAAC,aAAN,KAAwB,SAAxB,GAAoC,KAAK,CAAC,aAA1C,GAA0D,KAFzD;AAGR,IAAA,SAAS,EAAE,KAAK,CAAC,OAAN,KAAkB,KAAlB,GAA0B,SAA1B,GAAsC,OAHzC;AAIR,IAAA,IAAI,EAAC,MAJG;AAKR,IAAA,QAAQ,EAAE,kBAAC,QAAD,EAAW,KAAX,EAAoB;AAC5B,MAAA,qBAAqB,CAAC,QAAD,EAAW,KAAX,EAAkB,QAAlB,EAA4B,SAA5B,CAArB;AACD,KAPO;AAOP,kBACW;AARJ,GAAV,CADF,EAWE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,UAAU,CAAC,cAAZ,EAA4B,UAAU,CAAC,SAAX,CAAqB,KAAjD,CAAnB;AAA0E,iBAAY;AAAtF,GAAA,EACG,KAAK,CAAC,SADT,CAXF,CAFF,CAT0E;AAAA,CAArE;AA4BP,gBAAgB,CAAC,WAAjB,GAA+B,kBAA/B","sourcesContent":["import * as React from 'react';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { EditableTextCellProps } from './base';\n\nexport interface IEditableTextCell extends React.HTMLProps<HTMLDivElement> {\n  /** The current value of the text input */\n  value: string;\n  /** Row index of this text cell */\n  rowIndex: number;\n  /** Cell index of this text cell */\n  cellIndex: number;\n  /** Props to build the input */\n  props: EditableTextCellProps;\n  /** Event handler which fires when user changes the text in this cell */\n  handleTextInputChange: (\n    newValue: string,\n    event: React.FormEvent<HTMLInputElement>,\n    rowIndex: number,\n    cellIndex: number\n  ) => void;\n  /** accessible label of the text input */\n  inputAriaLabel: string;\n  /** flag indicating if the text input is disabled */\n  isDisabled?: boolean;\n}\n\nexport const EditableTextCell: React.FunctionComponent<IEditableTextCell> = ({\n  value,\n  rowIndex,\n  cellIndex,\n  props,\n  handleTextInputChange,\n  inputAriaLabel,\n  isDisabled = false\n}: IEditableTextCell) => (\n  <React.Fragment>\n    <div className={inlineStyles.inlineEditValue}>{value}</div>\n    <div className={inlineStyles.inlineEditInput}>\n      <TextInput\n        isDisabled={isDisabled}\n        value={props.editableValue !== undefined ? props.editableValue : value}\n        validated={props.isValid !== false ? 'default' : 'error'}\n        type=\"text\"\n        onChange={(newValue, event) => {\n          handleTextInputChange(newValue, event, rowIndex, cellIndex);\n        }}\n        aria-label={inputAriaLabel}\n      />\n      <div className={css(formStyles.formHelperText, formStyles.modifiers.error)} aria-live=\"polite\">\n        {props.errorText}\n      </div>\n    </div>\n  </React.Fragment>\n);\nEditableTextCell.displayName = 'EditableTextCell';\n"]},"metadata":{},"sourceType":"module"}