{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{i18n}from\"@lingui/core\";import React,{useState}from'react';import{Select,SelectOption,SelectVariant}from'@patternfly/react-core';import{arrayToString,stringToArray}from'util/strings';import{jsx as _jsx}from\"react/jsx-runtime\";function TagMultiSelect(_ref){var onChange=_ref.onChange,value=_ref.value;var selections=stringToArray(value);var _useState=useState(selections),_useState2=_slicedToArray(_useState,2),options=_useState2[0],setOptions=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isExpanded=_useState4[0],setIsExpanded=_useState4[1];var onSelect=function onSelect(event,item){var newValue;if(selections.includes(item)){newValue=selections.filter(function(i){return i!==item;});}else{newValue=selections.concat(item);}onChange(arrayToString(newValue));};var toggleExpanded=function toggleExpanded(toggleValue){setIsExpanded(toggleValue);};var renderOptions=function renderOptions(opts){return opts.map(function(option){return/*#__PURE__*/_jsx(SelectOption,{value:option,children:option},option);});};var onFilter=function onFilter(event){if(event){var str=event.target.value.toLowerCase();var matches=options.filter(function(o){return o.toLowerCase().includes(str);});return renderOptions(matches);}return null;};return/*#__PURE__*/_jsx(Select,{variant:SelectVariant.typeaheadMulti,onToggle:toggleExpanded,onSelect:onSelect,onClear:function onClear(){return onChange('');},onFilter:onFilter,isCreatable:true,onCreateOption:function onCreateOption(name){name=name.trim();if(!options.includes(name)){setOptions(options.concat(name));}return name;},selections:selections,isOpen:isExpanded,typeAheadAriaLabel:/*i18n*/i18n._(\"Select tags\"),noResultsFoundText:/*i18n*/i18n._(\"No results found\"),ouiaId:\"tag-multiselect\",createText:/*i18n*/i18n._(\"Create\"),children:renderOptions(options)});}export default TagMultiSelect;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/MultiSelect/TagMultiSelect.js"],"names":["React","useState","Select","SelectOption","SelectVariant","arrayToString","stringToArray","TagMultiSelect","onChange","value","selections","options","setOptions","isExpanded","setIsExpanded","onSelect","event","item","newValue","includes","filter","i","concat","toggleExpanded","toggleValue","renderOptions","opts","map","option","onFilter","str","target","toLowerCase","matches","o","typeaheadMulti","name","trim"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { func, string } from 'prop-types';\nimport { t } from '@lingui/macro';\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { arrayToString, stringToArray } from 'util/strings';\n\nfunction TagMultiSelect({ onChange, value }) {\n  const selections = stringToArray(value);\n  const [options, setOptions] = useState(selections);\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const onSelect = (event, item) => {\n    let newValue;\n    if (selections.includes(item)) {\n      newValue = selections.filter((i) => i !== item);\n    } else {\n      newValue = selections.concat(item);\n    }\n    onChange(arrayToString(newValue));\n  };\n\n  const toggleExpanded = (toggleValue) => {\n    setIsExpanded(toggleValue);\n  };\n\n  const renderOptions = (opts) =>\n    opts.map((option) => (\n      <SelectOption key={option} value={option}>\n        {option}\n      </SelectOption>\n    ));\n\n  const onFilter = (event) => {\n    if (event) {\n      const str = event.target.value.toLowerCase();\n      const matches = options.filter((o) => o.toLowerCase().includes(str));\n      return renderOptions(matches);\n    }\n    return null;\n  };\n\n  return (\n    <Select\n      variant={SelectVariant.typeaheadMulti}\n      onToggle={toggleExpanded}\n      onSelect={onSelect}\n      onClear={() => onChange('')}\n      onFilter={onFilter}\n      isCreatable\n      onCreateOption={(name) => {\n        name = name.trim();\n        if (!options.includes(name)) {\n          setOptions(options.concat(name));\n        }\n        return name;\n      }}\n      selections={selections}\n      isOpen={isExpanded}\n      typeAheadAriaLabel={t`Select tags`}\n      noResultsFoundText={t`No results found`}\n      ouiaId=\"tag-multiselect\"\n      createText={t`Create`}\n    >\n      {renderOptions(options)}\n    </Select>\n  );\n}\n\nTagMultiSelect.propTypes = {\n  onChange: func.isRequired,\n  value: string.isRequired,\n};\n\nexport default TagMultiSelect;\n"]},"metadata":{},"sourceType":"module"}