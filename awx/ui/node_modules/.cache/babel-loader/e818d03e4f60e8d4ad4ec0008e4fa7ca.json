{"ast":null,"code":"import { useMemo } from 'react';\nvar uid = 0;\nvar ouiaPrefix = 'OUIA-Generated-';\nvar ouiaIdByRoute = {};\n/** Get props to conform to OUIA spec\n *\n * For functional components, use the useOUIAProps function instead\n *\n * In class based components, create a state variable ouiaStateId to create a static generated ID:\n * state = {\n *  ouiaStateId: getDefaultOUIAId(Chip.displayName)\n * }\n * This generated ID should remain alive as long as the component is not unmounted.\n *\n * Then add the attributes to the component\n * {...getOUIAProps('OverflowChip', this.props.ouiaId !== undefined ? this.props.ouiaId : this.state.ouiaStateId)}\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {boolean} ouiaSafe false if in animation\n */\n\nexport function getOUIAProps(componentType, id) {\n  var ouiaSafe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return {\n    'data-ouia-component-type': \"PF4/\".concat(componentType),\n    'data-ouia-safe': ouiaSafe,\n    'data-ouia-component-id': id\n  };\n}\n/**\n * Hooks version of the getOUIAProps function that also memoizes the generated ID\n * Can only be used in functional components\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {boolean} ouiaSafe false if in animation\n * @param {string} variant Optional variant to add to the generated ID\n */\n\nexport var useOUIAProps = function useOUIAProps(componentType, id) {\n  var ouiaSafe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var variant = arguments.length > 3 ? arguments[3] : undefined;\n  return {\n    'data-ouia-component-type': \"PF4/\".concat(componentType),\n    'data-ouia-safe': ouiaSafe,\n    'data-ouia-component-id': useOUIAId(componentType, id, variant)\n  };\n};\n/**\n * Returns the ID or the memoized generated ID\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {string} variant Optional variant to add to the generated ID\n */\n\nexport var useOUIAId = function useOUIAId(componentType, id, variant) {\n  if (id !== undefined) {\n    return id;\n  }\n\n  return useMemo(function () {\n    return getDefaultOUIAId(componentType, variant);\n  }, [componentType, variant]);\n};\n/**\n * Returns a generated id based on the URL location\n *\n * @param {string} componentType OUIA component type\n * @param {string} variant Optional variant to add to the generated ID\n */\n\nexport function getDefaultOUIAId(componentType, variant) {\n  /*\n  ouiaIdByRoute = {\n    [route+componentType]: [number]\n  }\n  */\n  try {\n    var key;\n\n    if (typeof window !== 'undefined') {\n      // browser environments\n      key = \"\".concat(window.location.href, \"-\").concat(componentType, \"-\").concat(variant || '');\n    } else {\n      // node/SSR environments\n      key = \"\".concat(componentType, \"-\").concat(variant || '');\n    }\n\n    if (!ouiaIdByRoute[key]) {\n      ouiaIdByRoute[key] = 0;\n    }\n\n    return \"\".concat(ouiaPrefix).concat(componentType, \"-\").concat(variant ? \"\".concat(variant, \"-\") : '').concat(++ouiaIdByRoute[key]);\n  } catch (exception) {\n    return \"\".concat(ouiaPrefix).concat(componentType, \"-\").concat(variant ? \"\".concat(variant, \"-\") : '').concat(++uid);\n  }\n}","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/helpers/OUIA/ouia.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,OAAxB;AAYA,IAAI,GAAG,GAAG,CAAV;AACA,IAAM,UAAU,GAAG,iBAAnB;AACA,IAAM,aAAa,GAAQ,EAA3B;AAEA;;;;;;;;;;;;;;;;AAgBG;;AACH,OAAM,SAAU,YAAV,CAAuB,aAAvB,EAA8C,EAA9C,EAAkF;AAAA,MAAxB,QAAwB,uEAAJ,IAAI;AACtF,SAAO;AACL,8CAAmC,aAAnC,CADK;AAEL,sBAAkB,QAFb;AAGL,8BAA0B;AAHrB,GAAP;AAKD;AAED;;;;;;;;AAQG;;AACH,OAAO,IAAM,YAAY,GAAG,SAAf,YAAe,CAAC,aAAD,EAAwB,EAAxB;AAAA,MAAqC,QAArC,uEAAyD,IAAzD;AAAA,MAA+D,OAA/D;AAAA,SAAqF;AAC/G,8CAAmC,aAAnC,CAD+G;AAE/G,sBAAkB,QAF6F;AAG/G,8BAA0B,SAAS,CAAC,aAAD,EAAgB,EAAhB,EAAoB,OAApB;AAH4E,GAArF;AAAA,CAArB;AAMP;;;;;;AAMG;;AACH,OAAO,IAAM,SAAS,GAAG,SAAZ,SAAY,CAAC,aAAD,EAAwB,EAAxB,EAAqC,OAArC,EAAyD;AAChF,MAAI,EAAE,KAAK,SAAX,EAAsB;AACpB,WAAO,EAAP;AACD;;AACD,SAAO,OAAO,CAAC;AAAA,WAAM,gBAAgB,CAAC,aAAD,EAAgB,OAAhB,CAAtB;AAAA,GAAD,EAAiD,CAAC,aAAD,EAAgB,OAAhB,CAAjD,CAAd;AACD,CALM;AAOP;;;;;AAKG;;AACH,OAAM,SAAU,gBAAV,CAA2B,aAA3B,EAAkD,OAAlD,EAAkE;AACtE;;;;AAIE;AACF,MAAI;AACF,QAAI,GAAJ;;AACA,QAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACA,MAAA,GAAG,aAAM,MAAM,CAAC,QAAP,CAAgB,IAAtB,cAA8B,aAA9B,cAA+C,OAAO,IAAI,EAA1D,CAAH;AACD,KAHD,MAGO;AACL;AACA,MAAA,GAAG,aAAM,aAAN,cAAuB,OAAO,IAAI,EAAlC,CAAH;AACD;;AACD,QAAI,CAAC,aAAa,CAAC,GAAD,CAAlB,EAAyB;AACvB,MAAA,aAAa,CAAC,GAAD,CAAb,GAAqB,CAArB;AACD;;AACD,qBAAU,UAAV,SAAuB,aAAvB,cAAwC,OAAO,aAAM,OAAN,SAAmB,EAAlE,SAAuE,EAAE,aAAa,CAAC,GAAD,CAAtF;AACD,GAbD,CAaE,OAAO,SAAP,EAAkB;AAClB,qBAAU,UAAV,SAAuB,aAAvB,cAAwC,OAAO,aAAM,OAAN,SAAmB,EAAlE,SAAuE,EAAE,GAAzE;AACD;AACF","sourcesContent":["import { useMemo } from 'react';\n\ntype OuiaId = number | string;\n\n// https://ouia.readthedocs.io/en/latest/README.html#ouia-component\nexport interface OUIAProps {\n  // If there is only one instance of the component on the page at once, it is OPTIONAL\n  ouiaId?: OuiaId;\n  // False if in animation\n  ouiaSafe?: boolean;\n}\n\nlet uid = 0;\nconst ouiaPrefix = 'OUIA-Generated-';\nconst ouiaIdByRoute: any = {};\n\n/** Get props to conform to OUIA spec\n *\n * For functional components, use the useOUIAProps function instead\n *\n * In class based components, create a state variable ouiaStateId to create a static generated ID:\n * state = {\n *  ouiaStateId: getDefaultOUIAId(Chip.displayName)\n * }\n * This generated ID should remain alive as long as the component is not unmounted.\n *\n * Then add the attributes to the component\n * {...getOUIAProps('OverflowChip', this.props.ouiaId !== undefined ? this.props.ouiaId : this.state.ouiaStateId)}\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {boolean} ouiaSafe false if in animation\n */\nexport function getOUIAProps(componentType: string, id: OuiaId, ouiaSafe: boolean = true) {\n  return {\n    'data-ouia-component-type': `PF4/${componentType}`,\n    'data-ouia-safe': ouiaSafe,\n    'data-ouia-component-id': id\n  };\n}\n\n/**\n * Hooks version of the getOUIAProps function that also memoizes the generated ID\n * Can only be used in functional components\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {boolean} ouiaSafe false if in animation\n * @param {string} variant Optional variant to add to the generated ID\n */\nexport const useOUIAProps = (componentType: string, id?: OuiaId, ouiaSafe: boolean = true, variant?: string) => ({\n  'data-ouia-component-type': `PF4/${componentType}`,\n  'data-ouia-safe': ouiaSafe,\n  'data-ouia-component-id': useOUIAId(componentType, id, variant)\n});\n\n/**\n * Returns the ID or the memoized generated ID\n *\n * @param {string} componentType OUIA component type\n * @param {number|string} id OUIA component id\n * @param {string} variant Optional variant to add to the generated ID\n */\nexport const useOUIAId = (componentType: string, id?: OuiaId, variant?: string) => {\n  if (id !== undefined) {\n    return id;\n  }\n  return useMemo(() => getDefaultOUIAId(componentType, variant), [componentType, variant]);\n};\n\n/**\n * Returns a generated id based on the URL location\n *\n * @param {string} componentType OUIA component type\n * @param {string} variant Optional variant to add to the generated ID\n */\nexport function getDefaultOUIAId(componentType: string, variant?: string) {\n  /*\n  ouiaIdByRoute = {\n    [route+componentType]: [number]\n  }\n  */\n  try {\n    let key;\n    if (typeof window !== 'undefined') {\n      // browser environments\n      key = `${window.location.href}-${componentType}-${variant || ''}`;\n    } else {\n      // node/SSR environments\n      key = `${componentType}-${variant || ''}`;\n    }\n    if (!ouiaIdByRoute[key]) {\n      ouiaIdByRoute[key] = 0;\n    }\n    return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ''}${++ouiaIdByRoute[key]}`;\n  } catch (exception) {\n    return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ''}${++uid}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}