{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _taggedTemplateLiteral from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject;import{i18n}from\"@lingui/core\";import React,{useState}from'react';import{useField}from'formik';import{FormGroup,Title}from'@patternfly/react-core';import styled from'styled-components';import FormField from'components/FormField';import{required}from'util/validators';import{useConfig}from'contexts/Config';import Popover from'../../Popover';import AnsibleSelect from'../../AnsibleSelect';import FrequencySelect,{SelectOption}from'./FrequencySelect';import helpText from'../../../screens/Template/shared/JobTemplate.helptext';import{SubFormLayout,FormColumnLayout}from'../../FormLayout';import FrequencyDetailSubform from'./FrequencyDetailSubform';import DateTimePicker from'./DateTimePicker';import sortFrequencies from'./sortFrequencies';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var SelectClearOption=styled(SelectOption)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  & > input[type='checkbox'] {\\n    display: none;\\n  }\\n\"])));export default function ScheduleFormFields(_ref){var hasDaysToKeepField=_ref.hasDaysToKeepField,zoneOptions=_ref.zoneOptions,zoneLinks=_ref.zoneLinks;var _useField=useField({name:'timezone',validate:required(/*i18n*/i18n._(\"Select a value for this field\"))}),_useField2=_slicedToArray(_useField,2),timezone=_useField2[0],timezoneMeta=_useField2[1];var _useField3=useField({name:'frequency',validate:required(/*i18n*/i18n._(\"Select a value for this field\"))}),_useField4=_slicedToArray(_useField3,3),frequency=_useField4[0],frequencyMeta=_useField4[1],frequencyHelper=_useField4[2];var _useState=useState(''),_useState2=_slicedToArray(_useState,2),timezoneMessage=_useState2[0],setTimezoneMessage=_useState2[1];var warnLinkedTZ=function warnLinkedTZ(event,selectedValue){if(zoneLinks[selectedValue]){setTimezoneMessage(/*i18n*/i18n._(\"Warning: {selectedValue} is a link to {0} and will be saved as that.\",{0:zoneLinks[selectedValue],selectedValue:selectedValue}));}else{setTimezoneMessage('');}timezone.onChange(event,selectedValue);};var timezoneValidatedStatus='default';if(timezoneMeta.touched&&timezoneMeta.error){timezoneValidatedStatus='error';}else if(timezoneMessage){timezoneValidatedStatus='warning';}var config=useConfig();// const [exceptionFrequency, exceptionFrequencyMeta, exceptionFrequencyHelper] =\n//   useField({\n//     name: 'exceptionFrequency',\n//     validate: required(t`Select a value for this field`),\n//   });\nvar updateFrequency=function updateFrequency(setFrequency){return function(values){setFrequency(values.sort(sortFrequencies));};};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(FormField,{id:\"schedule-name\",label:/*i18n*/i18n._(\"Name\"),name:\"name\",type:\"text\",validate:required(null),isRequired:true}),/*#__PURE__*/_jsx(FormField,{id:\"schedule-description\",label:/*i18n*/i18n._(\"Description\"),name:\"description\",type:\"text\"}),/*#__PURE__*/_jsx(DateTimePicker,{dateFieldName:\"startDate\",timeFieldName:\"startTime\",label:/*i18n*/i18n._(\"Start date/time\")}),/*#__PURE__*/_jsx(FormGroup,{name:\"timezone\",fieldId:\"schedule-timezone\",helperTextInvalid:timezoneMeta.error||timezoneMessage,isRequired:true,validated:timezoneValidatedStatus,label:/*i18n*/i18n._(\"Local time zone\"),helperText:timezoneMessage,labelIcon:/*#__PURE__*/_jsx(Popover,{content:helpText.localTimeZone(config)}),children:/*#__PURE__*/_jsx(AnsibleSelect,_objectSpread(_objectSpread({id:\"schedule-timezone\",data:zoneOptions},timezone),{},{onChange:warnLinkedTZ}))}),/*#__PURE__*/_jsx(FormGroup,{name:\"frequency\",fieldId:\"schedule-frequency\",helperTextInvalid:frequencyMeta.error,validated:!frequencyMeta.touched||!frequencyMeta.error?'default':'error',label:/*i18n*/i18n._(\"Repeat frequency\"),children:/*#__PURE__*/_jsxs(FrequencySelect,{id:\"schedule-frequency\",onChange:updateFrequency(frequencyHelper.setValue),value:frequency.value,placeholderText:frequency.value.length?/*i18n*/i18n._(\"Select frequency\"):/*i18n*/i18n._(\"None (run once)\"),onBlur:frequencyHelper.setTouched,children:[/*#__PURE__*/_jsx(SelectClearOption,{value:\"none\",children:/*i18n*/i18n._(\"None (run once)\")}),/*#__PURE__*/_jsx(SelectOption,{value:\"minute\",children:/*i18n*/i18n._(\"Minute\")}),/*#__PURE__*/_jsx(SelectOption,{value:\"hour\",children:/*i18n*/i18n._(\"Hour\")}),/*#__PURE__*/_jsx(SelectOption,{value:\"day\",children:/*i18n*/i18n._(\"Day\")}),/*#__PURE__*/_jsx(SelectOption,{value:\"week\",children:/*i18n*/i18n._(\"Week\")}),/*#__PURE__*/_jsx(SelectOption,{value:\"month\",children:/*i18n*/i18n._(\"Month\")}),/*#__PURE__*/_jsx(SelectOption,{value:\"year\",children:/*i18n*/i18n._(\"Year\")})]})}),hasDaysToKeepField?/*#__PURE__*/_jsx(FormField,{id:\"schedule-days-to-keep\",label:/*i18n*/i18n._(\"Days of Data to Keep\"),name:\"daysToKeep\",type:\"number\",validate:required(null),isRequired:true}):null,frequency.value.length?/*#__PURE__*/_jsxs(SubFormLayout,{children:[/*#__PURE__*/_jsx(Title,{size:\"md\",headingLevel:\"h4\",children:/*i18n*/i18n._(\"Frequency Details\")}),frequency.value.map(function(val){return/*#__PURE__*/_jsx(FormColumnLayout,{stacked:true,children:/*#__PURE__*/_jsx(FrequencyDetailSubform,{frequency:val,prefix:\"frequencyOptions.\".concat(val)})},val);})]}):null]});}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/Schedule/shared/ScheduleFormFields.js"],"names":["React","useState","useField","FormGroup","Title","styled","FormField","required","useConfig","Popover","AnsibleSelect","FrequencySelect","SelectOption","helpText","SubFormLayout","FormColumnLayout","FrequencyDetailSubform","DateTimePicker","sortFrequencies","SelectClearOption","ScheduleFormFields","hasDaysToKeepField","zoneOptions","zoneLinks","name","validate","timezone","timezoneMeta","frequency","frequencyMeta","frequencyHelper","timezoneMessage","setTimezoneMessage","warnLinkedTZ","event","selectedValue","onChange","timezoneValidatedStatus","touched","error","config","updateFrequency","setFrequency","values","sort","localTimeZone","setValue","value","length","setTouched","map","val"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useField } from 'formik';\nimport { FormGroup, Title } from '@patternfly/react-core';\nimport { t } from '@lingui/macro';\nimport styled from 'styled-components';\nimport FormField from 'components/FormField';\nimport { required } from 'util/validators';\nimport { useConfig } from 'contexts/Config';\nimport Popover from '../../Popover';\nimport AnsibleSelect from '../../AnsibleSelect';\nimport FrequencySelect, { SelectOption } from './FrequencySelect';\nimport helpText from '../../../screens/Template/shared/JobTemplate.helptext';\nimport { SubFormLayout, FormColumnLayout } from '../../FormLayout';\nimport FrequencyDetailSubform from './FrequencyDetailSubform';\nimport DateTimePicker from './DateTimePicker';\nimport sortFrequencies from './sortFrequencies';\n\nconst SelectClearOption = styled(SelectOption)`\n  & > input[type='checkbox'] {\n    display: none;\n  }\n`;\n\nexport default function ScheduleFormFields({\n  hasDaysToKeepField,\n  zoneOptions,\n  zoneLinks,\n}) {\n  const [timezone, timezoneMeta] = useField({\n    name: 'timezone',\n    validate: required(t`Select a value for this field`),\n  });\n  const [frequency, frequencyMeta, frequencyHelper] = useField({\n    name: 'frequency',\n    validate: required(t`Select a value for this field`),\n  });\n  const [timezoneMessage, setTimezoneMessage] = useState('');\n  const warnLinkedTZ = (event, selectedValue) => {\n    if (zoneLinks[selectedValue]) {\n      setTimezoneMessage(\n        t`Warning: ${selectedValue} is a link to ${zoneLinks[selectedValue]} and will be saved as that.`\n      );\n    } else {\n      setTimezoneMessage('');\n    }\n    timezone.onChange(event, selectedValue);\n  };\n  let timezoneValidatedStatus = 'default';\n  if (timezoneMeta.touched && timezoneMeta.error) {\n    timezoneValidatedStatus = 'error';\n  } else if (timezoneMessage) {\n    timezoneValidatedStatus = 'warning';\n  }\n  const config = useConfig();\n\n  // const [exceptionFrequency, exceptionFrequencyMeta, exceptionFrequencyHelper] =\n  //   useField({\n  //     name: 'exceptionFrequency',\n  //     validate: required(t`Select a value for this field`),\n  //   });\n\n  const updateFrequency = (setFrequency) => (values) => {\n    setFrequency(values.sort(sortFrequencies));\n  };\n\n  return (\n    <>\n      <FormField\n        id=\"schedule-name\"\n        label={t`Name`}\n        name=\"name\"\n        type=\"text\"\n        validate={required(null)}\n        isRequired\n      />\n      <FormField\n        id=\"schedule-description\"\n        label={t`Description`}\n        name=\"description\"\n        type=\"text\"\n      />\n      <DateTimePicker\n        dateFieldName=\"startDate\"\n        timeFieldName=\"startTime\"\n        label={t`Start date/time`}\n      />\n      <FormGroup\n        name=\"timezone\"\n        fieldId=\"schedule-timezone\"\n        helperTextInvalid={timezoneMeta.error || timezoneMessage}\n        isRequired\n        validated={timezoneValidatedStatus}\n        label={t`Local time zone`}\n        helperText={timezoneMessage}\n        labelIcon={<Popover content={helpText.localTimeZone(config)} />}\n      >\n        <AnsibleSelect\n          id=\"schedule-timezone\"\n          data={zoneOptions}\n          {...timezone}\n          onChange={warnLinkedTZ}\n        />\n      </FormGroup>\n      <FormGroup\n        name=\"frequency\"\n        fieldId=\"schedule-frequency\"\n        helperTextInvalid={frequencyMeta.error}\n        validated={\n          !frequencyMeta.touched || !frequencyMeta.error ? 'default' : 'error'\n        }\n        label={t`Repeat frequency`}\n      >\n        <FrequencySelect\n          id=\"schedule-frequency\"\n          onChange={updateFrequency(frequencyHelper.setValue)}\n          value={frequency.value}\n          placeholderText={\n            frequency.value.length ? t`Select frequency` : t`None (run once)`\n          }\n          onBlur={frequencyHelper.setTouched}\n        >\n          <SelectClearOption value=\"none\">{t`None (run once)`}</SelectClearOption>\n          <SelectOption value=\"minute\">{t`Minute`}</SelectOption>\n          <SelectOption value=\"hour\">{t`Hour`}</SelectOption>\n          <SelectOption value=\"day\">{t`Day`}</SelectOption>\n          <SelectOption value=\"week\">{t`Week`}</SelectOption>\n          <SelectOption value=\"month\">{t`Month`}</SelectOption>\n          <SelectOption value=\"year\">{t`Year`}</SelectOption>\n        </FrequencySelect>\n      </FormGroup>\n      {hasDaysToKeepField ? (\n        <FormField\n          id=\"schedule-days-to-keep\"\n          label={t`Days of Data to Keep`}\n          name=\"daysToKeep\"\n          type=\"number\"\n          validate={required(null)}\n          isRequired\n        />\n      ) : null}\n      {frequency.value.length ? (\n        <SubFormLayout>\n          <Title size=\"md\" headingLevel=\"h4\">\n            {t`Frequency Details`}\n          </Title>\n          {frequency.value.map((val) => (\n            <FormColumnLayout key={val} stacked>\n              <FrequencyDetailSubform\n                frequency={val}\n                prefix={`frequencyOptions.${val}`}\n              />\n            </FormColumnLayout>\n          ))}\n          {/* <Title size=\"md\" headingLevel=\"h4\">{t`Exceptions`}</Title>\n          <FormGroup\n            name=\"exceptions\"\n            fieldId=\"exception-frequency\"\n            helperTextInvalid={exceptionFrequencyMeta.error}\n            validated={\n              !exceptionFrequencyMeta.touched || !exceptionFrequencyMeta.error\n                ? 'default'\n                : 'error'\n            }\n            label={t`Add exceptions`}\n          >\n            <FrequencySelect\n              variant={SelectVariant.checkbox}\n              onChange={exceptionFrequencyHelper.setValue}\n              value={exceptionFrequency.value}\n              placeholderText={t`None`}\n              onBlur={exceptionFrequencyHelper.setTouched}\n            >\n              <SelectClearOption value=\"none\">{t`None`}</SelectClearOption>\n              <SelectOption value=\"minute\">{t`Minute`}</SelectOption>\n              <SelectOption value=\"hour\">{t`Hour`}</SelectOption>\n              <SelectOption value=\"day\">{t`Day`}</SelectOption>\n              <SelectOption value=\"week\">{t`Week`}</SelectOption>\n              <SelectOption value=\"month\">{t`Month`}</SelectOption>\n              <SelectOption value=\"year\">{t`Year`}</SelectOption>\n            </FrequencySelect>\n          </FormGroup>\n          {exceptionFrequency.value.map((val) => (\n            <FormColumnLayout key={val} stacked>\n              <FrequencyDetailSubform\n                frequency={val}\n                prefix={`exceptionOptions.${val}`}\n              />\n            </FormColumnLayout>\n          ))} */}\n        </SubFormLayout>\n      ) : null}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}