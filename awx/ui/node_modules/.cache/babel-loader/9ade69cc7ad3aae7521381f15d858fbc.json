{"ast":null,"code":"import _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\n * merge-props.js\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport mergeWith from 'lodash/mergeWith';\nimport { css } from '@patternfly/react-styles';\n/**\n * @param {any} props - Props\n */\n\nexport function mergeProps() {\n  for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n    props[_key] = arguments[_key];\n  }\n\n  var firstProps = props[0];\n  var restProps = props.slice(1);\n\n  if (!restProps.length) {\n    return mergeWith({}, firstProps);\n  } // Avoid mutating the first prop collection\n\n\n  return mergeWith.apply(void 0, [mergeWith({}, firstProps)].concat(_toConsumableArray(restProps), [function (a, b, key) {\n    if (key === 'children') {\n      if (a && b) {\n        // compose the two\n        return React.cloneElement(a, {\n          children: b\n        });\n      } // Children have to be merged in reverse order for Reactabular\n      // logic to work.\n\n\n      return Object.assign(Object.assign({}, b), a);\n    }\n\n    if (key === 'className') {\n      // Process class names through classNames to merge properly\n      // as a string.\n      return css(a, b);\n    }\n\n    return undefined;\n  }]));\n}","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/base/merge-props.ts"],"names":[],"mappings":";;AAAA;;;;;AAKG;AACH,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,SAAP,MAAsB,kBAAtB;AACA,SAAS,GAAT,QAAoB,0BAApB;AAEA;;AAEG;;AACH,OAAM,SAAU,UAAV,GAAkC;AAAA,oCAAV,KAAU;AAAV,IAAA,KAAU;AAAA;;AACtC,MAAM,UAAU,GAAG,KAAK,CAAC,CAAD,CAAxB;AACA,MAAM,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAlB;;AAEA,MAAI,CAAC,SAAS,CAAC,MAAf,EAAuB;AACrB,WAAO,SAAS,CAAC,EAAD,EAAK,UAAL,CAAhB;AACD,GANqC,CAQtC;;;AACA,SAAO,SAAS,MAAT,UAAU,SAAS,CAAC,EAAD,EAAK,UAAL,CAAnB,4BAAwC,SAAxC,IAAmD,UAAC,CAAD,EAAS,CAAT,EAAiB,GAAjB,EAA6B;AACrF,QAAI,GAAG,KAAK,UAAZ,EAAwB;AACtB,UAAI,CAAC,IAAI,CAAT,EAAY;AACV;AACA,eAAO,KAAK,CAAC,YAAN,CAAmB,CAAnB,EAAsB;AAC3B,UAAA,QAAQ,EAAE;AADiB,SAAtB,CAAP;AAGD,OANqB,CAQtB;AACA;;;AACA,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,CAAZ,CAAA,EAAkB,CAAlB,CAAA;AACD;;AAED,QAAI,GAAG,KAAK,WAAZ,EAAyB;AACvB;AACA;AACA,aAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAV;AACD;;AAED,WAAO,SAAP;AACD,GArBM,GAAP;AAsBD","sourcesContent":["/**\n * merge-props.js\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport mergeWith from 'lodash/mergeWith';\nimport { css } from '@patternfly/react-styles';\n\n/**\n * @param {any} props - Props\n */\nexport function mergeProps(...props: any) {\n  const firstProps = props[0];\n  const restProps = props.slice(1);\n\n  if (!restProps.length) {\n    return mergeWith({}, firstProps);\n  }\n\n  // Avoid mutating the first prop collection\n  return mergeWith(mergeWith({}, firstProps), ...restProps, (a: any, b: any, key: any) => {\n    if (key === 'children') {\n      if (a && b) {\n        // compose the two\n        return React.cloneElement(a, {\n          children: b\n        });\n      }\n\n      // Children have to be merged in reverse order for Reactabular\n      // logic to work.\n      return { ...b, ...a };\n    }\n\n    if (key === 'className') {\n      // Process class names through classNames to merge properly\n      // as a string.\n      return css(a, b);\n    }\n\n    return undefined;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}