{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownItem, DropdownDirection, DropdownWithContext, DropdownContext } from '../Dropdown';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport { OptionsToggle } from './OptionsToggle';\nimport { ToggleTemplate } from './ToggleTemplate';\nexport var PaginationOptionsMenu = /*#__PURE__*/function (_React$Component) {\n  _inherits(PaginationOptionsMenu, _React$Component);\n\n  var _super = _createSuper(PaginationOptionsMenu);\n\n  function PaginationOptionsMenu(props) {\n    var _this;\n\n    _classCallCheck(this, PaginationOptionsMenu);\n\n    _this = _super.call(this, props);\n    _this.parentRef = React.createRef();\n\n    _this.onToggle = function (isOpen) {\n      _this.setState({\n        isOpen: isOpen\n      });\n    };\n\n    _this.onSelect = function () {\n      _this.setState(function (prevState) {\n        return {\n          isOpen: !prevState.isOpen\n        };\n      });\n    };\n\n    _this.handleNewPerPage = function (_evt, newPerPage) {\n      var _this$props = _this.props,\n          page = _this$props.page,\n          onPerPageSelect = _this$props.onPerPageSelect,\n          itemCount = _this$props.itemCount,\n          defaultToFullPage = _this$props.defaultToFullPage;\n      var newPage = page;\n\n      while (Math.ceil(itemCount / newPerPage) < newPage) {\n        newPage--;\n      }\n\n      if (defaultToFullPage) {\n        if (itemCount / newPerPage !== newPage) {\n          while (newPage > 1 && itemCount - newPerPage * newPage < 0) {\n            newPage--;\n          }\n        }\n      }\n\n      var startIdx = (newPage - 1) * newPerPage;\n      var endIdx = newPage * newPerPage;\n      return onPerPageSelect(_evt, newPerPage, newPage, startIdx, endIdx);\n    };\n\n    _this.renderItems = function () {\n      var _this$props2 = _this.props,\n          perPageOptions = _this$props2.perPageOptions,\n          perPage = _this$props2.perPage,\n          perPageSuffix = _this$props2.perPageSuffix;\n      return perPageOptions.map(function (_ref) {\n        var value = _ref.value,\n            title = _ref.title;\n        return React.createElement(DropdownItem, {\n          key: value,\n          component: \"button\",\n          \"data-action\": \"per-page-\".concat(value),\n          className: css(perPage === value && 'pf-m-selected'),\n          onClick: function onClick(event) {\n            return _this.handleNewPerPage(event, value);\n          }\n        }, title, \" \".concat(perPageSuffix), perPage === value && React.createElement(\"div\", {\n          className: css(styles.optionsMenuMenuItemIcon)\n        }, React.createElement(CheckIcon, null)));\n      });\n    };\n\n    _this.state = {\n      isOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(PaginationOptionsMenu, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          widgetId = _this$props3.widgetId,\n          isDisabled = _this$props3.isDisabled,\n          itemsPerPageTitle = _this$props3.itemsPerPageTitle,\n          dropDirection = _this$props3.dropDirection,\n          optionsToggle = _this$props3.optionsToggle,\n          perPageOptions = _this$props3.perPageOptions,\n          toggleTemplate = _this$props3.toggleTemplate,\n          firstIndex = _this$props3.firstIndex,\n          lastIndex = _this$props3.lastIndex,\n          itemCount = _this$props3.itemCount,\n          itemsTitle = _this$props3.itemsTitle,\n          ofWord = _this$props3.ofWord,\n          perPageComponent = _this$props3.perPageComponent;\n      var isOpen = this.state.isOpen;\n      return React.createElement(DropdownContext.Provider, {\n        value: {\n          id: widgetId,\n          onSelect: this.onSelect,\n          toggleIndicatorClass: perPageComponent === 'div' ? styles.optionsMenuToggleButtonIcon : styles.optionsMenuToggleIcon,\n          toggleTextClass: styles.optionsMenuToggleText,\n          menuClass: styles.optionsMenuMenu,\n          itemClass: styles.optionsMenuMenuItem,\n          toggleClass: ' ',\n          baseClass: styles.optionsMenu,\n          disabledClass: styles.modifiers.disabled,\n          menuComponent: 'ul',\n          baseComponent: 'div',\n          ouiaComponentType: PaginationOptionsMenu.displayName\n        }\n      }, React.createElement(DropdownWithContext, {\n        direction: dropDirection,\n        isOpen: isOpen,\n        toggle: React.createElement(OptionsToggle, {\n          optionsToggle: optionsToggle,\n          itemsPerPageTitle: itemsPerPageTitle,\n          showToggle: perPageOptions && perPageOptions.length > 0,\n          onToggle: this.onToggle,\n          isOpen: isOpen,\n          widgetId: widgetId,\n          firstIndex: firstIndex,\n          lastIndex: lastIndex,\n          itemCount: itemCount,\n          itemsTitle: itemsTitle,\n          ofWord: ofWord,\n          toggleTemplate: toggleTemplate,\n          parentRef: this.parentRef.current,\n          isDisabled: isDisabled,\n          perPageComponent: perPageComponent\n        }),\n        dropdownItems: this.renderItems(),\n        isPlain: true\n      }));\n    }\n  }]);\n\n  return PaginationOptionsMenu;\n}(React.Component);\nPaginationOptionsMenu.displayName = 'PaginationOptionsMenu';\nPaginationOptionsMenu.defaultProps = {\n  className: '',\n  widgetId: '',\n  isDisabled: false,\n  dropDirection: DropdownDirection.down,\n  perPageOptions: [],\n  itemsPerPageTitle: 'Items per page',\n  perPageSuffix: 'per page',\n  optionsToggle: '',\n  ofWord: 'of',\n  perPage: 0,\n  firstIndex: 0,\n  lastIndex: 0,\n  defaultToFullPage: false,\n  itemsTitle: 'items',\n  toggleTemplate: ToggleTemplate,\n  onPerPageSelect: function onPerPageSelect() {\n    return null;\n  },\n  perPageComponent: 'div'\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Pagination/PaginationOptionsMenu.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownItem, DropdownDirection, DropdownWithContext, DropdownContext } from '../Dropdown';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport { OptionsToggle } from './OptionsToggle';\nimport { ToggleTemplateProps, ToggleTemplate } from './ToggleTemplate';\nimport { PerPageOptions, OnPerPageSelect } from './Pagination';\n\nexport interface PaginationOptionsMenuProps extends React.HTMLProps<HTMLDivElement> {\n  /** Custom class name added to the pagination options menu */\n  className?: string;\n  /** Id added to the title of the Pagination options menu */\n  widgetId?: string;\n  /** Flag indicating if pagination options menu is disabled */\n  isDisabled?: boolean;\n  /** Menu will open up or open down from the options menu toggle */\n  dropDirection?: 'up' | 'down';\n  /** Array of titles and values which will be the options on the options menu dropdown */\n  perPageOptions?: PerPageOptions[];\n  /** The title of the pagination options menu */\n  itemsPerPageTitle?: string;\n  /** Current page number */\n  page?: number;\n  /** The suffix to be displayed after each option on the options menu dropdown */\n  perPageSuffix?: string;\n  /** The type or title of the items being paginated */\n  itemsTitle?: string;\n  /** Accessible label for the options toggle */\n  optionsToggle?: string;\n  /** The total number of items being paginated */\n  itemCount?: number;\n  /** The first index of the items being paginated */\n  firstIndex?: number;\n  /** The last index of the items being paginated */\n  lastIndex?: number;\n  /** Flag to show last full page of results if perPage selected > remaining rows */\n  defaultToFullPage?: boolean;\n  /** The number of items to be displayed per page */\n  perPage?: number;\n  /** The number of the last page */\n  lastPage?: number;\n  /** This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */\n  toggleTemplate: ((props: ToggleTemplateProps) => React.ReactElement) | string;\n  /** Function called when user selects number of items per page. */\n  onPerPageSelect?: OnPerPageSelect;\n  /** Label for the English word \"of\" */\n  ofWord?: string;\n  /** Component to be used for wrapping the toggle contents. Use 'button' when you want\n   * all of the toggle text to be clickable.\n   */\n  perPageComponent?: 'div' | 'button';\n}\n\ninterface PaginationOptionsMenuState {\n  isOpen: boolean;\n}\n\nexport class PaginationOptionsMenu extends React.Component<PaginationOptionsMenuProps, PaginationOptionsMenuState> {\n  static displayName = 'PaginationOptionsMenu';\n  private parentRef = React.createRef<HTMLDivElement>();\n  static defaultProps: PaginationOptionsMenuProps = {\n    className: '',\n    widgetId: '',\n    isDisabled: false,\n    dropDirection: DropdownDirection.down,\n    perPageOptions: [] as PerPageOptions[],\n    itemsPerPageTitle: 'Items per page',\n    perPageSuffix: 'per page',\n    optionsToggle: '',\n    ofWord: 'of',\n    perPage: 0,\n    firstIndex: 0,\n    lastIndex: 0,\n    defaultToFullPage: false,\n    itemsTitle: 'items',\n    toggleTemplate: ToggleTemplate,\n    onPerPageSelect: () => null as any,\n    perPageComponent: 'div'\n  };\n\n  constructor(props: PaginationOptionsMenuProps) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  onToggle = (isOpen: boolean) => {\n    this.setState({ isOpen });\n  };\n\n  onSelect = () => {\n    this.setState((prevState: PaginationOptionsMenuState) => ({ isOpen: !prevState.isOpen }));\n  };\n\n  handleNewPerPage = (_evt: React.MouseEvent | React.KeyboardEvent | MouseEvent, newPerPage: number) => {\n    const { page, onPerPageSelect, itemCount, defaultToFullPage } = this.props;\n    let newPage = page;\n\n    while (Math.ceil(itemCount / newPerPage) < newPage) {\n      newPage--;\n    }\n\n    if (defaultToFullPage) {\n      if (itemCount / newPerPage !== newPage) {\n        while (newPage > 1 && itemCount - newPerPage * newPage < 0) {\n          newPage--;\n        }\n      }\n    }\n    const startIdx = (newPage - 1) * newPerPage;\n    const endIdx = newPage * newPerPage;\n    return onPerPageSelect(_evt, newPerPage, newPage, startIdx, endIdx);\n  };\n\n  renderItems = () => {\n    const { perPageOptions, perPage, perPageSuffix } = this.props;\n\n    return perPageOptions.map(({ value, title }) => (\n      <DropdownItem\n        key={value}\n        component=\"button\"\n        data-action={`per-page-${value}`}\n        className={css(perPage === value && 'pf-m-selected')}\n        onClick={event => this.handleNewPerPage(event, value)}\n      >\n        {title}\n        {` ${perPageSuffix}`}\n        {perPage === value && (\n          <div className={css(styles.optionsMenuMenuItemIcon)}>\n            <CheckIcon />\n          </div>\n        )}\n      </DropdownItem>\n    ));\n  };\n\n  render() {\n    const {\n      widgetId,\n      isDisabled,\n      itemsPerPageTitle,\n      dropDirection,\n      optionsToggle,\n      perPageOptions,\n      toggleTemplate,\n      firstIndex,\n      lastIndex,\n      itemCount,\n      itemsTitle,\n      ofWord,\n      perPageComponent\n    } = this.props;\n    const { isOpen } = this.state;\n\n    return (\n      <DropdownContext.Provider\n        value={{\n          id: widgetId,\n          onSelect: this.onSelect,\n          toggleIndicatorClass:\n            perPageComponent === 'div' ? styles.optionsMenuToggleButtonIcon : styles.optionsMenuToggleIcon,\n          toggleTextClass: styles.optionsMenuToggleText,\n          menuClass: styles.optionsMenuMenu,\n          itemClass: styles.optionsMenuMenuItem,\n          toggleClass: ' ',\n          baseClass: styles.optionsMenu,\n          disabledClass: styles.modifiers.disabled,\n          menuComponent: 'ul',\n          baseComponent: 'div',\n          ouiaComponentType: PaginationOptionsMenu.displayName\n        }}\n      >\n        <DropdownWithContext\n          direction={dropDirection}\n          isOpen={isOpen}\n          toggle={\n            <OptionsToggle\n              optionsToggle={optionsToggle}\n              itemsPerPageTitle={itemsPerPageTitle}\n              showToggle={perPageOptions && perPageOptions.length > 0}\n              onToggle={this.onToggle}\n              isOpen={isOpen}\n              widgetId={widgetId}\n              firstIndex={firstIndex}\n              lastIndex={lastIndex}\n              itemCount={itemCount}\n              itemsTitle={itemsTitle}\n              ofWord={ofWord}\n              toggleTemplate={toggleTemplate}\n              parentRef={this.parentRef.current}\n              isDisabled={isDisabled}\n              perPageComponent={perPageComponent}\n            />\n          }\n          dropdownItems={this.renderItems()}\n          isPlain\n        />\n      </DropdownContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}