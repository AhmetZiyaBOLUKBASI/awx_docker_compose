{"ast":null,"code":"import _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { PopoverPosition } from '../Popover';\nimport { TextInput } from '../TextInput';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { ClipboardCopyButton } from './ClipboardCopyButton';\nimport { ClipboardCopyToggle } from './ClipboardCopyToggle';\nimport { ClipboardCopyExpanded } from './ClipboardCopyExpanded';\nexport var clipboardCopyFunc = function clipboardCopyFunc(event, text) {\n  var clipboard = event.currentTarget.parentElement;\n  var el = document.createElement('textarea');\n  el.value = text.toString();\n  clipboard.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  clipboard.removeChild(el);\n};\nexport var ClipboardCopyVariant;\n\n(function (ClipboardCopyVariant) {\n  ClipboardCopyVariant[\"inline\"] = \"inline\";\n  ClipboardCopyVariant[\"expansion\"] = \"expansion\";\n  ClipboardCopyVariant[\"inlineCompact\"] = \"inline-compact\";\n})(ClipboardCopyVariant || (ClipboardCopyVariant = {}));\n\nexport var ClipboardCopy = /*#__PURE__*/function (_React$Component) {\n  _inherits(ClipboardCopy, _React$Component);\n\n  var _super = _createSuper(ClipboardCopy);\n\n  function ClipboardCopy(props) {\n    var _this;\n\n    _classCallCheck(this, ClipboardCopy);\n\n    _this = _super.call(this, props);\n    _this.timer = null; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    _this.componentDidUpdate = function (prevProps, prevState) {\n      if (prevProps.children !== _this.props.children) {\n        _this.updateText(_this.props.children);\n      }\n    };\n\n    _this.componentWillUnmount = function () {\n      if (_this.timer) {\n        window.clearTimeout(_this.timer);\n      }\n    }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    _this.expandContent = function (_event) {\n      _this.setState(function (prevState) {\n        return {\n          expanded: !prevState.expanded\n        };\n      });\n    };\n\n    _this.updateText = function (text) {\n      _this.setState({\n        text: text\n      });\n\n      _this.props.onChange(text);\n    };\n\n    _this.render = function () {\n      var _a = _this.props,\n          isExpanded = _a.isExpanded,\n          onChange = _a.onChange,\n          isReadOnly = _a.isReadOnly,\n          isCode = _a.isCode,\n          isBlock = _a.isBlock,\n          exitDelay = _a.exitDelay,\n          maxWidth = _a.maxWidth,\n          entryDelay = _a.entryDelay,\n          switchDelay = _a.switchDelay,\n          onCopy = _a.onCopy,\n          hoverTip = _a.hoverTip,\n          clickTip = _a.clickTip,\n          textAriaLabel = _a.textAriaLabel,\n          toggleAriaLabel = _a.toggleAriaLabel,\n          variant = _a.variant,\n          position = _a.position,\n          className = _a.className,\n          additionalActions = _a.additionalActions,\n          divProps = __rest(_a, [\"isExpanded\", \"onChange\", \"isReadOnly\", \"isCode\", \"isBlock\", \"exitDelay\", \"maxWidth\", \"entryDelay\", \"switchDelay\", \"onCopy\", \"hoverTip\", \"clickTip\", \"textAriaLabel\", \"toggleAriaLabel\", \"variant\", \"position\", \"className\", \"additionalActions\"]);\n\n      var textIdPrefix = 'text-input-';\n      var toggleIdPrefix = 'toggle-';\n      var contentIdPrefix = 'content-';\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.clipboardCopy, variant === 'inline-compact' && styles.modifiers.inline, isBlock && styles.modifiers.block, _this.state.expanded && styles.modifiers.expanded, className)\n      }, divProps), variant === 'inline-compact' && React.createElement(GenerateId, {\n        prefix: \"\"\n      }, function (id) {\n        return React.createElement(React.Fragment, null, !isCode && React.createElement(\"span\", {\n          className: css(styles.clipboardCopyText),\n          id: \"\".concat(textIdPrefix).concat(id)\n        }, _this.state.text), isCode && React.createElement(\"code\", {\n          className: css(styles.clipboardCopyText, styles.modifiers.code),\n          id: \"\".concat(textIdPrefix).concat(id)\n        }, _this.state.text), React.createElement(\"span\", {\n          className: css(styles.clipboardCopyActions)\n        }, React.createElement(\"span\", {\n          className: css(styles.clipboardCopyActionsItem)\n        }, React.createElement(ClipboardCopyButton, {\n          variant: \"plain\",\n          exitDelay: exitDelay,\n          entryDelay: entryDelay,\n          maxWidth: maxWidth,\n          position: position,\n          id: \"copy-button-\".concat(id),\n          textId: \"text-input-\".concat(id),\n          \"aria-label\": hoverTip,\n          onClick: function onClick(event) {\n            if (_this.timer) {\n              window.clearTimeout(_this.timer);\n\n              _this.setState({\n                copied: false\n              });\n            }\n\n            onCopy(event, _this.state.text);\n\n            _this.setState({\n              copied: true\n            }, function () {\n              _this.timer = window.setTimeout(function () {\n                _this.setState({\n                  copied: false\n                });\n\n                _this.timer = null;\n              }, switchDelay);\n            });\n          }\n        }, _this.state.copied ? clickTip : hoverTip)), additionalActions && additionalActions));\n      }), variant !== 'inline-compact' && React.createElement(GenerateId, {\n        prefix: \"\"\n      }, function (id) {\n        return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n          className: css(styles.clipboardCopyGroup)\n        }, variant === 'expansion' && React.createElement(ClipboardCopyToggle, {\n          isExpanded: _this.state.expanded,\n          onClick: _this.expandContent,\n          id: \"\".concat(toggleIdPrefix).concat(id),\n          textId: \"\".concat(textIdPrefix).concat(id),\n          contentId: \"\".concat(contentIdPrefix).concat(id),\n          \"aria-label\": toggleAriaLabel\n        }), React.createElement(TextInput, {\n          isReadOnly: isReadOnly || _this.state.expanded,\n          onChange: _this.updateText,\n          value: _this.state.text,\n          id: \"text-input-\".concat(id),\n          \"aria-label\": textAriaLabel\n        }), React.createElement(ClipboardCopyButton, {\n          exitDelay: exitDelay,\n          entryDelay: entryDelay,\n          maxWidth: maxWidth,\n          position: position,\n          id: \"copy-button-\".concat(id),\n          textId: \"text-input-\".concat(id),\n          \"aria-label\": hoverTip,\n          onClick: function onClick(event) {\n            if (_this.timer) {\n              window.clearTimeout(_this.timer);\n\n              _this.setState({\n                copied: false\n              });\n            }\n\n            onCopy(event, _this.state.text);\n\n            _this.setState({\n              copied: true\n            }, function () {\n              _this.timer = window.setTimeout(function () {\n                _this.setState({\n                  copied: false\n                });\n\n                _this.timer = null;\n              }, switchDelay);\n            });\n          }\n        }, _this.state.copied ? clickTip : hoverTip)), _this.state.expanded && React.createElement(ClipboardCopyExpanded, {\n          isReadOnly: isReadOnly,\n          isCode: isCode,\n          id: \"content-\".concat(id),\n          onChange: _this.updateText\n        }, _this.state.text));\n      }));\n    };\n\n    _this.state = {\n      text: Array.isArray(_this.props.children) ? _this.props.children.join('') : _this.props.children,\n      expanded: _this.props.isExpanded,\n      copied: false\n    };\n    return _this;\n  }\n\n  return _createClass(ClipboardCopy);\n}(React.Component);\nClipboardCopy.displayName = 'ClipboardCopy';\nClipboardCopy.defaultProps = {\n  hoverTip: 'Copy to clipboard',\n  clickTip: 'Successfully copied to clipboard!',\n  isReadOnly: false,\n  isExpanded: false,\n  isCode: false,\n  variant: 'inline',\n  position: PopoverPosition.top,\n  maxWidth: '150px',\n  exitDelay: 1600,\n  entryDelay: 300,\n  switchDelay: 2000,\n  onCopy: clipboardCopyFunc,\n  onChange: function onChange() {\n    return undefined;\n  },\n  textAriaLabel: 'Copyable input',\n  toggleAriaLabel: 'Show content',\n  additionalActions: null\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/ClipboardCopy/ClipboardCopy.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { PopoverPosition } from '../Popover';\nimport { TooltipPosition } from '../Tooltip';\nimport { TextInput } from '../TextInput';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { ClipboardCopyButton } from './ClipboardCopyButton';\nimport { ClipboardCopyToggle } from './ClipboardCopyToggle';\nimport { ClipboardCopyExpanded } from './ClipboardCopyExpanded';\n\nexport const clipboardCopyFunc = (event: React.ClipboardEvent<HTMLDivElement>, text?: React.ReactNode) => {\n  const clipboard = event.currentTarget.parentElement;\n  const el = document.createElement('textarea');\n  el.value = text.toString();\n  clipboard.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  clipboard.removeChild(el);\n};\n\nexport enum ClipboardCopyVariant {\n  inline = 'inline',\n  expansion = 'expansion',\n  inlineCompact = 'inline-compact'\n}\n\nexport interface ClipboardCopyState {\n  text: string | number;\n  expanded: boolean;\n  copied: boolean;\n}\n\nexport interface ClipboardCopyProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Additional classes added to the clipboard copy container. */\n  className?: string;\n  /** Tooltip message to display when hover the copy button */\n  hoverTip?: string;\n  /** Tooltip message to display when clicking the copy button */\n  clickTip?: string;\n  /** Aria-label to use on the TextInput. */\n  textAriaLabel?: string;\n  /** Aria-label to use on the ClipboardCopyToggle. */\n  toggleAriaLabel?: string;\n  /** Flag to show if the input is read only. */\n  isReadOnly?: boolean;\n  /** Flag to determine if clipboard copy is in the expanded state initially */\n  isExpanded?: boolean;\n  /** Flag to determine if clipboard copy content includes code */\n  isCode?: boolean;\n  /** Flag to determine if inline clipboard copy should be block styling */\n  isBlock?: boolean;\n  /** Adds Clipboard Copy variant styles. */\n  variant?: typeof ClipboardCopyVariant | 'inline' | 'expansion' | 'inline-compact';\n  /** Copy button popover position. */\n  position?:\n    | PopoverPosition\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** Maximum width of the tooltip (default 150px). */\n  maxWidth?: string;\n  /** Delay in ms before the tooltip disappears. */\n  exitDelay?: number;\n  /** Delay in ms before the tooltip appears. */\n  entryDelay?: number;\n  /** Delay in ms before the tooltip message switch to hover tip. */\n  switchDelay?: number;\n  /** A function that is triggered on clicking the copy button. */\n  onCopy?: (event: React.ClipboardEvent<HTMLDivElement>, text?: React.ReactNode) => void;\n  /** A function that is triggered on changing the text. */\n  onChange?: (text?: string | number) => void;\n  /** The text which is copied. */\n  children: React.ReactNode;\n  /** Additional actions for inline clipboard copy. Should be wrapped with ClipboardCopyAction. */\n  additionalActions?: React.ReactNode;\n}\n\nexport class ClipboardCopy extends React.Component<ClipboardCopyProps, ClipboardCopyState> {\n  static displayName = 'ClipboardCopy';\n  timer = null as number;\n  constructor(props: ClipboardCopyProps) {\n    super(props);\n    this.state = {\n      text: Array.isArray(this.props.children)\n        ? this.props.children.join('')\n        : (this.props.children as string | number),\n      expanded: this.props.isExpanded,\n      copied: false\n    };\n  }\n\n  static defaultProps: PickOptional<ClipboardCopyProps> = {\n    hoverTip: 'Copy to clipboard',\n    clickTip: 'Successfully copied to clipboard!',\n    isReadOnly: false,\n    isExpanded: false,\n    isCode: false,\n    variant: 'inline',\n    position: PopoverPosition.top,\n    maxWidth: '150px',\n    exitDelay: 1600,\n    entryDelay: 300,\n    switchDelay: 2000,\n    onCopy: clipboardCopyFunc,\n    onChange: (): any => undefined,\n    textAriaLabel: 'Copyable input',\n    toggleAriaLabel: 'Show content',\n    additionalActions: null\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  componentDidUpdate = (prevProps: ClipboardCopyProps, prevState: ClipboardCopyState) => {\n    if (prevProps.children !== this.props.children) {\n      this.updateText(this.props.children as string | number);\n    }\n  };\n\n  componentWillUnmount = () => {\n    if (this.timer) {\n      window.clearTimeout(this.timer);\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  expandContent = (_event: React.MouseEvent<Element, MouseEvent>) => {\n    this.setState(prevState => ({\n      expanded: !prevState.expanded\n    }));\n  };\n\n  updateText = (text: string | number) => {\n    this.setState({ text });\n    this.props.onChange(text);\n  };\n\n  render = () => {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isExpanded,\n      onChange, // Don't pass to <div>\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      isReadOnly,\n      isCode,\n      isBlock,\n      exitDelay,\n      maxWidth,\n      entryDelay,\n      switchDelay,\n      onCopy,\n      hoverTip,\n      clickTip,\n      textAriaLabel,\n      toggleAriaLabel,\n      variant,\n      position,\n      className,\n      additionalActions,\n      ...divProps\n    } = this.props;\n    const textIdPrefix = 'text-input-';\n    const toggleIdPrefix = 'toggle-';\n    const contentIdPrefix = 'content-';\n    return (\n      <div\n        className={css(\n          styles.clipboardCopy,\n          variant === 'inline-compact' && styles.modifiers.inline,\n          isBlock && styles.modifiers.block,\n          this.state.expanded && styles.modifiers.expanded,\n          className\n        )}\n        {...divProps}\n      >\n        {variant === 'inline-compact' && (\n          <GenerateId prefix=\"\">\n            {id => (\n              <React.Fragment>\n                {!isCode && (\n                  <span className={css(styles.clipboardCopyText)} id={`${textIdPrefix}${id}`}>\n                    {this.state.text}\n                  </span>\n                )}\n                {isCode && (\n                  <code className={css(styles.clipboardCopyText, styles.modifiers.code)} id={`${textIdPrefix}${id}`}>\n                    {this.state.text}\n                  </code>\n                )}\n                <span className={css(styles.clipboardCopyActions)}>\n                  <span className={css(styles.clipboardCopyActionsItem)}>\n                    <ClipboardCopyButton\n                      variant=\"plain\"\n                      exitDelay={exitDelay}\n                      entryDelay={entryDelay}\n                      maxWidth={maxWidth}\n                      position={position}\n                      id={`copy-button-${id}`}\n                      textId={`text-input-${id}`}\n                      aria-label={hoverTip}\n                      onClick={(event: any) => {\n                        if (this.timer) {\n                          window.clearTimeout(this.timer);\n                          this.setState({ copied: false });\n                        }\n                        onCopy(event, this.state.text);\n                        this.setState({ copied: true }, () => {\n                          this.timer = window.setTimeout(() => {\n                            this.setState({ copied: false });\n                            this.timer = null;\n                          }, switchDelay);\n                        });\n                      }}\n                    >\n                      {this.state.copied ? clickTip : hoverTip}\n                    </ClipboardCopyButton>\n                  </span>\n                  {additionalActions && additionalActions}\n                </span>\n              </React.Fragment>\n            )}\n          </GenerateId>\n        )}\n        {variant !== 'inline-compact' && (\n          <GenerateId prefix=\"\">\n            {id => (\n              <React.Fragment>\n                <div className={css(styles.clipboardCopyGroup)}>\n                  {variant === 'expansion' && (\n                    <ClipboardCopyToggle\n                      isExpanded={this.state.expanded}\n                      onClick={this.expandContent}\n                      id={`${toggleIdPrefix}${id}`}\n                      textId={`${textIdPrefix}${id}`}\n                      contentId={`${contentIdPrefix}${id}`}\n                      aria-label={toggleAriaLabel}\n                    />\n                  )}\n                  <TextInput\n                    isReadOnly={isReadOnly || this.state.expanded}\n                    onChange={this.updateText}\n                    value={this.state.text as string | number}\n                    id={`text-input-${id}`}\n                    aria-label={textAriaLabel}\n                  />\n                  <ClipboardCopyButton\n                    exitDelay={exitDelay}\n                    entryDelay={entryDelay}\n                    maxWidth={maxWidth}\n                    position={position}\n                    id={`copy-button-${id}`}\n                    textId={`text-input-${id}`}\n                    aria-label={hoverTip}\n                    onClick={(event: any) => {\n                      if (this.timer) {\n                        window.clearTimeout(this.timer);\n                        this.setState({ copied: false });\n                      }\n                      onCopy(event, this.state.text);\n                      this.setState({ copied: true }, () => {\n                        this.timer = window.setTimeout(() => {\n                          this.setState({ copied: false });\n                          this.timer = null;\n                        }, switchDelay);\n                      });\n                    }}\n                  >\n                    {this.state.copied ? clickTip : hoverTip}\n                  </ClipboardCopyButton>\n                </div>\n                {this.state.expanded && (\n                  <ClipboardCopyExpanded\n                    isReadOnly={isReadOnly}\n                    isCode={isCode}\n                    id={`content-${id}`}\n                    onChange={this.updateText}\n                  >\n                    {this.state.text}\n                  </ClipboardCopyExpanded>\n                )}\n              </React.Fragment>\n            )}\n          </GenerateId>\n        )}\n      </div>\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}