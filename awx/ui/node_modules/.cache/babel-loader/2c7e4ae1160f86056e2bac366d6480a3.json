{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nexport var MultipleFileUploadContext = React.createContext({\n  open: function open() {}\n});\nexport var MultipleFileUpload = function MultipleFileUpload(_a) {\n  var className = _a.className,\n      children = _a.children,\n      _a$dropzoneProps = _a.dropzoneProps,\n      dropzoneProps = _a$dropzoneProps === void 0 ? {} : _a$dropzoneProps,\n      isHorizontal = _a.isHorizontal,\n      _a$onFileDrop = _a.onFileDrop,\n      onFileDrop = _a$onFileDrop === void 0 ? function () {} : _a$onFileDrop,\n      props = __rest(_a, [\"className\", \"children\", \"dropzoneProps\", \"isHorizontal\", \"onFileDrop\"]);\n\n  var onDropAccepted = function onDropAccepted(acceptedFiles, event) {\n    onFileDrop(acceptedFiles); // allow users to set a custom drop accepted handler rather than using on data change\n\n    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n  };\n\n  var onDropRejected = function onDropRejected(rejectedFiles, event) {\n    dropzoneProps.onDropRejected && (dropzoneProps === null || dropzoneProps === void 0 ? void 0 : dropzoneProps.onDropRejected(rejectedFiles, event));\n  };\n\n  return React.createElement(Dropzone, Object.assign({\n    multiple: true\n  }, dropzoneProps, {\n    onDropAccepted: onDropAccepted,\n    onDropRejected: onDropRejected\n  }), function (_ref) {\n    var getRootProps = _ref.getRootProps,\n        getInputProps = _ref.getInputProps,\n        isDragActive = _ref.isDragActive,\n        open = _ref.open;\n    var rootProps = getRootProps(Object.assign(Object.assign({}, props), {\n      onClick: function onClick(event) {\n        return event.preventDefault();\n      } // Prevents clicking TextArea from opening file dialog\n\n    }));\n    var inputProps = getInputProps();\n    return React.createElement(MultipleFileUploadContext.Provider, {\n      value: {\n        open: open\n      }\n    }, React.createElement(\"div\", Object.assign({\n      className: css(styles.multipleFileUpload, isDragActive && styles.modifiers.dragOver, isHorizontal && styles.modifiers.horizontal, className)\n    }, rootProps, props), React.createElement(\"input\", Object.assign({}, inputProps)), children));\n  });\n};\nMultipleFileUpload.displayName = 'MultipleFileUpload';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/MultipleFileUpload/MultipleFileUpload.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Dropzone, { DropzoneProps, DropFileEventHandler } from 'react-dropzone';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\n\nexport interface MultipleFileUploadProps extends Omit<React.HTMLProps<HTMLDivElement>, 'value'> {\n  /** Content rendered inside the multi upload field */\n  children?: React.ReactNode;\n  /** Class to add to outer div */\n  className?: string;\n  /** Optional extra props to customize react-dropzone. */\n  dropzoneProps?: DropzoneProps;\n  /** Flag setting the component to horizontal styling mode */\n  isHorizontal?: boolean;\n  /** When files are dropped or uploaded this callback will be called with all accepted files */\n  onFileDrop?: (data: File[]) => void;\n}\n\nexport const MultipleFileUploadContext = React.createContext({\n  open: () => {}\n});\n\nexport const MultipleFileUpload: React.FunctionComponent<MultipleFileUploadProps> = ({\n  className,\n  children,\n  dropzoneProps = {},\n  isHorizontal,\n  onFileDrop = () => {},\n  ...props\n}: MultipleFileUploadProps) => {\n  const onDropAccepted: DropFileEventHandler = (acceptedFiles: File[], event) => {\n    onFileDrop(acceptedFiles);\n    // allow users to set a custom drop accepted handler rather than using on data change\n    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n  };\n\n  const onDropRejected: DropFileEventHandler = (rejectedFiles, event) => {\n    dropzoneProps.onDropRejected && dropzoneProps?.onDropRejected(rejectedFiles, event);\n  };\n\n  return (\n    <Dropzone multiple={true} {...dropzoneProps} onDropAccepted={onDropAccepted} onDropRejected={onDropRejected}>\n      {({ getRootProps, getInputProps, isDragActive, open }) => {\n        const rootProps = getRootProps({\n          ...props,\n          onClick: event => event.preventDefault() // Prevents clicking TextArea from opening file dialog\n        });\n        const inputProps = getInputProps();\n\n        return (\n          <MultipleFileUploadContext.Provider value={{ open }}>\n            <div\n              className={css(\n                styles.multipleFileUpload,\n                isDragActive && styles.modifiers.dragOver,\n                isHorizontal && styles.modifiers.horizontal,\n                className\n              )}\n              {...rootProps}\n              {...props}\n            >\n              <input\n                /* hidden, necessary for react-dropzone */\n                {...inputProps}\n              />\n              {children}\n            </div>\n          </MultipleFileUploadContext.Provider>\n        );\n      }}\n    </Dropzone>\n  );\n};\n\nMultipleFileUpload.displayName = 'MultipleFileUpload';\n"]},"metadata":{},"sourceType":"module"}