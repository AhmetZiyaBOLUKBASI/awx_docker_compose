{"ast":null,"code":"import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useCallback}from'react';/**\n * useSelected hook provides a way to read and update a selected list\n * Param: array of list items\n * Returns: {\n *  selected: array of selected list items\n *  isAllSelected: boolean that indicates if all items are selected\n *  handleSelect: function that adds and removes items from selected list\n *  setSelected: setter function\n *  clearSelected: de-select all items\n * }\n */export default function useSelected(){var list=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var _useState=useState([]),_useState2=_slicedToArray(_useState,2),selected=_useState2[0],setSelected=_useState2[1];var isAllSelected=selected.length>0&&selected.length===list.length;var handleSelect=function handleSelect(row){if(!row.id){throw new Error(\"Selected row does not have an id\");}if(selected.some(function(s){return s.id===row.id;})){setSelected(function(prevState){return _toConsumableArray(prevState.filter(function(i){return i.id!==row.id;}));});}else{setSelected(function(prevState){return[].concat(_toConsumableArray(prevState),[row]);});}};var selectAll=useCallback(function(isSelected){setSelected(isSelected?_toConsumableArray(list):[]);},[list]);var clearSelected=useCallback(function(){setSelected([]);},[]);return{selected:selected,isAllSelected:isAllSelected,handleSelect:handleSelect,setSelected:setSelected,selectAll:selectAll,clearSelected:clearSelected};}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/hooks/useSelected.js"],"names":["useState","useCallback","useSelected","list","selected","setSelected","isAllSelected","length","handleSelect","row","id","Error","some","s","prevState","filter","i","selectAll","isSelected","clearSelected"],"mappings":"sNAAA,OAASA,QAAT,CAAmBC,WAAnB,KAAsC,OAAtC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,cAAe,SAASC,CAAAA,WAAT,EAAgC,IAAXC,CAAAA,IAAW,2DAAJ,EAAI,CAC7C,cAAgCH,QAAQ,CAAC,EAAD,CAAxC,wCAAOI,QAAP,eAAiBC,WAAjB,eACA,GAAMC,CAAAA,aAAa,CAAGF,QAAQ,CAACG,MAAT,CAAkB,CAAlB,EAAuBH,QAAQ,CAACG,MAAT,GAAoBJ,IAAI,CAACI,MAAtE,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,GAAD,CAAS,CAC5B,GAAI,CAACA,GAAG,CAACC,EAAT,CAAa,CACX,KAAM,IAAIC,CAAAA,KAAJ,oCAAN,CACD,CACD,GAAIP,QAAQ,CAACQ,IAAT,CAAc,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACH,EAAF,GAASD,GAAG,CAACC,EAApB,EAAd,CAAJ,CAA2C,CACzCL,WAAW,CAAC,SAACS,SAAD,4BAAmBA,SAAS,CAACC,MAAV,CAAiB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACN,EAAF,GAASD,GAAG,CAACC,EAApB,EAAjB,CAAnB,GAAD,CAAX,CACD,CAFD,IAEO,CACLL,WAAW,CAAC,SAACS,SAAD,qCAAmBA,SAAnB,GAA8BL,GAA9B,IAAD,CAAX,CACD,CACF,CATD,CAWA,GAAMQ,CAAAA,SAAS,CAAGhB,WAAW,CAC3B,SAACiB,UAAD,CAAgB,CACdb,WAAW,CAACa,UAAU,oBAAOf,IAAP,EAAe,EAA1B,CAAX,CACD,CAH0B,CAI3B,CAACA,IAAD,CAJ2B,CAA7B,CAOA,GAAMgB,CAAAA,aAAa,CAAGlB,WAAW,CAAC,UAAM,CACtCI,WAAW,CAAC,EAAD,CAAX,CACD,CAFgC,CAE9B,EAF8B,CAAjC,CAIA,MAAO,CACLD,QAAQ,CAARA,QADK,CAELE,aAAa,CAAbA,aAFK,CAGLE,YAAY,CAAZA,YAHK,CAILH,WAAW,CAAXA,WAJK,CAKLY,SAAS,CAATA,SALK,CAMLE,aAAa,CAAbA,aANK,CAAP,CAQD","sourcesContent":["import { useState, useCallback } from 'react';\n\n/**\n * useSelected hook provides a way to read and update a selected list\n * Param: array of list items\n * Returns: {\n *  selected: array of selected list items\n *  isAllSelected: boolean that indicates if all items are selected\n *  handleSelect: function that adds and removes items from selected list\n *  setSelected: setter function\n *  clearSelected: de-select all items\n * }\n */\n\nexport default function useSelected(list = []) {\n  const [selected, setSelected] = useState([]);\n  const isAllSelected = selected.length > 0 && selected.length === list.length;\n\n  const handleSelect = (row) => {\n    if (!row.id) {\n      throw new Error(`Selected row does not have an id`);\n    }\n    if (selected.some((s) => s.id === row.id)) {\n      setSelected((prevState) => [...prevState.filter((i) => i.id !== row.id)]);\n    } else {\n      setSelected((prevState) => [...prevState, row]);\n    }\n  };\n\n  const selectAll = useCallback(\n    (isSelected) => {\n      setSelected(isSelected ? [...list] : []);\n    },\n    [list]\n  );\n\n  const clearSelected = useCallback(() => {\n    setSelected([]);\n  }, []);\n\n  return {\n    selected,\n    isAllSelected,\n    handleSelect,\n    setSelected,\n    selectAll,\n    clearSelected,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}