{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\n/* eslint-disable no-console */\n\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tooltip/tooltip';\nimport { css } from '@patternfly/react-styles';\nimport { TooltipContent } from './TooltipContent';\nimport { TooltipArrow } from './TooltipArrow';\nimport { KEY_CODES } from '../../helpers/constants';\nimport tooltipMaxWidth from '@patternfly/react-tokens/dist/esm/c_tooltip_MaxWidth';\nimport { Popper, getOpacityTransition } from '../../helpers/Popper/Popper';\nexport var TooltipPosition;\n\n(function (TooltipPosition) {\n  TooltipPosition[\"auto\"] = \"auto\";\n  TooltipPosition[\"top\"] = \"top\";\n  TooltipPosition[\"bottom\"] = \"bottom\";\n  TooltipPosition[\"left\"] = \"left\";\n  TooltipPosition[\"right\"] = \"right\";\n  TooltipPosition[\"topStart\"] = \"top-start\";\n  TooltipPosition[\"topEnd\"] = \"top-end\";\n  TooltipPosition[\"bottomStart\"] = \"bottom-start\";\n  TooltipPosition[\"bottomEnd\"] = \"bottom-end\";\n  TooltipPosition[\"leftStart\"] = \"left-start\";\n  TooltipPosition[\"leftEnd\"] = \"left-end\";\n  TooltipPosition[\"rightStart\"] = \"right-start\";\n  TooltipPosition[\"rightEnd\"] = \"right-end\";\n})(TooltipPosition || (TooltipPosition = {})); // id for associating trigger with the content aria-describedby or aria-labelledby\n\n\nvar pfTooltipIdCounter = 1;\nexport var Tooltip = function Tooltip(_a) {\n  var bodyContent = _a.content,\n      _a$position = _a.position,\n      position = _a$position === void 0 ? 'top' : _a$position,\n      _a$trigger = _a.trigger,\n      trigger = _a$trigger === void 0 ? 'mouseenter focus' : _a$trigger,\n      _a$isVisible = _a.isVisible,\n      isVisible = _a$isVisible === void 0 ? false : _a$isVisible,\n      _a$isContentLeftAlign = _a.isContentLeftAligned,\n      isContentLeftAligned = _a$isContentLeftAlign === void 0 ? false : _a$isContentLeftAlign,\n      _a$enableFlip = _a.enableFlip,\n      enableFlip = _a$enableFlip === void 0 ? true : _a$enableFlip,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$entryDelay = _a.entryDelay,\n      entryDelay = _a$entryDelay === void 0 ? 300 : _a$entryDelay,\n      _a$exitDelay = _a.exitDelay,\n      exitDelay = _a$exitDelay === void 0 ? 300 : _a$exitDelay,\n      _a$appendTo = _a.appendTo,\n      appendTo = _a$appendTo === void 0 ? function () {\n    return document.body;\n  } : _a$appendTo,\n      _a$zIndex = _a.zIndex,\n      zIndex = _a$zIndex === void 0 ? 9999 : _a$zIndex,\n      _a$maxWidth = _a.maxWidth,\n      maxWidth = _a$maxWidth === void 0 ? tooltipMaxWidth.value : _a$maxWidth,\n      _a$distance = _a.distance,\n      distance = _a$distance === void 0 ? 15 : _a$distance,\n      _a$aria = _a.aria,\n      aria = _a$aria === void 0 ? 'describedby' : _a$aria,\n      _a$flipBehavior = _a.flipBehavior,\n      flipBehavior = _a$flipBehavior === void 0 ? ['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom'] : _a$flipBehavior,\n      _a$id = _a.id,\n      id = _a$id === void 0 ? \"pf-tooltip-\".concat(pfTooltipIdCounter++) : _a$id,\n      children = _a.children,\n      _a$animationDuration = _a.animationDuration,\n      animationDuration = _a$animationDuration === void 0 ? 300 : _a$animationDuration,\n      reference = _a.reference,\n      _a$ariaLive = _a['aria-live'],\n      ariaLive = _a$ariaLive === void 0 ? reference ? 'polite' : 'off' : _a$ariaLive,\n      boundary = _a.boundary,\n      isAppLauncher = _a.isAppLauncher,\n      tippyProps = _a.tippyProps,\n      rest = __rest(_a, [\"content\", \"position\", \"trigger\", \"isVisible\", \"isContentLeftAligned\", \"enableFlip\", \"className\", \"entryDelay\", \"exitDelay\", \"appendTo\", \"zIndex\", \"maxWidth\", \"distance\", \"aria\", \"flipBehavior\", \"id\", \"children\", \"animationDuration\", \"reference\", 'aria-live', \"boundary\", \"isAppLauncher\", \"tippyProps\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    boundary !== undefined && console.warn('The Tooltip boundary prop has been deprecated. If you want to constrain the popper to a specific element use the appendTo prop instead.');\n    isAppLauncher !== undefined && console.warn('The Tooltip isAppLauncher prop has been deprecated and is no longer used.');\n    tippyProps !== undefined && console.warn('The Tooltip tippyProps prop has been deprecated and is no longer used.');\n  } // could make this a prop in the future (true | false | 'toggle')\n\n\n  var hideOnClick = true;\n  var triggerOnMouseenter = trigger.includes('mouseenter');\n  var triggerOnFocus = trigger.includes('focus');\n  var triggerOnClick = trigger.includes('click');\n  var triggerManually = trigger === 'manual';\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      opacity = _React$useState4[0],\n      setOpacity = _React$useState4[1];\n\n  var transitionTimerRef = React.useRef(null);\n  var showTimerRef = React.useRef(null);\n  var hideTimerRef = React.useRef(null);\n\n  var clearTimeouts = function clearTimeouts(timeoutRefs) {\n    timeoutRefs.forEach(function (ref) {\n      if (ref.current) {\n        clearTimeout(ref.current);\n      }\n    });\n  }; // Cancel all timers on unmount\n\n\n  React.useEffect(function () {\n    return function () {\n      clearTimeouts([transitionTimerRef, hideTimerRef, showTimerRef]);\n    };\n  }, []);\n\n  var onDocumentKeyDown = function onDocumentKeyDown(event) {\n    if (!triggerManually) {\n      if (event.keyCode === KEY_CODES.ESCAPE_KEY && visible) {\n        hide();\n      }\n    }\n  };\n\n  var onTriggerEnter = function onTriggerEnter(event) {\n    if (event.keyCode === KEY_CODES.ENTER) {\n      if (!visible) {\n        show();\n      } else {\n        hide();\n      }\n    }\n  };\n\n  React.useEffect(function () {\n    if (isVisible) {\n      show();\n    } else {\n      hide();\n    }\n  }, [isVisible]);\n\n  var show = function show() {\n    clearTimeouts([transitionTimerRef, hideTimerRef]);\n    showTimerRef.current = setTimeout(function () {\n      setVisible(true);\n      setOpacity(1);\n    }, entryDelay);\n  };\n\n  var hide = function hide() {\n    clearTimeouts([showTimerRef]);\n    hideTimerRef.current = setTimeout(function () {\n      setOpacity(0);\n      transitionTimerRef.current = setTimeout(function () {\n        return setVisible(false);\n      }, animationDuration);\n    }, exitDelay);\n  };\n\n  var positionModifiers = {\n    top: styles.modifiers.top,\n    bottom: styles.modifiers.bottom,\n    left: styles.modifiers.left,\n    right: styles.modifiers.right,\n    'top-start': styles.modifiers.topLeft,\n    'top-end': styles.modifiers.topRight,\n    'bottom-start': styles.modifiers.bottomLeft,\n    'bottom-end': styles.modifiers.bottomRight,\n    'left-start': styles.modifiers.leftTop,\n    'left-end': styles.modifiers.leftBottom,\n    'right-start': styles.modifiers.rightTop,\n    'right-end': styles.modifiers.rightBottom\n  };\n  var hasCustomMaxWidth = maxWidth !== tooltipMaxWidth.value;\n  var content = React.createElement(\"div\", Object.assign({\n    \"aria-live\": ariaLive,\n    className: css(styles.tooltip, className),\n    role: \"tooltip\",\n    id: id,\n    style: {\n      maxWidth: hasCustomMaxWidth ? maxWidth : null,\n      opacity: opacity,\n      transition: getOpacityTransition(animationDuration)\n    }\n  }, rest), React.createElement(TooltipArrow, null), React.createElement(TooltipContent, {\n    isLeftAligned: isContentLeftAligned\n  }, bodyContent));\n\n  var onDocumentClick = function onDocumentClick(event, triggerElement) {\n    // event.currentTarget = document\n    // event.target could be triggerElement or something else\n    if (hideOnClick === true) {\n      // hide on inside the toggle as well as on outside clicks\n      if (visible) {\n        hide();\n      } else if (event.target === triggerElement) {\n        show();\n      }\n    } else if (hideOnClick === 'toggle' && event.target === triggerElement) {\n      // prevent outside clicks from hiding but allow it to still be toggled on toggle click\n      if (visible) {\n        hide();\n      } else {\n        show();\n      }\n    } else if (hideOnClick === false && !visible && event.target === triggerElement) {\n      show();\n    }\n  };\n\n  var addAriaToTrigger = function addAriaToTrigger() {\n    if (aria === 'describedby' && children && children.props && !children.props['aria-describedby']) {\n      return React.cloneElement(children, {\n        'aria-describedby': id\n      });\n    } else if (aria === 'labelledby' && children.props && !children.props['aria-labelledby']) {\n      return React.cloneElement(children, {\n        'aria-labelledby': id\n      });\n    }\n\n    return children;\n  };\n\n  return React.createElement(Popper, {\n    trigger: aria !== 'none' && visible ? addAriaToTrigger() : children,\n    reference: reference,\n    popper: content,\n    popperMatchesTriggerWidth: false,\n    appendTo: appendTo,\n    isVisible: visible,\n    positionModifiers: positionModifiers,\n    distance: distance,\n    placement: position,\n    onMouseEnter: triggerOnMouseenter && show,\n    onMouseLeave: triggerOnMouseenter && hide,\n    onPopperMouseEnter: triggerOnMouseenter && show,\n    onPopperMouseLeave: triggerOnMouseenter && hide,\n    onFocus: triggerOnFocus && show,\n    onBlur: triggerOnFocus && hide,\n    onDocumentClick: triggerOnClick && onDocumentClick,\n    onDocumentKeyDown: triggerManually ? null : onDocumentKeyDown,\n    onTriggerEnter: triggerManually ? null : onTriggerEnter,\n    enableFlip: enableFlip,\n    zIndex: zIndex,\n    flipBehavior: flipBehavior\n  });\n};\nTooltip.displayName = 'Tooltip';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Tooltip/Tooltip.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tooltip/tooltip';\nimport { css } from '@patternfly/react-styles';\nimport { TooltipContent } from './TooltipContent';\nimport { TooltipArrow } from './TooltipArrow';\nimport { KEY_CODES } from '../../helpers/constants';\nimport tooltipMaxWidth from '@patternfly/react-tokens/dist/esm/c_tooltip_MaxWidth';\nimport { ReactElement } from 'react';\nimport { Popper, getOpacityTransition } from '../../helpers/Popper/Popper';\nimport { Props as TippyProps } from '../../helpers/Popper/DeprecatedTippyTypes';\n\nexport enum TooltipPosition {\n  auto = 'auto',\n  top = 'top',\n  bottom = 'bottom',\n  left = 'left',\n  right = 'right',\n  topStart = 'top-start',\n  topEnd = 'top-end',\n  bottomStart = 'bottom-start',\n  bottomEnd = 'bottom-end',\n  leftStart = 'left-start',\n  leftEnd = 'left-end',\n  rightStart = 'right-start',\n  rightEnd = 'right-end'\n}\n\nexport interface TooltipProps extends Omit<React.HTMLProps<HTMLDivElement>, 'content'> {\n  /** The element to append the tooltip to, defaults to body */\n  appendTo?: HTMLElement | ((ref?: HTMLElement) => HTMLElement);\n  /**\n   * aria-labelledby or aria-describedby for tooltip.\n   * The trigger will be cloned to add the aria attribute, and the corresponding id in the form of 'pf-tooltip-#' is added to the content container.\n   * If you don't want that or prefer to add the aria attribute yourself on the trigger, set aria to 'none'.\n   */\n  aria?: 'describedby' | 'labelledby' | 'none';\n  /**\n   * Determines whether the tooltip is an aria-live region. If the reference prop is passed in the\n   * default behavior is 'polite' in order to ensure the tooltip contents is announced to\n   * assistive technologies. Otherwise the default behavior is 'off'.\n   */\n  'aria-live'?: 'off' | 'polite';\n  /**\n   * The reference element to which the Tooltip is relatively placed to.\n   * If you cannot wrap the reference with the Tooltip, you can use the reference prop instead.\n   * Usage: <Tooltip><Button>Reference</Button></Tooltip>\n   */\n  children?: ReactElement<any>;\n  /**\n   * The reference element to which the Tooltip is relatively placed to.\n   * If you can wrap the reference with the Tooltip, you can use the children prop instead.\n   * Usage: <Tooltip reference={() => document.getElementById('reference-element')} />\n   */\n  reference?: HTMLElement | (() => HTMLElement) | React.RefObject<any>;\n  /** Tooltip additional class */\n  className?: string;\n  /** Tooltip content */\n  content: React.ReactNode;\n  /** Distance of the tooltip to its target, defaults to 15 */\n  distance?: number;\n  /** If true, tries to keep the tooltip in view by flipping it if necessary */\n  enableFlip?: boolean;\n  /** Delay in ms before the tooltip appears */\n  entryDelay?: number;\n  /** Delay in ms before the tooltip disappears, Avoid passing in a value of \"0\", as users should\n   * be given ample time to move their mouse from the trigger to the tooltip content without the content\n   * being hidden.\n   */\n  exitDelay?: number;\n  /**\n   * The desired position to flip the tooltip to if the initial position is not possible.\n   * By setting this prop to 'flip' it attempts to flip the tooltip to the opposite side if there is no space.\n   * You can also pass an array of positions that determines the flip order. It should contain the initial position\n   * followed by alternative positions if that position is unavailable.\n   * Example: Initial position is 'top'. Button with tooltip is in the top right corner. 'flipBehavior' is set to\n   * ['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no\n   * space to the right, so it finally shows the tooltip on the left.\n   */\n  flipBehavior?:\n    | 'flip'\n    | (\n        | 'top'\n        | 'bottom'\n        | 'left'\n        | 'right'\n        | 'top-start'\n        | 'top-end'\n        | 'bottom-start'\n        | 'bottom-end'\n        | 'left-start'\n        | 'left-end'\n        | 'right-start'\n        | 'right-end'\n      )[];\n  /** Maximum width of the tooltip (default 18.75rem) */\n  maxWidth?: string;\n  /**\n   * Tooltip position. Note: With 'enableFlip' set to true,\n   * it will change the position if there is not enough space for the starting position.\n   * The behavior of where it flips to can be controlled through the flipBehavior prop.\n   * The 'auto' position chooses the side with the most space.\n   * The 'auto' position requires the 'enableFlip' prop to be true.\n   */\n  position?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /**\n   * Tooltip trigger: click, mouseenter, focus, manual\n   * Set to manual to trigger tooltip programmatically (through the isVisible prop)\n   */\n  trigger?: string;\n  /** Flag to indicate that the text content is left aligned */\n  isContentLeftAligned?: boolean;\n  /** value for visibility when trigger is 'manual' */\n  isVisible?: boolean;\n  /** z-index of the tooltip */\n  zIndex?: number;\n  /** id of the tooltip */\n  id?: string;\n  /** CSS fade transition animation duration */\n  animationDuration?: number;\n  /** @deprecated - no longer used. if you want to constrain the popper to a specific element use the appendTo prop instead */\n  boundary?: 'scrollParent' | 'window' | 'viewport' | HTMLElement;\n  /** @deprecated - no longer used */\n  isAppLauncher?: boolean;\n  /** @deprecated - no longer used */\n  tippyProps?: Partial<TippyProps>;\n}\n\n// id for associating trigger with the content aria-describedby or aria-labelledby\nlet pfTooltipIdCounter = 1;\n\nexport const Tooltip: React.FunctionComponent<TooltipProps> = ({\n  content: bodyContent,\n  position = 'top',\n  trigger = 'mouseenter focus',\n  isVisible = false,\n  isContentLeftAligned = false,\n  enableFlip = true,\n  className = '',\n  entryDelay = 300,\n  exitDelay = 300,\n  appendTo = () => document.body,\n  zIndex = 9999,\n  maxWidth = tooltipMaxWidth.value,\n  distance = 15,\n  aria = 'describedby',\n  // For every initial starting position, there are 3 escape positions\n  flipBehavior = ['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom'],\n  id = `pf-tooltip-${pfTooltipIdCounter++}`,\n  children,\n  animationDuration = 300,\n  reference,\n  'aria-live': ariaLive = reference ? 'polite' : 'off',\n  boundary,\n  isAppLauncher,\n  tippyProps,\n  ...rest\n}: TooltipProps) => {\n  if (process.env.NODE_ENV !== 'production') {\n    boundary !== undefined &&\n      console.warn(\n        'The Tooltip boundary prop has been deprecated. If you want to constrain the popper to a specific element use the appendTo prop instead.'\n      );\n    isAppLauncher !== undefined &&\n      console.warn('The Tooltip isAppLauncher prop has been deprecated and is no longer used.');\n    tippyProps !== undefined && console.warn('The Tooltip tippyProps prop has been deprecated and is no longer used.');\n  }\n  // could make this a prop in the future (true | false | 'toggle')\n  const hideOnClick = true;\n  const triggerOnMouseenter = trigger.includes('mouseenter');\n  const triggerOnFocus = trigger.includes('focus');\n  const triggerOnClick = trigger.includes('click');\n  const triggerManually = trigger === 'manual';\n  const [visible, setVisible] = React.useState(false);\n  const [opacity, setOpacity] = React.useState(0);\n  const transitionTimerRef = React.useRef(null);\n  const showTimerRef = React.useRef(null);\n  const hideTimerRef = React.useRef(null);\n\n  const clearTimeouts = (timeoutRefs: React.RefObject<any>[]) => {\n    timeoutRefs.forEach(ref => {\n      if (ref.current) {\n        clearTimeout(ref.current);\n      }\n    });\n  };\n\n  // Cancel all timers on unmount\n  React.useEffect(\n    () => () => {\n      clearTimeouts([transitionTimerRef, hideTimerRef, showTimerRef]);\n    },\n    []\n  );\n\n  const onDocumentKeyDown = (event: KeyboardEvent) => {\n    if (!triggerManually) {\n      if (event.keyCode === KEY_CODES.ESCAPE_KEY && visible) {\n        hide();\n      }\n    }\n  };\n  const onTriggerEnter = (event: KeyboardEvent) => {\n    if (event.keyCode === KEY_CODES.ENTER) {\n      if (!visible) {\n        show();\n      } else {\n        hide();\n      }\n    }\n  };\n  React.useEffect(() => {\n    if (isVisible) {\n      show();\n    } else {\n      hide();\n    }\n  }, [isVisible]);\n  const show = () => {\n    clearTimeouts([transitionTimerRef, hideTimerRef]);\n    showTimerRef.current = setTimeout(() => {\n      setVisible(true);\n      setOpacity(1);\n    }, entryDelay);\n  };\n  const hide = () => {\n    clearTimeouts([showTimerRef]);\n    hideTimerRef.current = setTimeout(() => {\n      setOpacity(0);\n      transitionTimerRef.current = setTimeout(() => setVisible(false), animationDuration);\n    }, exitDelay);\n  };\n  const positionModifiers = {\n    top: styles.modifiers.top,\n    bottom: styles.modifiers.bottom,\n    left: styles.modifiers.left,\n    right: styles.modifiers.right,\n    'top-start': styles.modifiers.topLeft,\n    'top-end': styles.modifiers.topRight,\n    'bottom-start': styles.modifiers.bottomLeft,\n    'bottom-end': styles.modifiers.bottomRight,\n    'left-start': styles.modifiers.leftTop,\n    'left-end': styles.modifiers.leftBottom,\n    'right-start': styles.modifiers.rightTop,\n    'right-end': styles.modifiers.rightBottom\n  };\n  const hasCustomMaxWidth = maxWidth !== tooltipMaxWidth.value;\n  const content = (\n    <div\n      aria-live={ariaLive}\n      className={css(styles.tooltip, className)}\n      role=\"tooltip\"\n      id={id}\n      style={{\n        maxWidth: hasCustomMaxWidth ? maxWidth : null,\n        opacity,\n        transition: getOpacityTransition(animationDuration)\n      }}\n      {...rest}\n    >\n      <TooltipArrow />\n      <TooltipContent isLeftAligned={isContentLeftAligned}>{bodyContent}</TooltipContent>\n    </div>\n  );\n\n  const onDocumentClick = (event: MouseEvent, triggerElement: HTMLElement) => {\n    // event.currentTarget = document\n    // event.target could be triggerElement or something else\n    if (hideOnClick === true) {\n      // hide on inside the toggle as well as on outside clicks\n      if (visible) {\n        hide();\n      } else if (event.target === triggerElement) {\n        show();\n      }\n    } else if (hideOnClick === 'toggle' && event.target === triggerElement) {\n      // prevent outside clicks from hiding but allow it to still be toggled on toggle click\n      if (visible) {\n        hide();\n      } else {\n        show();\n      }\n    } else if (hideOnClick === false && !visible && event.target === triggerElement) {\n      show();\n    }\n  };\n\n  const addAriaToTrigger = () => {\n    if (aria === 'describedby' && children && children.props && !children.props['aria-describedby']) {\n      return React.cloneElement(children, { 'aria-describedby': id });\n    } else if (aria === 'labelledby' && children.props && !children.props['aria-labelledby']) {\n      return React.cloneElement(children, { 'aria-labelledby': id });\n    }\n    return children;\n  };\n\n  return (\n    <Popper\n      trigger={aria !== 'none' && visible ? addAriaToTrigger() : children}\n      reference={reference}\n      popper={content}\n      popperMatchesTriggerWidth={false}\n      appendTo={appendTo}\n      isVisible={visible}\n      positionModifiers={positionModifiers}\n      distance={distance}\n      placement={position}\n      onMouseEnter={triggerOnMouseenter && show}\n      onMouseLeave={triggerOnMouseenter && hide}\n      onPopperMouseEnter={triggerOnMouseenter && show}\n      onPopperMouseLeave={triggerOnMouseenter && hide}\n      onFocus={triggerOnFocus && show}\n      onBlur={triggerOnFocus && hide}\n      onDocumentClick={triggerOnClick && onDocumentClick}\n      onDocumentKeyDown={triggerManually ? null : onDocumentKeyDown}\n      onTriggerEnter={triggerManually ? null : onTriggerEnter}\n      enableFlip={enableFlip}\n      zIndex={zIndex}\n      flipBehavior={flipBehavior}\n    />\n  );\n};\nTooltip.displayName = 'Tooltip';\n"]},"metadata":{},"sourceType":"module"}