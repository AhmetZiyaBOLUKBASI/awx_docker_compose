{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { ToolbarChipGroupContent } from './ToolbarChipGroupContent';\nimport { formatBreakpointMods, canUseDOM } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps } from '../../helpers';\nimport { PageContext } from '../Page/Page';\nexport var Toolbar = /*#__PURE__*/function (_React$Component) {\n  _inherits(Toolbar, _React$Component);\n\n  var _super = _createSuper(Toolbar);\n\n  function Toolbar() {\n    var _this;\n\n    _classCallCheck(this, Toolbar);\n\n    _this = _super.apply(this, arguments);\n    _this.chipGroupContentRef = React.createRef();\n    _this.staticFilterInfo = {};\n    _this.state = {\n      isManagedToggleExpanded: false,\n      filterInfo: {},\n      windowWidth: canUseDOM ? window.innerWidth : 1200,\n      ouiaStateId: getDefaultOUIAId(Toolbar.displayName)\n    };\n\n    _this.isToggleManaged = function () {\n      return !(_this.props.isExpanded || !!_this.props.toggleIsExpanded);\n    };\n\n    _this.toggleIsExpanded = function () {\n      _this.setState(function (prevState) {\n        return {\n          isManagedToggleExpanded: !prevState.isManagedToggleExpanded\n        };\n      });\n    };\n\n    _this.closeExpandableContent = function (e) {\n      if (e.target.innerWidth !== _this.state.windowWidth) {\n        _this.setState(function () {\n          return {\n            isManagedToggleExpanded: false,\n            windowWidth: e.target.innerWidth\n          };\n        });\n      }\n    };\n\n    _this.updateNumberFilters = function (categoryName, numberOfFilters) {\n      var filterInfoToUpdate = Object.assign({}, _this.staticFilterInfo);\n\n      if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {\n        filterInfoToUpdate[categoryName] = numberOfFilters;\n        _this.staticFilterInfo = filterInfoToUpdate;\n\n        _this.setState({\n          filterInfo: filterInfoToUpdate\n        });\n      }\n    };\n\n    _this.getNumberOfFilters = function () {\n      return Object.values(_this.state.filterInfo).reduce(function (acc, cur) {\n        return acc + cur;\n      }, 0);\n    };\n\n    _this.renderToolbar = function (randomId) {\n      var _a = _this.props,\n          clearAllFilters = _a.clearAllFilters,\n          clearFiltersButtonText = _a.clearFiltersButtonText,\n          collapseListedFiltersBreakpoint = _a.collapseListedFiltersBreakpoint,\n          isExpandedProp = _a.isExpanded,\n          toggleIsExpanded = _a.toggleIsExpanded,\n          className = _a.className,\n          children = _a.children,\n          isFullHeight = _a.isFullHeight,\n          isStatic = _a.isStatic,\n          inset = _a.inset,\n          usePageInsets = _a.usePageInsets,\n          isSticky = _a.isSticky,\n          ouiaId = _a.ouiaId,\n          numberOfFiltersText = _a.numberOfFiltersText,\n          customChipGroupContent = _a.customChipGroupContent,\n          props = __rest(_a, [\"clearAllFilters\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"isExpanded\", \"toggleIsExpanded\", \"className\", \"children\", \"isFullHeight\", \"isStatic\", \"inset\", \"usePageInsets\", \"isSticky\", \"ouiaId\", \"numberOfFiltersText\", \"customChipGroupContent\"]);\n\n      var isManagedToggleExpanded = _this.state.isManagedToggleExpanded;\n\n      var isToggleManaged = _this.isToggleManaged();\n\n      var isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;\n\n      var numberOfFilters = _this.getNumberOfFilters();\n\n      var showClearFiltersButton = numberOfFilters > 0;\n      return React.createElement(PageContext.Consumer, null, function (_ref) {\n        var width = _ref.width,\n            getBreakpoint = _ref.getBreakpoint;\n        return React.createElement(\"div\", Object.assign({\n          className: css(styles.toolbar, isFullHeight && styles.modifiers.fullHeight, isStatic && styles.modifiers.static, usePageInsets && styles.modifiers.pageInsets, isSticky && styles.modifiers.sticky, formatBreakpointMods(inset, styles, '', getBreakpoint(width)), className),\n          id: randomId\n        }, getOUIAProps(Toolbar.displayName, ouiaId !== undefined ? ouiaId : _this.state.ouiaStateId), props), React.createElement(ToolbarContext.Provider, {\n          value: {\n            isExpanded: isExpanded,\n            toggleIsExpanded: isToggleManaged ? _this.toggleIsExpanded : toggleIsExpanded,\n            chipGroupContentRef: _this.chipGroupContentRef,\n            updateNumberFilters: _this.updateNumberFilters,\n            numberOfFilters: numberOfFilters,\n            clearAllFilters: clearAllFilters,\n            clearFiltersButtonText: clearFiltersButtonText,\n            showClearFiltersButton: showClearFiltersButton,\n            toolbarId: randomId,\n            customChipGroupContent: customChipGroupContent\n          }\n        }, children, React.createElement(ToolbarChipGroupContent, {\n          isExpanded: isExpanded,\n          chipGroupContentRef: _this.chipGroupContentRef,\n          clearAllFilters: clearAllFilters,\n          showClearFiltersButton: showClearFiltersButton,\n          clearFiltersButtonText: clearFiltersButtonText,\n          numberOfFilters: numberOfFilters,\n          numberOfFiltersText: numberOfFiltersText,\n          collapseListedFiltersBreakpoint: collapseListedFiltersBreakpoint,\n          customChipGroupContent: customChipGroupContent\n        })));\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Toolbar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.isToggleManaged() && canUseDOM) {\n        window.addEventListener('resize', this.closeExpandableContent);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.isToggleManaged() && canUseDOM) {\n        window.removeEventListener('resize', this.closeExpandableContent);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return this.props.id ? this.renderToolbar(this.props.id) : React.createElement(GenerateId, null, function (randomId) {\n        return _this2.renderToolbar(randomId);\n      });\n    }\n  }]);\n\n  return Toolbar;\n}(React.Component);\nToolbar.displayName = 'Toolbar';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Toolbar/Toolbar.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { ToolbarChipGroupContent } from './ToolbarChipGroupContent';\nimport { formatBreakpointMods, canUseDOM } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps, OUIAProps } from '../../helpers';\nimport { PageContext } from '../Page/Page';\n\nexport interface ToolbarProps extends React.HTMLProps<HTMLDivElement>, OUIAProps {\n  /** Optional callback for clearing all filters in the toolbar */\n  clearAllFilters?: () => void;\n  /** Text to display in the clear all filters button */\n  clearFiltersButtonText?: string;\n  /** Custom content appended to the filter generated chip group. To maintain spacing and styling, each node should be wrapped in a ToolbarItem or ToolbarGroup. This property will remove the default \"Clear all filters\" button. */\n  customChipGroupContent?: React.ReactNode;\n  /** The breakpoint at which the listed filters in chip groups are collapsed down to a summary */\n  collapseListedFiltersBreakpoint?: 'all' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Flag indicating if a data toolbar toggle group's expandable content is expanded */\n  isExpanded?: boolean;\n  /** A callback for setting the isExpanded flag */\n  toggleIsExpanded?: () => void;\n  /** Classes applied to root element of the data toolbar */\n  className?: string;\n  /** Content to be rendered as rows in the data toolbar */\n  children?: React.ReactNode;\n  /** Id of the data toolbar */\n  id?: string;\n  /** Flag indicating the toolbar height should expand to the full height of the container */\n  isFullHeight?: boolean;\n  /** Flag indicating the toolbar is static */\n  isStatic?: boolean;\n  /** Flag indicating the toolbar should use the Page insets */\n  usePageInsets?: boolean;\n  /** Flag indicating the toolbar should stick to the top of its container */\n  isSticky?: boolean;\n  /** Insets at various breakpoints. */\n  inset?: {\n    default?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    sm?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    md?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    lg?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    xl?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    '2xl'?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  };\n  /** Text to display in the total number of applied filters ToolbarFilter */\n  numberOfFiltersText?: (numberOfFilters: number) => string;\n}\n\nexport interface ToolbarState {\n  /** Flag used if the user has opted NOT to manage the 'isExpanded' state of the toggle group.\n   *  Indicates whether or not the toggle group is expanded. */\n  isManagedToggleExpanded: boolean;\n  /** Object managing information about how many chips are in each chip group */\n  filterInfo: FilterInfo;\n  /** Used to keep track of window width so we can collapse expanded content when window is resizing */\n  windowWidth: number;\n  ouiaStateId: string;\n}\n\ninterface FilterInfo {\n  [key: string]: number;\n}\n\nexport class Toolbar extends React.Component<ToolbarProps, ToolbarState> {\n  static displayName = 'Toolbar';\n  chipGroupContentRef = React.createRef<HTMLDivElement>();\n  staticFilterInfo = {};\n  state = {\n    isManagedToggleExpanded: false,\n    filterInfo: {},\n    windowWidth: canUseDOM ? window.innerWidth : 1200,\n    ouiaStateId: getDefaultOUIAId(Toolbar.displayName)\n  };\n\n  isToggleManaged = () => !(this.props.isExpanded || !!this.props.toggleIsExpanded);\n\n  toggleIsExpanded = () => {\n    this.setState(prevState => ({\n      isManagedToggleExpanded: !prevState.isManagedToggleExpanded\n    }));\n  };\n\n  closeExpandableContent = (e: any) => {\n    if (e.target.innerWidth !== this.state.windowWidth) {\n      this.setState(() => ({\n        isManagedToggleExpanded: false,\n        windowWidth: e.target.innerWidth\n      }));\n    }\n  };\n\n  componentDidMount() {\n    if (this.isToggleManaged() && canUseDOM) {\n      window.addEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.isToggleManaged() && canUseDOM) {\n      window.removeEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  updateNumberFilters = (categoryName: string, numberOfFilters: number) => {\n    const filterInfoToUpdate: FilterInfo = { ...this.staticFilterInfo };\n    if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {\n      filterInfoToUpdate[categoryName] = numberOfFilters;\n      this.staticFilterInfo = filterInfoToUpdate;\n      this.setState({ filterInfo: filterInfoToUpdate });\n    }\n  };\n\n  getNumberOfFilters = () =>\n    Object.values(this.state.filterInfo).reduce((acc: any, cur: any) => acc + cur, 0) as number;\n\n  renderToolbar = (randomId: string) => {\n    const {\n      clearAllFilters,\n      clearFiltersButtonText,\n      collapseListedFiltersBreakpoint,\n      isExpanded: isExpandedProp,\n      toggleIsExpanded,\n      className,\n      children,\n      isFullHeight,\n      isStatic,\n      inset,\n      usePageInsets,\n      isSticky,\n      ouiaId,\n      numberOfFiltersText,\n      customChipGroupContent,\n      ...props\n    } = this.props;\n\n    const { isManagedToggleExpanded } = this.state;\n\n    const isToggleManaged = this.isToggleManaged();\n    const isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;\n    const numberOfFilters = this.getNumberOfFilters();\n    const showClearFiltersButton = numberOfFilters > 0;\n\n    return (\n      <PageContext.Consumer>\n        {({ width, getBreakpoint }) => (\n          <div\n            className={css(\n              styles.toolbar,\n              isFullHeight && styles.modifiers.fullHeight,\n              isStatic && styles.modifiers.static,\n              usePageInsets && styles.modifiers.pageInsets,\n              isSticky && styles.modifiers.sticky,\n              formatBreakpointMods(inset, styles, '', getBreakpoint(width)),\n              className\n            )}\n            id={randomId}\n            {...getOUIAProps(Toolbar.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)}\n            {...props}\n          >\n            <ToolbarContext.Provider\n              value={{\n                isExpanded,\n                toggleIsExpanded: isToggleManaged ? this.toggleIsExpanded : toggleIsExpanded,\n                chipGroupContentRef: this.chipGroupContentRef,\n                updateNumberFilters: this.updateNumberFilters,\n                numberOfFilters,\n                clearAllFilters,\n                clearFiltersButtonText,\n                showClearFiltersButton,\n                toolbarId: randomId,\n                customChipGroupContent\n              }}\n            >\n              {children}\n              <ToolbarChipGroupContent\n                isExpanded={isExpanded}\n                chipGroupContentRef={this.chipGroupContentRef}\n                clearAllFilters={clearAllFilters}\n                showClearFiltersButton={showClearFiltersButton}\n                clearFiltersButtonText={clearFiltersButtonText}\n                numberOfFilters={numberOfFilters}\n                numberOfFiltersText={numberOfFiltersText}\n                collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n                customChipGroupContent={customChipGroupContent}\n              />\n            </ToolbarContext.Provider>\n          </div>\n        )}\n      </PageContext.Consumer>\n    );\n  };\n\n  render() {\n    return this.props.id ? (\n      this.renderToolbar(this.props.id)\n    ) : (\n      <GenerateId>{randomId => this.renderToolbar(randomId)}</GenerateId>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}