{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { formatBreakpointMods, toCamel } from '../../helpers/util';\nimport { PageContext } from '../Page/Page';\nexport var ToolbarGroupVariant;\n\n(function (ToolbarGroupVariant) {\n  ToolbarGroupVariant[\"filter-group\"] = \"filter-group\";\n  ToolbarGroupVariant[\"icon-button-group\"] = \"icon-button-group\";\n  ToolbarGroupVariant[\"button-group\"] = \"button-group\";\n})(ToolbarGroupVariant || (ToolbarGroupVariant = {}));\n\nvar ToolbarGroupWithRef = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarGroupWithRef, _React$Component);\n\n  var _super = _createSuper(ToolbarGroupWithRef);\n\n  function ToolbarGroupWithRef() {\n    _classCallCheck(this, ToolbarGroupWithRef);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ToolbarGroupWithRef, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          visibility = _a.visibility,\n          visiblity = _a.visiblity,\n          alignment = _a.alignment,\n          spacer = _a.spacer,\n          spaceItems = _a.spaceItems,\n          className = _a.className,\n          variant = _a.variant,\n          children = _a.children,\n          innerRef = _a.innerRef,\n          props = __rest(_a, [\"visibility\", \"visiblity\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"variant\", \"children\", \"innerRef\"]);\n\n      if (visiblity !== undefined) {\n        // eslint-disable-next-line no-console\n        console.warn('The ToolbarGroup visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n      }\n\n      return React.createElement(PageContext.Consumer, null, function (_ref) {\n        var width = _ref.width,\n            getBreakpoint = _ref.getBreakpoint;\n        return React.createElement(\"div\", Object.assign({\n          className: css(styles.toolbarGroup, variant && styles.modifiers[toCamel(variant)], formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), formatBreakpointMods(spacer, styles, '', getBreakpoint(width)), formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)), className)\n        }, props, {\n          ref: innerRef\n        }), children);\n      });\n    }\n  }]);\n\n  return ToolbarGroupWithRef;\n}(React.Component);\n\nexport var ToolbarGroup = React.forwardRef(function (props, ref) {\n  return React.createElement(ToolbarGroupWithRef, Object.assign({}, props, {\n    innerRef: ref\n  }));\n});","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarGroup.tsx"],"names":[],"mappings":";;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,yDAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,oBAAT,EAA+B,OAA/B,QAA8C,oBAA9C;AACA,SAAS,WAAT,QAA4B,cAA5B;AAEA,OAAA,IAAY,mBAAZ;;AAAA,CAAA,UAAY,mBAAZ,EAA+B;AAC7B,EAAA,mBAAA,CAAA,cAAA,CAAA,GAAA,cAAA;AACA,EAAA,mBAAA,CAAA,mBAAA,CAAA,GAAA,mBAAA;AACA,EAAA,mBAAA,CAAA,cAAA,CAAA,GAAA,cAAA;AACD,CAJD,EAAY,mBAAmB,KAAnB,mBAAmB,GAAA,EAAA,CAA/B;;IAyDM,mB;;;;;;;;;;;;;WACJ,kBAAM;AACE,UAAA,EAAA,GAWF,KAXE,KAAA;AAAA,UACJ,UADI,GASI,EATJ,CACJ,UADI;AAAA,UAEJ,SAFI,GASI,EATJ,CAEJ,SAFI;AAAA,UAGJ,SAHI,GASI,EATJ,CAGJ,SAHI;AAAA,UAIJ,MAJI,GASI,EATJ,CAIJ,MAJI;AAAA,UAKJ,UALI,GASI,EATJ,CAKJ,UALI;AAAA,UAMJ,SANI,GASI,EATJ,CAMJ,SANI;AAAA,UAOJ,OAPI,GASI,EATJ,CAOJ,OAPI;AAAA,UAQJ,QARI,GASI,EATJ,CAQJ,QARI;AAAA,UASJ,QATI,GASI,EATJ,CASJ,QATI;AAAA,UAUD,KAVC,GAUI,MAAA,CAAA,EAAA,EAVJ,CAAA,YAAA,EAAA,WAAA,EAAA,WAAA,EAAA,QAAA,EAAA,YAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,EAAA,UAAA,CAUI,CAVJ;;AAaN,UAAI,SAAS,KAAK,SAAlB,EAA6B;AAC3B;AACA,QAAA,OAAO,CAAC,IAAR,CACE,0DACE,2DAFJ;AAID;;AAED,aACE,KAAA,CAAA,aAAA,CAAC,WAAW,CAAC,QAAb,EAAqB,IAArB,EACG;AAAA,YAAG,KAAH,QAAG,KAAH;AAAA,YAAU,aAAV,QAAU,aAAV;AAAA,eACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,UAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,YADK,EAEZ,OAAO,IAAI,MAAM,CAAC,SAAP,CAAiB,OAAO,CAAC,OAAD,CAAxB,CAFC,EAGZ,oBAAoB,CAAC,UAAU,IAAI,SAAf,EAA0B,MAA1B,EAAkC,EAAlC,EAAsC,aAAa,CAAC,KAAD,CAAnD,CAHR,EAIZ,oBAAoB,CAAC,SAAD,EAAY,MAAZ,EAAoB,EAApB,EAAwB,aAAa,CAAC,KAAD,CAArC,CAJR,EAKZ,oBAAoB,CAAC,MAAD,EAAS,MAAT,EAAiB,EAAjB,EAAqB,aAAa,CAAC,KAAD,CAAlC,CALR,EAMZ,oBAAoB,CAAC,UAAD,EAAa,MAAb,EAAqB,EAArB,EAAyB,aAAa,CAAC,KAAD,CAAtC,CANR,EAOZ,SAPY;AADhB,SAAA,EAUM,KAVN,EAUW;AACT,UAAA,GAAG,EAAE;AADI,SAVX,CAAA,EAaG,QAbH,CADD;AAAA,OADH,CADF;AAqBD;;;;EA5C+B,KAAK,CAAC,S;;AA+CxC,OAAO,IAAM,YAAY,GAAG,KAAK,CAAC,UAAN,CAAiB,UAAC,KAAD,EAA2B,GAA3B;AAAA,SAC3C,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,KAAL,EAAU;AAAE,IAAA,QAAQ,EAAE;AAAZ,GAAV,CAApB,CAD2C;AAAA,CAAjB,CAArB","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { formatBreakpointMods, toCamel } from '../../helpers/util';\nimport { PageContext } from '../Page/Page';\n\nexport enum ToolbarGroupVariant {\n  'filter-group' = 'filter-group',\n  'icon-button-group' = 'icon-button-group',\n  'button-group' = 'button-group'\n}\n\nexport interface ToolbarGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'ref'> {\n  /** Classes applied to root element of the data toolbar group */\n  className?: string;\n  /** A type modifier which modifies spacing specifically depending on the type of group */\n  variant?: ToolbarGroupVariant | 'filter-group' | 'icon-button-group' | 'button-group';\n  /** Visibility at various breakpoints. */\n  visibility?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** @deprecated prop misspelled */\n  visiblity?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** Alignment at various breakpoints. */\n  alignment?: {\n    default?: 'alignRight' | 'alignLeft';\n    md?: 'alignRight' | 'alignLeft';\n    lg?: 'alignRight' | 'alignLeft';\n    xl?: 'alignRight' | 'alignLeft';\n    '2xl'?: 'alignRight' | 'alignLeft';\n  };\n  /** Spacers at various breakpoints. */\n  spacer?: {\n    default?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    md?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    lg?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    xl?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    '2xl'?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n  };\n  /** Space items at various breakpoints. */\n  spaceItems?: {\n    default?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    md?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    lg?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    xl?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    '2xl'?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n  };\n  /** Content to be rendered inside the data toolbar group */\n  children?: React.ReactNode;\n  /** Reference to pass to this group if it has .pf-m-chip-container modifier */\n  innerRef?: React.RefObject<any>;\n}\n\nclass ToolbarGroupWithRef extends React.Component<ToolbarGroupProps> {\n  render() {\n    const {\n      visibility,\n      visiblity,\n      alignment,\n      spacer,\n      spaceItems,\n      className,\n      variant,\n      children,\n      innerRef,\n      ...props\n    } = this.props;\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'The ToolbarGroup visiblity prop has been deprecated. ' +\n          'Please use the correctly spelled visibility prop instead.'\n      );\n    }\n\n    return (\n      <PageContext.Consumer>\n        {({ width, getBreakpoint }) => (\n          <div\n            className={css(\n              styles.toolbarGroup,\n              variant && styles.modifiers[toCamel(variant) as 'filterGroup' | 'iconButtonGroup' | 'buttonGroup'],\n              formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)),\n              formatBreakpointMods(alignment, styles, '', getBreakpoint(width)),\n              formatBreakpointMods(spacer, styles, '', getBreakpoint(width)),\n              formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)),\n              className\n            )}\n            {...props}\n            ref={innerRef}\n          >\n            {children}\n          </div>\n        )}\n      </PageContext.Consumer>\n    );\n  }\n}\n\nexport const ToolbarGroup = React.forwardRef((props: ToolbarGroupProps, ref: any) => (\n  <ToolbarGroupWithRef {...props} innerRef={ref} />\n));\n"]},"metadata":{},"sourceType":"module"}