{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nexport var ClipboardCopyButton = function ClipboardCopyButton(_a) {\n  var onClick = _a.onClick,\n      _a$exitDelay = _a.exitDelay,\n      exitDelay = _a$exitDelay === void 0 ? 0 : _a$exitDelay,\n      _a$entryDelay = _a.entryDelay,\n      entryDelay = _a$entryDelay === void 0 ? 300 : _a$entryDelay,\n      _a$maxWidth = _a.maxWidth,\n      maxWidth = _a$maxWidth === void 0 ? '100px' : _a$maxWidth,\n      _a$position = _a.position,\n      position = _a$position === void 0 ? 'top' : _a$position,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? 'Copyable input' : _a$ariaLabel,\n      id = _a.id,\n      textId = _a.textId,\n      children = _a.children,\n      _a$variant = _a.variant,\n      variant = _a$variant === void 0 ? 'control' : _a$variant,\n      props = __rest(_a, [\"onClick\", \"exitDelay\", \"entryDelay\", \"maxWidth\", \"position\", 'aria-label', \"id\", \"textId\", \"children\", \"variant\"]);\n\n  return React.createElement(Tooltip, {\n    trigger: \"mouseenter focus click\",\n    exitDelay: exitDelay,\n    entryDelay: entryDelay,\n    maxWidth: maxWidth,\n    position: position,\n    \"aria-live\": \"polite\",\n    aria: \"none\",\n    content: React.createElement(\"div\", null, children)\n  }, React.createElement(Button, Object.assign({\n    type: \"button\",\n    variant: variant,\n    onClick: onClick,\n    \"aria-label\": ariaLabel,\n    id: id,\n    \"aria-labelledby\": \"\".concat(id, \" \").concat(textId)\n  }, props), React.createElement(CopyIcon, null)));\n};\nClipboardCopyButton.displayName = 'ClipboardCopyButton';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/ClipboardCopy/ClipboardCopyButton.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,QAAP,MAAqB,kDAArB;AACA,SAAS,MAAT,QAAuB,WAAvB;AACA,SAAS,OAAT,QAAyC,YAAzC;AA4CA,OAAO,IAAM,mBAAmB,GAAsD,SAAzE,mBAAyE,CAAC,EAAD,EAYvD;AAZwD,MACrF,OADqF,GAUlE,EAVkE,CACrF,OADqF;AAAA,qBAUlE,EAVkE,CAErF,SAFqF;AAAA,MAErF,SAFqF,6BAEzE,CAFyE;AAAA,sBAUlE,EAVkE,CAGrF,UAHqF;AAAA,MAGrF,UAHqF,8BAGxE,GAHwE;AAAA,oBAUlE,EAVkE,CAIrF,QAJqF;AAAA,MAIrF,QAJqF,4BAI1E,OAJ0E;AAAA,oBAUlE,EAVkE,CAKrF,QALqF;AAAA,MAKrF,QALqF,4BAK1E,KAL0E;AAAA,qBAUlE,EAVkE,CAMrF,YANqF;AAAA,MAMvE,SANuE,6BAM3D,gBAN2D;AAAA,MAOrF,EAPqF,GAUlE,EAVkE,CAOrF,EAPqF;AAAA,MAQrF,MARqF,GAUlE,EAVkE,CAQrF,MARqF;AAAA,MASrF,QATqF,GAUlE,EAVkE,CASrF,QATqF;AAAA,mBAUlE,EAVkE,CAUrF,OAVqF;AAAA,MAUrF,OAVqF,2BAU3E,SAV2E;AAAA,MAWlF,KAXkF,GAW7E,MAAA,CAAA,EAAA,EAX6E,CAAA,SAAA,EAAA,WAAA,EAAA,YAAA,EAAA,UAAA,EAAA,UAAA,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,UAAA,EAAA,SAAA,CAW7E,CAX6E;;AAYvD,SAC9B,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ;AACN,IAAA,OAAO,EAAC,wBADF;AAEN,IAAA,SAAS,EAAE,SAFL;AAGN,IAAA,UAAU,EAAE,UAHN;AAIN,IAAA,QAAQ,EAAE,QAJJ;AAKN,IAAA,QAAQ,EAAE,QALJ;AAKY,iBACR,QANJ;AAON,IAAA,IAAI,EAAC,MAPC;AAQN,IAAA,OAAO,EAAE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAM,QAAN;AARH,GAAR,EAUE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO,MAAA,CAAA,MAAA,CAAA;AACL,IAAA,IAAI,EAAC,QADA;AAEL,IAAA,OAAO,EAAE,OAFJ;AAGL,IAAA,OAAO,EAAE,OAHJ;AAGW,kBACJ,SAJP;AAKL,IAAA,EAAE,EAAE,EALC;AAKC,iCACc,EADd,cACoB,MADpB;AALD,GAAA,EAOD,KAPC,CAAP,EASE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS,IAAT,CATF,CAVF,CAD8B;AAuB/B,CAnCM;AAoCP,mBAAmB,CAAC,WAApB,GAAkC,qBAAlC","sourcesContent":["import * as React from 'react';\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\nimport { Button } from '../Button';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport { PopoverPosition } from '../Popover';\n\nexport interface ClipboardCopyButtonProps\n  extends Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, 'ref'> {\n  /** Callback for the copy when the button is clicked */\n  onClick: (event: React.MouseEvent) => void;\n  /** Content of the copy button */\n  children: React.ReactNode;\n  /** ID of the copy button */\n  id: string;\n  /** ID of the content that is being copied */\n  textId: string;\n  /** Additional classes added to the copy button */\n  className?: string;\n  /** Exit delay on the copy button tooltip */\n  exitDelay?: number;\n  /** Entry delay on the copy button tooltip */\n  entryDelay?: number;\n  /** Max width of the copy button tooltip */\n  maxWidth?: string;\n  /** Position of the copy button tooltip */\n  position?:\n    | TooltipPosition\n    | PopoverPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** Aria-label for the copy button */\n  'aria-label'?: string;\n  /** Variant of the copy button */\n  variant?: 'control' | 'plain';\n}\n\nexport const ClipboardCopyButton: React.FunctionComponent<ClipboardCopyButtonProps> = ({\n  onClick,\n  exitDelay = 0,\n  entryDelay = 300,\n  maxWidth = '100px',\n  position = 'top',\n  'aria-label': ariaLabel = 'Copyable input',\n  id,\n  textId,\n  children,\n  variant = 'control',\n  ...props\n}: ClipboardCopyButtonProps) => (\n  <Tooltip\n    trigger=\"mouseenter focus click\"\n    exitDelay={exitDelay}\n    entryDelay={entryDelay}\n    maxWidth={maxWidth}\n    position={position}\n    aria-live=\"polite\"\n    aria=\"none\"\n    content={<div>{children}</div>}\n  >\n    <Button\n      type=\"button\"\n      variant={variant}\n      onClick={onClick}\n      aria-label={ariaLabel}\n      id={id}\n      aria-labelledby={`${id} ${textId}`}\n      {...props}\n    >\n      <CopyIcon />\n    </Button>\n  </Tooltip>\n);\nClipboardCopyButton.displayName = 'ClipboardCopyButton';\n"]},"metadata":{},"sourceType":"module"}