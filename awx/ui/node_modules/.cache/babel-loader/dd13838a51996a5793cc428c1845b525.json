{"ast":null,"code":"import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{RootAPI,UsersAPI}from'api';import bootstrapPendo from'./bootstrapPendo';function buildPendoOptions(config,pendoApiKey){var towerVersion=config.version.split('-')[0];var trial=config.trial?config.trial:false;return{apiKey:pendoApiKey,visitor:{id:0,role:null},account:{id:'tower.ansible.com',planLevel:config.license_type,planPrice:config.instance_count,creationDate:config.license_date,trial:trial,tower_version:towerVersion,ansible_version:config.ansible_version}};}function buildPendoOptionsRole(_x,_x2){return _buildPendoOptionsRole.apply(this,arguments);}function _buildPendoOptionsRole(){_buildPendoOptionsRole=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(options,config){var _yield$UsersAPI$readA,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;if(!config.me.is_superuser){_context.next=5;break;}options.visitor.role='admin';_context.next=10;break;case 5:_context.next=7;return UsersAPI.readAdminOfOrganizations(config.me.id);case 7:_yield$UsersAPI$readA=_context.sent;data=_yield$UsersAPI$readA.data;if(data.count>0){options.visitor.role='orgadmin';}else{options.visitor.role='user';}case 10:return _context.abrupt(\"return\",options);case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);throw new Error(_context.t0);case 16:case\"end\":return _context.stop();}}},_callee,null,[[0,13]]);}));return _buildPendoOptionsRole.apply(this,arguments);}function issuePendoIdentity(_x3){return _issuePendoIdentity.apply(this,arguments);}function _issuePendoIdentity(){_issuePendoIdentity=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config){var _yield$RootAPI$readAs,PENDO_API_KEY,pendoOptions,pendoOptionsWithRole;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!('license_info'in config)){config.license_info={};}config.license_info.analytics_status=config.analytics_status;config.license_info.version=config.version;config.license_info.ansible_version=config.ansible_version;if(!(config.analytics_status!=='off')){_context2.next=16;break;}_context2.next=7;return RootAPI.readAssetVariables();case 7:_yield$RootAPI$readAs=_context2.sent;PENDO_API_KEY=_yield$RootAPI$readAs.data.PENDO_API_KEY;if(!(PENDO_API_KEY&&PENDO_API_KEY!=='')){_context2.next=16;break;}bootstrapPendo(PENDO_API_KEY);pendoOptions=buildPendoOptions(config,PENDO_API_KEY);_context2.next=14;return buildPendoOptionsRole(pendoOptions,config);case 14:pendoOptionsWithRole=_context2.sent;window.pendo.initialize(pendoOptionsWithRole);case 16:case\"end\":return _context2.stop();}}},_callee2);}));return _issuePendoIdentity.apply(this,arguments);}export default issuePendoIdentity;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/util/issuePendoIdentity.js"],"names":["RootAPI","UsersAPI","bootstrapPendo","buildPendoOptions","config","pendoApiKey","towerVersion","version","split","trial","apiKey","visitor","id","role","account","planLevel","license_type","planPrice","instance_count","creationDate","license_date","tower_version","ansible_version","buildPendoOptionsRole","options","me","is_superuser","readAdminOfOrganizations","data","count","Error","issuePendoIdentity","license_info","analytics_status","readAssetVariables","PENDO_API_KEY","pendoOptions","pendoOptionsWithRole","window","pendo","initialize"],"mappings":"iNAAA,OAASA,OAAT,CAAkBC,QAAlB,KAAkC,KAAlC,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CAEA,QAASC,CAAAA,iBAAT,CAA2BC,MAA3B,CAAmCC,WAAnC,CAAgD,CAC9C,GAAMC,CAAAA,YAAY,CAAGF,MAAM,CAACG,OAAP,CAAeC,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAArB,CACA,GAAMC,CAAAA,KAAK,CAAGL,MAAM,CAACK,KAAP,CAAeL,MAAM,CAACK,KAAtB,CAA8B,KAA5C,CAEA,MAAO,CACLC,MAAM,CAAEL,WADH,CAELM,OAAO,CAAE,CACPC,EAAE,CAAE,CADG,CAEPC,IAAI,CAAE,IAFC,CAFJ,CAMLC,OAAO,CAAE,CACPF,EAAE,CAAE,mBADG,CAEPG,SAAS,CAAEX,MAAM,CAACY,YAFX,CAGPC,SAAS,CAAEb,MAAM,CAACc,cAHX,CAIPC,YAAY,CAAEf,MAAM,CAACgB,YAJd,CAKPX,KAAK,CAALA,KALO,CAMPY,aAAa,CAAEf,YANR,CAOPgB,eAAe,CAAElB,MAAM,CAACkB,eAPjB,CANJ,CAAP,CAgBD,C,QAEcC,CAAAA,qB,+KAAf,iBAAqCC,OAArC,CAA8CpB,MAA9C,qKAEQA,MAAM,CAACqB,EAAP,CAAUC,YAFlB,yBAGMF,OAAO,CAACb,OAAR,CAAgBE,IAAhB,CAAuB,OAAvB,CAHN,oDAK6BZ,CAAAA,QAAQ,CAAC0B,wBAAT,CAAkCvB,MAAM,CAACqB,EAAP,CAAUb,EAA5C,CAL7B,4CAKcgB,IALd,uBAKcA,IALd,CAMM,GAAIA,IAAI,CAACC,KAAL,CAAa,CAAjB,CAAoB,CAClBL,OAAO,CAACb,OAAR,CAAgBE,IAAhB,CAAuB,UAAvB,CACD,CAFD,IAEO,CACLW,OAAO,CAACb,OAAR,CAAgBE,IAAhB,CAAuB,MAAvB,CACD,CAVP,wCAYWW,OAZX,iEAcU,IAAIM,CAAAA,KAAJ,aAdV,sE,gEAkBeC,CAAAA,kB,mKAAf,kBAAkC3B,MAAlC,gMACE,GAAI,EAAE,gBAAkBA,CAAAA,MAApB,CAAJ,CAAiC,CAC/BA,MAAM,CAAC4B,YAAP,CAAsB,EAAtB,CACD,CACD5B,MAAM,CAAC4B,YAAP,CAAoBC,gBAApB,CAAuC7B,MAAM,CAAC6B,gBAA9C,CACA7B,MAAM,CAAC4B,YAAP,CAAoBzB,OAApB,CAA8BH,MAAM,CAACG,OAArC,CACAH,MAAM,CAAC4B,YAAP,CAAoBV,eAApB,CAAsClB,MAAM,CAACkB,eAA7C,CANF,KAQMlB,MAAM,CAAC6B,gBAAP,GAA4B,KARlC,mDAWcjC,CAAAA,OAAO,CAACkC,kBAAR,EAXd,6CAUcC,aAVd,uBAUMP,IAVN,CAUcO,aAVd,MAYQA,aAAa,EAAIA,aAAa,GAAK,EAZ3C,4BAaMjC,cAAc,CAACiC,aAAD,CAAd,CACMC,YAdZ,CAc2BjC,iBAAiB,CAACC,MAAD,CAAS+B,aAAT,CAd5C,yBAeyCZ,CAAAA,qBAAqB,CACtDa,YADsD,CAEtDhC,MAFsD,CAf9D,SAeYiC,oBAfZ,gBAmBMC,MAAM,CAACC,KAAP,CAAaC,UAAb,CAAwBH,oBAAxB,EAnBN,yD,qDAwBA,cAAeN,CAAAA,kBAAf","sourcesContent":["import { RootAPI, UsersAPI } from 'api';\nimport bootstrapPendo from './bootstrapPendo';\n\nfunction buildPendoOptions(config, pendoApiKey) {\n  const towerVersion = config.version.split('-')[0];\n  const trial = config.trial ? config.trial : false;\n\n  return {\n    apiKey: pendoApiKey,\n    visitor: {\n      id: 0,\n      role: null,\n    },\n    account: {\n      id: 'tower.ansible.com',\n      planLevel: config.license_type,\n      planPrice: config.instance_count,\n      creationDate: config.license_date,\n      trial,\n      tower_version: towerVersion,\n      ansible_version: config.ansible_version,\n    },\n  };\n}\n\nasync function buildPendoOptionsRole(options, config) {\n  try {\n    if (config.me.is_superuser) {\n      options.visitor.role = 'admin';\n    } else {\n      const { data } = await UsersAPI.readAdminOfOrganizations(config.me.id);\n      if (data.count > 0) {\n        options.visitor.role = 'orgadmin';\n      } else {\n        options.visitor.role = 'user';\n      }\n    }\n    return options;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nasync function issuePendoIdentity(config) {\n  if (!('license_info' in config)) {\n    config.license_info = {};\n  }\n  config.license_info.analytics_status = config.analytics_status;\n  config.license_info.version = config.version;\n  config.license_info.ansible_version = config.ansible_version;\n\n  if (config.analytics_status !== 'off') {\n    const {\n      data: { PENDO_API_KEY },\n    } = await RootAPI.readAssetVariables();\n    if (PENDO_API_KEY && PENDO_API_KEY !== '') {\n      bootstrapPendo(PENDO_API_KEY);\n      const pendoOptions = buildPendoOptions(config, PENDO_API_KEY);\n      const pendoOptionsWithRole = await buildPendoOptionsRole(\n        pendoOptions,\n        config\n      );\n      window.pendo.initialize(pendoOptionsWithRole);\n    }\n  }\n}\n\nexport default issuePendoIdentity;\n"]},"metadata":{},"sourceType":"module"}