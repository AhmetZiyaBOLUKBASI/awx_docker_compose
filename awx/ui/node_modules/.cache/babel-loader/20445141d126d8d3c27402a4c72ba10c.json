{"ast":null,"code":"import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState}from'react';import{Redirect,useHistory,useLocation,useRouteMatch}from'react-router-dom';import ContentLoading from'components/ContentLoading';import{CardBody}from'components/Card';import SurveyQuestionForm from'./SurveyQuestionForm';import{jsx as _jsx}from\"react/jsx-runtime\";export default function SurveyQuestionEdit(_ref){var survey=_ref.survey,updateSurvey=_ref.updateSurvey;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),formError=_useState2[0],setFormError=_useState2[1];var history=useHistory();var match=useRouteMatch();var _useLocation=useLocation(),search=_useLocation.search;var queryParams=new URLSearchParams(search);var questionVariable=decodeURIComponent(queryParams.get('question_variable'));if(!survey){return/*#__PURE__*/_jsx(ContentLoading,{});}var question=survey.spec.find(function(q){return q.variable===questionVariable;});if(!question){return/*#__PURE__*/_jsx(Redirect,{to:\"/templates/\".concat(match.params.templateType,\"/\").concat(match.params.id,\"/survey\")});}var navigateToList=function navigateToList(){var index=match.url.indexOf('/edit');history.push(match.url.substr(0,index));};var handleSubmit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData){var submittedData,questionIndex,choices,defaultAnswers;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:submittedData=_objectSpread({},formData);_context.prev=1;if(!(submittedData.variable!==question.variable&&survey.spec.find(function(q){return q.variable===submittedData.variable;}))){_context.next=5;break;}setFormError(new Error(\"Survey already contains a question with variable named \\u201C\".concat(submittedData.variable,\"\\u201D\")));return _context.abrupt(\"return\");case 5:questionIndex=survey.spec.findIndex(function(q){return q.variable===questionVariable;});if(!(questionIndex===-1)){_context.next=8;break;}throw new Error('Question not found in spec');case 8:if(submittedData.type==='multiselect'||submittedData.type==='multiplechoice'){choices=[];defaultAnswers='';submittedData.formattedChoices.forEach(function(_ref3,i){var choice=_ref3.choice,isDefault=_ref3.isDefault;choices.push(choice);if(isDefault){defaultAnswers=i===submittedData.formattedChoices.length-1?defaultAnswers.concat(\"\".concat(choice)):defaultAnswers.concat(\"\".concat(choice,\"\\n\"));}});submittedData.default=defaultAnswers.trim();submittedData.choices=choices;}delete submittedData.formattedChoices;_context.next=12;return updateSurvey([].concat(_toConsumableArray(survey.spec.slice(0,questionIndex)),[submittedData],_toConsumableArray(survey.spec.slice(questionIndex+1))));case 12:navigateToList();_context.next=18;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](1);setFormError(_context.t0);case 18:case\"end\":return _context.stop();}}},_callee,null,[[1,15]]);}));return function handleSubmit(_x){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(SurveyQuestionForm,{question:question,handleSubmit:handleSubmit,handleCancel:navigateToList,submitError:formError})});}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Template/Survey/SurveyQuestionEdit.js"],"names":["React","useState","Redirect","useHistory","useLocation","useRouteMatch","ContentLoading","CardBody","SurveyQuestionForm","SurveyQuestionEdit","survey","updateSurvey","formError","setFormError","history","match","search","queryParams","URLSearchParams","questionVariable","decodeURIComponent","get","question","spec","find","q","variable","params","templateType","id","navigateToList","index","url","indexOf","push","substr","handleSubmit","formData","submittedData","Error","questionIndex","findIndex","type","choices","defaultAnswers","formattedChoices","forEach","i","choice","isDefault","length","concat","default","trim","slice"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Redirect,\n  useHistory,\n  useLocation,\n  useRouteMatch,\n} from 'react-router-dom';\nimport ContentLoading from 'components/ContentLoading';\nimport { CardBody } from 'components/Card';\nimport SurveyQuestionForm from './SurveyQuestionForm';\n\nexport default function SurveyQuestionEdit({ survey, updateSurvey }) {\n  const [formError, setFormError] = useState(null);\n  const history = useHistory();\n  const match = useRouteMatch();\n  const { search } = useLocation();\n  const queryParams = new URLSearchParams(search);\n  const questionVariable = decodeURIComponent(\n    queryParams.get('question_variable')\n  );\n\n  if (!survey) {\n    return <ContentLoading />;\n  }\n\n  const question = survey.spec.find((q) => q.variable === questionVariable);\n\n  if (!question) {\n    return (\n      <Redirect\n        to={`/templates/${match.params.templateType}/${match.params.id}/survey`}\n      />\n    );\n  }\n\n  const navigateToList = () => {\n    const index = match.url.indexOf('/edit');\n    history.push(match.url.substr(0, index));\n  };\n\n  const handleSubmit = async (formData) => {\n    const submittedData = { ...formData };\n    try {\n      if (\n        submittedData.variable !== question.variable &&\n        survey.spec.find((q) => q.variable === submittedData.variable)\n      ) {\n        setFormError(\n          new Error(\n            `Survey already contains a question with variable named “${submittedData.variable}”`\n          )\n        );\n        return;\n      }\n      const questionIndex = survey.spec.findIndex(\n        (q) => q.variable === questionVariable\n      );\n      if (questionIndex === -1) {\n        throw new Error('Question not found in spec');\n      }\n      if (\n        submittedData.type === 'multiselect' ||\n        submittedData.type === 'multiplechoice'\n      ) {\n        const choices = [];\n        let defaultAnswers = '';\n        submittedData.formattedChoices.forEach(({ choice, isDefault }, i) => {\n          choices.push(choice);\n          if (isDefault) {\n            defaultAnswers =\n              i === submittedData.formattedChoices.length - 1\n                ? defaultAnswers.concat(`${choice}`)\n                : defaultAnswers.concat(`${choice}\\n`);\n          }\n        });\n        submittedData.default = defaultAnswers.trim();\n        submittedData.choices = choices;\n      }\n      delete submittedData.formattedChoices;\n\n      await updateSurvey([\n        ...survey.spec.slice(0, questionIndex),\n        submittedData,\n        ...survey.spec.slice(questionIndex + 1),\n      ]);\n      navigateToList();\n    } catch (err) {\n      setFormError(err);\n    }\n  };\n\n  return (\n    <CardBody>\n      <SurveyQuestionForm\n        question={question}\n        handleSubmit={handleSubmit}\n        handleCancel={navigateToList}\n        submitError={formError}\n      />\n    </CardBody>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}