{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { DropdownToggle, DropdownContext } from '../Dropdown';\nexport var OptionsMenuToggle = function OptionsMenuToggle(_a) {\n  var _a$isPlain = _a.isPlain,\n      isPlain = _a$isPlain === void 0 ? false : _a$isPlain,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      _a$isOpen = _a.isOpen,\n      isOpen = _a$isOpen === void 0 ? false : _a$isOpen,\n      _a$parentId = _a.parentId,\n      parentId = _a$parentId === void 0 ? '' : _a$parentId,\n      _a$toggleTemplate = _a.toggleTemplate,\n      toggleTemplate = _a$toggleTemplate === void 0 ? React.createElement(React.Fragment, null) : _a$toggleTemplate,\n      _a$hideCaret = _a.hideCaret,\n      hideCaret = _a$hideCaret === void 0 ? false : _a$hideCaret,\n      _a$isActive = _a.isActive,\n      isActive = _a$isActive === void 0 ? false : _a$isActive,\n      _a$isSplitButton = _a.isSplitButton,\n      isSplitButton = _a$isSplitButton === void 0 ? false : _a$isSplitButton,\n      type = _a.type,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? 'Options menu' : _a$ariaLabel,\n      props = __rest(_a, [\"isPlain\", \"isDisabled\", \"isOpen\", \"parentId\", \"toggleTemplate\", \"hideCaret\", \"isActive\", \"isSplitButton\", \"type\", 'aria-label']);\n\n  return React.createElement(DropdownContext.Consumer, null, function (_ref) {\n    var contextId = _ref.id;\n    return React.createElement(DropdownToggle, Object.assign({}, (isPlain || hideCaret) && {\n      toggleIndicator: null\n    }, props, {\n      isPlain: isPlain,\n      isOpen: isOpen,\n      isDisabled: isDisabled,\n      isActive: isActive,\n      id: parentId ? \"\".concat(parentId, \"-toggle\") : \"\".concat(contextId, \"-toggle\"),\n      \"aria-haspopup\": \"listbox\",\n      \"aria-label\": ariaLabel,\n      \"aria-expanded\": isOpen\n    }, toggleTemplate ? {\n      children: toggleTemplate\n    } : {}));\n  });\n};\nOptionsMenuToggle.displayName = 'OptionsMenuToggle';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/OptionsMenu/OptionsMenuToggle.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,cAAT,EAAyB,eAAzB,QAAgD,aAAhD;AA4BA,OAAO,IAAM,iBAAiB,GAAoD,SAArE,iBAAqE,CAAC,EAAD,EAerD;AAfsD,mBAazC,EAbyC,CACjF,OADiF;AAAA,MACjF,OADiF,2BACvE,KADuE;AAAA,sBAazC,EAbyC,CAEjF,UAFiF;AAAA,MAEjF,UAFiF,8BAEpE,KAFoE;AAAA,kBAazC,EAbyC,CAGjF,MAHiF;AAAA,MAGjF,MAHiF,0BAGxE,KAHwE;AAAA,oBAazC,EAbyC,CAIjF,QAJiF;AAAA,MAIjF,QAJiF,4BAItE,EAJsE;AAAA,0BAazC,EAbyC,CAKjF,cALiF;AAAA,MAKjF,cALiF,kCAKhE,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAP,EAAe,IAAf,CALgE;AAAA,qBAazC,EAbyC,CAMjF,SANiF;AAAA,MAMjF,SANiF,6BAMrE,KANqE;AAAA,oBAazC,EAbyC,CAQjF,QARiF;AAAA,MAQjF,QARiF,4BAQtE,KARsE;AAAA,yBAazC,EAbyC,CAUjF,aAViF;AAAA,MAUjF,aAViF,iCAUjE,KAViE;AAAA,MAYjF,IAZiF,GAazC,EAbyC,CAYjF,IAZiF;AAAA,qBAazC,EAbyC,CAajF,YAbiF;AAAA,MAanE,SAbmE,6BAavD,cAbuD;AAAA,MAc9E,KAd8E,GAczE,MAAA,CAAA,EAAA,EAdyE,CAAA,SAAA,EAAA,YAAA,EAAA,QAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,UAAA,EAAA,eAAA,EAAA,MAAA,EAAA,YAAA,CAczE,CAdyE;;AAerD,SAC5B,KAAA,CAAA,aAAA,CAAC,eAAe,CAAC,QAAjB,EAAyB,IAAzB,EACG;AAAA,QAAO,SAAP,QAAG,EAAH;AAAA,WACC,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe,MAAA,CAAA,MAAA,CAAA,EAAA,EACR,CAAC,OAAO,IAAI,SAAZ,KAA0B;AAAE,MAAA,eAAe,EAAE;AAAnB,KADlB,EAET,KAFS,EAEJ;AACT,MAAA,OAAO,EAAE,OADA;AAET,MAAA,MAAM,EAAE,MAFC;AAGT,MAAA,UAAU,EAAE,UAHH;AAIT,MAAA,QAAQ,EAAE,QAJD;AAKT,MAAA,EAAE,EAAE,QAAQ,aAAM,QAAN,yBAA6B,SAA7B,YALH;AAKkD,uBAC7C,SANL;AAMc,oBACX,SAPH;AAOY,uBACN;AARN,KAFI,EAWR,cAAc,GAAG;AAAE,MAAA,QAAQ,EAAE;AAAZ,KAAH,GAAkC,EAXxC,CAAf,CADD;AAAA,GADH,CAD4B;AAkB7B,CAjCM;AAkCP,iBAAiB,CAAC,WAAlB,GAAgC,mBAAhC","sourcesContent":["import * as React from 'react';\nimport { DropdownToggle, DropdownContext } from '../Dropdown';\n\nexport interface OptionsMenuToggleProps extends React.HTMLProps<HTMLButtonElement> {\n  /** Id of the parent options menu component */\n  parentId?: string;\n  /** Callback for when this options menu is toggled */\n  onToggle?: (isOpen: boolean) => void;\n  /** Flag to indicate if menu is open */\n  isOpen?: boolean;\n  /** Flag to indicate if the button is plain */\n  isPlain?: boolean;\n  isSplitButton?: boolean;\n  /** Forces display of the active state of the options menu */\n  isActive?: boolean;\n  /** Disables the options menu toggle */\n  isDisabled?: boolean;\n  /** hide the toggle caret */\n  hideCaret?: boolean;\n  /** Provides an accessible name for the button when an icon is used instead of text */\n  'aria-label'?: string;\n  /** @hide Internal function to implement enter click */\n  onEnter?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  /** @hide Internal parent reference */\n  parentRef?: HTMLElement;\n  /** Content to be rendered in the options menu toggle button */\n  toggleTemplate?: React.ReactNode;\n}\n\nexport const OptionsMenuToggle: React.FunctionComponent<OptionsMenuToggleProps> = ({\n  isPlain = false,\n  isDisabled = false,\n  isOpen = false,\n  parentId = '',\n  toggleTemplate = <React.Fragment />,\n  hideCaret = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isActive = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isSplitButton = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  type,\n  'aria-label': ariaLabel = 'Options menu',\n  ...props\n}: OptionsMenuToggleProps) => (\n  <DropdownContext.Consumer>\n    {({ id: contextId }) => (\n      <DropdownToggle\n        {...((isPlain || hideCaret) && { toggleIndicator: null })}\n        {...props}\n        isPlain={isPlain}\n        isOpen={isOpen}\n        isDisabled={isDisabled}\n        isActive={isActive}\n        id={parentId ? `${parentId}-toggle` : `${contextId}-toggle`}\n        aria-haspopup=\"listbox\"\n        aria-label={ariaLabel}\n        aria-expanded={isOpen}\n        {...(toggleTemplate ? { children: toggleTemplate } : {})}\n      />\n    )}\n  </DropdownContext.Consumer>\n);\nOptionsMenuToggle.displayName = 'OptionsMenuToggle';\n"]},"metadata":{},"sourceType":"module"}