{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\n/**\n * body.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\n\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { resolveRowKey } from './resolve-row-key';\nimport { BodyRow } from './body-row';\nimport { ProviderContext } from './provider';\n\nvar BaseBody = /*#__PURE__*/function (_React$Component) {\n  _inherits(BaseBody, _React$Component);\n\n  var _super = _createSuper(BaseBody);\n\n  function BaseBody() {\n    var _this;\n\n    _classCallCheck(this, BaseBody);\n\n    _this = _super.apply(this, arguments);\n\n    _this.omitOnRow = function (props) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var onRow = props.onRow,\n          ret = __rest(props, [\"onRow\"]);\n\n      return ret;\n    };\n\n    return _this;\n  }\n\n  _createClass(BaseBody, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      // Skip checking props against `onRow` since that can be bound at render().\n      // That's not particularly good practice but you never know how the users\n      // prefer to define the handler.\n      // Check for wrapper based override.\n      var renderers = nextProps.renderers;\n\n      if (renderers && renderers.body && renderers.body.wrapper && renderers.body.wrapper.shouldComponentUpdate) {\n        if (typeof renderers.body.wrapper.shouldComponentUpdate === 'function') {\n          return renderers.body.wrapper.shouldComponentUpdate.call(this, nextProps, {}, {});\n        }\n\n        return true;\n      }\n\n      return !isEqual(this.omitOnRow(this.props), this.omitOnRow(nextProps));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          onRow = _a.onRow,\n          rows = _a.rows,\n          rowKey = _a.rowKey,\n          columns = _a.columns,\n          renderers = _a.renderers,\n          props = __rest(_a, [\"onRow\", \"rows\", \"rowKey\", \"columns\", \"renderers\"]);\n\n      var children = rows.map(function (rowData, index) {\n        var key = resolveRowKey({\n          rowData: rowData,\n          rowIndex: index,\n          rowKey: rowKey\n        });\n        return React.createElement(BodyRow, {\n          key: key,\n          renderers: renderers.body,\n          onRow: onRow,\n          rowKey: key,\n          rowIndex: index,\n          rowData: rowData,\n          columns: columns\n        });\n      });\n      return React.createElement(renderers.body.wrapper, props, children);\n    }\n  }]);\n\n  return BaseBody;\n}(React.Component);\n\nBaseBody.defaultProps = {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onRow: function onRow() {\n    return {};\n  }\n};\nexport var Body = function Body(props) {\n  return React.createElement(ProviderContext.Consumer, null, function (_ref) {\n    var columns = _ref.columns,\n        renderers = _ref.renderers;\n    return React.createElement(BaseBody, Object.assign({\n      columns: columns,\n      renderers: renderers\n    }, props));\n  });\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/base/body.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * body.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { RowsType, RowType, RowKeyType, RenderersTypes, createElementType, ColumnsType } from './types';\nimport { resolveRowKey } from './resolve-row-key';\nimport { BodyRow } from './body-row';\nimport { ProviderContext } from './provider';\n\nexport interface BodyProps {\n  onRow?: Function;\n  rows: RowsType;\n  rowKey?: RowKeyType;\n  columns?: ColumnsType;\n  renderers?: RenderersTypes['renderers'];\n  mappedRows?: any;\n  className?: string;\n}\n\nclass BaseBody extends React.Component<BodyProps, {}> {\n  static defaultProps = {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onRow: (...args: any) => ({})\n  };\n\n  shouldComponentUpdate(nextProps: BodyProps) {\n    // Skip checking props against `onRow` since that can be bound at render().\n    // That's not particularly good practice but you never know how the users\n    // prefer to define the handler.\n    // Check for wrapper based override.\n    const { renderers } = nextProps;\n\n    if (\n      renderers &&\n      renderers.body &&\n      renderers.body.wrapper &&\n      (renderers.body.wrapper as React.Component).shouldComponentUpdate\n    ) {\n      if (typeof (renderers.body.wrapper as React.Component).shouldComponentUpdate === 'function') {\n        return (renderers.body.wrapper as React.Component).shouldComponentUpdate.call(this, nextProps, {}, {});\n      }\n      return true;\n    }\n\n    return !isEqual(this.omitOnRow(this.props), this.omitOnRow(nextProps));\n  }\n\n  omitOnRow = (props: BodyProps) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { onRow, ...ret } = props;\n    return ret;\n  };\n\n  render() {\n    const { onRow, rows, rowKey, columns, renderers, ...props } = this.props;\n    const children = (rows as []).map((rowData: RowType, index: number) => {\n      const key = resolveRowKey({ rowData, rowIndex: index, rowKey });\n      return React.createElement(BodyRow, {\n        key,\n        renderers: renderers.body,\n        onRow,\n        rowKey: key,\n        rowIndex: index,\n        rowData,\n        columns\n      });\n    });\n\n    return React.createElement(renderers.body.wrapper as createElementType, props, children);\n  }\n}\n\nexport const Body = (props: BodyProps) => (\n  <ProviderContext.Consumer>\n    {({ columns, renderers }) => <BaseBody columns={columns} renderers={renderers} {...props} />}\n  </ProviderContext.Consumer>\n);\n"]},"metadata":{},"sourceType":"module"}