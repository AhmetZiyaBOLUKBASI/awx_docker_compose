{"ast":null,"code":"/**\n * resolve-row-key.ts\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\n\n/**\n * @param {{rowData: RowType, rowIndex: number, rowKey: RowKeyType}} rowData - row data\n */\nexport function resolveRowKey(_ref) {\n  var rowData = _ref.rowData,\n      rowIndex = _ref.rowIndex,\n      rowKey = _ref.rowKey;\n\n  if (typeof rowKey === 'function') {\n    return \"\".concat(rowKey({\n      rowData: rowData,\n      rowIndex: rowIndex\n    }), \"-row\");\n  } else if (process.env.NODE_ENV !== 'production') {\n    // Arrays cannot have rowKeys by definition so we have to go by index there.\n    if (!Array.isArray(rowData) && rowData[rowKey] === undefined) {\n      // eslint-disable-next-line no-console\n      console.warn('Table.Body - Missing valid rowKey!', rowData, rowKey);\n    }\n  }\n\n  if (rowData[rowKey] === 0) {\n    return \"\".concat(rowData[rowKey], \"-row\");\n  }\n\n  return \"\".concat(rowData[rowKey] || rowIndex, \"-row\");\n}","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/base/resolve-row-key.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAIH;;AAEG;AACH,OAAM,SAAU,aAAV,OAQL;AAAA,MAPC,OAOD,QAPC,OAOD;AAAA,MANC,QAMD,QANC,QAMD;AAAA,MALC,MAKD,QALC,MAKD;;AACC,MAAI,OAAO,MAAP,KAAkB,UAAtB,EAAkC;AAChC,qBAAU,MAAM,CAAC;AAAE,MAAA,OAAO,EAAP,OAAF;AAAW,MAAA,QAAQ,EAAR;AAAX,KAAD,CAAhB;AACD,GAFD,MAEO,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AAChD;AACA,QAAI,CAAC,KAAK,CAAC,OAAN,CAAc,OAAd,CAAD,IAA4B,OAAe,CAAC,MAAD,CAAf,KAA4B,SAA5D,EAAuE;AACrE;AACA,MAAA,OAAO,CAAC,IAAR,CAAa,oCAAb,EAAmD,OAAnD,EAA4D,MAA5D;AACD;AACF;;AAED,MAAK,OAAe,CAAC,MAAD,CAAf,KAA4B,CAAjC,EAAoC;AAClC,qBAAW,OAAe,CAAC,MAAD,CAA1B;AACD;;AAED,mBAAY,OAAe,CAAC,MAAD,CAAf,IAAsC,QAAlD;AACD","sourcesContent":["/**\n * resolve-row-key.ts\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\n\nimport { RowType, RowKeyType } from './types';\n\n/**\n * @param {{rowData: RowType, rowIndex: number, rowKey: RowKeyType}} rowData - row data\n */\nexport function resolveRowKey({\n  rowData,\n  rowIndex,\n  rowKey\n}: {\n  rowData: RowType;\n  rowIndex: number;\n  rowKey: RowKeyType;\n}) {\n  if (typeof rowKey === 'function') {\n    return `${rowKey({ rowData, rowIndex })}-row`;\n  } else if (process.env.NODE_ENV !== 'production') {\n    // Arrays cannot have rowKeys by definition so we have to go by index there.\n    if (!Array.isArray(rowData) && (rowData as any)[rowKey] === undefined) {\n      // eslint-disable-next-line no-console\n      console.warn('Table.Body - Missing valid rowKey!', rowData, rowKey);\n    }\n  }\n\n  if ((rowData as any)[rowKey] === 0) {\n    return `${(rowData as any)[rowKey] as string}-row`;\n  }\n\n  return `${((rowData as any)[rowKey] as string) || rowIndex}-row`;\n}\n"]},"metadata":{},"sourceType":"module"}