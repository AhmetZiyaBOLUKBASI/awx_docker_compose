{"ast":null,"code":"import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _taggedTemplateLiteral from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3;import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{i18n}from\"@lingui/core\";import React,{useCallback,useEffect,useState}from'react';import styled from'styled-components';import{Card,CardHeader,CardActions,CardBody,PageSection,Select,SelectVariant,SelectOption}from'@patternfly/react-core';import useRequest from'hooks/useRequest';import{DashboardAPI}from'api';import ContentLoading from'components/ContentLoading';import LineChart from'./shared/LineChart';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var StatusSelect=styled(Select)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  && {\\n    --pf-c-select__toggle--MinWidth: 165px;\\n  }\\n\"])));var GraphCardHeader=styled(CardHeader)(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  margin-top: var(--pf-global--spacer--lg);\\n\"])));var GraphCardActions=styled(CardActions)(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  margin-left: initial;\\n  padding-left: 0;\\n\"])));function DashboardGraph(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isPeriodDropdownOpen=_useState2[0],setIsPeriodDropdownOpen=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isJobTypeDropdownOpen=_useState4[0],setIsJobTypeDropdownOpen=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isJobStatusDropdownOpen=_useState6[0],setIsJobStatusDropdownOpen=_useState6[1];var _useState7=useState('month'),_useState8=_slicedToArray(_useState7,2),periodSelection=_useState8[0],setPeriodSelection=_useState8[1];var _useState9=useState('all'),_useState10=_slicedToArray(_useState9,2),jobTypeSelection=_useState10[0],setJobTypeSelection=_useState10[1];var _useState11=useState('all'),_useState12=_slicedToArray(_useState11,2),jobStatusSelection=_useState12[0],setJobStatusSelection=_useState12[1];var _useRequest=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$DashboardAPI$r,data,newData,jobData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return DashboardAPI.readJobGraph({period:periodSelection,job_type:jobTypeSelection});case 2:_yield$DashboardAPI$r=_context.sent;data=_yield$DashboardAPI$r.data;newData={};data.jobs.successful.forEach(function(_ref2){var _ref3=_slicedToArray(_ref2,2),dateSecs=_ref3[0],count=_ref3[1];if(!newData[dateSecs]){newData[dateSecs]={};}newData[dateSecs].successful=count;});data.jobs.failed.forEach(function(_ref4){var _ref5=_slicedToArray(_ref4,2),dateSecs=_ref5[0],count=_ref5[1];if(!newData[dateSecs]){newData[dateSecs]={};}newData[dateSecs].failed=count;});jobData=Object.keys(newData).map(function(dateSecs){var _Date$toISOString$spl=new Date(dateSecs*1000).toISOString().split('T'),_Date$toISOString$spl2=_slicedToArray(_Date$toISOString$spl,1),created=_Date$toISOString$spl2[0];newData[dateSecs].created=created;return newData[dateSecs];});return _context.abrupt(\"return\",jobData);case 9:case\"end\":return _context.stop();}}},_callee);})),[periodSelection,jobTypeSelection]),[]),isLoading=_useRequest.isLoading,jobGraphData=_useRequest.result,fetchDashboardGraph=_useRequest.request;useEffect(function(){fetchDashboardGraph();},[fetchDashboardGraph,periodSelection,jobTypeSelection]);if(isLoading){return/*#__PURE__*/_jsx(PageSection,{children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(ContentLoading,{})})});}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(GraphCardHeader,{children:/*#__PURE__*/_jsxs(GraphCardActions,{children:[/*#__PURE__*/_jsxs(Select,{variant:SelectVariant.single,placeholderText:/*i18n*/i18n._(\"Select period\"),\"aria-label\":/*i18n*/i18n._(\"Select period\"),typeAheadAriaLabel:/*i18n*/i18n._(\"Select period\"),className:\"periodSelect\",onToggle:setIsPeriodDropdownOpen,onSelect:function onSelect(event,selection){setIsPeriodDropdownOpen(false);setPeriodSelection(selection);},selections:periodSelection,isOpen:isPeriodDropdownOpen,noResultsFoundText:/*i18n*/i18n._(\"No results found\"),ouiaId:\"dashboard-period-select\",children:[/*#__PURE__*/_jsx(SelectOption,{value:\"month\",children:/*i18n*/i18n._(\"Past month\")},\"month\"),/*#__PURE__*/_jsx(SelectOption,{value:\"two_weeks\",children:/*i18n*/i18n._(\"Past two weeks\")},\"two_weeks\"),/*#__PURE__*/_jsx(SelectOption,{value:\"week\",children:/*i18n*/i18n._(\"Past week\")},\"week\"),/*#__PURE__*/_jsx(SelectOption,{value:\"day\",children:/*i18n*/i18n._(\"Past 24 hours\")},\"day\")]}),/*#__PURE__*/_jsxs(Select,{variant:SelectVariant.single,placeholderText:/*i18n*/i18n._(\"Select job type\"),\"aria-label\":/*i18n*/i18n._(\"Select job type\"),className:\"jobTypeSelect\",onToggle:setIsJobTypeDropdownOpen,onSelect:function onSelect(event,selection){setIsJobTypeDropdownOpen(false);setJobTypeSelection(selection);},selections:jobTypeSelection,isOpen:isJobTypeDropdownOpen,ouiaId:\"dashboard-job-type-select\",children:[/*#__PURE__*/_jsx(SelectOption,{value:\"all\",children:/*i18n*/i18n._(\"All job types\")},\"all\"),/*#__PURE__*/_jsx(SelectOption,{value:\"inv_sync\",children:/*i18n*/i18n._(\"Inventory sync\")},\"inv_sync\"),/*#__PURE__*/_jsx(SelectOption,{value:\"scm_update\",children:/*i18n*/i18n._(\"SCM update\")},\"scm_update\"),/*#__PURE__*/_jsx(SelectOption,{value:\"playbook_run\",children:/*i18n*/i18n._(\"Playbook run\")},\"playbook_run\")]}),/*#__PURE__*/_jsxs(StatusSelect,{variant:SelectVariant.single,placeholderText:/*i18n*/i18n._(\"Select status\"),\"aria-label\":/*i18n*/i18n._(\"Select status\"),className:\"jobStatusSelect\",onToggle:setIsJobStatusDropdownOpen,onSelect:function onSelect(event,selection){setIsJobStatusDropdownOpen(false);setJobStatusSelection(selection);},selections:jobStatusSelection,isOpen:isJobStatusDropdownOpen,children:[/*#__PURE__*/_jsx(SelectOption,{value:\"all\",children:/*i18n*/i18n._(\"All jobs\")},\"all\"),/*#__PURE__*/_jsx(SelectOption,{value:\"successful\",children:/*i18n*/i18n._(\"Successful jobs\")},\"successful\"),/*#__PURE__*/_jsx(SelectOption,{value:\"failed\",children:/*i18n*/i18n._(\"Failed jobs\")},\"failed\")]})]})}),/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(LineChart,{jobStatus:jobStatusSelection,height:390,id:\"d3-line-chart-root\",data:jobGraphData})})]});}export default DashboardGraph;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Dashboard/DashboardGraph.js"],"names":["React","useCallback","useEffect","useState","styled","Card","CardHeader","CardActions","CardBody","PageSection","Select","SelectVariant","SelectOption","useRequest","DashboardAPI","ContentLoading","LineChart","StatusSelect","GraphCardHeader","GraphCardActions","DashboardGraph","isPeriodDropdownOpen","setIsPeriodDropdownOpen","isJobTypeDropdownOpen","setIsJobTypeDropdownOpen","isJobStatusDropdownOpen","setIsJobStatusDropdownOpen","periodSelection","setPeriodSelection","jobTypeSelection","setJobTypeSelection","jobStatusSelection","setJobStatusSelection","readJobGraph","period","job_type","data","newData","jobs","successful","forEach","dateSecs","count","failed","jobData","Object","keys","map","Date","toISOString","split","created","isLoading","jobGraphData","result","fetchDashboardGraph","request","single","event","selection"],"mappings":"ogBAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,CAA6BC,SAA7B,CAAwCC,QAAxC,KAAwD,OAAxD,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CAGA,OACEC,IADF,CAEEC,UAFF,CAGEC,WAHF,CAIEC,QAJF,CAKEC,WALF,CAMEC,MANF,CAOEC,aAPF,CAQEC,YARF,KASO,wBATP,CAWA,MAAOC,CAAAA,UAAP,KAAuB,kBAAvB,CACA,OAASC,YAAT,KAA6B,KAA7B,CACA,MAAOC,CAAAA,cAAP,KAA2B,2BAA3B,CACA,MAAOC,CAAAA,SAAP,KAAsB,oBAAtB,C,6IAEA,GAAMC,CAAAA,YAAY,CAAGb,MAAM,CAACM,MAAD,CAAT,6HAAlB,CAKA,GAAMQ,CAAAA,eAAe,CAAGd,MAAM,CAACE,UAAD,CAAT,kHAArB,CAIA,GAAMa,CAAAA,gBAAgB,CAAGf,MAAM,CAACG,WAAD,CAAT,kHAAtB,CAKA,QAASa,CAAAA,cAAT,EAA0B,CACxB,cAAwDjB,QAAQ,CAAC,KAAD,CAAhE,wCAAOkB,oBAAP,eAA6BC,uBAA7B,eACA,eAA0DnB,QAAQ,CAAC,KAAD,CAAlE,yCAAOoB,qBAAP,eAA8BC,wBAA9B,eACA,eAA8DrB,QAAQ,CAAC,KAAD,CAAtE,yCAAOsB,uBAAP,eAAgCC,0BAAhC,eACA,eAA8CvB,QAAQ,CAAC,OAAD,CAAtD,yCAAOwB,eAAP,eAAwBC,kBAAxB,eACA,eAAgDzB,QAAQ,CAAC,KAAD,CAAxD,0CAAO0B,gBAAP,gBAAyBC,mBAAzB,gBACA,gBAAoD3B,QAAQ,CAAC,KAAD,CAA5D,2CAAO4B,kBAAP,gBAA2BC,qBAA3B,gBAEA,gBAIInB,UAAU,CACZZ,WAAW,sEAAC,wMACaa,CAAAA,YAAY,CAACmB,YAAb,CAA0B,CAC/CC,MAAM,CAAEP,eADuC,CAE/CQ,QAAQ,CAAEN,gBAFqC,CAA1B,CADb,4CACFO,IADE,uBACFA,IADE,CAKJC,OALI,CAKM,EALN,CAMVD,IAAI,CAACE,IAAL,CAAUC,UAAV,CAAqBC,OAArB,CAA6B,eAAuB,mCAArBC,QAAqB,UAAXC,KAAW,UAClD,GAAI,CAACL,OAAO,CAACI,QAAD,CAAZ,CAAwB,CACtBJ,OAAO,CAACI,QAAD,CAAP,CAAoB,EAApB,CACD,CACDJ,OAAO,CAACI,QAAD,CAAP,CAAkBF,UAAlB,CAA+BG,KAA/B,CACD,CALD,EAMAN,IAAI,CAACE,IAAL,CAAUK,MAAV,CAAiBH,OAAjB,CAAyB,eAAuB,mCAArBC,QAAqB,UAAXC,KAAW,UAC9C,GAAI,CAACL,OAAO,CAACI,QAAD,CAAZ,CAAwB,CACtBJ,OAAO,CAACI,QAAD,CAAP,CAAoB,EAApB,CACD,CACDJ,OAAO,CAACI,QAAD,CAAP,CAAkBE,MAAlB,CAA2BD,KAA3B,CACD,CALD,EAMME,OAlBI,CAkBMC,MAAM,CAACC,IAAP,CAAYT,OAAZ,EAAqBU,GAArB,CAAyB,SAACN,QAAD,CAAc,CACrD,0BAAkB,GAAIO,CAAAA,IAAJ,CAASP,QAAQ,CAAG,IAApB,EAA0BQ,WAA1B,GAAwCC,KAAxC,CAA8C,GAA9C,CAAlB,gEAAOC,OAAP,2BACAd,OAAO,CAACI,QAAD,CAAP,CAAkBU,OAAlB,CAA4BA,OAA5B,CACA,MAAOd,CAAAA,OAAO,CAACI,QAAD,CAAd,CACD,CAJe,CAlBN,iCAuBHG,OAvBG,wDAAD,GAwBR,CAACjB,eAAD,CAAkBE,gBAAlB,CAxBQ,CADC,CA0BZ,EA1BY,CAJd,CACEuB,SADF,aACEA,SADF,CAEUC,YAFV,aAEEC,MAFF,CAGWC,mBAHX,aAGEC,OAHF,CAiCAtD,SAAS,CAAC,UAAM,CACdqD,mBAAmB,GACpB,CAFQ,CAEN,CAACA,mBAAD,CAAsB5B,eAAtB,CAAuCE,gBAAvC,CAFM,CAAT,CAGA,GAAIuB,SAAJ,CAAe,CACb,mBACE,KAAC,WAAD,wBACE,KAAC,IAAD,wBACE,KAAC,cAAD,IADF,EADF,EADF,CAOD,CAED,mBACE,wCACE,KAAC,eAAD,wBACE,MAAC,gBAAD,yBACE,MAAC,MAAD,EACE,OAAO,CAAEzC,aAAa,CAAC8C,MADzB,CAEE,eAAe,SAAE,uBAFnB,CAGE,qBAAY,uBAHd,CAIE,kBAAkB,SAAE,uBAJtB,CAKE,SAAS,CAAC,cALZ,CAME,QAAQ,CAAEnC,uBANZ,CAOE,QAAQ,CAAE,kBAACoC,KAAD,CAAQC,SAAR,CAAsB,CAC9BrC,uBAAuB,CAAC,KAAD,CAAvB,CACAM,kBAAkB,CAAC+B,SAAD,CAAlB,CACD,CAVH,CAWE,UAAU,CAAEhC,eAXd,CAYE,MAAM,CAAEN,oBAZV,CAaE,kBAAkB,SAAE,0BAbtB,CAcE,MAAM,CAAC,yBAdT,wBAgBE,KAAC,YAAD,EAA0B,KAAK,CAAC,OAAhC,kBACG,oBADH,EAAkB,OAAlB,CAhBF,cAmBE,KAAC,YAAD,EAA8B,KAAK,CAAC,WAApC,kBACG,wBADH,EAAkB,WAAlB,CAnBF,cAsBE,KAAC,YAAD,EAAyB,KAAK,CAAC,MAA/B,kBACG,mBADH,EAAkB,MAAlB,CAtBF,cAyBE,KAAC,YAAD,EAAwB,KAAK,CAAC,KAA9B,kBACG,uBADH,EAAkB,KAAlB,CAzBF,GADF,cA8BE,MAAC,MAAD,EACE,OAAO,CAAEV,aAAa,CAAC8C,MADzB,CAEE,eAAe,SAAE,yBAFnB,CAGE,qBAAY,yBAHd,CAIE,SAAS,CAAC,eAJZ,CAKE,QAAQ,CAAEjC,wBALZ,CAME,QAAQ,CAAE,kBAACkC,KAAD,CAAQC,SAAR,CAAsB,CAC9BnC,wBAAwB,CAAC,KAAD,CAAxB,CACAM,mBAAmB,CAAC6B,SAAD,CAAnB,CACD,CATH,CAUE,UAAU,CAAE9B,gBAVd,CAWE,MAAM,CAAEN,qBAXV,CAYE,MAAM,CAAC,2BAZT,wBAcE,KAAC,YAAD,EAAwB,KAAK,CAAC,KAA9B,kBACG,uBADH,EAAkB,KAAlB,CAdF,cAiBE,KAAC,YAAD,EAA6B,KAAK,CAAC,UAAnC,kBACG,wBADH,EAAkB,UAAlB,CAjBF,cAoBE,KAAC,YAAD,EAA+B,KAAK,CAAC,YAArC,kBACG,oBADH,EAAkB,YAAlB,CApBF,cAuBE,KAAC,YAAD,EAAiC,KAAK,CAAC,cAAvC,kBACG,sBADH,EAAkB,cAAlB,CAvBF,GA9BF,cAyDE,MAAC,YAAD,EACE,OAAO,CAAEZ,aAAa,CAAC8C,MADzB,CAEE,eAAe,SAAE,uBAFnB,CAGE,qBAAY,uBAHd,CAIE,SAAS,CAAC,iBAJZ,CAKE,QAAQ,CAAE/B,0BALZ,CAME,QAAQ,CAAE,kBAACgC,KAAD,CAAQC,SAAR,CAAsB,CAC9BjC,0BAA0B,CAAC,KAAD,CAA1B,CACAM,qBAAqB,CAAC2B,SAAD,CAArB,CACD,CATH,CAUE,UAAU,CAAE5B,kBAVd,CAWE,MAAM,CAAEN,uBAXV,wBAaE,KAAC,YAAD,EAAwB,KAAK,CAAC,KAA9B,kBAAqC,kBAArC,EAAkB,KAAlB,CAbF,cAcE,KAAC,YAAD,EAEE,KAAK,CAAC,YAFR,kBAGE,yBAHF,EACM,YADN,CAdF,cAkBE,KAAC,YAAD,EAEE,KAAK,CAAC,QAFR,kBAGE,qBAHF,EACM,QADN,CAlBF,GAzDF,GADF,EADF,cAoFE,KAAC,QAAD,wBACE,KAAC,SAAD,EACE,SAAS,CAAEM,kBADb,CAEE,MAAM,CAAE,GAFV,CAGE,EAAE,CAAC,oBAHL,CAIE,IAAI,CAAEsB,YAJR,EADF,EApFF,GADF,CA+FD,CACD,cAAejC,CAAAA,cAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { t } from '@lingui/macro';\nimport {\n  Card,\n  CardHeader,\n  CardActions,\n  CardBody,\n  PageSection,\n  Select,\n  SelectVariant,\n  SelectOption,\n} from '@patternfly/react-core';\n\nimport useRequest from 'hooks/useRequest';\nimport { DashboardAPI } from 'api';\nimport ContentLoading from 'components/ContentLoading';\nimport LineChart from './shared/LineChart';\n\nconst StatusSelect = styled(Select)`\n  && {\n    --pf-c-select__toggle--MinWidth: 165px;\n  }\n`;\nconst GraphCardHeader = styled(CardHeader)`\n  margin-top: var(--pf-global--spacer--lg);\n`;\n\nconst GraphCardActions = styled(CardActions)`\n  margin-left: initial;\n  padding-left: 0;\n`;\n\nfunction DashboardGraph() {\n  const [isPeriodDropdownOpen, setIsPeriodDropdownOpen] = useState(false);\n  const [isJobTypeDropdownOpen, setIsJobTypeDropdownOpen] = useState(false);\n  const [isJobStatusDropdownOpen, setIsJobStatusDropdownOpen] = useState(false);\n  const [periodSelection, setPeriodSelection] = useState('month');\n  const [jobTypeSelection, setJobTypeSelection] = useState('all');\n  const [jobStatusSelection, setJobStatusSelection] = useState('all');\n\n  const {\n    isLoading,\n    result: jobGraphData,\n    request: fetchDashboardGraph,\n  } = useRequest(\n    useCallback(async () => {\n      const { data } = await DashboardAPI.readJobGraph({\n        period: periodSelection,\n        job_type: jobTypeSelection,\n      });\n      const newData = {};\n      data.jobs.successful.forEach(([dateSecs, count]) => {\n        if (!newData[dateSecs]) {\n          newData[dateSecs] = {};\n        }\n        newData[dateSecs].successful = count;\n      });\n      data.jobs.failed.forEach(([dateSecs, count]) => {\n        if (!newData[dateSecs]) {\n          newData[dateSecs] = {};\n        }\n        newData[dateSecs].failed = count;\n      });\n      const jobData = Object.keys(newData).map((dateSecs) => {\n        const [created] = new Date(dateSecs * 1000).toISOString().split('T');\n        newData[dateSecs].created = created;\n        return newData[dateSecs];\n      });\n      return jobData;\n    }, [periodSelection, jobTypeSelection]),\n    []\n  );\n\n  useEffect(() => {\n    fetchDashboardGraph();\n  }, [fetchDashboardGraph, periodSelection, jobTypeSelection]);\n  if (isLoading) {\n    return (\n      <PageSection>\n        <Card>\n          <ContentLoading />\n        </Card>\n      </PageSection>\n    );\n  }\n\n  return (\n    <>\n      <GraphCardHeader>\n        <GraphCardActions>\n          <Select\n            variant={SelectVariant.single}\n            placeholderText={t`Select period`}\n            aria-label={t`Select period`}\n            typeAheadAriaLabel={t`Select period`}\n            className=\"periodSelect\"\n            onToggle={setIsPeriodDropdownOpen}\n            onSelect={(event, selection) => {\n              setIsPeriodDropdownOpen(false);\n              setPeriodSelection(selection);\n            }}\n            selections={periodSelection}\n            isOpen={isPeriodDropdownOpen}\n            noResultsFoundText={t`No results found`}\n            ouiaId=\"dashboard-period-select\"\n          >\n            <SelectOption key=\"month\" value=\"month\">\n              {t`Past month`}\n            </SelectOption>\n            <SelectOption key=\"two_weeks\" value=\"two_weeks\">\n              {t`Past two weeks`}\n            </SelectOption>\n            <SelectOption key=\"week\" value=\"week\">\n              {t`Past week`}\n            </SelectOption>\n            <SelectOption key=\"day\" value=\"day\">\n              {t`Past 24 hours`}\n            </SelectOption>\n          </Select>\n          <Select\n            variant={SelectVariant.single}\n            placeholderText={t`Select job type`}\n            aria-label={t`Select job type`}\n            className=\"jobTypeSelect\"\n            onToggle={setIsJobTypeDropdownOpen}\n            onSelect={(event, selection) => {\n              setIsJobTypeDropdownOpen(false);\n              setJobTypeSelection(selection);\n            }}\n            selections={jobTypeSelection}\n            isOpen={isJobTypeDropdownOpen}\n            ouiaId=\"dashboard-job-type-select\"\n          >\n            <SelectOption key=\"all\" value=\"all\">\n              {t`All job types`}\n            </SelectOption>\n            <SelectOption key=\"inv_sync\" value=\"inv_sync\">\n              {t`Inventory sync`}\n            </SelectOption>\n            <SelectOption key=\"scm_update\" value=\"scm_update\">\n              {t`SCM update`}\n            </SelectOption>\n            <SelectOption key=\"playbook_run\" value=\"playbook_run\">\n              {t`Playbook run`}\n            </SelectOption>\n          </Select>\n          <StatusSelect\n            variant={SelectVariant.single}\n            placeholderText={t`Select status`}\n            aria-label={t`Select status`}\n            className=\"jobStatusSelect\"\n            onToggle={setIsJobStatusDropdownOpen}\n            onSelect={(event, selection) => {\n              setIsJobStatusDropdownOpen(false);\n              setJobStatusSelection(selection);\n            }}\n            selections={jobStatusSelection}\n            isOpen={isJobStatusDropdownOpen}\n          >\n            <SelectOption key=\"all\" value=\"all\">{t`All jobs`}</SelectOption>\n            <SelectOption\n              key=\"successful\"\n              value=\"successful\"\n            >{t`Successful jobs`}</SelectOption>\n            <SelectOption\n              key=\"failed\"\n              value=\"failed\"\n            >{t`Failed jobs`}</SelectOption>\n          </StatusSelect>\n        </GraphCardActions>\n      </GraphCardHeader>\n      <CardBody>\n        <LineChart\n          jobStatus={jobStatusSelection}\n          height={390}\n          id=\"d3-line-chart-root\"\n          data={jobGraphData}\n        />\n      </CardBody>\n    </>\n  );\n}\nexport default DashboardGraph;\n"]},"metadata":{},"sourceType":"module"}