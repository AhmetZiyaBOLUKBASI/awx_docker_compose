{"ast":null,"code":"import _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { DualListSelectorPane } from './DualListSelectorPane';\nimport { getUniqueId } from '../../helpers';\nimport { flattenTree, flattenTreeWithFolders, filterFolders, filterTreeItems, filterTreeItemsWithoutFolders, filterRestTreeItems } from './treeUtils';\nimport { DualListSelectorControlsWrapper } from './DualListSelectorControlsWrapper';\nimport { DualListSelectorControl } from './DualListSelectorControl';\nimport { DualListSelectorContext } from './DualListSelectorContext';\nexport var DualListSelector = /*#__PURE__*/function (_React$Component) {\n  _inherits(DualListSelector, _React$Component);\n\n  var _super = _createSuper(DualListSelector);\n\n  function DualListSelector(props) {\n    var _this;\n\n    _classCallCheck(this, DualListSelector);\n\n    _this = _super.call(this, props);\n    _this.addAllButtonRef = React.createRef();\n    _this.addSelectedButtonRef = React.createRef();\n    _this.removeSelectedButtonRef = React.createRef();\n    _this.removeAllButtonRef = React.createRef();\n    /** In dev environment, prevents circular structure during JSON stringification when\n     * options passed in to the dual list selector include HTML elements.\n     */\n\n    _this.replacer = function (key, value) {\n      if (key[0] === '_') {\n        return undefined;\n      }\n\n      return value;\n    };\n\n    _this.onFilterUpdate = function (newFilteredOptions, paneType, isSearchReset) {\n      var isTree = _this.props.isTree;\n\n      if (paneType === 'available') {\n        if (isSearchReset) {\n          _this.setState({\n            availableFilteredOptions: null,\n            availableTreeFilteredOptions: null\n          });\n\n          return;\n        }\n\n        if (isTree) {\n          _this.setState({\n            availableTreeFilteredOptions: flattenTreeWithFolders(newFilteredOptions)\n          });\n        } else {\n          _this.setState({\n            availableFilteredOptions: newFilteredOptions\n          });\n        }\n      } else if (paneType === 'chosen') {\n        if (isSearchReset) {\n          _this.setState({\n            chosenFilteredOptions: null,\n            chosenTreeFilteredOptions: null\n          });\n\n          return;\n        }\n\n        if (isTree) {\n          _this.setState({\n            chosenTreeFilteredOptions: flattenTreeWithFolders(newFilteredOptions)\n          });\n        } else {\n          _this.setState({\n            chosenFilteredOptions: newFilteredOptions\n          });\n        }\n      }\n    };\n\n    _this.addAllVisible = function () {\n      _this.setState(function (prevState) {\n        var itemsToRemove = [];\n        var newAvailable = [];\n        var movedOptions = prevState.availableFilteredOptions || prevState.availableOptions;\n        prevState.availableOptions.forEach(function (value) {\n          if (movedOptions.indexOf(value) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newAvailable.push(value);\n          }\n        });\n        var newChosen = [].concat(_toConsumableArray(prevState.chosenOptions), itemsToRemove);\n        _this.props.addAll && _this.props.addAll(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptions: newChosen,\n          availableOptions: newAvailable,\n          chosenOptionsSelected: [],\n          availableOptionsSelected: []\n        };\n      });\n    };\n\n    _this.addAllTreeVisible = function () {\n      _this.setState(function (prevState) {\n        var movedOptions = prevState.availableTreeFilteredOptions || flattenTreeWithFolders(prevState.availableOptions);\n        var newAvailable = prevState.availableOptions.map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterRestTreeItems(item, movedOptions);\n        });\n        var currChosen = flattenTree(prevState.chosenOptions);\n        var nextChosenOptions = currChosen.concat(movedOptions);\n\n        var newChosen = _this.createMergedCopy().map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterTreeItemsWithoutFolders(item, nextChosenOptions);\n        });\n\n        _this.props.addAll && _this.props.addAll(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptions: newChosen,\n          chosenFilteredOptions: newChosen,\n          availableOptions: newAvailable,\n          availableFilteredOptions: newAvailable,\n          availableTreeOptionsChecked: [],\n          chosenTreeOptionsChecked: []\n        };\n      });\n    };\n\n    _this.addSelected = function () {\n      _this.setState(function (prevState) {\n        var itemsToRemove = [];\n        var newAvailable = [];\n        prevState.availableOptions.forEach(function (value, index) {\n          if (prevState.availableOptionsSelected.indexOf(index) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newAvailable.push(value);\n          }\n        });\n        var newChosen = [].concat(_toConsumableArray(prevState.chosenOptions), itemsToRemove);\n        _this.props.addSelected && _this.props.addSelected(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptionsSelected: [],\n          availableOptionsSelected: [],\n          chosenOptions: newChosen,\n          availableOptions: newAvailable\n        };\n      });\n    };\n\n    _this.addTreeSelected = function () {\n      _this.setState(function (prevState) {\n        // Remove selected available nodes from current available nodes\n        var newAvailable = prevState.availableOptions.map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterRestTreeItems(item, prevState.availableTreeOptionsChecked);\n        }); // Get next chosen options from current + new nodes and remap from base\n\n        var currChosen = flattenTree(prevState.chosenOptions);\n        var nextChosenOptions = currChosen.concat(prevState.availableTreeOptionsChecked);\n\n        var newChosen = _this.createMergedCopy().map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterTreeItemsWithoutFolders(item, nextChosenOptions);\n        });\n\n        _this.props.addSelected && _this.props.addSelected(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          availableTreeOptionsChecked: [],\n          chosenTreeOptionsChecked: [],\n          availableOptions: newAvailable,\n          chosenOptions: newChosen\n        };\n      });\n    };\n\n    _this.removeAllVisible = function () {\n      _this.setState(function (prevState) {\n        var itemsToRemove = [];\n        var newChosen = [];\n        var movedOptions = prevState.chosenFilteredOptions || prevState.chosenOptions;\n        prevState.chosenOptions.forEach(function (value) {\n          if (movedOptions.indexOf(value) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newChosen.push(value);\n          }\n        });\n        var newAvailable = [].concat(_toConsumableArray(prevState.availableOptions), itemsToRemove);\n        _this.props.removeAll && _this.props.removeAll(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptions: newChosen,\n          availableOptions: newAvailable,\n          chosenOptionsSelected: [],\n          availableOptionsSelected: []\n        };\n      });\n    };\n\n    _this.removeAllTreeVisible = function () {\n      _this.setState(function (prevState) {\n        var movedOptions = prevState.chosenTreeFilteredOptions || flattenTreeWithFolders(prevState.chosenOptions);\n        var newChosen = prevState.chosenOptions.map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterRestTreeItems(item, movedOptions);\n        });\n        var currAvailable = flattenTree(prevState.availableOptions);\n        var nextAvailableOptions = currAvailable.concat(movedOptions);\n\n        var newAvailable = _this.createMergedCopy().map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterTreeItemsWithoutFolders(item, nextAvailableOptions);\n        });\n\n        _this.props.removeAll && _this.props.removeAll(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptions: newChosen,\n          availableOptions: newAvailable,\n          availableTreeOptionsChecked: [],\n          chosenTreeOptionsChecked: []\n        };\n      });\n    };\n\n    _this.removeSelected = function () {\n      _this.setState(function (prevState) {\n        var itemsToRemove = [];\n        var newChosen = [];\n        prevState.chosenOptions.forEach(function (value, index) {\n          if (prevState.chosenOptionsSelected.indexOf(index) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newChosen.push(value);\n          }\n        });\n        var newAvailable = [].concat(_toConsumableArray(prevState.availableOptions), itemsToRemove);\n        _this.props.removeSelected && _this.props.removeSelected(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptionsSelected: [],\n          availableOptionsSelected: [],\n          chosenOptions: newChosen,\n          availableOptions: newAvailable\n        };\n      });\n    };\n\n    _this.removeTreeSelected = function () {\n      _this.setState(function (prevState) {\n        // Remove selected chosen nodes from current chosen nodes\n        var newChosen = prevState.chosenOptions.map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterRestTreeItems(item, prevState.chosenTreeOptionsChecked);\n        }); // Get next chosen options from current and remap from base\n\n        var currAvailable = flattenTree(prevState.availableOptions);\n        var nextAvailableOptions = currAvailable.concat(prevState.chosenTreeOptionsChecked);\n\n        var newAvailable = _this.createMergedCopy().map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterTreeItemsWithoutFolders(item, nextAvailableOptions);\n        });\n\n        _this.props.removeSelected && _this.props.removeSelected(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          availableTreeOptionsChecked: [],\n          chosenTreeOptionsChecked: [],\n          availableOptions: newAvailable,\n          chosenOptions: newChosen\n        };\n      });\n    };\n\n    _this.onOptionSelect = function (e, index, isChosen,\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    id, itemData, parentData\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ) {\n      _this.setState(function (prevState) {\n        var originalArray = isChosen ? prevState.chosenOptionsSelected : prevState.availableOptionsSelected;\n        var updatedArray = null;\n\n        if (originalArray.indexOf(index) !== -1) {\n          updatedArray = originalArray.filter(function (value) {\n            return value !== index;\n          });\n        } else {\n          updatedArray = [].concat(_toConsumableArray(originalArray), [index]);\n        }\n\n        return {\n          chosenOptionsSelected: isChosen ? updatedArray : prevState.chosenOptionsSelected,\n          availableOptionsSelected: isChosen ? prevState.availableOptionsSelected : updatedArray\n        };\n      });\n\n      _this.props.onOptionSelect && _this.props.onOptionSelect(e, index, isChosen, id, itemData, parentData);\n    };\n\n    _this.isChecked = function (treeItem, isChosen) {\n      return isChosen ? _this.state.chosenTreeOptionsChecked.includes(treeItem.id) : _this.state.availableTreeOptionsChecked.includes(treeItem.id);\n    };\n\n    _this.areAllDescendantsChecked = function (treeItem, isChosen) {\n      return treeItem.children ? treeItem.children.every(function (child) {\n        return _this.areAllDescendantsChecked(child, isChosen);\n      }) : _this.isChecked(treeItem, isChosen);\n    };\n\n    _this.areSomeDescendantsChecked = function (treeItem, isChosen) {\n      return treeItem.children ? treeItem.children.some(function (child) {\n        return _this.areSomeDescendantsChecked(child, isChosen);\n      }) : _this.isChecked(treeItem, isChosen);\n    };\n\n    _this.mapChecked = function (item, isChosen) {\n      var hasCheck = _this.areAllDescendantsChecked(item, isChosen);\n\n      item.isChecked = false;\n\n      if (hasCheck) {\n        item.isChecked = true;\n      } else {\n        var hasPartialCheck = _this.areSomeDescendantsChecked(item, isChosen);\n\n        if (hasPartialCheck) {\n          item.isChecked = null;\n        }\n      }\n\n      if (item.children) {\n        return Object.assign(Object.assign({}, item), {\n          children: item.children.map(function (child) {\n            return _this.mapChecked(child, isChosen);\n          })\n        });\n      }\n\n      return item;\n    };\n\n    _this.onTreeOptionCheck = function (evt, isChecked, itemData, isChosen) {\n      var _this$state = _this.state,\n          availableOptions = _this$state.availableOptions,\n          availableTreeFilteredOptions = _this$state.availableTreeFilteredOptions,\n          chosenOptions = _this$state.chosenOptions,\n          chosenTreeFilteredOptions = _this$state.chosenTreeFilteredOptions;\n      var panelOptions;\n\n      if (isChosen) {\n        if (chosenTreeFilteredOptions) {\n          panelOptions = chosenOptions.map(function (opt) {\n            return Object.assign({}, opt);\n          }).filter(function (item) {\n            return filterTreeItemsWithoutFolders(item, chosenTreeFilteredOptions);\n          });\n        } else {\n          panelOptions = chosenOptions;\n        }\n      } else {\n        if (availableTreeFilteredOptions) {\n          panelOptions = availableOptions.map(function (opt) {\n            return Object.assign({}, opt);\n          }).filter(function (item) {\n            return filterTreeItemsWithoutFolders(item, availableTreeFilteredOptions);\n          });\n        } else {\n          panelOptions = availableOptions;\n        }\n      }\n\n      var checkedOptionTree = panelOptions.map(function (opt) {\n        return Object.assign({}, opt);\n      }).filter(function (item) {\n        return filterTreeItems(item, [itemData.id]);\n      });\n      var flatTree = flattenTreeWithFolders(checkedOptionTree);\n      var prevChecked = isChosen ? _this.state.chosenTreeOptionsChecked : _this.state.availableTreeOptionsChecked;\n      var updatedChecked = [];\n\n      if (isChecked) {\n        updatedChecked = prevChecked.concat(flatTree.filter(function (id) {\n          return !prevChecked.includes(id);\n        }));\n      } else {\n        updatedChecked = prevChecked.filter(function (id) {\n          return !flatTree.includes(id);\n        });\n      }\n\n      _this.setState(function (prevState) {\n        return {\n          availableTreeOptionsChecked: isChosen ? prevState.availableTreeOptionsChecked : updatedChecked,\n          chosenTreeOptionsChecked: isChosen ? updatedChecked : prevState.chosenTreeOptionsChecked\n        };\n      }, function () {\n        _this.props.onOptionCheck && _this.props.onOptionCheck(evt, isChecked, itemData.id, updatedChecked);\n      });\n    };\n\n    _this.state = {\n      availableOptions: _toConsumableArray(_this.props.availableOptions),\n      availableOptionsSelected: [],\n      availableFilteredOptions: null,\n      availableTreeFilteredOptions: null,\n      chosenOptions: _toConsumableArray(_this.props.chosenOptions),\n      chosenOptionsSelected: [],\n      chosenFilteredOptions: null,\n      chosenTreeFilteredOptions: null,\n      availableTreeOptionsChecked: [],\n      chosenTreeOptionsChecked: []\n    };\n    return _this;\n  } // If the DualListSelector uses trees, concat the two initial arrays and merge duplicate folder IDs\n\n\n  _createClass(DualListSelector, [{\n    key: \"createMergedCopy\",\n    value: function createMergedCopy() {\n      var copyOfAvailable = JSON.parse(JSON.stringify(this.props.availableOptions));\n      var copyOfChosen = JSON.parse(JSON.stringify(this.props.chosenOptions));\n      return this.props.isTree ? Object.values(copyOfAvailable.concat(copyOfChosen).reduce(function (mapObj, item) {\n        var key = item.id;\n\n        if (mapObj[key]) {\n          var _mapObj$key$children;\n\n          // If map already has an item ID, add the dupe ID's children to the existing map\n          (_mapObj$key$children = mapObj[key].children).push.apply(_mapObj$key$children, _toConsumableArray(item.children));\n        } else {\n          // Else clone the item data\n          mapObj[key] = Object.assign({}, item);\n        }\n\n        return mapObj;\n      }, {})) : null;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (JSON.stringify(this.props.availableOptions, this.replacer) !== JSON.stringify(this.state.availableOptions, this.replacer) || JSON.stringify(this.props.chosenOptions, this.replacer) !== JSON.stringify(this.state.chosenOptions, this.replacer)) {\n        this.setState({\n          availableOptions: _toConsumableArray(this.props.availableOptions),\n          chosenOptions: _toConsumableArray(this.props.chosenOptions)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          availableOptionsTitle = _a.availableOptionsTitle,\n          availableOptionsActions = _a.availableOptionsActions,\n          availableOptionsSearchAriaLabel = _a.availableOptionsSearchAriaLabel,\n          className = _a.className,\n          children = _a.children,\n          chosenOptionsTitle = _a.chosenOptionsTitle,\n          chosenOptionsActions = _a.chosenOptionsActions,\n          chosenOptionsSearchAriaLabel = _a.chosenOptionsSearchAriaLabel,\n          filterOption = _a.filterOption,\n          isSearchable = _a.isSearchable,\n          chosenOptionsStatus = _a.chosenOptionsStatus,\n          availableOptionsStatus = _a.availableOptionsStatus,\n          controlsAriaLabel = _a.controlsAriaLabel,\n          addAllAriaLabel = _a.addAllAriaLabel,\n          addSelectedAriaLabel = _a.addSelectedAriaLabel,\n          removeSelectedAriaLabel = _a.removeSelectedAriaLabel,\n          removeAllAriaLabel = _a.removeAllAriaLabel,\n          consumerPassedAvailableOptions = _a.availableOptions,\n          consumerPassedChosenOptions = _a.chosenOptions,\n          removeSelected = _a.removeSelected,\n          addAll = _a.addAll,\n          removeAll = _a.removeAll,\n          addSelected = _a.addSelected,\n          onListChange = _a.onListChange,\n          onAvailableOptionsSearchInputChanged = _a.onAvailableOptionsSearchInputChanged,\n          onChosenOptionsSearchInputChanged = _a.onChosenOptionsSearchInputChanged,\n          onOptionSelect = _a.onOptionSelect,\n          onOptionCheck = _a.onOptionCheck,\n          id = _a.id,\n          isTree = _a.isTree,\n          isDisabled = _a.isDisabled,\n          addAllTooltip = _a.addAllTooltip,\n          addAllTooltipProps = _a.addAllTooltipProps,\n          addSelectedTooltip = _a.addSelectedTooltip,\n          addSelectedTooltipProps = _a.addSelectedTooltipProps,\n          removeAllTooltip = _a.removeAllTooltip,\n          removeAllTooltipProps = _a.removeAllTooltipProps,\n          removeSelectedTooltip = _a.removeSelectedTooltip,\n          removeSelectedTooltipProps = _a.removeSelectedTooltipProps,\n          props = __rest(_a, [\"availableOptionsTitle\", \"availableOptionsActions\", \"availableOptionsSearchAriaLabel\", \"className\", \"children\", \"chosenOptionsTitle\", \"chosenOptionsActions\", \"chosenOptionsSearchAriaLabel\", \"filterOption\", \"isSearchable\", \"chosenOptionsStatus\", \"availableOptionsStatus\", \"controlsAriaLabel\", \"addAllAriaLabel\", \"addSelectedAriaLabel\", \"removeSelectedAriaLabel\", \"removeAllAriaLabel\", \"availableOptions\", \"chosenOptions\", \"removeSelected\", \"addAll\", \"removeAll\", \"addSelected\", \"onListChange\", \"onAvailableOptionsSearchInputChanged\", \"onChosenOptionsSearchInputChanged\", \"onOptionSelect\", \"onOptionCheck\", \"id\", \"isTree\", \"isDisabled\", \"addAllTooltip\", \"addAllTooltipProps\", \"addSelectedTooltip\", \"addSelectedTooltipProps\", \"removeAllTooltip\", \"removeAllTooltipProps\", \"removeSelectedTooltip\", \"removeSelectedTooltipProps\"]);\n\n      var _this$state2 = this.state,\n          availableOptions = _this$state2.availableOptions,\n          chosenOptions = _this$state2.chosenOptions,\n          chosenOptionsSelected = _this$state2.chosenOptionsSelected,\n          availableOptionsSelected = _this$state2.availableOptionsSelected,\n          chosenTreeOptionsChecked = _this$state2.chosenTreeOptionsChecked,\n          availableTreeOptionsChecked = _this$state2.availableTreeOptionsChecked;\n      var availableOptionsStatusToDisplay = availableOptionsStatus || (isTree ? \"\".concat(filterFolders(availableOptions, availableTreeOptionsChecked).length, \" of \").concat(flattenTree(availableOptions).length, \" items selected\") : \"\".concat(availableOptionsSelected.length, \" of \").concat(availableOptions.length, \" items selected\"));\n      var chosenOptionsStatusToDisplay = chosenOptionsStatus || (isTree ? \"\".concat(filterFolders(chosenOptions, chosenTreeOptionsChecked).length, \" of \").concat(flattenTree(chosenOptions).length, \" items selected\") : \"\".concat(chosenOptionsSelected.length, \" of \").concat(chosenOptions.length, \" items selected\"));\n      var available = isTree ? availableOptions.map(function (item) {\n        return _this2.mapChecked(item, false);\n      }) : availableOptions;\n      var chosen = isTree ? chosenOptions.map(function (item) {\n        return _this2.mapChecked(item, true);\n      }) : chosenOptions;\n      return React.createElement(DualListSelectorContext.Provider, {\n        value: {\n          isTree: isTree\n        }\n      }, React.createElement(\"div\", Object.assign({\n        className: css(styles.dualListSelector, className),\n        id: id\n      }, props), children === '' ? React.createElement(React.Fragment, null, React.createElement(DualListSelectorPane, {\n        isSearchable: isSearchable,\n        onFilterUpdate: this.onFilterUpdate,\n        searchInputAriaLabel: availableOptionsSearchAriaLabel,\n        filterOption: filterOption,\n        onSearchInputChanged: onAvailableOptionsSearchInputChanged,\n        status: availableOptionsStatusToDisplay,\n        title: availableOptionsTitle,\n        options: available,\n        selectedOptions: isTree ? availableTreeOptionsChecked : availableOptionsSelected,\n        onOptionSelect: this.onOptionSelect,\n        onOptionCheck: function onOptionCheck(e, isChecked, itemData) {\n          return _this2.onTreeOptionCheck(e, isChecked, itemData, false);\n        },\n        actions: availableOptionsActions,\n        id: \"\".concat(id, \"-available-pane\"),\n        isDisabled: isDisabled\n      }), React.createElement(DualListSelectorControlsWrapper, {\n        \"aria-label\": controlsAriaLabel\n      }, React.createElement(DualListSelectorControl, {\n        isDisabled: (isTree ? availableTreeOptionsChecked.length === 0 : availableOptionsSelected.length === 0) || isDisabled,\n        onClick: isTree ? this.addTreeSelected : this.addSelected,\n        ref: this.addSelectedButtonRef,\n        \"aria-label\": addSelectedAriaLabel,\n        tooltipContent: addSelectedTooltip,\n        tooltipProps: addSelectedTooltipProps\n      }, React.createElement(AngleRightIcon, null)), React.createElement(DualListSelectorControl, {\n        isDisabled: availableOptions.length === 0 || isDisabled,\n        onClick: isTree ? this.addAllTreeVisible : this.addAllVisible,\n        ref: this.addAllButtonRef,\n        \"aria-label\": addAllAriaLabel,\n        tooltipContent: addAllTooltip,\n        tooltipProps: addAllTooltipProps\n      }, React.createElement(AngleDoubleRightIcon, null)), React.createElement(DualListSelectorControl, {\n        isDisabled: chosenOptions.length === 0 || isDisabled,\n        onClick: isTree ? this.removeAllTreeVisible : this.removeAllVisible,\n        \"aria-label\": removeAllAriaLabel,\n        ref: this.removeAllButtonRef,\n        tooltipContent: removeAllTooltip,\n        tooltipProps: removeAllTooltipProps\n      }, React.createElement(AngleDoubleLeftIcon, null)), React.createElement(DualListSelectorControl, {\n        onClick: isTree ? this.removeTreeSelected : this.removeSelected,\n        isDisabled: (isTree ? chosenTreeOptionsChecked.length === 0 : chosenOptionsSelected.length === 0) || isDisabled,\n        ref: this.removeSelectedButtonRef,\n        \"aria-label\": removeSelectedAriaLabel,\n        tooltipContent: removeSelectedTooltip,\n        tooltipProps: removeSelectedTooltipProps\n      }, React.createElement(AngleLeftIcon, null))), React.createElement(DualListSelectorPane, {\n        isChosen: true,\n        isSearchable: isSearchable,\n        onFilterUpdate: this.onFilterUpdate,\n        searchInputAriaLabel: chosenOptionsSearchAriaLabel,\n        filterOption: filterOption,\n        onSearchInputChanged: onChosenOptionsSearchInputChanged,\n        title: chosenOptionsTitle,\n        status: chosenOptionsStatusToDisplay,\n        options: chosen,\n        selectedOptions: isTree ? chosenTreeOptionsChecked : chosenOptionsSelected,\n        onOptionSelect: this.onOptionSelect,\n        onOptionCheck: function onOptionCheck(e, isChecked, itemData) {\n          return _this2.onTreeOptionCheck(e, isChecked, itemData, true);\n        },\n        actions: chosenOptionsActions,\n        id: \"\".concat(id, \"-chosen-pane\"),\n        isDisabled: isDisabled\n      })) : children));\n    }\n  }]);\n\n  return DualListSelector;\n}(React.Component);\nDualListSelector.displayName = 'DualListSelector';\nDualListSelector.defaultProps = {\n  children: '',\n  availableOptions: [],\n  availableOptionsTitle: 'Available options',\n  availableOptionsSearchAriaLabel: 'Available search input',\n  chosenOptions: [],\n  chosenOptionsTitle: 'Chosen options',\n  chosenOptionsSearchAriaLabel: 'Chosen search input',\n  id: getUniqueId('dual-list-selector'),\n  controlsAriaLabel: 'Selector controls',\n  addAllAriaLabel: 'Add all',\n  addSelectedAriaLabel: 'Add selected',\n  removeSelectedAriaLabel: 'Remove selected',\n  removeAllAriaLabel: 'Remove all',\n  isTree: false,\n  isDisabled: false\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelector.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { DualListSelectorPane } from './DualListSelectorPane';\nimport { getUniqueId, PickOptional } from '../../helpers';\nimport { DualListSelectorTreeItemData } from './DualListSelectorTree';\nimport {\n  flattenTree,\n  flattenTreeWithFolders,\n  filterFolders,\n  filterTreeItems,\n  filterTreeItemsWithoutFolders,\n  filterRestTreeItems\n} from './treeUtils';\nimport { DualListSelectorControlsWrapper } from './DualListSelectorControlsWrapper';\nimport { DualListSelectorControl } from './DualListSelectorControl';\nimport { DualListSelectorContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorProps {\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Id of the dual list selector. */\n  id?: string;\n  /** Flag indicating if the dual list selector uses trees instead of simple lists */\n  isTree?: boolean;\n  /** Flag indicating if the dual list selector is in a disabled state */\n  isDisabled?: boolean;\n  /** Content to be rendered in the dual list selector. Panes & controls will not be built dynamically when children are provided. */\n  children?: React.ReactNode;\n  /** Title applied to the dynamically built available options pane. */\n  availableOptionsTitle?: string;\n  /** Options to display in the dynamically built available options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format. */\n  availableOptions?: React.ReactNode[] | DualListSelectorTreeItemData[];\n  /** Status message to display above the dynamically built available options pane. */\n  availableOptionsStatus?: string;\n  /** Actions to be displayed above the dynamically built available options pane. */\n  availableOptionsActions?: React.ReactNode[];\n  /** Title applied to the dynamically built chosen options pane. */\n  chosenOptionsTitle?: string;\n  /** Options to display in the dynamically built chosen options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format. */\n  chosenOptions?: React.ReactNode[] | DualListSelectorTreeItemData[];\n  /** Status message to display above the dynamically built chosen options pane.*/\n  chosenOptionsStatus?: string;\n  /** Actions to be displayed above the dynamically built chosen options pane. */\n  chosenOptionsActions?: React.ReactNode[];\n  /** Accessible label for the dynamically built controls between the two panes. */\n  controlsAriaLabel?: string;\n  /** Optional callback for the dynamically built add selected button */\n  addSelected?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Accessible label for the dynamically built add selected button */\n  addSelectedAriaLabel?: string;\n  /** Tooltip content for the dynamically built add selected button */\n  addSelectedTooltip?: React.ReactNode;\n  /** Additonal tooltip properties for the dynamically built add selected tooltip */\n  addSelectedTooltipProps?: any;\n  /** Callback fired every time dynamically built options are chosen or removed */\n  onListChange?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Optional callback for the dynamically built add all button */\n  addAll?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Accessible label for the dynamically built add all button */\n  addAllAriaLabel?: string;\n  /** Tooltip content for the dynamically built add all button */\n  addAllTooltip?: React.ReactNode;\n  /** Additonal tooltip properties for the dynamically built add all tooltip */\n  addAllTooltipProps?: any;\n  /** Optional callback for the dynamically built remove selected button */\n  removeSelected?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Accessible label for the dynamically built remove selected button */\n  removeSelectedAriaLabel?: string;\n  /** Tooltip content for the dynamically built remove selected button */\n  removeSelectedTooltip?: React.ReactNode;\n  /** Additonal tooltip properties for the dynamically built remove selected tooltip  */\n  removeSelectedTooltipProps?: any;\n  /** Optional callback for the dynamically built remove all button */\n  removeAll?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Accessible label for the dynamically built remove all button */\n  removeAllAriaLabel?: string;\n  /** Tooltip content for the dynamically built remove all button */\n  removeAllTooltip?: React.ReactNode;\n  /** Additonal tooltip properties for the dynamically built remove all tooltip */\n  removeAllTooltipProps?: any;\n  /** Optional callback fired when a dynamically built option is selected */\n  onOptionSelect?: (\n    e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n    index: number,\n    isChosen: boolean,\n    id: string,\n    itemData: any,\n    parentData: any\n  ) => void;\n  /** Optional callback fired when a dynamically built option is checked */\n  onOptionCheck?: (\n    e: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    checked: boolean,\n    checkedId: string,\n    newCheckedItems: string[]\n  ) => void;\n  /** Flag indicating a search bar should be included above both the dynamically built available and chosen panes. */\n  isSearchable?: boolean;\n  /** Accessible label for the search input on the dynamically built available options pane. */\n  availableOptionsSearchAriaLabel?: string;\n  /** A callback for when the search input value for the dynamically built available options changes. */\n  onAvailableOptionsSearchInputChanged?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Accessible label for the search input on the dynamically built chosen options pane. */\n  chosenOptionsSearchAriaLabel?: string;\n  /** A callback for when the search input value for the dynamically built chosen options changes. */\n  onChosenOptionsSearchInputChanged?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Optional filter function for custom filtering based on search string. Used with a dynamically built search input. */\n  filterOption?: (option: React.ReactNode, input: string) => boolean;\n}\n\ninterface DualListSelectorState {\n  availableOptions: React.ReactNode[];\n  availableOptionsSelected: number[];\n  availableFilteredOptions: React.ReactNode[];\n  chosenOptions: React.ReactNode[];\n  chosenOptionsSelected: number[];\n  chosenFilteredOptions: React.ReactNode[];\n  availableTreeFilteredOptions: string[];\n  availableTreeOptionsChecked: string[];\n  chosenTreeOptionsChecked: string[];\n  chosenTreeFilteredOptions: string[];\n}\n\nexport class DualListSelector extends React.Component<DualListSelectorProps, DualListSelectorState> {\n  static displayName = 'DualListSelector';\n  private addAllButtonRef = React.createRef<HTMLButtonElement>();\n  private addSelectedButtonRef = React.createRef<HTMLButtonElement>();\n  private removeSelectedButtonRef = React.createRef<HTMLButtonElement>();\n  private removeAllButtonRef = React.createRef<HTMLButtonElement>();\n  static defaultProps: PickOptional<DualListSelectorProps> = {\n    children: '',\n    availableOptions: [],\n    availableOptionsTitle: 'Available options',\n    availableOptionsSearchAriaLabel: 'Available search input',\n    chosenOptions: [],\n    chosenOptionsTitle: 'Chosen options',\n    chosenOptionsSearchAriaLabel: 'Chosen search input',\n    id: getUniqueId('dual-list-selector'),\n    controlsAriaLabel: 'Selector controls',\n    addAllAriaLabel: 'Add all',\n    addSelectedAriaLabel: 'Add selected',\n    removeSelectedAriaLabel: 'Remove selected',\n    removeAllAriaLabel: 'Remove all',\n    isTree: false,\n    isDisabled: false\n  };\n\n  // If the DualListSelector uses trees, concat the two initial arrays and merge duplicate folder IDs\n  private createMergedCopy() {\n    const copyOfAvailable = JSON.parse(JSON.stringify(this.props.availableOptions));\n    const copyOfChosen = JSON.parse(JSON.stringify(this.props.chosenOptions));\n\n    return this.props.isTree\n      ? Object.values(\n          (copyOfAvailable as DualListSelectorTreeItemData[])\n            .concat(copyOfChosen as DualListSelectorTreeItemData[])\n            .reduce((mapObj: any, item: DualListSelectorTreeItemData) => {\n              const key = item.id;\n              if (mapObj[key]) {\n                // If map already has an item ID, add the dupe ID's children to the existing map\n                mapObj[key].children.push(...item.children);\n              } else {\n                // Else clone the item data\n                mapObj[key] = { ...item };\n              }\n              return mapObj;\n            }, {})\n        )\n      : null;\n  }\n\n  constructor(props: DualListSelectorProps) {\n    super(props);\n    this.state = {\n      availableOptions: [...this.props.availableOptions] as React.ReactNode[],\n      availableOptionsSelected: [],\n      availableFilteredOptions: null,\n      availableTreeFilteredOptions: null,\n      chosenOptions: [...this.props.chosenOptions] as React.ReactNode[],\n      chosenOptionsSelected: [],\n      chosenFilteredOptions: null,\n      chosenTreeFilteredOptions: null,\n      availableTreeOptionsChecked: [],\n      chosenTreeOptionsChecked: []\n    };\n  }\n\n  /** In dev environment, prevents circular structure during JSON stringification when\n   * options passed in to the dual list selector include HTML elements.\n   */\n  replacer = (key: string, value: any) => {\n    if (key[0] === '_') {\n      return undefined;\n    }\n    return value;\n  };\n\n  componentDidUpdate() {\n    if (\n      JSON.stringify(this.props.availableOptions, this.replacer) !==\n        JSON.stringify(this.state.availableOptions, this.replacer) ||\n      JSON.stringify(this.props.chosenOptions, this.replacer) !==\n        JSON.stringify(this.state.chosenOptions, this.replacer)\n    ) {\n      this.setState({\n        availableOptions: [...this.props.availableOptions] as React.ReactNode[],\n        chosenOptions: [...this.props.chosenOptions] as React.ReactNode[]\n      });\n    }\n  }\n\n  onFilterUpdate = (newFilteredOptions: React.ReactNode[], paneType: string, isSearchReset: boolean) => {\n    const { isTree } = this.props;\n    if (paneType === 'available') {\n      if (isSearchReset) {\n        this.setState({\n          availableFilteredOptions: null,\n          availableTreeFilteredOptions: null\n        });\n        return;\n      }\n      if (isTree) {\n        this.setState({\n          availableTreeFilteredOptions: flattenTreeWithFolders(\n            (newFilteredOptions as unknown) as DualListSelectorTreeItemData[]\n          )\n        });\n      } else {\n        this.setState({\n          availableFilteredOptions: newFilteredOptions as React.ReactNode[]\n        });\n      }\n    } else if (paneType === 'chosen') {\n      if (isSearchReset) {\n        this.setState({\n          chosenFilteredOptions: null,\n          chosenTreeFilteredOptions: null\n        });\n        return;\n      }\n      if (isTree) {\n        this.setState({\n          chosenTreeFilteredOptions: flattenTreeWithFolders(\n            (newFilteredOptions as unknown) as DualListSelectorTreeItemData[]\n          )\n        });\n      } else {\n        this.setState({\n          chosenFilteredOptions: newFilteredOptions as React.ReactNode[]\n        });\n      }\n    }\n  };\n\n  addAllVisible = () => {\n    this.setState(prevState => {\n      const itemsToRemove = [] as React.ReactNode[];\n      const newAvailable = [] as React.ReactNode[];\n      const movedOptions = prevState.availableFilteredOptions || prevState.availableOptions;\n      prevState.availableOptions.forEach(value => {\n        if (movedOptions.indexOf(value) !== -1) {\n          itemsToRemove.push(value);\n        } else {\n          newAvailable.push(value);\n        }\n      });\n\n      const newChosen = [...prevState.chosenOptions, ...itemsToRemove];\n      this.props.addAll && this.props.addAll(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptions: newChosen,\n        availableOptions: newAvailable,\n        chosenOptionsSelected: [],\n        availableOptionsSelected: []\n      };\n    });\n  };\n\n  addAllTreeVisible = () => {\n    this.setState(prevState => {\n      const movedOptions =\n        prevState.availableTreeFilteredOptions ||\n        flattenTreeWithFolders((prevState.availableOptions as unknown) as DualListSelectorTreeItemData[]);\n      const newAvailable = prevState.availableOptions\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterRestTreeItems((item as unknown) as DualListSelectorTreeItemData, movedOptions)\n        ) as React.ReactNode[];\n\n      const currChosen = flattenTree((prevState.chosenOptions as unknown) as DualListSelectorTreeItemData[]);\n      const nextChosenOptions = currChosen.concat(movedOptions);\n      const newChosen = this.createMergedCopy()\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterTreeItemsWithoutFolders(item as DualListSelectorTreeItemData, nextChosenOptions)\n        ) as React.ReactNode[];\n\n      this.props.addAll && this.props.addAll(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptions: newChosen,\n        chosenFilteredOptions: newChosen,\n        availableOptions: newAvailable,\n        availableFilteredOptions: newAvailable,\n        availableTreeOptionsChecked: [],\n        chosenTreeOptionsChecked: []\n      };\n    });\n  };\n\n  addSelected = () => {\n    this.setState(prevState => {\n      const itemsToRemove = [] as React.ReactNode[];\n      const newAvailable = [] as React.ReactNode[];\n      prevState.availableOptions.forEach((value, index) => {\n        if (prevState.availableOptionsSelected.indexOf(index) !== -1) {\n          itemsToRemove.push(value);\n        } else {\n          newAvailable.push(value);\n        }\n      });\n\n      const newChosen = [...prevState.chosenOptions, ...itemsToRemove];\n      this.props.addSelected && this.props.addSelected(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptionsSelected: [],\n        availableOptionsSelected: [],\n        chosenOptions: newChosen,\n        availableOptions: newAvailable\n      };\n    });\n  };\n\n  addTreeSelected = () => {\n    this.setState(prevState => {\n      // Remove selected available nodes from current available nodes\n      const newAvailable = prevState.availableOptions\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterRestTreeItems((item as unknown) as DualListSelectorTreeItemData, prevState.availableTreeOptionsChecked)\n        );\n\n      // Get next chosen options from current + new nodes and remap from base\n      const currChosen = flattenTree((prevState.chosenOptions as unknown) as DualListSelectorTreeItemData[]);\n      const nextChosenOptions = currChosen.concat(prevState.availableTreeOptionsChecked);\n      const newChosen = this.createMergedCopy()\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterTreeItemsWithoutFolders(item as DualListSelectorTreeItemData, nextChosenOptions)\n        ) as React.ReactNode[];\n\n      this.props.addSelected && this.props.addSelected(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        availableTreeOptionsChecked: [],\n        chosenTreeOptionsChecked: [],\n        availableOptions: newAvailable,\n        chosenOptions: newChosen\n      };\n    });\n  };\n\n  removeAllVisible = () => {\n    this.setState(prevState => {\n      const itemsToRemove = [] as React.ReactNode[];\n      const newChosen = [] as React.ReactNode[];\n      const movedOptions = prevState.chosenFilteredOptions || prevState.chosenOptions;\n      prevState.chosenOptions.forEach(value => {\n        if (movedOptions.indexOf(value) !== -1) {\n          itemsToRemove.push(value);\n        } else {\n          newChosen.push(value);\n        }\n      });\n\n      const newAvailable = [...prevState.availableOptions, ...itemsToRemove];\n      this.props.removeAll && this.props.removeAll(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptions: newChosen,\n        availableOptions: newAvailable,\n        chosenOptionsSelected: [],\n        availableOptionsSelected: []\n      };\n    });\n  };\n\n  removeAllTreeVisible = () => {\n    this.setState(prevState => {\n      const movedOptions =\n        prevState.chosenTreeFilteredOptions ||\n        flattenTreeWithFolders((prevState.chosenOptions as unknown) as DualListSelectorTreeItemData[]);\n\n      const newChosen = prevState.chosenOptions\n        .map(opt => Object.assign({}, opt))\n        .filter(item => filterRestTreeItems((item as unknown) as DualListSelectorTreeItemData, movedOptions));\n      const currAvailable = flattenTree((prevState.availableOptions as unknown) as DualListSelectorTreeItemData[]);\n      const nextAvailableOptions = currAvailable.concat(movedOptions);\n      const newAvailable = this.createMergedCopy()\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterTreeItemsWithoutFolders(item as DualListSelectorTreeItemData, nextAvailableOptions)\n        ) as React.ReactNode[];\n\n      this.props.removeAll && this.props.removeAll(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptions: newChosen,\n        availableOptions: newAvailable,\n        availableTreeOptionsChecked: [],\n        chosenTreeOptionsChecked: []\n      };\n    });\n  };\n\n  removeSelected = () => {\n    this.setState(prevState => {\n      const itemsToRemove = [] as React.ReactNode[];\n      const newChosen = [] as React.ReactNode[];\n      prevState.chosenOptions.forEach((value, index) => {\n        if (prevState.chosenOptionsSelected.indexOf(index) !== -1) {\n          itemsToRemove.push(value);\n        } else {\n          newChosen.push(value);\n        }\n      });\n\n      const newAvailable = [...prevState.availableOptions, ...itemsToRemove];\n      this.props.removeSelected && this.props.removeSelected(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptionsSelected: [],\n        availableOptionsSelected: [],\n        chosenOptions: newChosen,\n        availableOptions: newAvailable\n      };\n    });\n  };\n\n  removeTreeSelected = () => {\n    this.setState(prevState => {\n      // Remove selected chosen nodes from current chosen nodes\n      const newChosen = prevState.chosenOptions\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterRestTreeItems((item as unknown) as DualListSelectorTreeItemData, prevState.chosenTreeOptionsChecked)\n        );\n\n      // Get next chosen options from current and remap from base\n      const currAvailable = flattenTree((prevState.availableOptions as unknown) as DualListSelectorTreeItemData[]);\n      const nextAvailableOptions = currAvailable.concat(prevState.chosenTreeOptionsChecked);\n      const newAvailable = this.createMergedCopy()\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterTreeItemsWithoutFolders(item as DualListSelectorTreeItemData, nextAvailableOptions)\n        ) as React.ReactNode[];\n\n      this.props.removeSelected && this.props.removeSelected(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        availableTreeOptionsChecked: [],\n        chosenTreeOptionsChecked: [],\n        availableOptions: newAvailable,\n        chosenOptions: newChosen\n      };\n    });\n  };\n\n  onOptionSelect = (\n    e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n    index: number,\n    isChosen: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    id?: string,\n    itemData?: any,\n    parentData?: any\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ) => {\n    this.setState(prevState => {\n      const originalArray = isChosen ? prevState.chosenOptionsSelected : prevState.availableOptionsSelected;\n\n      let updatedArray = null;\n      if (originalArray.indexOf(index) !== -1) {\n        updatedArray = originalArray.filter(value => value !== index);\n      } else {\n        updatedArray = [...originalArray, index];\n      }\n\n      return {\n        chosenOptionsSelected: isChosen ? updatedArray : prevState.chosenOptionsSelected,\n        availableOptionsSelected: isChosen ? prevState.availableOptionsSelected : updatedArray\n      };\n    });\n\n    this.props.onOptionSelect && this.props.onOptionSelect(e, index, isChosen, id, itemData, parentData);\n  };\n\n  isChecked = (treeItem: DualListSelectorTreeItemData, isChosen: boolean) =>\n    isChosen\n      ? this.state.chosenTreeOptionsChecked.includes(treeItem.id)\n      : this.state.availableTreeOptionsChecked.includes(treeItem.id);\n  areAllDescendantsChecked = (treeItem: DualListSelectorTreeItemData, isChosen: boolean): boolean =>\n    treeItem.children\n      ? treeItem.children.every(child => this.areAllDescendantsChecked(child, isChosen))\n      : this.isChecked(treeItem, isChosen);\n  areSomeDescendantsChecked = (treeItem: DualListSelectorTreeItemData, isChosen: boolean): boolean =>\n    treeItem.children\n      ? treeItem.children.some(child => this.areSomeDescendantsChecked(child, isChosen))\n      : this.isChecked(treeItem, isChosen);\n\n  mapChecked = (item: DualListSelectorTreeItemData, isChosen: boolean): DualListSelectorTreeItemData => {\n    const hasCheck = this.areAllDescendantsChecked(item, isChosen);\n    item.isChecked = false;\n\n    if (hasCheck) {\n      item.isChecked = true;\n    } else {\n      const hasPartialCheck = this.areSomeDescendantsChecked(item, isChosen);\n      if (hasPartialCheck) {\n        item.isChecked = null;\n      }\n    }\n\n    if (item.children) {\n      return {\n        ...item,\n        children: item.children.map(child => this.mapChecked(child, isChosen))\n      };\n    }\n    return item;\n  };\n\n  onTreeOptionCheck = (\n    evt: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData,\n    isChosen: boolean\n  ) => {\n    const { availableOptions, availableTreeFilteredOptions, chosenOptions, chosenTreeFilteredOptions } = this.state;\n    let panelOptions;\n    if (isChosen) {\n      if (chosenTreeFilteredOptions) {\n        panelOptions = chosenOptions\n          .map(opt => Object.assign({}, opt))\n          .filter(item =>\n            filterTreeItemsWithoutFolders((item as unknown) as DualListSelectorTreeItemData, chosenTreeFilteredOptions)\n          );\n      } else {\n        panelOptions = chosenOptions;\n      }\n    } else {\n      if (availableTreeFilteredOptions) {\n        panelOptions = availableOptions\n          .map(opt => Object.assign({}, opt))\n          .filter(item =>\n            filterTreeItemsWithoutFolders(\n              (item as unknown) as DualListSelectorTreeItemData,\n              availableTreeFilteredOptions\n            )\n          );\n      } else {\n        panelOptions = availableOptions;\n      }\n    }\n    const checkedOptionTree = panelOptions\n      .map(opt => Object.assign({}, opt))\n      .filter(item => filterTreeItems((item as unknown) as DualListSelectorTreeItemData, [itemData.id]));\n    const flatTree = flattenTreeWithFolders((checkedOptionTree as unknown) as DualListSelectorTreeItemData[]);\n\n    const prevChecked = isChosen ? this.state.chosenTreeOptionsChecked : this.state.availableTreeOptionsChecked;\n    let updatedChecked = [] as string[];\n    if (isChecked) {\n      updatedChecked = prevChecked.concat(flatTree.filter(id => !prevChecked.includes(id)));\n    } else {\n      updatedChecked = prevChecked.filter(id => !flatTree.includes(id));\n    }\n\n    this.setState(\n      prevState => ({\n        availableTreeOptionsChecked: isChosen ? prevState.availableTreeOptionsChecked : updatedChecked,\n        chosenTreeOptionsChecked: isChosen ? updatedChecked : prevState.chosenTreeOptionsChecked\n      }),\n      () => {\n        this.props.onOptionCheck && this.props.onOptionCheck(evt, isChecked, itemData.id, updatedChecked);\n      }\n    );\n  };\n\n  render() {\n    const {\n      availableOptionsTitle,\n      availableOptionsActions,\n      availableOptionsSearchAriaLabel,\n      className,\n      children,\n      chosenOptionsTitle,\n      chosenOptionsActions,\n      chosenOptionsSearchAriaLabel,\n      filterOption,\n      isSearchable,\n      chosenOptionsStatus,\n      availableOptionsStatus,\n      controlsAriaLabel,\n      addAllAriaLabel,\n      addSelectedAriaLabel,\n      removeSelectedAriaLabel,\n      removeAllAriaLabel,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      availableOptions: consumerPassedAvailableOptions,\n      chosenOptions: consumerPassedChosenOptions,\n      removeSelected,\n      addAll,\n      removeAll,\n      addSelected,\n      onListChange,\n      onAvailableOptionsSearchInputChanged,\n      onChosenOptionsSearchInputChanged,\n      onOptionSelect,\n      onOptionCheck,\n      id,\n      isTree,\n      isDisabled,\n      addAllTooltip,\n      addAllTooltipProps,\n      addSelectedTooltip,\n      addSelectedTooltipProps,\n      removeAllTooltip,\n      removeAllTooltipProps,\n      removeSelectedTooltip,\n      removeSelectedTooltipProps,\n      ...props\n    } = this.props;\n    const {\n      availableOptions,\n      chosenOptions,\n      chosenOptionsSelected,\n      availableOptionsSelected,\n      chosenTreeOptionsChecked,\n      availableTreeOptionsChecked\n    } = this.state;\n    const availableOptionsStatusToDisplay =\n      availableOptionsStatus ||\n      (isTree\n        ? `${\n            filterFolders((availableOptions as unknown) as DualListSelectorTreeItemData[], availableTreeOptionsChecked)\n              .length\n          } of ${flattenTree((availableOptions as unknown) as DualListSelectorTreeItemData[]).length} items selected`\n        : `${availableOptionsSelected.length} of ${availableOptions.length} items selected`);\n    const chosenOptionsStatusToDisplay =\n      chosenOptionsStatus ||\n      (isTree\n        ? `${\n            filterFolders((chosenOptions as unknown) as DualListSelectorTreeItemData[], chosenTreeOptionsChecked).length\n          } of ${flattenTree((chosenOptions as unknown) as DualListSelectorTreeItemData[]).length} items selected`\n        : `${chosenOptionsSelected.length} of ${chosenOptions.length} items selected`);\n\n    const available = (isTree\n      ? availableOptions.map(item => this.mapChecked((item as unknown) as DualListSelectorTreeItemData, false))\n      : availableOptions) as React.ReactNode[];\n    const chosen = (isTree\n      ? chosenOptions.map(item => this.mapChecked((item as unknown) as DualListSelectorTreeItemData, true))\n      : chosenOptions) as React.ReactNode[];\n\n    return (\n      <DualListSelectorContext.Provider value={{ isTree }}>\n        <div className={css(styles.dualListSelector, className)} id={id} {...props}>\n          {children === '' ? (\n            <>\n              <DualListSelectorPane\n                isSearchable={isSearchable}\n                onFilterUpdate={this.onFilterUpdate}\n                searchInputAriaLabel={availableOptionsSearchAriaLabel}\n                filterOption={filterOption}\n                onSearchInputChanged={onAvailableOptionsSearchInputChanged}\n                status={availableOptionsStatusToDisplay}\n                title={availableOptionsTitle}\n                options={available}\n                selectedOptions={isTree ? availableTreeOptionsChecked : availableOptionsSelected}\n                onOptionSelect={this.onOptionSelect}\n                onOptionCheck={(e, isChecked, itemData) => this.onTreeOptionCheck(e, isChecked, itemData, false)}\n                actions={availableOptionsActions}\n                id={`${id}-available-pane`}\n                isDisabled={isDisabled}\n              />\n              <DualListSelectorControlsWrapper aria-label={controlsAriaLabel}>\n                <DualListSelectorControl\n                  isDisabled={\n                    (isTree ? availableTreeOptionsChecked.length === 0 : availableOptionsSelected.length === 0) ||\n                    isDisabled\n                  }\n                  onClick={isTree ? this.addTreeSelected : this.addSelected}\n                  ref={this.addSelectedButtonRef}\n                  aria-label={addSelectedAriaLabel}\n                  tooltipContent={addSelectedTooltip}\n                  tooltipProps={addSelectedTooltipProps}\n                >\n                  <AngleRightIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                  isDisabled={availableOptions.length === 0 || isDisabled}\n                  onClick={isTree ? this.addAllTreeVisible : this.addAllVisible}\n                  ref={this.addAllButtonRef}\n                  aria-label={addAllAriaLabel}\n                  tooltipContent={addAllTooltip}\n                  tooltipProps={addAllTooltipProps}\n                >\n                  <AngleDoubleRightIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                  isDisabled={chosenOptions.length === 0 || isDisabled}\n                  onClick={isTree ? this.removeAllTreeVisible : this.removeAllVisible}\n                  aria-label={removeAllAriaLabel}\n                  ref={this.removeAllButtonRef}\n                  tooltipContent={removeAllTooltip}\n                  tooltipProps={removeAllTooltipProps}\n                >\n                  <AngleDoubleLeftIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                  onClick={isTree ? this.removeTreeSelected : this.removeSelected}\n                  isDisabled={\n                    (isTree ? chosenTreeOptionsChecked.length === 0 : chosenOptionsSelected.length === 0) || isDisabled\n                  }\n                  ref={this.removeSelectedButtonRef}\n                  aria-label={removeSelectedAriaLabel}\n                  tooltipContent={removeSelectedTooltip}\n                  tooltipProps={removeSelectedTooltipProps}\n                >\n                  <AngleLeftIcon />\n                </DualListSelectorControl>\n              </DualListSelectorControlsWrapper>\n              <DualListSelectorPane\n                isChosen\n                isSearchable={isSearchable}\n                onFilterUpdate={this.onFilterUpdate}\n                searchInputAriaLabel={chosenOptionsSearchAriaLabel}\n                filterOption={filterOption}\n                onSearchInputChanged={onChosenOptionsSearchInputChanged}\n                title={chosenOptionsTitle}\n                status={chosenOptionsStatusToDisplay}\n                options={chosen}\n                selectedOptions={isTree ? chosenTreeOptionsChecked : chosenOptionsSelected}\n                onOptionSelect={this.onOptionSelect}\n                onOptionCheck={(e, isChecked, itemData) => this.onTreeOptionCheck(e, isChecked, itemData, true)}\n                actions={chosenOptionsActions}\n                id={`${id}-chosen-pane`}\n                isDisabled={isDisabled}\n              />\n            </>\n          ) : (\n            children\n          )}\n        </div>\n      </DualListSelectorContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}