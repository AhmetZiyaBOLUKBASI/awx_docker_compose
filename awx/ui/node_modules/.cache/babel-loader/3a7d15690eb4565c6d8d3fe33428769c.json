{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { handleArrows } from '../../helpers';\nexport var DualListSelectorControlsWrapperBase = function DualListSelectorControlsWrapperBase(_a) {\n  var innerRef = _a.innerRef,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      className = _a.className,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? 'Controls for moving options between lists' : _a$ariaLabel,\n      props = __rest(_a, [\"innerRef\", \"children\", \"className\", 'aria-label']);\n\n  var wrapperRef = innerRef || React.useRef(null); // Adds keyboard navigation to the dynamically built dual list selector controls. Works when controls are dynamically built\n  // as well as when they are passed in via children.\n\n  var handleKeys = function handleKeys(event) {\n    if (!wrapperRef.current || wrapperRef.current !== event.target.closest('.pf-c-dual-list-selector__controls') && !Array.from(wrapperRef.current.getElementsByClassName('pf-c-dual-list-selector__controls')).includes(event.target.closest('.pf-c-dual-list-selector__controls'))) {\n      return;\n    }\n\n    event.stopImmediatePropagation();\n    var controls = Array.from(wrapperRef.current.getElementsByTagName('BUTTON')).filter(function (el) {\n      return !el.classList.contains('pf-m-disabled');\n    });\n    var activeElement = document.activeElement;\n    handleArrows(event, controls, function (element) {\n      return activeElement.contains(element);\n    }, function (element) {\n      return element;\n    }, undefined, undefined, true, false);\n  };\n\n  React.useEffect(function () {\n    window.addEventListener('keydown', handleKeys);\n    return function () {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [wrapperRef.current]);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dualListSelectorControls, className),\n    tabIndex: 0,\n    ref: wrapperRef,\n    \"aria-label\": ariaLabel\n  }, props), children);\n};\nDualListSelectorControlsWrapperBase.displayName = 'DualListSelectorControlsWrapperBase';\nexport var DualListSelectorControlsWrapper = React.forwardRef(function (props, ref) {\n  return React.createElement(DualListSelectorControlsWrapperBase, Object.assign({\n    innerRef: ref\n  }, props));\n});\nDualListSelectorControlsWrapper.displayName = 'DualListSelectorControlsWrapper';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorControlsWrapper.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { handleArrows } from '../../helpers';\n\nexport interface DualListSelectorControlsWrapperProps extends React.HTMLProps<HTMLDivElement> {\n  /** Anything that can be rendered inside of the wrapper. */\n  children?: React.ReactNode;\n  /** Additional classes added to the wrapper. */\n  className?: string;\n  /** @hide Forwarded ref */\n  innerRef?: React.RefObject<HTMLDivElement>;\n  /** Accessible label for the dual list selector controls wrapper. */\n  'aria-label'?: string;\n}\n\nexport const DualListSelectorControlsWrapperBase: React.FunctionComponent<DualListSelectorControlsWrapperProps> = ({\n  innerRef,\n  children = null,\n  className,\n  'aria-label': ariaLabel = 'Controls for moving options between lists',\n  ...props\n}: DualListSelectorControlsWrapperProps) => {\n  const wrapperRef = innerRef || React.useRef(null);\n  // Adds keyboard navigation to the dynamically built dual list selector controls. Works when controls are dynamically built\n  // as well as when they are passed in via children.\n  const handleKeys = (event: KeyboardEvent) => {\n    if (\n      !wrapperRef.current ||\n      (wrapperRef.current !== (event.target as HTMLElement).closest('.pf-c-dual-list-selector__controls') &&\n        !Array.from(wrapperRef.current.getElementsByClassName('pf-c-dual-list-selector__controls')).includes(\n          (event.target as HTMLElement).closest('.pf-c-dual-list-selector__controls')\n        ))\n    ) {\n      return;\n    }\n    event.stopImmediatePropagation();\n\n    const controls = (Array.from(wrapperRef.current.getElementsByTagName('BUTTON')) as Element[]).filter(\n      el => !el.classList.contains('pf-m-disabled')\n    );\n    const activeElement = document.activeElement;\n    handleArrows(\n      event,\n      controls,\n      (element: Element) => activeElement.contains(element),\n      (element: Element) => element,\n      undefined,\n      undefined,\n      true,\n      false\n    );\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeys);\n    return () => {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [wrapperRef.current]);\n\n  return (\n    <div\n      className={css(styles.dualListSelectorControls, className)}\n      tabIndex={0}\n      ref={wrapperRef}\n      aria-label={ariaLabel}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nDualListSelectorControlsWrapperBase.displayName = 'DualListSelectorControlsWrapperBase';\n\nexport const DualListSelectorControlsWrapper = React.forwardRef(\n  (props: DualListSelectorControlsWrapperProps, ref: React.Ref<HTMLDivElement>) => (\n    <DualListSelectorControlsWrapperBase innerRef={ref as React.MutableRefObject<any>} {...props} />\n  )\n);\n\nDualListSelectorControlsWrapper.displayName = 'DualListSelectorControlsWrapper';\n"]},"metadata":{},"sourceType":"module"}