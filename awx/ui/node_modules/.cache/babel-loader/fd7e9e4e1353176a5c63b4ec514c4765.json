{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DragDrop/drag-drop';\nimport { DroppableContext } from './DroppableContext';\nexport var Droppable = function Droppable(_a) {\n  var className = _a.className,\n      children = _a.children,\n      _a$zone = _a.zone,\n      zone = _a$zone === void 0 ? 'defaultZone' : _a$zone,\n      _a$droppableId = _a.droppableId,\n      droppableId = _a$droppableId === void 0 ? 'defaultId' : _a$droppableId,\n      _a$hasNoWrapper = _a.hasNoWrapper,\n      hasNoWrapper = _a$hasNoWrapper === void 0 ? false : _a$hasNoWrapper,\n      props = __rest(_a, [\"className\", \"children\", \"zone\", \"droppableId\", \"hasNoWrapper\"]);\n\n  var childProps = Object.assign({\n    'data-pf-droppable': zone,\n    'data-pf-droppableid': droppableId,\n    // if has no wrapper is set, don't overwrite children className with the className prop\n    className: hasNoWrapper && React.Children.count(children) === 1 ? css(styles.droppable, className, children.props.className) : css(styles.droppable, className)\n  }, props);\n  return React.createElement(DroppableContext.Provider, {\n    value: {\n      zone: zone,\n      droppableId: droppableId\n    }\n  }, hasNoWrapper ? React.cloneElement(children, childProps) : React.createElement(\"div\", Object.assign({}, childProps), children));\n};\nDroppable.displayName = 'Droppable';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DragDrop/Droppable.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,4DAAnB;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AAeA,OAAO,IAAM,SAAS,GAA4C,SAArD,SAAqD,CAAC,EAAD,EAO7C;AAP8C,MACjE,SADiE,GAK7C,EAL6C,CACjE,SADiE;AAAA,MAEjE,QAFiE,GAK7C,EAL6C,CAEjE,QAFiE;AAAA,gBAK7C,EAL6C,CAGjE,IAHiE;AAAA,MAGjE,IAHiE,wBAG1D,aAH0D;AAAA,uBAK7C,EAL6C,CAIjE,WAJiE;AAAA,MAIjE,WAJiE,+BAInD,WAJmD;AAAA,wBAK7C,EAL6C,CAKjE,YALiE;AAAA,MAKjE,YALiE,gCAKlD,KALkD;AAAA,MAM9D,KAN8D,GAMzD,MAAA,CAAA,EAAA,EANyD,CAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,aAAA,EAAA,cAAA,CAMzD,CANyD;;AAQjE,MAAM,UAAU,GAAA,MAAA,CAAA,MAAA,CAAA;AACd,yBAAqB,IADP;AAEd,2BAAuB,WAFT;AAGd;AACA,IAAA,SAAS,EACP,YAAY,IAAI,KAAK,CAAC,QAAN,CAAe,KAAf,CAAqB,QAArB,MAAmC,CAAnD,GACI,GAAG,CAAC,MAAM,CAAC,SAAR,EAAmB,SAAnB,EAA+B,QAA+B,CAAC,KAAhC,CAAsC,SAArE,CADP,GAEI,GAAG,CAAC,MAAM,CAAC,SAAR,EAAmB,SAAnB;AAPK,GAAA,EAQX,KARW,CAAhB;AAWA,SACE,KAAA,CAAA,aAAA,CAAC,gBAAgB,CAAC,QAAlB,EAA0B;AAAC,IAAA,KAAK,EAAE;AAAE,MAAA,IAAI,EAAJ,IAAF;AAAQ,MAAA,WAAW,EAAX;AAAR;AAAR,GAA1B,EACG,YAAY,GACX,KAAK,CAAC,YAAN,CAAmB,QAAnB,EAAmD,UAAnD,CADW,GAGX,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAS,UAAT,CAAA,EAAsB,QAAtB,CAJJ,CADF;AASD,CA5BM;AA6BP,SAAS,CAAC,WAAV,GAAwB,WAAxB","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DragDrop/drag-drop';\nimport { DroppableContext } from './DroppableContext';\n\ninterface DroppableProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside DragDrop */\n  children?: React.ReactNode;\n  /** Class to add to outer div */\n  className?: string;\n  /** Name of zone that items can be dragged between. Should specify if there is more than one Droppable on the page. */\n  zone?: string;\n  /** Id to be passed back on drop events */\n  droppableId?: string;\n  /** Don't wrap the component in a div. Requires passing a single child. */\n  hasNoWrapper?: boolean;\n}\n\nexport const Droppable: React.FunctionComponent<DroppableProps> = ({\n  className,\n  children,\n  zone = 'defaultZone',\n  droppableId = 'defaultId',\n  hasNoWrapper = false,\n  ...props\n}: DroppableProps) => {\n  const childProps = {\n    'data-pf-droppable': zone,\n    'data-pf-droppableid': droppableId,\n    // if has no wrapper is set, don't overwrite children className with the className prop\n    className:\n      hasNoWrapper && React.Children.count(children) === 1\n        ? css(styles.droppable, className, (children as React.ReactElement).props.className)\n        : css(styles.droppable, className),\n    ...props\n  };\n\n  return (\n    <DroppableContext.Provider value={{ zone, droppableId }}>\n      {hasNoWrapper ? (\n        React.cloneElement(children as React.ReactElement, childProps)\n      ) : (\n        <div {...childProps}>{children}</div>\n      )}\n    </DroppableContext.Provider>\n  );\n};\nDroppable.displayName = 'Droppable';\n"]},"metadata":{},"sourceType":"module"}