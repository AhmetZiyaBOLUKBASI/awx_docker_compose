{"ast":null,"code":"import _createForOfIteratorHelper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\nvar INVALID = \"Invalid Interval\"; // checks if the start is equal to or before the end\n\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\"end before start\", \"The end of an interval must be after its start, but you had start=\".concat(start.toISO(), \" and end=\").concat(end.toISO()));\n  } else {\n    return null;\n  }\n}\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval#fromDateTimes}, {@link Interval#after}, {@link Interval#before}, or {@link Interval#fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval#merge}, {@link Interval#xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\n\n\nvar Interval = /*#__PURE__*/function () {\n  /**\n   * @private\n   */\n  function Interval(config) {\n    _classCallCheck(this, Interval);\n\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n\n    this.e = config.end;\n    /**\n     * @access private\n     */\n\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n\n    this.isLuxonInterval = true;\n  }\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n\n\n  _createClass(Interval, [{\n    key: \"start\",\n    get:\n    /**\n     * Returns the start of the Interval\n     * @type {DateTime}\n     */\n    function get() {\n      return this.isValid ? this.s : null;\n    }\n    /**\n     * Returns the end of the Interval\n     * @type {DateTime}\n     */\n\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this.isValid ? this.e : null;\n    }\n    /**\n     * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return this.invalidReason === null;\n    }\n    /**\n     * Returns an error code if this Interval is invalid, or null if the Interval is valid\n     * @type {string}\n     */\n\n  }, {\n    key: \"invalidReason\",\n    get: function get() {\n      return this.invalid ? this.invalid.reason : null;\n    }\n    /**\n     * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n     * @type {string}\n     */\n\n  }, {\n    key: \"invalidExplanation\",\n    get: function get() {\n      return this.invalid ? this.invalid.explanation : null;\n    }\n    /**\n     * Returns the length of the Interval in the specified unit.\n     * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n     * @return {number}\n     */\n\n  }, {\n    key: \"length\",\n    value: function length() {\n      var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"milliseconds\";\n      return this.isValid ? this.toDuration.apply(this, [unit]).get(unit) : NaN;\n    }\n    /**\n     * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n     * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n     * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n     * @param {string} [unit='milliseconds'] - the unit of time to count.\n     * @return {number}\n     */\n\n  }, {\n    key: \"count\",\n    value: function count() {\n      var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"milliseconds\";\n      if (!this.isValid) return NaN;\n      var start = this.start.startOf(unit),\n          end = this.end.startOf(unit);\n      return Math.floor(end.diff(start, unit).get(unit)) + 1;\n    }\n    /**\n     * Returns whether this Interval's start and end are both in the same unit of time\n     * @param {string} unit - the unit of time to check sameness on\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"hasSame\",\n    value: function hasSame(unit) {\n      return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n    }\n    /**\n     * Return whether this Interval has the same start and end DateTimes.\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.s.valueOf() === this.e.valueOf();\n    }\n    /**\n     * Return whether this Interval's start is after the specified DateTime.\n     * @param {DateTime} dateTime\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isAfter\",\n    value: function isAfter(dateTime) {\n      if (!this.isValid) return false;\n      return this.s > dateTime;\n    }\n    /**\n     * Return whether this Interval's end is before the specified DateTime.\n     * @param {DateTime} dateTime\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isBefore\",\n    value: function isBefore(dateTime) {\n      if (!this.isValid) return false;\n      return this.e <= dateTime;\n    }\n    /**\n     * Return whether this Interval contains the specified DateTime.\n     * @param {DateTime} dateTime\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"contains\",\n    value: function contains(dateTime) {\n      if (!this.isValid) return false;\n      return this.s <= dateTime && this.e > dateTime;\n    }\n    /**\n     * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n     * @param {Object} values - the values to set\n     * @param {DateTime} values.start - the starting DateTime\n     * @param {DateTime} values.end - the ending DateTime\n     * @return {Interval}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          start = _ref.start,\n          end = _ref.end;\n\n      if (!this.isValid) return this;\n      return Interval.fromDateTimes(start || this.s, end || this.e);\n    }\n    /**\n     * Split this Interval at each of the specified DateTimes\n     * @param {...DateTime} dateTimes - the unit of time to count.\n     * @return {Array}\n     */\n\n  }, {\n    key: \"splitAt\",\n    value: function splitAt() {\n      var _this = this;\n\n      if (!this.isValid) return [];\n\n      for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {\n        dateTimes[_key] = arguments[_key];\n      }\n\n      var sorted = dateTimes.map(friendlyDateTime).filter(function (d) {\n        return _this.contains(d);\n      }).sort(),\n          results = [];\n      var s = this.s,\n          i = 0;\n\n      while (s < this.e) {\n        var added = sorted[i] || this.e,\n            next = +added > +this.e ? this.e : added;\n        results.push(Interval.fromDateTimes(s, next));\n        s = next;\n        i += 1;\n      }\n\n      return results;\n    }\n    /**\n     * Split this Interval into smaller Intervals, each of the specified length.\n     * Left over time is grouped into a smaller interval\n     * @param {Duration|Object|number} duration - The length of each resulting interval.\n     * @return {Array}\n     */\n\n  }, {\n    key: \"splitBy\",\n    value: function splitBy(duration) {\n      var dur = Duration.fromDurationLike(duration);\n\n      if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n        return [];\n      }\n\n      var s = this.s,\n          idx = 1,\n          next;\n      var results = [];\n\n      while (s < this.e) {\n        var added = this.start.plus(dur.mapUnits(function (x) {\n          return x * idx;\n        }));\n        next = +added > +this.e ? this.e : added;\n        results.push(Interval.fromDateTimes(s, next));\n        s = next;\n        idx += 1;\n      }\n\n      return results;\n    }\n    /**\n     * Split this Interval into the specified number of smaller intervals.\n     * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n     * @return {Array}\n     */\n\n  }, {\n    key: \"divideEqually\",\n    value: function divideEqually(numberOfParts) {\n      if (!this.isValid) return [];\n      return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n    }\n    /**\n     * Return whether this Interval overlaps with the specified Interval\n     * @param {Interval} other\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"overlaps\",\n    value: function overlaps(other) {\n      return this.e > other.s && this.s < other.e;\n    }\n    /**\n     * Return whether this Interval's end is adjacent to the specified Interval's start.\n     * @param {Interval} other\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"abutsStart\",\n    value: function abutsStart(other) {\n      if (!this.isValid) return false;\n      return +this.e === +other.s;\n    }\n    /**\n     * Return whether this Interval's start is adjacent to the specified Interval's end.\n     * @param {Interval} other\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"abutsEnd\",\n    value: function abutsEnd(other) {\n      if (!this.isValid) return false;\n      return +other.e === +this.s;\n    }\n    /**\n     * Return whether this Interval engulfs the start and end of the specified Interval.\n     * @param {Interval} other\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"engulfs\",\n    value: function engulfs(other) {\n      if (!this.isValid) return false;\n      return this.s <= other.s && this.e >= other.e;\n    }\n    /**\n     * Return whether this Interval has the same start and end as the specified Interval.\n     * @param {Interval} other\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!this.isValid || !other.isValid) {\n        return false;\n      }\n\n      return this.s.equals(other.s) && this.e.equals(other.e);\n    }\n    /**\n     * Return an Interval representing the intersection of this Interval and the specified Interval.\n     * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n     * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n     * @param {Interval} other\n     * @return {Interval}\n     */\n\n  }, {\n    key: \"intersection\",\n    value: function intersection(other) {\n      if (!this.isValid) return this;\n      var s = this.s > other.s ? this.s : other.s,\n          e = this.e < other.e ? this.e : other.e;\n\n      if (s >= e) {\n        return null;\n      } else {\n        return Interval.fromDateTimes(s, e);\n      }\n    }\n    /**\n     * Return an Interval representing the union of this Interval and the specified Interval.\n     * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n     * @param {Interval} other\n     * @return {Interval}\n     */\n\n  }, {\n    key: \"union\",\n    value: function union(other) {\n      if (!this.isValid) return this;\n      var s = this.s < other.s ? this.s : other.s,\n          e = this.e > other.e ? this.e : other.e;\n      return Interval.fromDateTimes(s, e);\n    }\n    /**\n     * Merge an array of Intervals into a equivalent minimal set of Intervals.\n     * Combines overlapping and adjacent Intervals.\n     * @param {Array} intervals\n     * @return {Array}\n     */\n\n  }, {\n    key: \"difference\",\n    value:\n    /**\n     * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n     * @param {...Interval} intervals\n     * @return {Array}\n     */\n    function difference() {\n      var _this2 = this;\n\n      for (var _len2 = arguments.length, intervals = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        intervals[_key2] = arguments[_key2];\n      }\n\n      return Interval.xor([this].concat(intervals)).map(function (i) {\n        return _this2.intersection(i);\n      }).filter(function (i) {\n        return i && !i.isEmpty();\n      });\n    }\n    /**\n     * Returns a string representation of this Interval appropriate for debugging.\n     * @return {string}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (!this.isValid) return INVALID;\n      return \"[\".concat(this.s.toISO(), \" \\u2013 \").concat(this.e.toISO(), \")\");\n    }\n    /**\n     * Returns an ISO 8601-compliant string representation of this Interval.\n     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n     * @param {Object} opts - The same options as {@link DateTime#toISO}\n     * @return {string}\n     */\n\n  }, {\n    key: \"toISO\",\n    value: function toISO(opts) {\n      if (!this.isValid) return INVALID;\n      return \"\".concat(this.s.toISO(opts), \"/\").concat(this.e.toISO(opts));\n    }\n    /**\n     * Returns an ISO 8601-compliant string representation of date of this Interval.\n     * The time components are ignored.\n     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n     * @return {string}\n     */\n\n  }, {\n    key: \"toISODate\",\n    value: function toISODate() {\n      if (!this.isValid) return INVALID;\n      return \"\".concat(this.s.toISODate(), \"/\").concat(this.e.toISODate());\n    }\n    /**\n     * Returns an ISO 8601-compliant string representation of time of this Interval.\n     * The date components are ignored.\n     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n     * @param {Object} opts - The same options as {@link DateTime#toISO}\n     * @return {string}\n     */\n\n  }, {\n    key: \"toISOTime\",\n    value: function toISOTime(opts) {\n      if (!this.isValid) return INVALID;\n      return \"\".concat(this.s.toISOTime(opts), \"/\").concat(this.e.toISOTime(opts));\n    }\n    /**\n     * Returns a string representation of this Interval formatted according to the specified format string.\n     * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime#toFormat} for details.\n     * @param {Object} opts - options\n     * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n     * @return {string}\n     */\n\n  }, {\n    key: \"toFormat\",\n    value: function toFormat(dateFormat) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$separator = _ref2.separator,\n          separator = _ref2$separator === void 0 ? \" – \" : _ref2$separator;\n\n      if (!this.isValid) return INVALID;\n      return \"\".concat(this.s.toFormat(dateFormat)).concat(separator).concat(this.e.toFormat(dateFormat));\n    }\n    /**\n     * Return a Duration representing the time spanned by this interval.\n     * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n     * @param {Object} opts - options that affect the creation of the Duration\n     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n     * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n     * @return {Duration}\n     */\n\n  }, {\n    key: \"toDuration\",\n    value: function toDuration(unit, opts) {\n      if (!this.isValid) {\n        return Duration.invalid(this.invalidReason);\n      }\n\n      return this.e.diff(this.s, unit, opts);\n    }\n    /**\n     * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n     * @param {function} mapFn\n     * @return {Interval}\n     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n     */\n\n  }, {\n    key: \"mapEndpoints\",\n    value: function mapEndpoints(mapFn) {\n      return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n    }\n  }], [{\n    key: \"invalid\",\n    value: function invalid(reason) {\n      var explanation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (!reason) {\n        throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n      }\n\n      var invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n      if (Settings.throwOnInvalid) {\n        throw new InvalidIntervalError(invalid);\n      } else {\n        return new Interval({\n          invalid: invalid\n        });\n      }\n    }\n    /**\n     * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n     * @param {DateTime|Date|Object} start\n     * @param {DateTime|Date|Object} end\n     * @return {Interval}\n     */\n\n  }, {\n    key: \"fromDateTimes\",\n    value: function fromDateTimes(start, end) {\n      var builtStart = friendlyDateTime(start),\n          builtEnd = friendlyDateTime(end);\n      var validateError = validateStartEnd(builtStart, builtEnd);\n\n      if (validateError == null) {\n        return new Interval({\n          start: builtStart,\n          end: builtEnd\n        });\n      } else {\n        return validateError;\n      }\n    }\n    /**\n     * Create an Interval from a start DateTime and a Duration to extend to.\n     * @param {DateTime|Date|Object} start\n     * @param {Duration|Object|number} duration - the length of the Interval.\n     * @return {Interval}\n     */\n\n  }, {\n    key: \"after\",\n    value: function after(start, duration) {\n      var dur = Duration.fromDurationLike(duration),\n          dt = friendlyDateTime(start);\n      return Interval.fromDateTimes(dt, dt.plus(dur));\n    }\n    /**\n     * Create an Interval from an end DateTime and a Duration to extend backwards to.\n     * @param {DateTime|Date|Object} end\n     * @param {Duration|Object|number} duration - the length of the Interval.\n     * @return {Interval}\n     */\n\n  }, {\n    key: \"before\",\n    value: function before(end, duration) {\n      var dur = Duration.fromDurationLike(duration),\n          dt = friendlyDateTime(end);\n      return Interval.fromDateTimes(dt.minus(dur), dt);\n    }\n    /**\n     * Create an Interval from an ISO 8601 string.\n     * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n     * @param {string} text - the ISO string to parse\n     * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n     * @return {Interval}\n     */\n\n  }, {\n    key: \"fromISO\",\n    value: function fromISO(text, opts) {\n      var _split = (text || \"\").split(\"/\", 2),\n          _split2 = _slicedToArray(_split, 2),\n          s = _split2[0],\n          e = _split2[1];\n\n      if (s && e) {\n        var start, startIsValid;\n\n        try {\n          start = DateTime.fromISO(s, opts);\n          startIsValid = start.isValid;\n        } catch (e) {\n          startIsValid = false;\n        }\n\n        var end, endIsValid;\n\n        try {\n          end = DateTime.fromISO(e, opts);\n          endIsValid = end.isValid;\n        } catch (e) {\n          endIsValid = false;\n        }\n\n        if (startIsValid && endIsValid) {\n          return Interval.fromDateTimes(start, end);\n        }\n\n        if (startIsValid) {\n          var dur = Duration.fromISO(e, opts);\n\n          if (dur.isValid) {\n            return Interval.after(start, dur);\n          }\n        } else if (endIsValid) {\n          var _dur = Duration.fromISO(s, opts);\n\n          if (_dur.isValid) {\n            return Interval.before(end, _dur);\n          }\n        }\n      }\n\n      return Interval.invalid(\"unparsable\", \"the input \\\"\".concat(text, \"\\\" can't be parsed as ISO 8601\"));\n    }\n    /**\n     * Check if an object is an Interval. Works across context boundaries\n     * @param {object} o\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isInterval\",\n    value: function isInterval(o) {\n      return o && o.isLuxonInterval || false;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(intervals) {\n      var _intervals$sort$reduc = intervals.sort(function (a, b) {\n        return a.s - b.s;\n      }).reduce(function (_ref3, item) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            sofar = _ref4[0],\n            current = _ref4[1];\n\n        if (!current) {\n          return [sofar, item];\n        } else if (current.overlaps(item) || current.abutsStart(item)) {\n          return [sofar, current.union(item)];\n        } else {\n          return [sofar.concat([current]), item];\n        }\n      }, [[], null]),\n          _intervals$sort$reduc2 = _slicedToArray(_intervals$sort$reduc, 2),\n          found = _intervals$sort$reduc2[0],\n          final = _intervals$sort$reduc2[1];\n\n      if (final) {\n        found.push(final);\n      }\n\n      return found;\n    }\n    /**\n     * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n     * @param {Array} intervals\n     * @return {Array}\n     */\n\n  }, {\n    key: \"xor\",\n    value: function xor(intervals) {\n      var _Array$prototype;\n\n      var start = null,\n          currentCount = 0;\n\n      var results = [],\n          ends = intervals.map(function (i) {\n        return [{\n          time: i.s,\n          type: \"s\"\n        }, {\n          time: i.e,\n          type: \"e\"\n        }];\n      }),\n          flattened = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, _toConsumableArray(ends)),\n          arr = flattened.sort(function (a, b) {\n        return a.time - b.time;\n      });\n\n      var _iterator = _createForOfIteratorHelper(arr),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var i = _step.value;\n          currentCount += i.type === \"s\" ? 1 : -1;\n\n          if (currentCount === 1) {\n            start = i.time;\n          } else {\n            if (start && +start !== +i.time) {\n              results.push(Interval.fromDateTimes(start, i.time));\n            }\n\n            start = null;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return Interval.merge(results);\n    }\n  }]);\n\n  return Interval;\n}();\n\nexport { Interval as default };","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/luxon/src/interval.js"],"names":["DateTime","friendlyDateTime","Duration","Settings","InvalidArgumentError","InvalidIntervalError","Invalid","INVALID","validateStartEnd","start","end","isValid","Interval","invalid","toISO","config","s","e","isLuxonInterval","invalidReason","reason","explanation","unit","toDuration","get","NaN","startOf","Math","floor","diff","isEmpty","minus","hasSame","valueOf","dateTime","fromDateTimes","dateTimes","sorted","map","filter","d","contains","sort","results","i","added","next","push","duration","dur","fromDurationLike","as","idx","plus","mapUnits","x","numberOfParts","splitBy","length","slice","other","equals","intervals","xor","concat","intersection","opts","toISODate","toISOTime","dateFormat","separator","toFormat","mapFn","throwOnInvalid","builtStart","builtEnd","validateError","dt","text","split","startIsValid","fromISO","endIsValid","after","before","o","a","b","reduce","item","sofar","current","overlaps","abutsStart","union","found","final","currentCount","ends","time","type","flattened","Array","prototype","arr","merge"],"mappings":"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","sourcesContent":["import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\n\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval#fromDateTimes}, {@link Interval#after}, {@link Interval#before}, or {@link Interval#fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval#merge}, {@link Interval#xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd,\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      let start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return (o && o.isLuxonInterval) || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = \"milliseconds\") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes\n        .map(friendlyDateTime)\n        .filter((d) => this.contains(d))\n        .sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      idx = 1,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits((x) => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals\n      .sort((a, b) => a.s - b.s)\n      .reduce(\n        ([sofar, current], item) => {\n          if (!current) {\n            return [sofar, item];\n          } else if (current.overlaps(item) || current.abutsStart(item)) {\n            return [sofar, current.union(item)];\n          } else {\n            return [sofar.concat([current]), item];\n          }\n        },\n        [[], null]\n      );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map((i) => [\n        { time: i.s, type: \"s\" },\n        { time: i.e, type: \"e\" },\n      ]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map((i) => this.intersection(i))\n      .filter((i) => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = \" – \" } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}