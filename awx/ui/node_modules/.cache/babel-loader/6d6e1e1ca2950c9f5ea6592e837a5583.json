{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{i18n}from\"@lingui/core\";import React,{useCallback,useEffect}from'react';import{Redirect,Link}from'react-router-dom';import{PageSection,Card}from'@patternfly/react-core';import useRequest from'hooks/useRequest';import{UnifiedJobsAPI}from'api';import ContentError from'components/ContentError';import ContentLoading from'components/ContentLoading';import{JOB_TYPE_URL_SEGMENTS}from'../../constants';import{jsx as _jsx}from\"react/jsx-runtime\";var NOT_FOUND='not found';function JobTypeRedirect(_ref){var id=_ref.id,path=_ref.path,view=_ref.view;var _useRequest=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$UnifiedJobsAPI,results,_results,item;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return UnifiedJobsAPI.read({id:id});case 2:_yield$UnifiedJobsAPI=_context.sent;results=_yield$UnifiedJobsAPI.data.results;_results=_slicedToArray(results,1),item=_results[0];return _context.abrupt(\"return\",{job:item});case 6:case\"end\":return _context.stop();}}},_callee);})),[id]),{job:{}}),isLoading=_useRequest.isLoading,error=_useRequest.error,job=_useRequest.result.job,loadJob=_useRequest.request;useEffect(function(){loadJob();},[loadJob]);if(error){return/*#__PURE__*/_jsx(PageSection,{children:/*#__PURE__*/_jsx(Card,{children:error===NOT_FOUND?/*#__PURE__*/_jsx(ContentError,{isNotFound:true,children:/*#__PURE__*/_jsx(Link,{to:\"/jobs\",children:/*i18n*/i18n._(\"View all Jobs\")})}):/*#__PURE__*/_jsx(ContentError,{error:error})})});}if(isLoading||!(job!==null&&job!==void 0&&job.id)){return/*#__PURE__*/_jsx(PageSection,{children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(ContentLoading,{})})});}var typeSegment=JOB_TYPE_URL_SEGMENTS[job.type];return/*#__PURE__*/_jsx(Redirect,{from:path,to:\"/jobs/\".concat(typeSegment,\"/\").concat(job.id,\"/\").concat(view)});}JobTypeRedirect.defaultProps={view:'output'};export default JobTypeRedirect;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Job/JobTypeRedirect.js"],"names":["React","useCallback","useEffect","Redirect","Link","PageSection","Card","useRequest","UnifiedJobsAPI","ContentError","ContentLoading","JOB_TYPE_URL_SEGMENTS","NOT_FOUND","JobTypeRedirect","id","path","view","read","results","data","item","job","isLoading","error","result","loadJob","request","typeSegment","type","defaultProps"],"mappings":"uVAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,CAA6BC,SAA7B,KAA8C,OAA9C,CACA,OAASC,QAAT,CAAmBC,IAAnB,KAA+B,kBAA/B,CACA,OAASC,WAAT,CAAsBC,IAAtB,KAAkC,wBAAlC,CAGA,MAAOC,CAAAA,UAAP,KAAuB,kBAAvB,CACA,OAASC,cAAT,KAA+B,KAA/B,CACA,MAAOC,CAAAA,YAAP,KAAyB,yBAAzB,CACA,MAAOC,CAAAA,cAAP,KAA2B,2BAA3B,CACA,OAASC,qBAAT,KAAsC,iBAAtC,C,2CAEA,GAAMC,CAAAA,SAAS,CAAG,WAAlB,CAEA,QAASC,CAAAA,eAAT,MAA6C,IAAlBC,CAAAA,EAAkB,MAAlBA,EAAkB,CAAdC,IAAc,MAAdA,IAAc,CAARC,IAAQ,MAARA,IAAQ,CAC3C,gBAKIT,UAAU,CACZN,WAAW,sEAAC,yMAGAO,CAAAA,cAAc,CAACS,IAAf,CAAoB,CAAEH,EAAE,CAAFA,EAAF,CAApB,CAHA,4CAEAI,OAFA,uBAERC,IAFQ,CAEAD,OAFA,yBAIKA,OAJL,IAIHE,IAJG,6CAKH,CAAEC,GAAG,CAAED,IAAP,CALG,wDAAD,GAMR,CAACN,EAAD,CANQ,CADC,CAQZ,CAAEO,GAAG,CAAE,EAAP,CARY,CALd,CACEC,SADF,aACEA,SADF,CAEEC,KAFF,aAEEA,KAFF,CAGYF,GAHZ,aAGEG,MAHF,CAGYH,GAHZ,CAIWI,OAJX,aAIEC,OAJF,CAeAxB,SAAS,CAAC,UAAM,CACduB,OAAO,GACR,CAFQ,CAEN,CAACA,OAAD,CAFM,CAAT,CAIA,GAAIF,KAAJ,CAAW,CACT,mBACE,KAAC,WAAD,wBACE,KAAC,IAAD,WACGA,KAAK,GAAKX,SAAV,cACC,KAAC,YAAD,EAAc,UAAU,KAAxB,uBACE,KAAC,IAAD,EAAM,EAAE,CAAC,OAAT,kBAAkB,uBAAlB,EADF,EADD,cAKC,KAAC,YAAD,EAAc,KAAK,CAAEW,KAArB,EANJ,EADF,EADF,CAaD,CACD,GAAID,SAAS,EAAI,EAACD,GAAD,SAACA,GAAD,WAACA,GAAG,CAAEP,EAAN,CAAjB,CAA2B,CACzB,mBACE,KAAC,WAAD,wBACE,KAAC,IAAD,wBACE,KAAC,cAAD,IADF,EADF,EADF,CAOD,CACD,GAAMa,CAAAA,WAAW,CAAGhB,qBAAqB,CAACU,GAAG,CAACO,IAAL,CAAzC,CACA,mBAAO,KAAC,QAAD,EAAU,IAAI,CAAEb,IAAhB,CAAsB,EAAE,iBAAWY,WAAX,aAA0BN,GAAG,CAACP,EAA9B,aAAoCE,IAApC,CAAxB,EAAP,CACD,CAEDH,eAAe,CAACgB,YAAhB,CAA+B,CAC7Bb,IAAI,CAAE,QADuB,CAA/B,CAGA,cAAeH,CAAAA,eAAf","sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\nimport { PageSection, Card } from '@patternfly/react-core';\n\nimport { t } from '@lingui/macro';\nimport useRequest from 'hooks/useRequest';\nimport { UnifiedJobsAPI } from 'api';\nimport ContentError from 'components/ContentError';\nimport ContentLoading from 'components/ContentLoading';\nimport { JOB_TYPE_URL_SEGMENTS } from '../../constants';\n\nconst NOT_FOUND = 'not found';\n\nfunction JobTypeRedirect({ id, path, view }) {\n  const {\n    isLoading,\n    error,\n    result: { job },\n    request: loadJob,\n  } = useRequest(\n    useCallback(async () => {\n      const {\n        data: { results },\n      } = await UnifiedJobsAPI.read({ id });\n      const [item] = results;\n      return { job: item };\n    }, [id]),\n    { job: {} }\n  );\n  useEffect(() => {\n    loadJob();\n  }, [loadJob]);\n\n  if (error) {\n    return (\n      <PageSection>\n        <Card>\n          {error === NOT_FOUND ? (\n            <ContentError isNotFound>\n              <Link to=\"/jobs\">{t`View all Jobs`}</Link>\n            </ContentError>\n          ) : (\n            <ContentError error={error} />\n          )}\n        </Card>\n      </PageSection>\n    );\n  }\n  if (isLoading || !job?.id) {\n    return (\n      <PageSection>\n        <Card>\n          <ContentLoading />\n        </Card>\n      </PageSection>\n    );\n  }\n  const typeSegment = JOB_TYPE_URL_SEGMENTS[job.type];\n  return <Redirect from={path} to={`/jobs/${typeSegment}/${job.id}/${view}`} />;\n}\n\nJobTypeRedirect.defaultProps = {\n  view: 'output',\n};\nexport default JobTypeRedirect;\n"]},"metadata":{},"sourceType":"module"}