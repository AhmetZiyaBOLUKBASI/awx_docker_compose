{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _taggedTemplateLiteral from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject;import React from'react';import styled from'styled-components';import{Button}from'@patternfly/react-core';import ButtonGroup from'./ButtonGroup';import{jsx as _jsx}from\"react/jsx-runtime\";var SmallButton=styled(Button)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  && {\\n    padding: 3px 8px;\\n    font-size: var(--pf-global--FontSize--xs);\\n  }\\n\"])));SmallButton.displayName='SmallButton';function MultiButtonToggle(_ref){var buttons=_ref.buttons,value=_ref.value,onChange=_ref.onChange,name=_ref.name;var setValue=function setValue(newValue){if(value!==newValue){onChange(newValue);}};return/*#__PURE__*/_jsx(ButtonGroup,{children:buttons&&buttons.map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),buttonValue=_ref3[0],buttonLabel=_ref3[1];return/*#__PURE__*/_jsx(SmallButton,{\"aria-label\":buttonLabel,ouiaId:\"\".concat(name,\"-\").concat(buttonLabel,\"-button\"),className:\"toggle-button-\".concat(buttonValue),onClick:function onClick(){return setValue(buttonValue);},variant:buttonValue===value?'primary':'secondary',children:buttonLabel},buttonLabel);})});}export default MultiButtonToggle;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/MultiButtonToggle/MultiButtonToggle.js"],"names":["React","styled","Button","ButtonGroup","SmallButton","displayName","MultiButtonToggle","buttons","value","onChange","name","setValue","newValue","map","buttonValue","buttonLabel"],"mappings":"kPAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,MAAT,KAAuB,wBAAvB,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,C,2CAEA,GAAMC,CAAAA,WAAW,CAAGH,MAAM,CAACC,MAAD,CAAT,uJAAjB,CAMAE,WAAW,CAACC,WAAZ,CAA0B,aAA1B,CAEA,QAASC,CAAAA,iBAAT,MAA+D,IAAlCC,CAAAA,OAAkC,MAAlCA,OAAkC,CAAzBC,KAAyB,MAAzBA,KAAyB,CAAlBC,QAAkB,MAAlBA,QAAkB,CAARC,IAAQ,MAARA,IAAQ,CAC7D,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,QAAD,CAAc,CAC7B,GAAIJ,KAAK,GAAKI,QAAd,CAAwB,CACtBH,QAAQ,CAACG,QAAD,CAAR,CACD,CACF,CAJD,CAMA,mBACE,KAAC,WAAD,WACGL,OAAO,EACNA,OAAO,CAACM,GAAR,CAAY,kDAAEC,WAAF,UAAeC,WAAf,6BACV,KAAC,WAAD,EACE,aAAYA,WADd,CAEE,MAAM,WAAKL,IAAL,aAAaK,WAAb,WAFR,CAIE,SAAS,yBAAmBD,WAAnB,CAJX,CAKE,OAAO,CAAE,yBAAMH,CAAAA,QAAQ,CAACG,WAAD,CAAd,EALX,CAME,OAAO,CAAEA,WAAW,GAAKN,KAAhB,CAAwB,SAAxB,CAAoC,WAN/C,UAQGO,WARH,EAGOA,WAHP,CADU,EAAZ,CAFJ,EADF,CAiBD,CAmCD,cAAeT,CAAAA,iBAAf","sourcesContent":["import React from 'react';\nimport { func, string } from 'prop-types';\nimport styled from 'styled-components';\nimport { Button } from '@patternfly/react-core';\nimport ButtonGroup from './ButtonGroup';\n\nconst SmallButton = styled(Button)`\n  && {\n    padding: 3px 8px;\n    font-size: var(--pf-global--FontSize--xs);\n  }\n`;\nSmallButton.displayName = 'SmallButton';\n\nfunction MultiButtonToggle({ buttons, value, onChange, name }) {\n  const setValue = (newValue) => {\n    if (value !== newValue) {\n      onChange(newValue);\n    }\n  };\n\n  return (\n    <ButtonGroup>\n      {buttons &&\n        buttons.map(([buttonValue, buttonLabel]) => (\n          <SmallButton\n            aria-label={buttonLabel}\n            ouiaId={`${name}-${buttonLabel}-button`}\n            key={buttonLabel}\n            className={`toggle-button-${buttonValue}`}\n            onClick={() => setValue(buttonValue)}\n            variant={buttonValue === value ? 'primary' : 'secondary'}\n          >\n            {buttonLabel}\n          </SmallButton>\n        ))}\n    </ButtonGroup>\n  );\n}\n\nconst buttonsPropType = {\n  isRequired: ({ buttons }) => {\n    if (!buttons) {\n      return new Error(\n        `The prop buttons is marked as required in MultiButtonToggle, but its value is '${buttons}'`\n      );\n    }\n    // We expect this data structure to look like:\n    // [[value(unrestricted type), label(string)], [value(unrestricted type), label(string)], ...]\n    if (\n      !Array.isArray(buttons) ||\n      buttons.length < 2 ||\n      buttons.reduce(\n        (prevVal, button) => prevVal || typeof button[1] !== 'string',\n        false\n      )\n    ) {\n      return new Error(\n        `Invalid prop buttons supplied to MultiButtonToggle. Validation failed.`\n      );\n    }\n\n    return null;\n  },\n};\n\nMultiButtonToggle.propTypes = {\n  buttons: buttonsPropType.isRequired,\n  value: string.isRequired,\n  onChange: func.isRequired,\n  name: string.isRequired,\n};\n\nexport default MultiButtonToggle;\n"]},"metadata":{},"sourceType":"module"}