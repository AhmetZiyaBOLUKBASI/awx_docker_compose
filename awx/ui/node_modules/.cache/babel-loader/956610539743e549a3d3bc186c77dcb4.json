{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorListItem } from './DualListSelectorListItem';\nimport * as React from 'react';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\nexport var DualListSelectorList = function DualListSelectorList(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  var _React$useContext = React.useContext(DualListSelectorListContext),\n      setFocusedOption = _React$useContext.setFocusedOption,\n      isTree = _React$useContext.isTree,\n      ariaLabelledBy = _React$useContext.ariaLabelledBy,\n      focusedOption = _React$useContext.focusedOption,\n      displayOption = _React$useContext.displayOption,\n      selectedOptions = _React$useContext.selectedOptions,\n      id = _React$useContext.id,\n      onOptionSelect = _React$useContext.onOptionSelect,\n      options = _React$useContext.options,\n      isDisabled = _React$useContext.isDisabled; // only called when options are passed via options prop\n\n\n  var onOptionClick = function onOptionClick(e, index, id) {\n    setFocusedOption(id);\n    onOptionSelect(e, index, id);\n  };\n\n  return React.createElement(\"ul\", Object.assign({\n    className: css(styles.dualListSelectorList),\n    role: isTree ? 'tree' : 'listbox',\n    \"aria-multiselectable\": \"true\",\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-activedescendant\": focusedOption,\n    \"aria-disabled\": isDisabled ? 'true' : undefined\n  }, props), options.length === 0 ? children : options.map(function (option, index) {\n    if (displayOption(option)) {\n      return React.createElement(DualListSelectorListItem, {\n        key: index,\n        isSelected: selectedOptions.indexOf(index) !== -1,\n        id: \"\".concat(id, \"-option-\").concat(index),\n        onOptionSelect: function onOptionSelect(e, id) {\n          return onOptionClick(e, index, id);\n        },\n        orderIndex: index,\n        isDisabled: isDisabled\n      }, option);\n    }\n\n    return;\n  }));\n};\nDualListSelectorList.displayName = 'DualListSelectorList';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorList.tsx"],"names":[],"mappings":";AAAA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,6EAAnB;AACA,SAAS,wBAAT,QAAyC,4BAAzC;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,2BAAT,QAA4C,2BAA5C;AAMA,OAAO,IAAM,oBAAoB,GAAuD,SAA3E,oBAA2E,CAAC,EAAD,EAGxD;AAHyD,MACvF,QADuF,GAC/E,EAD+E,CACvF,QADuF;AAAA,MAEpF,KAFoF,GAE/E,MAAA,CAAA,EAAA,EAF+E,CAAA,UAAA,CAE/E,CAF+E;;AAIvF,0BAWI,KAAK,CAAC,UAAN,CAAiB,2BAAjB,CAXJ;AAAA,MACE,gBADF,qBACE,gBADF;AAAA,MAEE,MAFF,qBAEE,MAFF;AAAA,MAGE,cAHF,qBAGE,cAHF;AAAA,MAIE,aAJF,qBAIE,aAJF;AAAA,MAKE,aALF,qBAKE,aALF;AAAA,MAME,eANF,qBAME,eANF;AAAA,MAOE,EAPF,qBAOE,EAPF;AAAA,MAQE,cARF,qBAQE,cARF;AAAA,MASE,OATF,qBASE,OATF;AAAA,MAUE,UAVF,qBAUE,UAVF,CAD8B,CAc9B;;;AACA,MAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,CAAD,EAAgE,KAAhE,EAA+E,EAA/E,EAA6F;AACjH,IAAA,gBAAgB,CAAC,EAAD,CAAhB;AACA,IAAA,cAAc,CAAC,CAAD,EAAI,KAAJ,EAAW,EAAX,CAAd;AACD,GAHD;;AAKA,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,oBAAR,CADhB;AAEE,IAAA,IAAI,EAAE,MAAM,GAAG,MAAH,GAAY,SAF1B;AAEmC,4BACZ,MAHvB;AAG6B,uBACV,cAJnB;AAIiC,6BACR,aALzB;AAKsC,qBACrB,UAAU,GAAG,MAAH,GAAY;AANvC,GAAA,EAOM,KAPN,CAAA,EASG,OAAO,CAAC,MAAR,KAAmB,CAAnB,GACG,QADH,GAEG,OAAO,CAAC,GAAR,CAAY,UAAC,MAAD,EAAS,KAAT,EAAkB;AAC5B,QAAI,aAAa,CAAC,MAAD,CAAjB,EAA2B;AACzB,aACE,KAAA,CAAA,aAAA,CAAC,wBAAD,EAAyB;AACvB,QAAA,GAAG,EAAE,KADkB;AAEvB,QAAA,UAAU,EAAG,eAA4B,CAAC,OAA7B,CAAqC,KAArC,MAAgD,CAAC,CAFvC;AAGvB,QAAA,EAAE,YAAK,EAAL,qBAAkB,KAAlB,CAHqB;AAIvB,QAAA,cAAc,EAAE,wBAAC,CAAD,EAAI,EAAJ;AAAA,iBAAW,aAAa,CAAC,CAAD,EAAI,KAAJ,EAAW,EAAX,CAAxB;AAAA,SAJO;AAKvB,QAAA,UAAU,EAAE,KALW;AAMvB,QAAA,UAAU,EAAE;AANW,OAAzB,EAQG,MARH,CADF;AAYD;;AACD;AACD,GAhBD,CAXN,CADF;AA+BD,CAtDM;AAuDP,oBAAoB,CAAC,WAArB,GAAmC,sBAAnC","sourcesContent":["import { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorListItem } from './DualListSelectorListItem';\nimport * as React from 'react';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorListProps extends React.HTMLProps<HTMLUListElement> {\n  children?: React.ReactNode;\n}\n\nexport const DualListSelectorList: React.FunctionComponent<DualListSelectorListProps> = ({\n  children,\n  ...props\n}: DualListSelectorListProps) => {\n  const {\n    setFocusedOption,\n    isTree,\n    ariaLabelledBy,\n    focusedOption,\n    displayOption,\n    selectedOptions,\n    id,\n    onOptionSelect,\n    options,\n    isDisabled\n  } = React.useContext(DualListSelectorListContext);\n\n  // only called when options are passed via options prop\n  const onOptionClick = (e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent, index: number, id: string) => {\n    setFocusedOption(id);\n    onOptionSelect(e, index, id);\n  };\n\n  return (\n    <ul\n      className={css(styles.dualListSelectorList)}\n      role={isTree ? 'tree' : 'listbox'}\n      aria-multiselectable=\"true\"\n      aria-labelledby={ariaLabelledBy}\n      aria-activedescendant={focusedOption}\n      aria-disabled={isDisabled ? 'true' : undefined}\n      {...props}\n    >\n      {options.length === 0\n        ? children\n        : options.map((option, index) => {\n            if (displayOption(option)) {\n              return (\n                <DualListSelectorListItem\n                  key={index}\n                  isSelected={(selectedOptions as number[]).indexOf(index) !== -1}\n                  id={`${id}-option-${index}`}\n                  onOptionSelect={(e, id) => onOptionClick(e, index, id)}\n                  orderIndex={index}\n                  isDisabled={isDisabled}\n                >\n                  {option}\n                </DualListSelectorListItem>\n              );\n            }\n            return;\n          })}\n    </ul>\n  );\n};\nDualListSelectorList.displayName = 'DualListSelectorList';\n"]},"metadata":{},"sourceType":"module"}