{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { canUseDOM } from '../../helpers/util';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { globalBreakpoints } from './ToolbarUtils';\nexport var ToolbarChipGroupContent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarChipGroupContent, _React$Component);\n\n  var _super = _createSuper(ToolbarChipGroupContent);\n\n  function ToolbarChipGroupContent() {\n    _classCallCheck(this, ToolbarChipGroupContent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ToolbarChipGroupContent, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          isExpanded = _a.isExpanded,\n          chipGroupContentRef = _a.chipGroupContentRef,\n          clearAllFilters = _a.clearAllFilters,\n          showClearFiltersButton = _a.showClearFiltersButton,\n          clearFiltersButtonText = _a.clearFiltersButtonText,\n          collapseListedFiltersBreakpoint = _a.collapseListedFiltersBreakpoint,\n          numberOfFilters = _a.numberOfFilters,\n          numberOfFiltersText = _a.numberOfFiltersText,\n          customChipGroupContent = _a.customChipGroupContent,\n          props = __rest(_a, [\"className\", \"isExpanded\", \"chipGroupContentRef\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"numberOfFilters\", \"numberOfFiltersText\", \"customChipGroupContent\"]);\n\n      var clearChipGroups = function clearChipGroups() {\n        clearAllFilters();\n      };\n\n      var collapseListedFilters = false;\n\n      if (collapseListedFiltersBreakpoint === 'all') {\n        collapseListedFilters = true;\n      } else if (canUseDOM) {\n        collapseListedFilters = (canUseDOM ? window.innerWidth : 1200) < globalBreakpoints[collapseListedFiltersBreakpoint];\n      }\n\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.toolbarContent, (numberOfFilters === 0 || isExpanded) && styles.modifiers.hidden, className)\n      }, (numberOfFilters === 0 || isExpanded) && {\n        hidden: true\n      }, {\n        ref: chipGroupContentRef\n      }, props), React.createElement(ToolbarGroup, Object.assign({\n        className: css(collapseListedFilters && styles.modifiers.hidden)\n      }, collapseListedFilters && {\n        hidden: true\n      }, collapseListedFilters && {\n        'aria-hidden': true\n      })), collapseListedFilters && numberOfFilters > 0 && !isExpanded && React.createElement(ToolbarGroup, null, React.createElement(ToolbarItem, null, numberOfFiltersText(numberOfFilters))), showClearFiltersButton && !isExpanded && !customChipGroupContent && React.createElement(ToolbarItem, null, React.createElement(Button, {\n        variant: \"link\",\n        onClick: clearChipGroups,\n        isInline: true\n      }, clearFiltersButtonText)), customChipGroupContent && customChipGroupContent);\n    }\n  }]);\n\n  return ToolbarChipGroupContent;\n}(React.Component);\nToolbarChipGroupContent.displayName = 'ToolbarChipGroupContent';\nToolbarChipGroupContent.defaultProps = {\n  clearFiltersButtonText: 'Clear all filters',\n  collapseListedFiltersBreakpoint: 'lg',\n  numberOfFiltersText: function numberOfFiltersText(numberOfFilters) {\n    return \"\".concat(numberOfFilters, \" filters applied\");\n  }\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarChipGroupContent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { canUseDOM } from '../../helpers/util';\n\nimport { RefObject } from 'react';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { globalBreakpoints } from './ToolbarUtils';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToolbarChipGroupContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Classes applied to root element of the data toolbar content row */\n  className?: string;\n  /** Flag indicating if a data toolbar toggle group's expandable content is expanded */\n  isExpanded?: boolean;\n  /** Chip group content reference for passing to data toolbar children */\n  chipGroupContentRef?: RefObject<any>;\n  /** optional callback for clearing all filters in the toolbar */\n  clearAllFilters?: () => void;\n  /** Flag indicating that the clear all filters button should be visible */\n  showClearFiltersButton: boolean;\n  /** Text to display in the clear all filters button */\n  clearFiltersButtonText?: string;\n  /** Total number of filters currently being applied across all ToolbarFilter components */\n  numberOfFilters: number;\n  /** Text to display in the total number of applied filters ToolbarFilter */\n  numberOfFiltersText?: (numberOfFilters: number) => string;\n  /** The breakpoint at which the listed filters in chip groups are collapsed down to a summary */\n  collapseListedFiltersBreakpoint?: 'all' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Custom additional content appended to the generated chips. To maintain spacing and styling, each node should be a ToolbarItem or ToolbarGroup. This property will remove the built in \"Clear all filters\" button. */\n  customChipGroupContent?: React.ReactNode;\n}\n\nexport class ToolbarChipGroupContent extends React.Component<ToolbarChipGroupContentProps> {\n  static displayName = 'ToolbarChipGroupContent';\n  static defaultProps: PickOptional<ToolbarChipGroupContentProps> = {\n    clearFiltersButtonText: 'Clear all filters',\n    collapseListedFiltersBreakpoint: 'lg',\n    numberOfFiltersText: (numberOfFilters: number) => `${numberOfFilters} filters applied`\n  };\n\n  render() {\n    const {\n      className,\n      isExpanded,\n      chipGroupContentRef,\n      clearAllFilters,\n      showClearFiltersButton,\n      clearFiltersButtonText,\n      collapseListedFiltersBreakpoint,\n      numberOfFilters,\n      numberOfFiltersText,\n      customChipGroupContent,\n      ...props\n    } = this.props;\n\n    const clearChipGroups = () => {\n      clearAllFilters();\n    };\n\n    let collapseListedFilters = false;\n    if (collapseListedFiltersBreakpoint === 'all') {\n      collapseListedFilters = true;\n    } else if (canUseDOM) {\n      collapseListedFilters =\n        (canUseDOM ? window.innerWidth : 1200) < globalBreakpoints[collapseListedFiltersBreakpoint];\n    }\n\n    return (\n      <div\n        className={css(\n          styles.toolbarContent,\n          (numberOfFilters === 0 || isExpanded) && styles.modifiers.hidden,\n          className\n        )}\n        {...((numberOfFilters === 0 || isExpanded) && { hidden: true })}\n        ref={chipGroupContentRef}\n        {...props}\n      >\n        <ToolbarGroup\n          className={css(collapseListedFilters && styles.modifiers.hidden)}\n          {...(collapseListedFilters && { hidden: true })}\n          {...(collapseListedFilters && { 'aria-hidden': true })}\n        />\n        {collapseListedFilters && numberOfFilters > 0 && !isExpanded && (\n          <ToolbarGroup>\n            <ToolbarItem>{numberOfFiltersText(numberOfFilters)}</ToolbarItem>\n          </ToolbarGroup>\n        )}\n        {showClearFiltersButton && !isExpanded && !customChipGroupContent && (\n          <ToolbarItem>\n            <Button variant=\"link\" onClick={clearChipGroups} isInline>\n              {clearFiltersButtonText}\n            </Button>\n          </ToolbarItem>\n        )}\n        {customChipGroupContent && customChipGroupContent}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}