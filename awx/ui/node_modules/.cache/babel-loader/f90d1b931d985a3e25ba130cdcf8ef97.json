{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nexport var DrawerColorVariant;\n\n(function (DrawerColorVariant) {\n  DrawerColorVariant[\"default\"] = \"default\";\n  DrawerColorVariant[\"light200\"] = \"light-200\";\n})(DrawerColorVariant || (DrawerColorVariant = {}));\n\nexport var DrawerContext = React.createContext({\n  isExpanded: false,\n  isStatic: false,\n  onExpand: function onExpand() {},\n  position: 'right',\n  drawerRef: null,\n  drawerContentRef: null,\n  isInline: false\n});\nexport var Drawer = function Drawer(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      children = _a.children,\n      _a$isExpanded = _a.isExpanded,\n      isExpanded = _a$isExpanded === void 0 ? false : _a$isExpanded,\n      _a$isInline = _a.isInline,\n      isInline = _a$isInline === void 0 ? false : _a$isInline,\n      _a$isStatic = _a.isStatic,\n      isStatic = _a$isStatic === void 0 ? false : _a$isStatic,\n      _a$position = _a.position,\n      position = _a$position === void 0 ? 'right' : _a$position,\n      _a$onExpand = _a.onExpand,\n      onExpand = _a$onExpand === void 0 ? function () {} : _a$onExpand,\n      props = __rest(_a, [\"className\", \"children\", \"isExpanded\", \"isInline\", \"isStatic\", \"position\", \"onExpand\"]);\n\n  var drawerRef = React.useRef();\n  var drawerContentRef = React.useRef();\n  return React.createElement(DrawerContext.Provider, {\n    value: {\n      isExpanded: isExpanded,\n      isStatic: isStatic,\n      onExpand: onExpand,\n      position: position,\n      drawerRef: drawerRef,\n      drawerContentRef: drawerContentRef,\n      isInline: isInline\n    }\n  }, React.createElement(\"div\", Object.assign({\n    className: css(styles.drawer, isExpanded && styles.modifiers.expanded, isInline && styles.modifiers.inline, isStatic && styles.modifiers.static, position === 'left' && styles.modifiers.panelLeft, position === 'bottom' && styles.modifiers.panelBottom, className),\n    ref: drawerRef\n  }, props), children));\n};\nDrawer.displayName = 'Drawer';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Drawer/Drawer.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,uDAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AAEA,OAAA,IAAY,kBAAZ;;AAAA,CAAA,UAAY,kBAAZ,EAA8B;AAC5B,EAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,kBAAA,CAAA,UAAA,CAAA,GAAA,WAAA;AACD,CAHD,EAAY,kBAAkB,KAAlB,kBAAkB,GAAA,EAAA,CAA9B;;AAgCA,OAAO,IAAM,aAAa,GAAG,KAAK,CAAC,aAAN,CAAiD;AAC5E,EAAA,UAAU,EAAE,KADgE;AAE5E,EAAA,QAAQ,EAAE,KAFkE;AAG5E,EAAA,QAAQ,EAAE,oBAAK,CAAG,CAH0D;AAI5E,EAAA,QAAQ,EAAE,OAJkE;AAK5E,EAAA,SAAS,EAAE,IALiE;AAM5E,EAAA,gBAAgB,EAAE,IAN0D;AAO5E,EAAA,QAAQ,EAAE;AAPkE,CAAjD,CAAtB;AAUP,OAAO,IAAM,MAAM,GAAyC,SAA/C,MAA+C,CAAC,EAAD,EAS1C;AAT2C,qBAOxC,EAPwC,CAC3D,SAD2D;AAAA,MAC3D,SAD2D,6BAC/C,EAD+C;AAAA,MAE3D,QAF2D,GAOxC,EAPwC,CAE3D,QAF2D;AAAA,sBAOxC,EAPwC,CAG3D,UAH2D;AAAA,MAG3D,UAH2D,8BAG9C,KAH8C;AAAA,oBAOxC,EAPwC,CAI3D,QAJ2D;AAAA,MAI3D,QAJ2D,4BAIhD,KAJgD;AAAA,oBAOxC,EAPwC,CAK3D,QAL2D;AAAA,MAK3D,QAL2D,4BAKhD,KALgD;AAAA,oBAOxC,EAPwC,CAM3D,QAN2D;AAAA,MAM3D,QAN2D,4BAMhD,OANgD;AAAA,oBAOxC,EAPwC,CAO3D,QAP2D;AAAA,MAO3D,QAP2D,4BAOhD,YAAK,CAAG,CAPwC;AAAA,MAQxD,KARwD,GAQnD,MAAA,CAAA,EAAA,EARmD,CAAA,WAAA,EAAA,UAAA,EAAA,YAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,CAQnD,CARmD;;AAU3D,MAAM,SAAS,GAAG,KAAK,CAAC,MAAN,EAAlB;AACA,MAAM,gBAAgB,GAAG,KAAK,CAAC,MAAN,EAAzB;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,aAAa,CAAC,QAAf,EAAuB;AAAC,IAAA,KAAK,EAAE;AAAE,MAAA,UAAU,EAAV,UAAF;AAAc,MAAA,QAAQ,EAAR,QAAd;AAAwB,MAAA,QAAQ,EAAR,QAAxB;AAAkC,MAAA,QAAQ,EAAR,QAAlC;AAA4C,MAAA,SAAS,EAAT,SAA5C;AAAuD,MAAA,gBAAgB,EAAhB,gBAAvD;AAAyE,MAAA,QAAQ,EAAR;AAAzE;AAAR,GAAvB,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,MADK,EAEZ,UAAU,IAAI,MAAM,CAAC,SAAP,CAAiB,QAFnB,EAGZ,QAAQ,IAAI,MAAM,CAAC,SAAP,CAAiB,MAHjB,EAIZ,QAAQ,IAAI,MAAM,CAAC,SAAP,CAAiB,MAJjB,EAKZ,QAAQ,KAAK,MAAb,IAAuB,MAAM,CAAC,SAAP,CAAiB,SAL5B,EAMZ,QAAQ,KAAK,QAAb,IAAyB,MAAM,CAAC,SAAP,CAAiB,WAN9B,EAOZ,SAPY,CADhB;AAUE,IAAA,GAAG,EAAE;AAVP,GAAA,EAWM,KAXN,CAAA,EAaG,QAbH,CADF,CADF;AAmBD,CAhCM;AAiCP,MAAM,CAAC,WAAP,GAAqB,QAArB","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\n\nexport enum DrawerColorVariant {\n  default = 'default',\n  light200 = 'light-200'\n}\n\nexport interface DrawerProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the Drawer. */\n  className?: string;\n  /** Content rendered in the left hand panel */\n  children?: React.ReactNode;\n  /** Indicates if the drawer is expanded */\n  isExpanded?: boolean;\n  /** Indicates if the content element and panel element are displayed side by side. */\n  isInline?: boolean;\n  /** Indicates if the drawer will always show both content and panel. */\n  isStatic?: boolean;\n  /** Position of the drawer panel */\n  position?: 'left' | 'right' | 'bottom';\n  /** Callback when drawer panel is expanded after waiting 250ms for animation to complete. */\n  onExpand?: () => void;\n}\n\nexport interface DrawerContextProps {\n  isExpanded: boolean;\n  isStatic: boolean;\n  onExpand?: () => void;\n  position?: string;\n  drawerRef?: React.RefObject<HTMLDivElement>;\n  drawerContentRef?: React.RefObject<HTMLDivElement>;\n  isInline: boolean;\n}\n\nexport const DrawerContext = React.createContext<Partial<DrawerContextProps>>({\n  isExpanded: false,\n  isStatic: false,\n  onExpand: () => {},\n  position: 'right',\n  drawerRef: null,\n  drawerContentRef: null,\n  isInline: false\n});\n\nexport const Drawer: React.FunctionComponent<DrawerProps> = ({\n  className = '',\n  children,\n  isExpanded = false,\n  isInline = false,\n  isStatic = false,\n  position = 'right',\n  onExpand = () => {},\n  ...props\n}: DrawerProps) => {\n  const drawerRef = React.useRef<HTMLDivElement>();\n  const drawerContentRef = React.useRef<HTMLDivElement>();\n\n  return (\n    <DrawerContext.Provider value={{ isExpanded, isStatic, onExpand, position, drawerRef, drawerContentRef, isInline }}>\n      <div\n        className={css(\n          styles.drawer,\n          isExpanded && styles.modifiers.expanded,\n          isInline && styles.modifiers.inline,\n          isStatic && styles.modifiers.static,\n          position === 'left' && styles.modifiers.panelLeft,\n          position === 'bottom' && styles.modifiers.panelBottom,\n          className\n        )}\n        ref={drawerRef}\n        {...props}\n      >\n        {children}\n      </div>\n    </DrawerContext.Provider>\n  );\n};\nDrawer.displayName = 'Drawer';\n"]},"metadata":{},"sourceType":"module"}