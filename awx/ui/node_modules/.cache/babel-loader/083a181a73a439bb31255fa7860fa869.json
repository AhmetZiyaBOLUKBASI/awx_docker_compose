{"ast":null,"code":"import _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { cellActions } from '../Table/utils/decorators/cellActions';\nimport { selectable } from '../Table/utils/decorators/selectable';\nimport { collapsible } from '../Table/utils/decorators/collapsible';\nimport { compoundExpand } from '../Table/utils/decorators/compoundExpand';\nimport { cellWidth } from '../Table/utils/decorators/cellWidth';\nimport { Visibility, classNames } from './../Table/utils/decorators/classNames';\nimport { favoritable } from '../Table/utils/decorators/favoritable';\nimport { draggable } from '../Table/utils/decorators/draggable';\nimport { treeRow } from '../Table/utils/decorators/treeRow';\nimport { mergeProps } from '../Table/base/merge-props';\n\nvar TdBase = function TdBase(_a) {\n  var children = _a.children,\n      className = _a.className,\n      _a$isActionCell = _a.isActionCell,\n      isActionCell = _a$isActionCell === void 0 ? false : _a$isActionCell,\n      _a$component = _a.component,\n      component = _a$component === void 0 ? 'td' : _a$component,\n      dataLabel = _a.dataLabel,\n      _a$textCenter = _a.textCenter,\n      textCenter = _a$textCenter === void 0 ? false : _a$textCenter,\n      modifier = _a.modifier,\n      _a$select = _a.select,\n      select = _a$select === void 0 ? null : _a$select,\n      _a$actions = _a.actions,\n      actions = _a$actions === void 0 ? null : _a$actions,\n      _a$expand = _a.expand,\n      expand = _a$expand === void 0 ? null : _a$expand,\n      _a$treeRow = _a.treeRow,\n      treeRowProp = _a$treeRow === void 0 ? null : _a$treeRow,\n      _a$compoundExpand = _a.compoundExpand,\n      compoundExpandProp = _a$compoundExpand === void 0 ? null : _a$compoundExpand,\n      noPadding = _a.noPadding,\n      width = _a.width,\n      visibility = _a.visibility,\n      innerRef = _a.innerRef,\n      _a$favorites = _a.favorites,\n      favorites = _a$favorites === void 0 ? null : _a$favorites,\n      _a$draggableRow = _a.draggableRow,\n      draggableRowProp = _a$draggableRow === void 0 ? null : _a$draggableRow,\n      props = __rest(_a, [\"children\", \"className\", \"isActionCell\", \"component\", \"dataLabel\", \"textCenter\", \"modifier\", \"select\", \"actions\", \"expand\", \"treeRow\", \"compoundExpand\", \"noPadding\", \"width\", \"visibility\", \"innerRef\", \"favorites\", \"draggableRow\"]);\n\n  var selectParams = select ? selectable(children, {\n    rowIndex: select.rowIndex,\n    rowData: {\n      selected: select.isSelected,\n      disableSelection: select === null || select === void 0 ? void 0 : select.disable,\n      props: select === null || select === void 0 ? void 0 : select.props\n    },\n    column: {\n      extraParams: {\n        onSelect: select === null || select === void 0 ? void 0 : select.onSelect,\n        selectVariant: select.variant || 'checkbox'\n      }\n    }\n  }) : null;\n  var favoriteParams = favorites ? favoritable(null, {\n    rowIndex: favorites === null || favorites === void 0 ? void 0 : favorites.rowIndex,\n    rowData: {\n      favorited: favorites.isFavorited,\n      favoritesProps: favorites === null || favorites === void 0 ? void 0 : favorites.props\n    },\n    column: {\n      extraParams: {\n        onFavorite: favorites === null || favorites === void 0 ? void 0 : favorites.onFavorite\n      }\n    }\n  }) : null;\n  var draggableParams = draggableRowProp !== null ? draggable(null, {\n    rowData: {\n      id: draggableRowProp.id\n    }\n  }) : null;\n  var actionParamsFunc = actions ? cellActions(actions.items, null, null) : null;\n  var actionParams = actionParamsFunc ? actionParamsFunc(null, {\n    rowIndex: actions === null || actions === void 0 ? void 0 : actions.rowIndex,\n    rowData: {\n      disableActions: actions === null || actions === void 0 ? void 0 : actions.disable\n    },\n    column: {\n      extraParams: {\n        dropdownPosition: actions === null || actions === void 0 ? void 0 : actions.dropdownPosition,\n        dropdownDirection: actions === null || actions === void 0 ? void 0 : actions.dropdownDirection,\n        actionsToggle: actions === null || actions === void 0 ? void 0 : actions.actionsToggle\n      }\n    }\n  }) : null;\n  var expandableParams = expand !== null ? collapsible(null, {\n    rowIndex: expand.rowIndex,\n    columnIndex: expand === null || expand === void 0 ? void 0 : expand.columnIndex,\n    rowData: {\n      isOpen: expand.isExpanded\n    },\n    column: {\n      extraParams: {\n        onCollapse: expand === null || expand === void 0 ? void 0 : expand.onToggle\n      }\n    }\n  }) : null;\n  var compoundParams = compoundExpandProp !== null ? compoundExpand({\n    title: children,\n    props: {\n      isOpen: compoundExpandProp.isExpanded\n    }\n  }, {\n    column: {\n      extraParams: {\n        onExpand: compoundExpandProp === null || compoundExpandProp === void 0 ? void 0 : compoundExpandProp.onToggle\n      }\n    }\n  }) : null;\n  var widthParams = width ? cellWidth(width)() : null;\n  var visibilityParams = visibility ? classNames.apply(void 0, _toConsumableArray(visibility.map(function (vis) {\n    return Visibility[vis];\n  })))() : null;\n  var treeRowParams = treeRowProp !== null ? treeRow(treeRowProp.onCollapse, treeRowProp.onCheckChange, treeRowProp.onToggleRowDetails)({\n    title: children\n  }, {\n    rowIndex: treeRowProp.rowIndex,\n    rowData: {\n      props: treeRowProp.props\n    }\n  }) : null;\n  var merged = mergeProps(selectParams, actionParams, expandableParams, compoundParams, widthParams, visibilityParams, favoriteParams, treeRowParams, draggableParams);\n\n  var _merged$isVisible = merged.isVisible,\n      isVisible = _merged$isVisible === void 0 ? null : _merged$isVisible,\n      _merged$children = merged.children,\n      mergedChildren = _merged$children === void 0 ? null : _merged$children,\n      _merged$className = merged.className,\n      mergedClassName = _merged$className === void 0 ? '' : _merged$className,\n      _merged$component = merged.component,\n      MergedComponent = _merged$component === void 0 ? component : _merged$component,\n      mergedProps = __rest(merged, [\"isVisible\", \"children\", \"className\", \"component\"]);\n\n  var treeTableTitleCell = className && className.includes('pf-c-table__tree-view-title-cell') || mergedClassName && mergedClassName.includes('pf-c-table__tree-view-title-cell');\n  return React.createElement(MergedComponent, Object.assign({}, !treeTableTitleCell && {\n    'data-label': dataLabel\n  }, {\n    className: css(className, isActionCell && styles.tableAction, textCenter && styles.modifiers.center, noPadding && styles.modifiers.noPadding, styles.modifiers[modifier], draggableParams && styles.tableDraggable, mergedClassName),\n    ref: innerRef\n  }, mergedProps, props), mergedChildren || children);\n};\n\nexport var Td = React.forwardRef(function (props, ref) {\n  return React.createElement(TdBase, Object.assign({}, props, {\n    innerRef: ref\n  }));\n});\nTd.displayName = 'Td';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/TableComposable/Td.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { BaseCellProps } from './TableComposable';\nimport { cellActions } from '../Table/utils/decorators/cellActions';\nimport { selectable } from '../Table/utils/decorators/selectable';\nimport { collapsible } from '../Table/utils/decorators/collapsible';\nimport { compoundExpand } from '../Table/utils/decorators/compoundExpand';\nimport { cellWidth } from '../Table/utils/decorators/cellWidth';\nimport { Visibility, classNames } from './../Table/utils/decorators/classNames';\nimport { favoritable } from '../Table/utils/decorators/favoritable';\nimport { draggable } from '../Table/utils/decorators/draggable';\nimport { treeRow } from '../Table/utils/decorators/treeRow';\nimport { mergeProps } from '../Table/base/merge-props';\nimport { IVisibility } from '../Table/utils/decorators/classNames';\nimport { IFormatterValueType, IExtra } from '../Table/TableTypes';\nimport {\n  TdActionsType,\n  TdCompoundExpandType,\n  TdDraggableType,\n  TdExpandType,\n  TdFavoritesType,\n  TdSelectType,\n  TdTreeRowType\n} from '../Table/base';\nexport interface TdProps extends BaseCellProps, Omit<React.HTMLProps<HTMLTableDataCellElement>, 'onSelect' | 'width'> {\n  /**\n   * The column header the cell corresponds to.\n   * This attribute replaces table header in mobile viewport. It is rendered by ::before pseudo element.\n   */\n  dataLabel?: string;\n  /** Renders a checkbox or radio select */\n  select?: TdSelectType;\n  /** Turns the cell into an actions cell */\n  actions?: TdActionsType;\n  /** Turns the cell into an expansion toggle and determines if the corresponding expansion row is open */\n  expand?: TdExpandType;\n  /** Turns the cell into a compound expansion toggle */\n  compoundExpand?: TdCompoundExpandType;\n  /** Turns the cell into a favorites cell with a star button */\n  favorites?: TdFavoritesType;\n  /** Turns the cell into the first cell in a tree table row */\n  treeRow?: TdTreeRowType;\n  /** Turns the cell into the first cell in a draggable row*/\n  draggableRow?: TdDraggableType;\n  /** True to remove padding */\n  noPadding?: boolean;\n  /** Applies pf-c-table__action to td */\n  isActionCell?: boolean;\n}\n\nconst TdBase: React.FunctionComponent<TdProps> = ({\n  children,\n  className,\n  isActionCell = false,\n  component = 'td',\n  dataLabel,\n  textCenter = false,\n  modifier,\n  select = null,\n  actions = null,\n  expand = null,\n  treeRow: treeRowProp = null,\n  compoundExpand: compoundExpandProp = null,\n  noPadding,\n  width,\n  visibility,\n  innerRef,\n  favorites = null,\n  draggableRow: draggableRowProp = null,\n  ...props\n}: TdProps) => {\n  const selectParams = select\n    ? selectable(children as IFormatterValueType, {\n        rowIndex: select.rowIndex,\n        rowData: {\n          selected: select.isSelected,\n          disableSelection: select?.disable,\n          props: select?.props\n        },\n        column: {\n          extraParams: {\n            onSelect: select?.onSelect,\n            selectVariant: select.variant || 'checkbox'\n          }\n        }\n      })\n    : null;\n  const favoriteParams = favorites\n    ? favoritable(null, {\n        rowIndex: favorites?.rowIndex,\n        rowData: {\n          favorited: favorites.isFavorited,\n          favoritesProps: favorites?.props\n        },\n        column: {\n          extraParams: {\n            onFavorite: favorites?.onFavorite\n          }\n        }\n      })\n    : null;\n  const draggableParams =\n    draggableRowProp !== null\n      ? draggable(null, {\n          rowData: {\n            id: draggableRowProp.id\n          }\n        })\n      : null;\n  const actionParamsFunc = actions ? cellActions(actions.items, null, null) : null;\n  const actionParams = actionParamsFunc\n    ? actionParamsFunc(null, {\n        rowIndex: actions?.rowIndex,\n        rowData: {\n          disableActions: actions?.disable\n        },\n        column: {\n          extraParams: {\n            dropdownPosition: actions?.dropdownPosition,\n            dropdownDirection: actions?.dropdownDirection,\n            actionsToggle: actions?.actionsToggle\n          }\n        }\n      })\n    : null;\n  const expandableParams =\n    expand !== null\n      ? collapsible(null, {\n          rowIndex: expand.rowIndex,\n          columnIndex: expand?.columnIndex,\n          rowData: {\n            isOpen: expand.isExpanded\n          },\n          column: {\n            extraParams: {\n              onCollapse: expand?.onToggle\n            }\n          }\n        })\n      : null;\n  const compoundParams =\n    compoundExpandProp !== null\n      ? compoundExpand(\n          {\n            title: children,\n            props: {\n              isOpen: compoundExpandProp.isExpanded\n            }\n          } as IFormatterValueType,\n          {\n            column: {\n              extraParams: {\n                onExpand: compoundExpandProp?.onToggle\n              }\n            }\n          }\n        )\n      : null;\n  const widthParams = width ? cellWidth(width)() : null;\n  const visibilityParams = visibility\n    ? classNames(...visibility.map((vis: keyof IVisibility) => Visibility[vis]))()\n    : null;\n  const treeRowParams =\n    treeRowProp !== null\n      ? treeRow(\n          treeRowProp.onCollapse,\n          treeRowProp.onCheckChange,\n          treeRowProp.onToggleRowDetails\n        )(\n          {\n            title: children\n          } as IFormatterValueType,\n          {\n            rowIndex: treeRowProp.rowIndex,\n            rowData: {\n              props: treeRowProp.props\n            }\n          } as IExtra\n        )\n      : null;\n  const merged = mergeProps(\n    selectParams,\n    actionParams,\n    expandableParams,\n    compoundParams,\n    widthParams,\n    visibilityParams,\n    favoriteParams,\n    treeRowParams,\n    draggableParams\n  );\n  const {\n    // selectable adds this but we don't want it\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isVisible = null,\n    children: mergedChildren = null,\n    className: mergedClassName = '',\n    component: MergedComponent = component,\n    ...mergedProps\n  } = merged;\n\n  const treeTableTitleCell =\n    (className && className.includes('pf-c-table__tree-view-title-cell')) ||\n    (mergedClassName && mergedClassName.includes('pf-c-table__tree-view-title-cell'));\n\n  return (\n    <MergedComponent\n      {...(!treeTableTitleCell && { 'data-label': dataLabel })}\n      className={css(\n        className,\n        isActionCell && styles.tableAction,\n        textCenter && styles.modifiers.center,\n        noPadding && styles.modifiers.noPadding,\n        styles.modifiers[modifier as 'breakWord' | 'fitContent' | 'nowrap' | 'truncate' | 'wrap' | undefined],\n        draggableParams && styles.tableDraggable,\n        mergedClassName\n      )}\n      ref={innerRef}\n      {...mergedProps}\n      {...props}\n    >\n      {mergedChildren || children}\n    </MergedComponent>\n  );\n};\n\nexport const Td = React.forwardRef((props: TdProps, ref: React.Ref<HTMLTableDataCellElement>) => (\n  <TdBase {...props} innerRef={ref} />\n));\nTd.displayName = 'Td';\n"]},"metadata":{},"sourceType":"module"}