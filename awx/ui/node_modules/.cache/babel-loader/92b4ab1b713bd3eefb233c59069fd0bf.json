{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport { formatBreakpointMods, toCamel, canUseDOM } from '../../helpers/util';\nimport { PageContext } from '../Page/Page';\nexport var ToolbarToggleGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarToggleGroup, _React$Component);\n\n  var _super = _createSuper(ToolbarToggleGroup);\n\n  function ToolbarToggleGroup() {\n    var _this;\n\n    _classCallCheck(this, ToolbarToggleGroup);\n\n    _this = _super.apply(this, arguments);\n\n    _this.isContentPopup = function () {\n      var viewportSize = canUseDOM ? window.innerWidth : 1200;\n      var lgBreakpointValue = parseInt(globalBreakpointLg.value);\n      return viewportSize < lgBreakpointValue;\n    };\n\n    return _this;\n  }\n\n  _createClass(ToolbarToggleGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          toggleIcon = _a.toggleIcon,\n          variant = _a.variant,\n          visibility = _a.visibility,\n          visiblity = _a.visiblity,\n          breakpoint = _a.breakpoint,\n          alignment = _a.alignment,\n          spacer = _a.spacer,\n          spaceItems = _a.spaceItems,\n          className = _a.className,\n          children = _a.children,\n          props = __rest(_a, [\"toggleIcon\", \"variant\", \"visibility\", \"visiblity\", \"breakpoint\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"children\"]);\n\n      if (!breakpoint && !toggleIcon) {\n        // eslint-disable-next-line no-console\n        console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n      }\n\n      if (visiblity !== undefined) {\n        // eslint-disable-next-line no-console\n        console.warn('The ToolbarToggleGroup visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n      }\n\n      return React.createElement(PageContext.Consumer, null, function (_ref) {\n        var width = _ref.width,\n            getBreakpoint = _ref.getBreakpoint;\n        return React.createElement(ToolbarContext.Consumer, null, function (_ref2) {\n          var isExpanded = _ref2.isExpanded,\n              toggleIsExpanded = _ref2.toggleIsExpanded;\n          return React.createElement(ToolbarContentContext.Consumer, null, function (_ref3) {\n            var expandableContentRef = _ref3.expandableContentRef,\n                expandableContentId = _ref3.expandableContentId;\n\n            if (expandableContentRef.current && expandableContentRef.current.classList) {\n              if (isExpanded) {\n                expandableContentRef.current.classList.add(styles.modifiers.expanded);\n              } else {\n                expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n              }\n            }\n\n            var breakpointMod = {};\n            breakpointMod[breakpoint] = 'show';\n            return React.createElement(\"div\", Object.assign({\n              className: css(styles.toolbarGroup, styles.modifiers.toggleGroup, variant && styles.modifiers[toCamel(variant)], formatBreakpointMods(breakpointMod, styles, '', getBreakpoint(width)), formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), formatBreakpointMods(spacer, styles, '', getBreakpoint(width)), formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)), className)\n            }, props), React.createElement(\"div\", {\n              className: css(styles.toolbarToggle)\n            }, React.createElement(Button, Object.assign({\n              variant: \"plain\",\n              onClick: toggleIsExpanded,\n              \"aria-label\": \"Show Filters\"\n            }, isExpanded && {\n              'aria-expanded': true\n            }, {\n              \"aria-haspopup\": isExpanded && _this2.isContentPopup(),\n              \"aria-controls\": expandableContentId\n            }), toggleIcon)), isExpanded ? ReactDOM.createPortal(children, expandableContentRef.current.firstElementChild) : children);\n          });\n        });\n      });\n    }\n  }]);\n\n  return ToolbarToggleGroup;\n}(React.Component);\nToolbarToggleGroup.displayName = 'ToolbarToggleGroup';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarToggleGroup.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarGroupProps } from './ToolbarGroup';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport { formatBreakpointMods, toCamel, canUseDOM } from '../../helpers/util';\nimport { PageContext } from '../Page/Page';\n\nexport interface ToolbarToggleGroupProps extends ToolbarGroupProps {\n  /** An icon to be rendered when the toggle group has collapsed down */\n  toggleIcon: React.ReactNode;\n  /** Controls when filters are shown and when the toggle button is hidden. */\n  breakpoint: 'md' | 'lg' | 'xl' | '2xl';\n  /** Visibility at various breakpoints. */\n  visibility?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** @deprecated prop misspelled */\n  visiblity?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** Alignment at various breakpoints. */\n  alignment?: {\n    default?: 'alignRight' | 'alignLeft';\n    md?: 'alignRight' | 'alignLeft';\n    lg?: 'alignRight' | 'alignLeft';\n    xl?: 'alignRight' | 'alignLeft';\n    '2xl'?: 'alignRight' | 'alignLeft';\n  };\n  /** Spacers at various breakpoints. */\n  spacer?: {\n    default?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    md?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    lg?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    xl?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    '2xl'?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n  };\n  /** Space items at various breakpoints. */\n  spaceItems?: {\n    default?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    md?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    lg?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    xl?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    '2xl'?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n  };\n}\n\nexport class ToolbarToggleGroup extends React.Component<ToolbarToggleGroupProps> {\n  static displayName = 'ToolbarToggleGroup';\n  isContentPopup = () => {\n    const viewportSize = canUseDOM ? window.innerWidth : 1200;\n    const lgBreakpointValue = parseInt(globalBreakpointLg.value);\n    return viewportSize < lgBreakpointValue;\n  };\n\n  render() {\n    const {\n      toggleIcon,\n      variant,\n      visibility,\n      visiblity,\n      breakpoint,\n      alignment,\n      spacer,\n      spaceItems,\n      className,\n      children,\n      ...props\n    } = this.props;\n\n    if (!breakpoint && !toggleIcon) {\n      // eslint-disable-next-line no-console\n      console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n    }\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'The ToolbarToggleGroup visiblity prop has been deprecated. ' +\n          'Please use the correctly spelled visibility prop instead.'\n      );\n    }\n\n    return (\n      <PageContext.Consumer>\n        {({ width, getBreakpoint }) => (\n          <ToolbarContext.Consumer>\n            {({ isExpanded, toggleIsExpanded }) => (\n              <ToolbarContentContext.Consumer>\n                {({ expandableContentRef, expandableContentId }) => {\n                  if (expandableContentRef.current && expandableContentRef.current.classList) {\n                    if (isExpanded) {\n                      expandableContentRef.current.classList.add(styles.modifiers.expanded);\n                    } else {\n                      expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n                    }\n                  }\n\n                  const breakpointMod: {\n                    md?: 'show';\n                    lg?: 'show';\n                    xl?: 'show';\n                    '2xl'?: 'show';\n                  } = {};\n                  breakpointMod[breakpoint] = 'show';\n\n                  return (\n                    <div\n                      className={css(\n                        styles.toolbarGroup,\n                        styles.modifiers.toggleGroup,\n                        variant &&\n                          styles.modifiers[toCamel(variant) as 'filterGroup' | 'iconButtonGroup' | 'buttonGroup'],\n                        formatBreakpointMods(breakpointMod, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(alignment, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(spacer, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)),\n                        className\n                      )}\n                      {...props}\n                    >\n                      <div className={css(styles.toolbarToggle)}>\n                        <Button\n                          variant=\"plain\"\n                          onClick={toggleIsExpanded}\n                          aria-label=\"Show Filters\"\n                          {...(isExpanded && { 'aria-expanded': true })}\n                          aria-haspopup={isExpanded && this.isContentPopup()}\n                          aria-controls={expandableContentId}\n                        >\n                          {toggleIcon}\n                        </Button>\n                      </div>\n                      {isExpanded\n                        ? (ReactDOM.createPortal(\n                            children,\n                            expandableContentRef.current.firstElementChild\n                          ) as React.ReactElement)\n                        : children}\n                    </div>\n                  );\n                }}\n              </ToolbarContentContext.Consumer>\n            )}\n          </ToolbarContext.Consumer>\n        )}\n      </PageContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}