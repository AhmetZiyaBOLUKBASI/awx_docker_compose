{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/HelperText/helper-text';\nimport { css } from '@patternfly/react-styles';\nimport MinusIcon from '@patternfly/react-icons/dist/esm/icons/minus-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nvar variantStyle = {\n  default: '',\n  indeterminate: styles.modifiers.indeterminate,\n  warning: styles.modifiers.warning,\n  success: styles.modifiers.success,\n  error: styles.modifiers.error\n};\nexport var HelperTextItem = function HelperTextItem(_a) {\n  var children = _a.children,\n      className = _a.className,\n      _a$component = _a.component,\n      component = _a$component === void 0 ? 'div' : _a$component,\n      _a$variant = _a.variant,\n      variant = _a$variant === void 0 ? 'default' : _a$variant,\n      icon = _a.icon,\n      _a$isDynamic = _a.isDynamic,\n      isDynamic = _a$isDynamic === void 0 ? false : _a$isDynamic,\n      _a$hasIcon = _a.hasIcon,\n      hasIcon = _a$hasIcon === void 0 ? isDynamic : _a$hasIcon,\n      id = _a.id,\n      _a$screenReaderText = _a.screenReaderText,\n      screenReaderText = _a$screenReaderText === void 0 ? \"\".concat(variant, \" status\") : _a$screenReaderText,\n      props = __rest(_a, [\"children\", \"className\", \"component\", \"variant\", \"icon\", \"isDynamic\", \"hasIcon\", \"id\", \"screenReaderText\"]);\n\n  var Component = component;\n  return React.createElement(Component, Object.assign({\n    className: css(styles.helperTextItem, variantStyle[variant], isDynamic && styles.modifiers.dynamic, className),\n    id: id\n  }, props), icon && React.createElement(\"span\", {\n    className: css(styles.helperTextItemIcon),\n    \"aria-hidden\": true\n  }, icon), hasIcon && !icon && React.createElement(\"span\", {\n    className: css(styles.helperTextItemIcon),\n    \"aria-hidden\": true\n  }, (variant === 'default' || variant === 'indeterminate') && React.createElement(MinusIcon, null), variant === 'warning' && React.createElement(ExclamationTriangleIcon, null), variant === 'success' && React.createElement(CheckCircleIcon, null), variant === 'error' && React.createElement(ExclamationCircleIcon, null)), React.createElement(\"span\", {\n    className: css(styles.helperTextItemText)\n  }, children, isDynamic && React.createElement(\"span\", {\n    className: \"pf-u-screen-reader\"\n  }, \": \", screenReaderText, \";\")));\n};\nHelperTextItem.displayName = 'HelperTextItem';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/HelperText/HelperTextItem.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/HelperText/helper-text';\nimport { css } from '@patternfly/react-styles';\nimport MinusIcon from '@patternfly/react-icons/dist/esm/icons/minus-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\n\nexport interface HelperTextItemProps extends React.HTMLProps<HTMLDivElement | HTMLLIElement> {\n  /** Content rendered inside the helper text item. */\n  children?: React.ReactNode;\n  /** Additional classes applied to the helper text item. */\n  className?: string;\n  /** Sets the component type of the helper text item. */\n  component?: 'div' | 'li';\n  /** Variant styling of the helper text item. */\n  variant?: 'default' | 'indeterminate' | 'warning' | 'success' | 'error';\n  /** Custom icon prefixing the helper text. This property will override the default icon paired with each helper text variant. */\n  icon?: React.ReactNode;\n  /** Flag indicating the helper text item is dynamic. This prop should be used when the\n   * text content of the helper text item will never change, but the icon and styling will\n   * be dynamically updated via the `variant` prop.\n   */\n  isDynamic?: boolean;\n  /** Flag indicating the helper text should have an icon. Dynamic helper texts include icons by default while static helper texts do not. */\n  hasIcon?: boolean;\n  /** ID for the helper text item. The value of this prop can be passed into a form component's\n   * aria-describedby prop when you intend for only specific helper text items to be announced to\n   * assistive technologies.\n   */\n  id?: string;\n  /** Text that is only accessible to screen readers in order to announce the status of a helper text item.\n   * This prop can only be used when the isDynamic prop is also passed in.\n   */\n  screenReaderText?: string;\n}\n\nconst variantStyle = {\n  default: '',\n  indeterminate: styles.modifiers.indeterminate,\n  warning: styles.modifiers.warning,\n  success: styles.modifiers.success,\n  error: styles.modifiers.error\n};\n\nexport const HelperTextItem: React.FunctionComponent<HelperTextItemProps> = ({\n  children,\n  className,\n  component = 'div',\n  variant = 'default',\n  icon,\n  isDynamic = false,\n  hasIcon = isDynamic,\n  id,\n  screenReaderText = `${variant} status`,\n  ...props\n}: HelperTextItemProps) => {\n  const Component = component as any;\n  return (\n    <Component\n      className={css(styles.helperTextItem, variantStyle[variant], isDynamic && styles.modifiers.dynamic, className)}\n      id={id}\n      {...props}\n    >\n      {icon && (\n        <span className={css(styles.helperTextItemIcon)} aria-hidden>\n          {icon}\n        </span>\n      )}\n      {hasIcon && !icon && (\n        <span className={css(styles.helperTextItemIcon)} aria-hidden>\n          {(variant === 'default' || variant === 'indeterminate') && <MinusIcon />}\n          {variant === 'warning' && <ExclamationTriangleIcon />}\n          {variant === 'success' && <CheckCircleIcon />}\n          {variant === 'error' && <ExclamationCircleIcon />}\n        </span>\n      )}\n\n      <span className={css(styles.helperTextItemText)}>\n        {children}\n        {isDynamic && <span className=\"pf-u-screen-reader\">: {screenReaderText};</span>}\n      </span>\n    </Component>\n  );\n};\nHelperTextItem.displayName = 'HelperTextItem';\n"]},"metadata":{},"sourceType":"module"}