{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{i18n}from\"@lingui/core\";import{RRule}from'rrule';import{DateTime}from'luxon';import{getRRuleDayConstants}from'util/dates';window.RRule=RRule;window.DateTime=DateTime;var parseTime=function parseTime(time){return[DateTime.fromFormat(time,'h:mm a').hour,DateTime.fromFormat(time,'h:mm a').minute];};export function buildDtStartObj(values){// Dates are formatted like \"YYYY-MM-DD\"\nvar _values$startDate$spl=values.startDate.split('-'),_values$startDate$spl2=_slicedToArray(_values$startDate$spl,3),startYear=_values$startDate$spl2[0],startMonth=_values$startDate$spl2[1],startDay=_values$startDate$spl2[2];// Times are formatted like \"HH:MM:SS\" or \"HH:MM\" if no seconds\n// have been specified\nvar _parseTime=parseTime(values.startTime),_parseTime2=_slicedToArray(_parseTime,2),startHour=_parseTime2[0],startMinute=_parseTime2[1];var dateString=\"\".concat(startYear).concat(pad(startMonth)).concat(pad(startDay),\"T\").concat(pad(startHour)).concat(pad(startMinute),\"00\");var rruleString=values.timezone?\"DTSTART;TZID=\".concat(values.timezone,\":\").concat(dateString):\"DTSTART:\".concat(dateString,\"Z\");var rule=RRule.fromString(rruleString);return rule;}function pad(num){if(typeof num==='string'){return num;}return num<10?\"0\".concat(num):num;}export default function buildRuleObj(values){var ruleObj={interval:values.interval};switch(values.frequency){case'none':ruleObj.count=1;ruleObj.freq=RRule.MINUTELY;break;case'minute':ruleObj.freq=RRule.MINUTELY;break;case'hour':ruleObj.freq=RRule.HOURLY;break;case'day':ruleObj.freq=RRule.DAILY;break;case'week':ruleObj.freq=RRule.WEEKLY;ruleObj.byweekday=values.daysOfWeek;break;case'month':ruleObj.freq=RRule.MONTHLY;if(values.runOn==='day'){ruleObj.bymonthday=values.runOnDayNumber;}else if(values.runOn==='the'){ruleObj.bysetpos=parseInt(values.runOnTheOccurrence,10);ruleObj.byweekday=getRRuleDayConstants(values.runOnTheDay);}break;case'year':ruleObj.freq=RRule.YEARLY;if(values.runOn==='day'){ruleObj.bymonth=parseInt(values.runOnDayMonth,10);ruleObj.bymonthday=values.runOnDayNumber;}else if(values.runOn==='the'){ruleObj.bysetpos=parseInt(values.runOnTheOccurrence,10);ruleObj.byweekday=getRRuleDayConstants(values.runOnTheDay);ruleObj.bymonth=parseInt(values.runOnTheMonth,10);}break;default:throw new Error(/*i18n*/i18n._(\"Frequency did not match an expected value\"));}if(values.frequency!=='none'){switch(values.end){case'never':break;case'after':ruleObj.count=values.occurrences;break;case'onDate':{var _parseTime3=parseTime(values.endTime),_parseTime4=_slicedToArray(_parseTime3,2),endHour=_parseTime4[0],endMinute=_parseTime4[1];var localEndDate=DateTime.fromISO(\"\".concat(values.endDate,\"T000000\"),{zone:values.timezone});var localEndTime=localEndDate.set({hour:endHour,minute:endMinute,second:0});ruleObj.until=localEndTime.toJSDate();break;}default:throw new Error(/*i18n*/i18n._(\"End did not match an expected value ({0})\",{0:values.end}));}}return ruleObj;}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/Schedule/shared/buildRuleObj.js"],"names":["RRule","DateTime","getRRuleDayConstants","window","parseTime","time","fromFormat","hour","minute","buildDtStartObj","values","startDate","split","startYear","startMonth","startDay","startTime","startHour","startMinute","dateString","pad","rruleString","timezone","rule","fromString","num","buildRuleObj","ruleObj","interval","frequency","count","freq","MINUTELY","HOURLY","DAILY","WEEKLY","byweekday","daysOfWeek","MONTHLY","runOn","bymonthday","runOnDayNumber","bysetpos","parseInt","runOnTheOccurrence","runOnTheDay","YEARLY","bymonth","runOnDayMonth","runOnTheMonth","Error","end","occurrences","endTime","endHour","endMinute","localEndDate","fromISO","endDate","zone","localEndTime","set","second","until","toJSDate"],"mappings":"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","sourcesContent":["import { t } from '@lingui/macro';\nimport { RRule } from 'rrule';\nimport { DateTime } from 'luxon';\nimport { getRRuleDayConstants } from 'util/dates';\n\nwindow.RRule = RRule;\nwindow.DateTime = DateTime;\n\nconst parseTime = (time) => [\n  DateTime.fromFormat(time, 'h:mm a').hour,\n  DateTime.fromFormat(time, 'h:mm a').minute,\n];\n\nexport function buildDtStartObj(values) {\n  // Dates are formatted like \"YYYY-MM-DD\"\n  const [startYear, startMonth, startDay] = values.startDate.split('-');\n  // Times are formatted like \"HH:MM:SS\" or \"HH:MM\" if no seconds\n  // have been specified\n  const [startHour, startMinute] = parseTime(values.startTime);\n\n  const dateString = `${startYear}${pad(startMonth)}${pad(startDay)}T${pad(\n    startHour\n  )}${pad(startMinute)}00`;\n  const rruleString = values.timezone\n    ? `DTSTART;TZID=${values.timezone}:${dateString}`\n    : `DTSTART:${dateString}Z`;\n  const rule = RRule.fromString(rruleString);\n\n  return rule;\n}\n\nfunction pad(num) {\n  if (typeof num === 'string') {\n    return num;\n  }\n  return num < 10 ? `0${num}` : num;\n}\n\nexport default function buildRuleObj(values) {\n  const ruleObj = {\n    interval: values.interval,\n  };\n\n  switch (values.frequency) {\n    case 'none':\n      ruleObj.count = 1;\n      ruleObj.freq = RRule.MINUTELY;\n      break;\n    case 'minute':\n      ruleObj.freq = RRule.MINUTELY;\n      break;\n    case 'hour':\n      ruleObj.freq = RRule.HOURLY;\n      break;\n    case 'day':\n      ruleObj.freq = RRule.DAILY;\n      break;\n    case 'week':\n      ruleObj.freq = RRule.WEEKLY;\n      ruleObj.byweekday = values.daysOfWeek;\n      break;\n    case 'month':\n      ruleObj.freq = RRule.MONTHLY;\n      if (values.runOn === 'day') {\n        ruleObj.bymonthday = values.runOnDayNumber;\n      } else if (values.runOn === 'the') {\n        ruleObj.bysetpos = parseInt(values.runOnTheOccurrence, 10);\n        ruleObj.byweekday = getRRuleDayConstants(values.runOnTheDay);\n      }\n      break;\n    case 'year':\n      ruleObj.freq = RRule.YEARLY;\n      if (values.runOn === 'day') {\n        ruleObj.bymonth = parseInt(values.runOnDayMonth, 10);\n        ruleObj.bymonthday = values.runOnDayNumber;\n      } else if (values.runOn === 'the') {\n        ruleObj.bysetpos = parseInt(values.runOnTheOccurrence, 10);\n        ruleObj.byweekday = getRRuleDayConstants(values.runOnTheDay);\n        ruleObj.bymonth = parseInt(values.runOnTheMonth, 10);\n      }\n      break;\n    default:\n      throw new Error(t`Frequency did not match an expected value`);\n  }\n\n  if (values.frequency !== 'none') {\n    switch (values.end) {\n      case 'never':\n        break;\n      case 'after':\n        ruleObj.count = values.occurrences;\n        break;\n      case 'onDate': {\n        const [endHour, endMinute] = parseTime(values.endTime);\n        const localEndDate = DateTime.fromISO(`${values.endDate}T000000`, {\n          zone: values.timezone,\n        });\n        const localEndTime = localEndDate.set({\n          hour: endHour,\n          minute: endMinute,\n          second: 0,\n        });\n        ruleObj.until = localEndTime.toJSDate();\n        break;\n      }\n      default:\n        throw new Error(t`End did not match an expected value (${values.end})`);\n    }\n  }\n\n  return ruleObj;\n}\n"]},"metadata":{},"sourceType":"module"}