{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Button, ButtonVariant } from '../Button';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationBadge/notification-badge';\nimport AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nexport var NotificationBadgeVariant;\n\n(function (NotificationBadgeVariant) {\n  NotificationBadgeVariant[\"read\"] = \"read\";\n  NotificationBadgeVariant[\"unread\"] = \"unread\";\n  NotificationBadgeVariant[\"attention\"] = \"attention\";\n})(NotificationBadgeVariant || (NotificationBadgeVariant = {}));\n\nexport var NotificationBadge = function NotificationBadge(_a) {\n  var isRead = _a.isRead,\n      children = _a.children,\n      _a$variant = _a.variant,\n      variant = _a$variant === void 0 ? isRead ? 'read' : 'unread' : _a$variant,\n      _a$count = _a.count,\n      count = _a$count === void 0 ? 0 : _a$count,\n      _a$attentionIcon = _a.attentionIcon,\n      attentionIcon = _a$attentionIcon === void 0 ? React.createElement(AttentionBellIcon, null) : _a$attentionIcon,\n      _a$icon = _a.icon,\n      icon = _a$icon === void 0 ? React.createElement(BellIcon, null) : _a$icon,\n      className = _a.className,\n      props = __rest(_a, [\"isRead\", \"children\", \"variant\", \"count\", \"attentionIcon\", \"icon\", \"className\"]);\n\n  var notificationChild = icon;\n\n  if (children !== undefined) {\n    notificationChild = children;\n  } else if (variant === NotificationBadgeVariant.attention) {\n    notificationChild = attentionIcon;\n  }\n\n  return React.createElement(Button, Object.assign({\n    variant: ButtonVariant.plain,\n    className: className\n  }, props), React.createElement(\"span\", {\n    className: css(styles.notificationBadge, styles.modifiers[variant])\n  }, notificationChild, count > 0 && React.createElement(\"span\", {\n    className: css(styles.notificationBadgeCount)\n  }, count)));\n};\nNotificationBadge.displayName = 'NotificationBadge';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/NotificationBadge/NotificationBadge.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,MAAT,EAAiB,aAAjB,QAAmD,WAAnD;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,8EAAnB;AACA,OAAO,iBAAP,MAA8B,4DAA9B;AACA,OAAO,QAAP,MAAqB,kDAArB;AAEA,OAAA,IAAY,wBAAZ;;AAAA,CAAA,UAAY,wBAAZ,EAAoC;AAClC,EAAA,wBAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,EAAA,wBAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA,EAAA,wBAAA,CAAA,WAAA,CAAA,GAAA,WAAA;AACD,CAJD,EAAY,wBAAwB,KAAxB,wBAAwB,GAAA,EAAA,CAApC;;AAyBA,OAAO,IAAM,iBAAiB,GAAoD,SAArE,iBAAqE,CAAC,EAAD,EASrD;AATsD,MACjF,MADiF,GAOxE,EAPwE,CACjF,MADiF;AAAA,MAEjF,QAFiF,GAOxE,EAPwE,CAEjF,QAFiF;AAAA,mBAOxE,EAPwE,CAGjF,OAHiF;AAAA,MAGjF,OAHiF,2BAGvE,MAAM,GAAG,MAAH,GAAY,QAHqD;AAAA,iBAOxE,EAPwE,CAIjF,KAJiF;AAAA,MAIjF,KAJiF,yBAIzE,CAJyE;AAAA,yBAOxE,EAPwE,CAKjF,aALiF;AAAA,MAKjF,aALiF,iCAKjE,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAkB,IAAlB,CALiE;AAAA,gBAOxE,EAPwE,CAMjF,IANiF;AAAA,MAMjF,IANiF,wBAM1E,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS,IAAT,CAN0E;AAAA,MAOjF,SAPiF,GAOxE,EAPwE,CAOjF,SAPiF;AAAA,MAQ9E,KAR8E,GAQzE,MAAA,CAAA,EAAA,EARyE,CAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAAA,OAAA,EAAA,eAAA,EAAA,MAAA,EAAA,WAAA,CAQzE,CARyE;;AAUjF,MAAI,iBAAiB,GAAG,IAAxB;;AACA,MAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,IAAA,iBAAiB,GAAG,QAApB;AACD,GAFD,MAEO,IAAI,OAAO,KAAK,wBAAwB,CAAC,SAAzC,EAAoD;AACzD,IAAA,iBAAiB,GAAG,aAApB;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,OAAO,EAAE,aAAa,CAAC,KAAxB;AAA+B,IAAA,SAAS,EAAE;AAA1C,GAAA,EAAyD,KAAzD,CAAP,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,iBAAR,EAA2B,MAAM,CAAC,SAAP,CAAiB,OAAjB,CAA3B;AAApB,GAAA,EACG,iBADH,EAEG,KAAK,GAAG,CAAR,IAAa,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,sBAAR;AAApB,GAAA,EAAsD,KAAtD,CAFhB,CADF,CADF;AAQD,CAxBM;AAyBP,iBAAiB,CAAC,WAAlB,GAAgC,mBAAhC","sourcesContent":["import * as React from 'react';\nimport { Button, ButtonVariant, ButtonProps } from '../Button';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationBadge/notification-badge';\nimport AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\n\nexport enum NotificationBadgeVariant {\n  read = 'read',\n  unread = 'unread',\n  attention = 'attention'\n}\n\nexport interface NotificationBadgeProps extends Omit<ButtonProps, 'variant'> {\n  /** @deprecated Use the variant prop instead - Adds styling to the notification badge to indicate it has been read */\n  isRead?: boolean;\n  /** Determines the variant of the notification badge */\n  variant?: NotificationBadgeVariant | 'read' | 'unread' | 'attention';\n  /** A number displayed in the badge alongside the icon */\n  count?: number;\n  /** content rendered inside the notification badge */\n  children?: React.ReactNode;\n  /** additional classes added to the notification badge */\n  className?: string;\n  /** Adds accessible text to the notification badge. */\n  'aria-label'?: string;\n  /** Icon to display for attention variant */\n  attentionIcon?: React.ReactNode;\n  /** Icon do display in notification badge */\n  icon?: React.ReactNode;\n}\n\nexport const NotificationBadge: React.FunctionComponent<NotificationBadgeProps> = ({\n  isRead,\n  children,\n  variant = isRead ? 'read' : 'unread',\n  count = 0,\n  attentionIcon = <AttentionBellIcon />,\n  icon = <BellIcon />,\n  className,\n  ...props\n}: NotificationBadgeProps) => {\n  let notificationChild = icon;\n  if (children !== undefined) {\n    notificationChild = children;\n  } else if (variant === NotificationBadgeVariant.attention) {\n    notificationChild = attentionIcon;\n  }\n  return (\n    <Button variant={ButtonVariant.plain} className={className} {...props}>\n      <span className={css(styles.notificationBadge, styles.modifiers[variant])}>\n        {notificationChild}\n        {count > 0 && <span className={css(styles.notificationBadgeCount)}>{count}</span>}\n      </span>\n    </Button>\n  );\n};\nNotificationBadge.displayName = 'NotificationBadge';\n"]},"metadata":{},"sourceType":"module"}