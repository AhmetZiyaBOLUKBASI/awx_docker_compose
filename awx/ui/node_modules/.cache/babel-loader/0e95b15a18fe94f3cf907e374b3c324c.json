{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { Badge } from '../Badge';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { flattenTree } from './treeUtils';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\n\nvar DualListSelectorTreeItemBase = function DualListSelectorTreeItemBase(_a) {\n  var onOptionCheck = _a.onOptionCheck,\n      children = _a.children,\n      className = _a.className,\n      id = _a.id,\n      text = _a.text,\n      defaultExpanded = _a.defaultExpanded,\n      hasBadge = _a.hasBadge,\n      isChecked = _a.isChecked,\n      checkProps = _a.checkProps,\n      badgeProps = _a.badgeProps,\n      itemData = _a.itemData,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      useMemo = _a.useMemo,\n      props = __rest(_a, [\"onOptionCheck\", \"children\", \"className\", \"id\", \"text\", \"defaultExpanded\", \"hasBadge\", \"isChecked\", \"checkProps\", \"badgeProps\", \"itemData\", \"isDisabled\", \"useMemo\"]);\n\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(defaultExpanded || false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isExpanded = _React$useState2[0],\n      setIsExpanded = _React$useState2[1];\n\n  var _React$useContext = React.useContext(DualListSelectorListContext),\n      setFocusedOption = _React$useContext.setFocusedOption;\n\n  React.useEffect(function () {\n    setIsExpanded(defaultExpanded);\n  }, [defaultExpanded]);\n  return React.createElement(\"li\", Object.assign({\n    className: css(styles.dualListSelectorListItem, className, children && styles.modifiers.expandable, isExpanded && styles.modifiers.expanded, isDisabled && styles.modifiers.disabled),\n    id: id\n  }, props, {\n    \"aria-selected\": isChecked,\n    role: \"treeitem\"\n  }, isExpanded && {\n    'aria-expanded': 'true'\n  }), React.createElement(\"div\", {\n    className: css(styles.dualListSelectorListItemRow, isChecked && styles.modifiers.selected, styles.modifiers.check)\n  }, React.createElement(\"div\", {\n    className: css(styles.dualListSelectorItem),\n    ref: ref,\n    tabIndex: -1,\n    onClick: isDisabled ? undefined : function (evt) {\n      onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n      setFocusedOption(id);\n    }\n  }, React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemMain)\n  }, children && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorItemToggle),\n    onClick: function onClick(e) {\n      if (children) {\n        setIsExpanded(!isExpanded);\n      }\n\n      e.stopPropagation();\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (e.key === ' ' || e.key === 'Enter') {\n        document.activeElement.click();\n        e.preventDefault();\n      }\n    },\n    tabIndex: -1\n  }, React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemToggleIcon)\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": true\n  }))), React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemCheck)\n  }, React.createElement(\"input\", Object.assign({\n    type: \"checkbox\",\n    onChange: function onChange(evt) {\n      onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n      setFocusedOption(id);\n    },\n    onClick: function onClick(evt) {\n      return evt.stopPropagation();\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (e.key === ' ' || e.key === 'Enter') {\n        onOptionCheck && onOptionCheck(e, !isChecked, itemData);\n        setFocusedOption(id);\n        e.preventDefault();\n      }\n    },\n    ref: function ref(elem) {\n      return elem && (elem.indeterminate = isChecked === null);\n    },\n    checked: isChecked || false,\n    tabIndex: -1\n  }, checkProps))), React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemText)\n  }, text), hasBadge && children && React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemCount)\n  }, React.createElement(Badge, Object.assign({}, badgeProps), flattenTree(children.props.data).length))))), isExpanded && children);\n};\n\nexport var DualListSelectorTreeItem = React.memo(DualListSelectorTreeItemBase, function (prevProps, nextProps) {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n\n  if (prevProps.className !== nextProps.className || prevProps.text !== nextProps.text || prevProps.id !== nextProps.id || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isChecked !== nextProps.isChecked || prevProps.itemData !== nextProps.itemData) {\n    return false;\n  }\n\n  return true;\n});\nDualListSelectorTreeItem.displayName = 'DualListSelectorTreeItem';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorTreeItem.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { DualListSelectorTreeItemData } from './DualListSelectorTree';\nimport { Badge } from '../Badge';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { flattenTree } from './treeUtils';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorTreeItemProps extends React.HTMLProps<HTMLLIElement> {\n  /** Content rendered inside the dual list selector. */\n  children?: React.ReactNode;\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Flag indicating this option is expanded by default. */\n  defaultExpanded?: boolean;\n  /** Flag indicating this option has a badge */\n  hasBadge?: boolean;\n  /** Callback fired when an option is checked */\n  onOptionCheck?: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n  /** ID of the option */\n  id: string;\n  /** Text of the option */\n  text: string;\n  /** Flag indicating if this open is checked. */\n  isChecked?: boolean;\n  /** Additional properties to pass to the option checkbox */\n  checkProps?: any;\n  /** Additional properties to pass to the option badge */\n  badgeProps?: any;\n  /** Raw data of the option */\n  itemData?: DualListSelectorTreeItemData;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n  /** Flag indicating the DualListSelector tree should utilize memoization to help render large data sets. */\n  useMemo?: boolean;\n}\n\nconst DualListSelectorTreeItemBase: React.FunctionComponent<DualListSelectorTreeItemProps> = ({\n  onOptionCheck,\n  children,\n  className,\n  id,\n  text,\n  defaultExpanded,\n  hasBadge,\n  isChecked,\n  checkProps,\n  badgeProps,\n  itemData,\n  isDisabled = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  useMemo,\n  ...props\n}: DualListSelectorTreeItemProps) => {\n  const ref = React.useRef(null);\n  const [isExpanded, setIsExpanded] = React.useState(defaultExpanded || false);\n  const { setFocusedOption } = React.useContext(DualListSelectorListContext);\n\n  React.useEffect(() => {\n    setIsExpanded(defaultExpanded);\n  }, [defaultExpanded]);\n\n  return (\n    <li\n      className={css(\n        styles.dualListSelectorListItem,\n        className,\n        children && styles.modifiers.expandable,\n        isExpanded && styles.modifiers.expanded,\n        isDisabled && styles.modifiers.disabled\n      )}\n      id={id}\n      {...props}\n      aria-selected={isChecked}\n      role=\"treeitem\"\n      {...(isExpanded && { 'aria-expanded': 'true' })}\n    >\n      <div\n        className={css(\n          styles.dualListSelectorListItemRow,\n          isChecked && styles.modifiers.selected,\n          styles.modifiers.check\n        )}\n      >\n        <div\n          className={css(styles.dualListSelectorItem)}\n          ref={ref}\n          tabIndex={-1}\n          onClick={\n            isDisabled\n              ? undefined\n              : evt => {\n                  onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n                  setFocusedOption(id);\n                }\n          }\n        >\n          <span className={css(styles.dualListSelectorItemMain)}>\n            {children && (\n              <div\n                className={css(styles.dualListSelectorItemToggle)}\n                onClick={e => {\n                  if (children) {\n                    setIsExpanded(!isExpanded);\n                  }\n                  e.stopPropagation();\n                }}\n                onKeyDown={(e: React.KeyboardEvent) => {\n                  if (e.key === ' ' || e.key === 'Enter') {\n                    (document.activeElement as HTMLElement).click();\n                    e.preventDefault();\n                  }\n                }}\n                tabIndex={-1}\n              >\n                <span className={css(styles.dualListSelectorItemToggleIcon)}>\n                  <AngleRightIcon aria-hidden />\n                </span>\n              </div>\n            )}\n            <span className={css(styles.dualListSelectorItemCheck)}>\n              <input\n                type=\"checkbox\"\n                onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                  onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n                  setFocusedOption(id);\n                }}\n                onClick={(evt: React.MouseEvent) => evt.stopPropagation()}\n                onKeyDown={(e: React.KeyboardEvent) => {\n                  if (e.key === ' ' || e.key === 'Enter') {\n                    onOptionCheck && onOptionCheck(e, !isChecked, itemData);\n                    setFocusedOption(id);\n                    e.preventDefault();\n                  }\n                }}\n                ref={elem => elem && (elem.indeterminate = isChecked === null)}\n                checked={isChecked || false}\n                tabIndex={-1}\n                {...checkProps}\n              />\n            </span>\n\n            <span className={css(styles.dualListSelectorItemText)}>{text}</span>\n            {hasBadge && children && (\n              <span className={css(styles.dualListSelectorItemCount)}>\n                <Badge {...badgeProps}>{flattenTree((children as React.ReactElement).props.data).length}</Badge>\n              </span>\n            )}\n          </span>\n        </div>\n      </div>\n      {isExpanded && children}\n    </li>\n  );\n};\n\nexport const DualListSelectorTreeItem = React.memo(DualListSelectorTreeItemBase, (prevProps, nextProps) => {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n\n  if (\n    prevProps.className !== nextProps.className ||\n    prevProps.text !== nextProps.text ||\n    prevProps.id !== nextProps.id ||\n    prevProps.defaultExpanded !== nextProps.defaultExpanded ||\n    prevProps.checkProps !== nextProps.checkProps ||\n    prevProps.hasBadge !== nextProps.hasBadge ||\n    prevProps.badgeProps !== nextProps.badgeProps ||\n    prevProps.isChecked !== nextProps.isChecked ||\n    prevProps.itemData !== nextProps.itemData\n  ) {\n    return false;\n  }\n\n  return true;\n});\n\nDualListSelectorTreeItem.displayName = 'DualListSelectorTreeItem';\n"]},"metadata":{},"sourceType":"module"}