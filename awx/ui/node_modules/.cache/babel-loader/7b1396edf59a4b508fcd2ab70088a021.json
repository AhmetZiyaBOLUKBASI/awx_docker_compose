{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/InputGroup/input-group';\nimport { css } from '@patternfly/react-styles';\nimport { FormSelect } from '../FormSelect';\nimport { TextArea } from '../TextArea';\nimport { TextInput } from '../TextInput';\nexport var InputGroup = function InputGroup(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      children = _a.children,\n      innerRef = _a.innerRef,\n      props = __rest(_a, [\"className\", \"children\", \"innerRef\"]);\n\n  var formCtrls = [FormSelect, TextArea, TextInput].map(function (comp) {\n    return comp.displayName;\n  });\n  var idItem = React.Children.toArray(children).find(function (child) {\n    return !formCtrls.includes(child.type.displayName) && child.props.id;\n  });\n  var inputGroupRef = innerRef || React.useRef(null);\n  return React.createElement(\"div\", Object.assign({\n    ref: inputGroupRef,\n    className: css(styles.inputGroup, className)\n  }, props), idItem ? React.Children.map(children, function (child) {\n    return formCtrls.includes(child.type.displayName) ? React.cloneElement(child, {\n      'aria-describedby': idItem.props.id\n    }) : child;\n  }) : children);\n};\nInputGroup.displayName = 'InputGroup';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/InputGroup/InputGroup.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,gEAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,QAAT,QAAyB,aAAzB;AACA,SAAS,SAAT,QAA0B,cAA1B;AAWA,OAAO,IAAM,UAAU,GAA6C,SAAvD,UAAuD,CAAC,EAAD,EAK9C;AAL+C,qBAG3D,EAH2D,CACnE,SADmE;AAAA,MACnE,SADmE,6BACvD,EADuD;AAAA,MAEnE,QAFmE,GAG3D,EAH2D,CAEnE,QAFmE;AAAA,MAGnE,QAHmE,GAG3D,EAH2D,CAGnE,QAHmE;AAAA,MAIhE,KAJgE,GAI3D,MAAA,CAAA,EAAA,EAJ2D,CAAA,WAAA,EAAA,UAAA,EAAA,UAAA,CAI3D,CAJ2D;;AAMnE,MAAM,SAAS,GAAG,CAAC,UAAD,EAAa,QAAb,EAAuB,SAAvB,EAAkC,GAAlC,CAAsC,UAAA,IAAI;AAAA,WAAI,IAAI,CAAC,WAAT;AAAA,GAA1C,CAAlB;AACA,MAAM,MAAM,GAAG,KAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,QAAvB,EAAiC,IAAjC,CACb,UAAC,KAAD;AAAA,WAAgB,CAAC,SAAS,CAAC,QAAV,CAAmB,KAAK,CAAC,IAAN,CAAW,WAA9B,CAAD,IAA+C,KAAK,CAAC,KAAN,CAAY,EAA3E;AAAA,GADa,CAAf;AAIA,MAAM,aAAa,GAAG,QAAQ,IAAI,KAAK,CAAC,MAAN,CAAa,IAAb,CAAlC;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAK,IAAA,GAAG,EAAE,aAAV;AAAyB,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,UAAR,EAAoB,SAApB;AAAvC,GAAA,EAA2E,KAA3E,CAAA,EACG,MAAM,GACH,KAAK,CAAC,QAAN,CAAe,GAAf,CAAmB,QAAnB,EAA6B,UAAC,KAAD;AAAA,WAC3B,SAAS,CAAC,QAAV,CAAmB,KAAK,CAAC,IAAN,CAAW,WAA9B,IACI,KAAK,CAAC,YAAN,CAAmB,KAAnB,EAA0B;AAAE,0BAAoB,MAAM,CAAC,KAAP,CAAa;AAAnC,KAA1B,CADJ,GAEI,KAHuB;AAAA,GAA7B,CADG,GAMH,QAPN,CADF;AAWD,CAxBM;AAyBP,UAAU,CAAC,WAAX,GAAyB,YAAzB","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/InputGroup/input-group';\nimport { css } from '@patternfly/react-styles';\nimport { FormSelect } from '../FormSelect';\nimport { TextArea } from '../TextArea';\nimport { TextInput } from '../TextInput';\n\nexport interface InputGroupProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the input group. */\n  className?: string;\n  /** Content rendered inside the input group. */\n  children: React.ReactNode;\n  /** @hide A reference object to attach to the input box */\n  innerRef?: React.RefObject<any>;\n}\n\nexport const InputGroup: React.FunctionComponent<InputGroupProps> = ({\n  className = '',\n  children,\n  innerRef,\n  ...props\n}: InputGroupProps) => {\n  const formCtrls = [FormSelect, TextArea, TextInput].map(comp => comp.displayName);\n  const idItem = React.Children.toArray(children).find(\n    (child: any) => !formCtrls.includes(child.type.displayName) && child.props.id\n  ) as React.ReactElement<{ id: string }>;\n\n  const inputGroupRef = innerRef || React.useRef(null);\n\n  return (\n    <div ref={inputGroupRef} className={css(styles.inputGroup, className)} {...props}>\n      {idItem\n        ? React.Children.map(children, (child: any) =>\n            formCtrls.includes(child.type.displayName)\n              ? React.cloneElement(child, { 'aria-describedby': idItem.props.id })\n              : child\n          )\n        : children}\n    </div>\n  );\n};\nInputGroup.displayName = 'InputGroup';\n"]},"metadata":{},"sourceType":"module"}