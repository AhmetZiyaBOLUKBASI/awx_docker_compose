{"ast":null,"code":"import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{i18n}from\"@lingui/core\";import React,{useEffect,useCallback,useState}from'react';import{PageSection,Card,CardBody}from'@patternfly/react-core';import ContentError from'components/ContentError';import useRequest from'hooks/useRequest';import{MeshAPI}from'api';import Header from'./Header';import MeshGraph from'./MeshGraph';import useZoom from'./utils/useZoom';import{CHILDSELECTOR,PARENTSELECTOR}from'./constants';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function TopologyView(){var _useState=useState(true),_useState2=_slicedToArray(_useState,2),showLegend=_useState2[0],setShowLegend=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),showZoomControls=_useState4[0],setShowZoomControls=_useState4[1];var _useRequest=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$MeshAPI$read,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return MeshAPI.read();case 2:_yield$MeshAPI$read=_context.sent;data=_yield$MeshAPI$read.data;return _context.abrupt(\"return\",{meshData:data});case 5:case\"end\":return _context.stop();}}},_callee);})),[]),{meshData:{nodes:[],links:[]}}),isLoading=_useRequest.isLoading,meshData=_useRequest.result.meshData,fetchInitialError=_useRequest.error,fetchMeshVisualizer=_useRequest.request;useEffect(function(){fetchMeshVisualizer();},[fetchMeshVisualizer]);var _useZoom=useZoom(PARENTSELECTOR,CHILDSELECTOR),zoom=_useZoom.zoom,zoomFit=_useZoom.zoomFit,zoomIn=_useZoom.zoomIn,zoomOut=_useZoom.zoomOut,resetZoom=_useZoom.resetZoom;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Header,{title:/*i18n*/i18n._(\"Topology View\"),handleSwitchToggle:setShowLegend,toggleState:showLegend,zoomIn:zoomIn,zoomOut:zoomOut,zoomFit:zoomFit,resetZoom:resetZoom,showZoomControls:showZoomControls}),fetchInitialError?/*#__PURE__*/_jsx(PageSection,{children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(CardBody,{children:/*#__PURE__*/_jsx(ContentError,{error:fetchInitialError})})})}):/*#__PURE__*/_jsx(PageSection,{children:/*#__PURE__*/_jsx(Card,{style:{height:'100%'},children:/*#__PURE__*/_jsx(CardBody,{children:!isLoading&&/*#__PURE__*/_jsx(MeshGraph,{data:meshData,showLegend:showLegend,zoom:zoom,setShowZoomControls:setShowZoomControls})})})})]});}export default TopologyView;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/TopologyView/TopologyView.js"],"names":["React","useEffect","useCallback","useState","PageSection","Card","CardBody","ContentError","useRequest","MeshAPI","Header","MeshGraph","useZoom","CHILDSELECTOR","PARENTSELECTOR","TopologyView","showLegend","setShowLegend","showZoomControls","setShowZoomControls","read","data","meshData","nodes","links","isLoading","result","fetchInitialError","error","fetchMeshVisualizer","request","zoom","zoomFit","zoomIn","zoomOut","resetZoom","height"],"mappings":"uVAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,WAA3B,CAAwCC,QAAxC,KAAwD,OAAxD,CAEA,OAASC,WAAT,CAAsBC,IAAtB,CAA4BC,QAA5B,KAA4C,wBAA5C,CACA,MAAOC,CAAAA,YAAP,KAAyB,yBAAzB,CACA,MAAOC,CAAAA,UAAP,KAAuB,kBAAvB,CACA,OAASC,OAAT,KAAwB,KAAxB,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,OAAP,KAAoB,iBAApB,CACA,OAASC,aAAT,CAAwBC,cAAxB,KAA8C,aAA9C,C,6IAEA,QAASC,CAAAA,YAAT,EAAwB,CACtB,cAAoCZ,QAAQ,CAAC,IAAD,CAA5C,wCAAOa,UAAP,eAAmBC,aAAnB,eACA,eAAgDd,QAAQ,CAAC,KAAD,CAAxD,yCAAOe,gBAAP,eAAyBC,mBAAzB,eACA,gBAKIX,UAAU,CACZN,WAAW,sEAAC,sLACaO,CAAAA,OAAO,CAACW,IAAR,EADb,0CACFC,IADE,qBACFA,IADE,iCAEH,CACLC,QAAQ,CAAED,IADL,CAFG,wDAAD,GAKR,EALQ,CADC,CAOZ,CAAEC,QAAQ,CAAE,CAAEC,KAAK,CAAE,EAAT,CAAaC,KAAK,CAAE,EAApB,CAAZ,CAPY,CALd,CACEC,SADF,aACEA,SADF,CAEYH,QAFZ,aAEEI,MAFF,CAEYJ,QAFZ,CAGSK,iBAHT,aAGEC,KAHF,CAIWC,mBAJX,aAIEC,OAJF,CAcA7B,SAAS,CAAC,UAAM,CACd4B,mBAAmB,GACpB,CAFQ,CAEN,CAACA,mBAAD,CAFM,CAAT,CAGA,aAAsDjB,OAAO,CAC3DE,cAD2D,CAE3DD,aAF2D,CAA7D,CAAQkB,IAAR,UAAQA,IAAR,CAAcC,OAAd,UAAcA,OAAd,CAAuBC,MAAvB,UAAuBA,MAAvB,CAA+BC,OAA/B,UAA+BA,OAA/B,CAAwCC,SAAxC,UAAwCA,SAAxC,CAKA,mBACE,wCACE,KAAC,MAAD,EACE,KAAK,SAAE,uBADT,CAEE,kBAAkB,CAAElB,aAFtB,CAGE,WAAW,CAAED,UAHf,CAIE,MAAM,CAAEiB,MAJV,CAKE,OAAO,CAAEC,OALX,CAME,OAAO,CAAEF,OANX,CAOE,SAAS,CAAEG,SAPb,CAQE,gBAAgB,CAAEjB,gBARpB,EADF,CAWGS,iBAAiB,cAChB,KAAC,WAAD,wBACE,KAAC,IAAD,wBACE,KAAC,QAAD,wBACE,KAAC,YAAD,EAAc,KAAK,CAAEA,iBAArB,EADF,EADF,EADF,EADgB,cAShB,KAAC,WAAD,wBACE,KAAC,IAAD,EAAM,KAAK,CAAE,CAAES,MAAM,CAAE,MAAV,CAAb,uBACE,KAAC,QAAD,WACG,CAACX,SAAD,eACC,KAAC,SAAD,EACE,IAAI,CAAEH,QADR,CAEE,UAAU,CAAEN,UAFd,CAGE,IAAI,CAAEe,IAHR,CAIE,mBAAmB,CAAEZ,mBAJvB,EAFJ,EADF,EADF,EApBJ,GADF,CAsCD,CAED,cAAeJ,CAAAA,YAAf","sourcesContent":["import React, { useEffect, useCallback, useState } from 'react';\nimport { t } from '@lingui/macro';\nimport { PageSection, Card, CardBody } from '@patternfly/react-core';\nimport ContentError from 'components/ContentError';\nimport useRequest from 'hooks/useRequest';\nimport { MeshAPI } from 'api';\nimport Header from './Header';\nimport MeshGraph from './MeshGraph';\nimport useZoom from './utils/useZoom';\nimport { CHILDSELECTOR, PARENTSELECTOR } from './constants';\n\nfunction TopologyView() {\n  const [showLegend, setShowLegend] = useState(true);\n  const [showZoomControls, setShowZoomControls] = useState(false);\n  const {\n    isLoading,\n    result: { meshData },\n    error: fetchInitialError,\n    request: fetchMeshVisualizer,\n  } = useRequest(\n    useCallback(async () => {\n      const { data } = await MeshAPI.read();\n      return {\n        meshData: data,\n      };\n    }, []),\n    { meshData: { nodes: [], links: [] } }\n  );\n  useEffect(() => {\n    fetchMeshVisualizer();\n  }, [fetchMeshVisualizer]);\n  const { zoom, zoomFit, zoomIn, zoomOut, resetZoom } = useZoom(\n    PARENTSELECTOR,\n    CHILDSELECTOR\n  );\n\n  return (\n    <>\n      <Header\n        title={t`Topology View`}\n        handleSwitchToggle={setShowLegend}\n        toggleState={showLegend}\n        zoomIn={zoomIn}\n        zoomOut={zoomOut}\n        zoomFit={zoomFit}\n        resetZoom={resetZoom}\n        showZoomControls={showZoomControls}\n      />\n      {fetchInitialError ? (\n        <PageSection>\n          <Card>\n            <CardBody>\n              <ContentError error={fetchInitialError} />\n            </CardBody>\n          </Card>\n        </PageSection>\n      ) : (\n        <PageSection>\n          <Card style={{ height: '100%' }}>\n            <CardBody>\n              {!isLoading && (\n                <MeshGraph\n                  data={meshData}\n                  showLegend={showLegend}\n                  zoom={zoom}\n                  setShowZoomControls={setShowZoomControls}\n                />\n              )}\n            </CardBody>\n          </Card>\n        </PageSection>\n      )}\n    </>\n  );\n}\n\nexport default TopologyView;\n"]},"metadata":{},"sourceType":"module"}