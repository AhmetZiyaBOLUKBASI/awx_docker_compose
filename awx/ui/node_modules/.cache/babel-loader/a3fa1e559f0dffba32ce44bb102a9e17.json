{"ast":null,"code":"import _defineProperty from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{isJsonString}from'util/yaml';export function sortNestedDetails(){var obj=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var nestedTypes=['nested object','list','boolean'];var notNested=Object.entries(obj).filter(function(_ref){var _ref2=_slicedToArray(_ref,2),value=_ref2[1];return!nestedTypes.includes(value.type);});var booleanList=Object.entries(obj).filter(function(_ref3){var _ref4=_slicedToArray(_ref3,2),value=_ref4[1];return value.type==='boolean';});var nestedList=Object.entries(obj).filter(function(_ref5){var _ref6=_slicedToArray(_ref5,2),value=_ref6[1];return value.type==='list';});var nestedObject=Object.entries(obj).filter(function(_ref7){var _ref8=_slicedToArray(_ref7,2),value=_ref8[1];return value.type==='nested object';});return[].concat(_toConsumableArray(notNested),_toConsumableArray(booleanList),_toConsumableArray(nestedList),_toConsumableArray(nestedObject));}export function pluck(sourceObject){for(var _len=arguments.length,keys=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){keys[_key-1]=arguments[_key];}return Object.assign.apply(Object,[{}].concat(_toConsumableArray(keys.map(function(key){return _defineProperty({},key,sourceObject[key]);}))));}export function formatJson(jsonString){if(!jsonString){return null;}return isJsonString(jsonString)?JSON.parse(jsonString):jsonString;}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Setting/shared/settingUtils.js"],"names":["isJsonString","sortNestedDetails","obj","nestedTypes","notNested","Object","entries","filter","value","includes","type","booleanList","nestedList","nestedObject","pluck","sourceObject","keys","assign","map","key","formatJson","jsonString","JSON","parse"],"mappings":"+TAAA,OAASA,YAAT,KAA6B,WAA7B,CAEA,MAAO,SAASC,CAAAA,iBAAT,EAAqC,IAAVC,CAAAA,GAAU,2DAAJ,EAAI,CAC1C,GAAMC,CAAAA,WAAW,CAAG,CAAC,eAAD,CAAkB,MAAlB,CAA0B,SAA1B,CAApB,CACA,GAAMC,CAAAA,SAAS,CAAGC,MAAM,CAACC,OAAP,CAAeJ,GAAf,EAAoBK,MAApB,CAChB,gDAAIC,KAAJ,gBAAe,CAACL,WAAW,CAACM,QAAZ,CAAqBD,KAAK,CAACE,IAA3B,CAAhB,EADgB,CAAlB,CAGA,GAAMC,CAAAA,WAAW,CAAGN,MAAM,CAACC,OAAP,CAAeJ,GAAf,EAAoBK,MAApB,CAClB,kDAAIC,KAAJ,gBAAeA,CAAAA,KAAK,CAACE,IAAN,GAAe,SAA9B,EADkB,CAApB,CAGA,GAAME,CAAAA,UAAU,CAAGP,MAAM,CAACC,OAAP,CAAeJ,GAAf,EAAoBK,MAApB,CACjB,kDAAIC,KAAJ,gBAAeA,CAAAA,KAAK,CAACE,IAAN,GAAe,MAA9B,EADiB,CAAnB,CAGA,GAAMG,CAAAA,YAAY,CAAGR,MAAM,CAACC,OAAP,CAAeJ,GAAf,EAAoBK,MAApB,CACnB,kDAAIC,KAAJ,gBAAeA,CAAAA,KAAK,CAACE,IAAN,GAAe,eAA9B,EADmB,CAArB,CAGA,mCAAWN,SAAX,qBAAyBO,WAAzB,qBAAyCC,UAAzC,qBAAwDC,YAAxD,GACD,CAED,MAAO,SAASC,CAAAA,KAAT,CAAeC,YAAf,CAAsC,+BAANC,IAAM,qDAANA,IAAM,0BAC3C,MAAOX,CAAAA,MAAM,CAACY,MAAP,OAAAZ,MAAM,EACX,EADW,4BAERW,IAAI,CAACE,GAAL,CAAS,SAACC,GAAD,4BAAaA,GAAb,CAAmBJ,YAAY,CAACI,GAAD,CAA/B,GAAT,CAFQ,GAAb,CAID,CAED,MAAO,SAASC,CAAAA,UAAT,CAAoBC,UAApB,CAAgC,CACrC,GAAI,CAACA,UAAL,CAAiB,CACf,MAAO,KAAP,CACD,CACD,MAAOrB,CAAAA,YAAY,CAACqB,UAAD,CAAZ,CAA2BC,IAAI,CAACC,KAAL,CAAWF,UAAX,CAA3B,CAAoDA,UAA3D,CACD","sourcesContent":["import { isJsonString } from 'util/yaml';\n\nexport function sortNestedDetails(obj = {}) {\n  const nestedTypes = ['nested object', 'list', 'boolean'];\n  const notNested = Object.entries(obj).filter(\n    ([, value]) => !nestedTypes.includes(value.type)\n  );\n  const booleanList = Object.entries(obj).filter(\n    ([, value]) => value.type === 'boolean'\n  );\n  const nestedList = Object.entries(obj).filter(\n    ([, value]) => value.type === 'list'\n  );\n  const nestedObject = Object.entries(obj).filter(\n    ([, value]) => value.type === 'nested object'\n  );\n  return [...notNested, ...booleanList, ...nestedList, ...nestedObject];\n}\n\nexport function pluck(sourceObject, ...keys) {\n  return Object.assign(\n    {},\n    ...keys.map((key) => ({ [key]: sourceObject[key] }))\n  );\n}\n\nexport function formatJson(jsonString) {\n  if (!jsonString) {\n    return null;\n  }\n  return isJsonString(jsonString) ? JSON.parse(jsonString) : jsonString;\n}\n"]},"metadata":{},"sourceType":"module"}