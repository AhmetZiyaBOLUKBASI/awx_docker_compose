{"ast":null,"code":"import _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { scopeColTransformer, emptyCol, mapProps, emptyTD, parentId } from './transformers';\nimport { selectable, cellActions, collapsible, expandedRow, editable, favoritable, sortableFavorites } from './decorators';\nimport { defaultTitle } from './formatters';\n/**\n * Generate header with transforms and formatters from custom header object.\n *\n * @param {*} header with transforms, formatters, columnTransforms, and rest of header object.\n * @param {*} title to be used as label in header config.\n * @returns {*} header, label, transforms: Array, formatters: Array.\n */\n\nvar generateHeader = function generateHeader(_ref, title) {\n  var origTransforms = _ref.transforms,\n      origFormatters = _ref.formatters,\n      columnTransforms = _ref.columnTransforms,\n      header = _ref.header;\n  return Object.assign(Object.assign({}, header), {\n    label: title,\n    transforms: [scopeColTransformer, emptyCol].concat(_toConsumableArray(origTransforms || []), _toConsumableArray(columnTransforms || []), _toConsumableArray(header && header.hasOwnProperty('transforms') ? header.transforms : [])),\n    formatters: [].concat(_toConsumableArray(origFormatters || []), _toConsumableArray(header && header.hasOwnProperty('formatters') ? header.formatters : []))\n  });\n};\n/**\n * Function to generate cell for header config to change look of each cell.\n *\n * @param {*} customCell config with cellFormatters, cellTransforms, columnTransforms and rest of cell config.\n * @param {*} extra - extra\n * @returns {*} cell, transforms: Array, formatters: Array.\n */\n\n\nvar generateCell = function generateCell(_ref2, // eslint-disable-next-line @typescript-eslint/no-unused-vars\nextra) {\n  var cellFormatters = _ref2.cellFormatters,\n      cellTransforms = _ref2.cellTransforms,\n      columnTransforms = _ref2.columnTransforms,\n      cell = _ref2.cell;\n  return Object.assign(Object.assign({}, cell), {\n    transforms: [].concat(_toConsumableArray(cellTransforms || []), _toConsumableArray(columnTransforms || []), _toConsumableArray(cell && cell.hasOwnProperty('transforms') ? cell.transforms : []), [mapProps // This transform should be applied last so that props that are manually defined at the cell level will override all other transforms.\n    ]),\n    formatters: [defaultTitle].concat(_toConsumableArray(cellFormatters || []), _toConsumableArray(cell && cell.hasOwnProperty('formatters') ? cell.formatters : []))\n  });\n};\n/**\n * Function to map custom simple object properties to expected format with property, header, cell, extra params\n * and props.\n *\n * @param {*} column to be shown in header - either string or object with title, transformers and formatters (for cells as well).\n * @param {*} extra additional object with callbacks for specific formatters.\n * @param {*} key cell key to be shown in data-key.\n * @param {*} props additional props for each cell.\n * @returns {*} object with property, extraParams, header, cell and props.\n */\n\n\nvar mapHeader = function mapHeader(column, extra, key) {\n  var title = column.hasOwnProperty('title') ? column.title : column;\n  var dataLabel = \"column-\".concat(key);\n\n  if (column.hasOwnProperty('dataLabel')) {\n    dataLabel = column.dataLabel;\n  } else if (typeof title === 'string') {\n    dataLabel = title;\n  }\n\n  for (var _len = arguments.length, props = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    props[_key - 3] = arguments[_key];\n  }\n\n  return {\n    property: typeof title === 'string' && title.toLowerCase().trim().replace(/\\s/g, '-') || \"column-\".concat(key),\n    extraParams: extra,\n    data: column.data,\n    header: generateHeader(column, title),\n    cell: generateCell(column, extra),\n    props: Object.assign(Object.assign({\n      'data-label': dataLabel,\n      'data-key': key\n    }, column.hasOwnProperty('props') ? column.props : {}), props)\n  };\n};\n/**\n * Function to define select cell in first column.\n *\n * @param {*} extraObject with onSelect callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nvar selectableTransforms = function selectableTransforms(_ref3) {\n  var onSelect = _ref3.onSelect,\n      canSelectAll = _ref3.canSelectAll;\n  return _toConsumableArray(onSelect ? [{\n    title: '',\n    transforms: canSelectAll && [selectable] || null,\n    cellTransforms: [selectable]\n  }] : []);\n};\n/**\n * Function to define favorites cell in first column (or second column if rows are also selectable).\n *\n * @param {*} extraObject with onFavorite callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nvar favoritesTransforms = function favoritesTransforms(_ref4) {\n  var onFavorite = _ref4.onFavorite,\n      onSort = _ref4.onSort,\n      sortBy = _ref4.sortBy,\n      canSortFavorites = _ref4.canSortFavorites,\n      firstUserColumnIndex = _ref4.firstUserColumnIndex;\n  return _toConsumableArray(onFavorite ? [{\n    title: '',\n    transforms: onSort && canSortFavorites ? [sortableFavorites({\n      onSort: onSort,\n      // favorites should be just before the first user-defined column\n      columnIndex: firstUserColumnIndex - 1,\n      sortBy: sortBy\n    })] : [emptyTD],\n    cellTransforms: [favoritable]\n  }] : []);\n};\n/**\n * Function to define actions in last column.\n *\n * @param {*} extraObject with actions array.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nvar actionsTransforms = function actionsTransforms(_ref5) {\n  var actions = _ref5.actions,\n      actionResolver = _ref5.actionResolver,\n      areActionsDisabled = _ref5.areActionsDisabled;\n  return _toConsumableArray(actionResolver || actions ? [{\n    title: '',\n    transforms: [emptyTD],\n    cellTransforms: [cellActions(actions, actionResolver, areActionsDisabled)]\n  }] : []);\n};\n/**\n * Function to define collapsible in first column.\n *\n * @param {*} header info with cellTransforms.\n * @param {*}  extraObject with onCollapse callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nvar collapsibleTransforms = function collapsibleTransforms(header, _ref6) {\n  var onCollapse = _ref6.onCollapse,\n      canCollapseAll = _ref6.canCollapseAll,\n      firstUserColumnIndex = _ref6.firstUserColumnIndex;\n  return _toConsumableArray(onCollapse ? [{\n    title: '',\n    transforms: canCollapseAll && [collapsible] || null,\n    cellTransforms: [collapsible, expandedRow(header.length, firstUserColumnIndex)]\n  }] : []);\n};\n/**\n * Function to add additional cell transforms to object.\n *\n * @param {*} cell to be expanded.\n * @param {*} additional thing to be added to cellTransforms.\n * @returns {*} object with title from cell and cellTransforms with additional in.\n */\n\n\nvar addAdditionalCellTranforms = function addAdditionalCellTranforms(cell, additional) {\n  return Object.assign(Object.assign({}, cell.hasOwnProperty('title') ? cell : {\n    title: cell\n  }), {\n    cellTransforms: [].concat(_toConsumableArray(cell.hasOwnProperty('cellTransforms') ? cell.cellTransforms : []), [additional])\n  });\n};\n/**\n * Function to change expanded row with additional transforms.\n *\n * @param {*} header info with cellTransforms.\n * @param {*} extra object with onCollapse/onExpand function.\n */\n\n\nvar expandContent = function expandContent(header, extra) {\n  if (!extra.onCollapse && !extra.onExpand) {\n    return header;\n  }\n\n  return header.map(function (cell) {\n    var parentIdCell = addAdditionalCellTranforms(cell, parentId);\n    return addAdditionalCellTranforms(parentIdCell, expandedRow(header.length));\n  });\n};\n/**\n * Function to join parent and their children so they can be rendered in tbody.\n *\n * @param {*} rows raw data to find out if it's child or parent.\n * @param {*} children data to render (array of react children).\n */\n\n\nexport var mapOpenedRows = function mapOpenedRows(rows, children) {\n  return rows.reduce(function (acc, curr, key) {\n    if (curr.hasOwnProperty('parent')) {\n      var parent = acc.length > 0 && acc[acc.length - 1];\n\n      if (parent) {\n        acc[acc.length - 1].rows = [].concat(_toConsumableArray(acc[acc.length - 1].rows), [children[key]]);\n\n        if (curr.hasOwnProperty('compoundParent')) {\n          // if this is compound expand, check for any open child cell\n          acc[acc.length - 1].isOpen = acc[acc.length - 1].rows.some(function (oneRow) {\n            return oneRow.props.rowData.cells.some(function (oneCell) {\n              return oneCell.props && oneCell.props.isOpen;\n            });\n          });\n        }\n      }\n    } else {\n      acc = [].concat(_toConsumableArray(acc), [Object.assign(Object.assign({}, curr), {\n        rows: [children[key]]\n      })]);\n    }\n\n    return acc;\n  }, []);\n};\n\nvar rowEditTransforms = function rowEditTransforms(_ref7) {\n  var onRowEdit = _ref7.onRowEdit;\n  return _toConsumableArray(onRowEdit ? [{\n    title: '',\n    cellTransforms: [editable]\n  }] : []);\n};\n/**\n * Function to calculate columns based on custom config.\n * It adds some custom cells for collapse, select, if expanded row and actions.\n *\n * @param {*} headerRows custom object with described table header cells.\n * @param {*} extra object with custom callbacks.\n * @returns {*} expected object for react tabular table.\n */\n\n\nexport var calculateColumns = function calculateColumns(headerRows, extra) {\n  return headerRows && [].concat(_toConsumableArray(collapsibleTransforms(headerRows, extra)), _toConsumableArray(selectableTransforms(extra)), _toConsumableArray(favoritesTransforms(extra)), _toConsumableArray(expandContent(headerRows, extra)), _toConsumableArray(rowEditTransforms(extra)), _toConsumableArray(actionsTransforms(extra))).map(function (oneCol, key) {\n    return Object.assign({}, mapHeader(oneCol, extra, key));\n  });\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/utils/headerUtils.tsx"],"names":[],"mappings":"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","sourcesContent":["import { scopeColTransformer, emptyCol, mapProps, emptyTD, parentId } from './transformers';\nimport {\n  selectable,\n  cellActions,\n  collapsible,\n  expandedRow,\n  editable,\n  favoritable,\n  sortableFavorites\n} from './decorators';\nimport { defaultTitle } from './formatters';\nimport {\n  ICell,\n  IRow,\n  IActions,\n  IActionsResolver,\n  IAreActionsDisabled,\n  OnSelect,\n  OnCollapse,\n  OnRowEdit,\n  OnFavorite,\n  OnSort,\n  ISortBy\n} from '../TableTypes';\n\n/**\n * Generate header with transforms and formatters from custom header object.\n *\n * @param {*} header with transforms, formatters, columnTransforms, and rest of header object.\n * @param {*} title to be used as label in header config.\n * @returns {*} header, label, transforms: Array, formatters: Array.\n */\nconst generateHeader = (\n  { transforms: origTransforms, formatters: origFormatters, columnTransforms, header }: ICell,\n  title?: string | ICell\n) => ({\n  ...header,\n  label: title,\n  transforms: [\n    scopeColTransformer,\n    emptyCol,\n    ...(origTransforms || []),\n    ...(columnTransforms || []),\n    ...(header && header.hasOwnProperty('transforms') ? header.transforms : [])\n  ],\n  formatters: [...(origFormatters || []), ...(header && header.hasOwnProperty('formatters') ? header.formatters : [])]\n});\n\ninterface ICustomCell {\n  cellFormatters?: ICell['cellFormatters'];\n  cellTransforms?: ICell['cellTransforms'];\n  columnTransforms?: ICell['columnTransforms'];\n  cell?: ICell;\n}\n\n/**\n * Function to generate cell for header config to change look of each cell.\n *\n * @param {*} customCell config with cellFormatters, cellTransforms, columnTransforms and rest of cell config.\n * @param {*} extra - extra\n * @returns {*} cell, transforms: Array, formatters: Array.\n */\nconst generateCell = (\n  { cellFormatters, cellTransforms, columnTransforms, cell }: ICustomCell,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  extra: any\n) => ({\n  ...cell,\n  transforms: [\n    ...(cellTransforms || []),\n    ...(columnTransforms || []),\n    ...(cell && cell.hasOwnProperty('transforms') ? cell.transforms : []),\n    mapProps // This transform should be applied last so that props that are manually defined at the cell level will override all other transforms.\n  ],\n  formatters: [\n    defaultTitle,\n    ...(cellFormatters || []),\n    ...(cell && cell.hasOwnProperty('formatters') ? cell.formatters : [])\n  ]\n});\n\n/**\n * Function to map custom simple object properties to expected format with property, header, cell, extra params\n * and props.\n *\n * @param {*} column to be shown in header - either string or object with title, transformers and formatters (for cells as well).\n * @param {*} extra additional object with callbacks for specific formatters.\n * @param {*} key cell key to be shown in data-key.\n * @param {*} props additional props for each cell.\n * @returns {*} object with property, extraParams, header, cell and props.\n */\nconst mapHeader = (column: ICell, extra: any, key: number, ...props: any) => {\n  const title = (column.hasOwnProperty('title') ? column.title : column) as string | ICell;\n  let dataLabel: string | ICell = `column-${key}`;\n  if (column.hasOwnProperty('dataLabel')) {\n    dataLabel = column.dataLabel;\n  } else if (typeof title === 'string') {\n    dataLabel = title;\n  }\n\n  return {\n    property:\n      (typeof title === 'string' &&\n        title\n          .toLowerCase()\n          .trim()\n          .replace(/\\s/g, '-')) ||\n      `column-${key}`,\n    extraParams: extra,\n    data: column.data,\n    header: generateHeader(column, title),\n    cell: generateCell(column, extra),\n    props: {\n      'data-label': dataLabel,\n      'data-key': key,\n      ...(column.hasOwnProperty('props') ? column.props : {}),\n      ...props\n    }\n  };\n};\n\nexport interface ISelectTransform {\n  onSelect: OnSelect;\n  canSelectAll: boolean;\n}\n\n/**\n * Function to define select cell in first column.\n *\n * @param {*} extraObject with onSelect callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst selectableTransforms = ({ onSelect, canSelectAll }: ISelectTransform) => [\n  ...(onSelect\n    ? [\n        {\n          title: '',\n          transforms: (canSelectAll && [selectable]) || null,\n          cellTransforms: [selectable]\n        }\n      ]\n    : [])\n];\n\n/**\n * Function to define favorites cell in first column (or second column if rows are also selectable).\n *\n * @param {*} extraObject with onFavorite callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst favoritesTransforms = ({\n  onFavorite,\n  onSort,\n  sortBy,\n  canSortFavorites,\n  firstUserColumnIndex\n}: {\n  onFavorite: OnFavorite;\n  onSort: OnSort;\n  sortBy: ISortBy;\n  canSortFavorites: boolean;\n  firstUserColumnIndex: number;\n}): any => [\n  ...(onFavorite\n    ? [\n        {\n          title: '',\n          transforms:\n            onSort && canSortFavorites\n              ? [\n                  sortableFavorites({\n                    onSort,\n                    // favorites should be just before the first user-defined column\n                    columnIndex: firstUserColumnIndex - 1,\n                    sortBy\n                  })\n                ]\n              : [emptyTD],\n          cellTransforms: [favoritable]\n        }\n      ]\n    : [])\n];\n\n/**\n * Function to define actions in last column.\n *\n * @param {*} extraObject with actions array.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst actionsTransforms = ({\n  actions,\n  actionResolver,\n  areActionsDisabled\n}: {\n  actions: IActions;\n  actionResolver: IActionsResolver;\n  areActionsDisabled: IAreActionsDisabled;\n}) => [\n  ...(actionResolver || actions\n    ? [\n        {\n          title: '',\n          transforms: [emptyTD],\n          cellTransforms: [cellActions(actions, actionResolver, areActionsDisabled)]\n        }\n      ]\n    : [])\n];\n\nexport interface ICollapseTranform {\n  onCollapse: OnCollapse;\n  canCollapseAll: boolean;\n  // Account for additional added columns for full width\n  firstUserColumnIndex: number;\n}\n\n/**\n * Function to define collapsible in first column.\n *\n * @param {*} header info with cellTransforms.\n * @param {*}  extraObject with onCollapse callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst collapsibleTransforms = (\n  header: (ICell | string)[],\n  { onCollapse, canCollapseAll, firstUserColumnIndex }: ICollapseTranform\n) => [\n  ...(onCollapse\n    ? [\n        {\n          title: '',\n          transforms: (canCollapseAll && [collapsible]) || null,\n          cellTransforms: [collapsible, expandedRow(header.length, firstUserColumnIndex)]\n        }\n      ]\n    : [])\n];\n\n/**\n * Function to add additional cell transforms to object.\n *\n * @param {*} cell to be expanded.\n * @param {*} additional thing to be added to cellTransforms.\n * @returns {*} object with title from cell and cellTransforms with additional in.\n */\nconst addAdditionalCellTranforms = (cell: ICell, additional: any) => ({\n  ...(cell.hasOwnProperty('title') ? cell : { title: cell }),\n  cellTransforms: [...(cell.hasOwnProperty('cellTransforms') ? cell.cellTransforms : []), additional]\n});\n\n/**\n * Function to change expanded row with additional transforms.\n *\n * @param {*} header info with cellTransforms.\n * @param {*} extra object with onCollapse/onExpand function.\n */\nconst expandContent = (header: (ICell | string)[], extra: any) => {\n  if (!extra.onCollapse && !extra.onExpand) {\n    return header;\n  }\n  return header.map((cell: ICell | string) => {\n    const parentIdCell = addAdditionalCellTranforms(cell as ICell, parentId);\n    return addAdditionalCellTranforms(parentIdCell as ICell, expandedRow(header.length));\n  });\n};\n\n/**\n * Function to join parent and their children so they can be rendered in tbody.\n *\n * @param {*} rows raw data to find out if it's child or parent.\n * @param {*} children data to render (array of react children).\n */\nexport const mapOpenedRows = (rows: IRow[], children: any) =>\n  rows.reduce((acc: any, curr, key) => {\n    if (curr.hasOwnProperty('parent')) {\n      const parent = acc.length > 0 && acc[acc.length - 1];\n      if (parent) {\n        acc[acc.length - 1].rows = [...acc[acc.length - 1].rows, children[key]];\n        if (curr.hasOwnProperty('compoundParent')) {\n          // if this is compound expand, check for any open child cell\n          acc[acc.length - 1].isOpen = acc[acc.length - 1].rows.some((oneRow: IRow) =>\n            oneRow.props.rowData.cells.some((oneCell: ICell) => oneCell.props && oneCell.props.isOpen)\n          );\n        }\n      }\n    } else {\n      acc = [...acc, { ...curr, rows: [children[key]] }];\n    }\n    return acc;\n  }, []) as IRow[];\n\nconst rowEditTransforms = ({ onRowEdit }: { onRowEdit: OnRowEdit }) => [\n  ...(onRowEdit\n    ? [\n        {\n          title: '',\n          cellTransforms: [editable]\n        }\n      ]\n    : [])\n];\n\n/**\n * Function to calculate columns based on custom config.\n * It adds some custom cells for collapse, select, if expanded row and actions.\n *\n * @param {*} headerRows custom object with described table header cells.\n * @param {*} extra object with custom callbacks.\n * @returns {*} expected object for react tabular table.\n */\nexport const calculateColumns = (headerRows: (ICell | string)[], extra: any) =>\n  headerRows &&\n  [\n    ...collapsibleTransforms(headerRows, extra),\n    ...selectableTransforms(extra),\n    ...favoritesTransforms(extra),\n    ...expandContent(headerRows, extra),\n    ...rowEditTransforms(extra),\n    ...actionsTransforms(extra)\n  ].map((oneCol, key) => ({\n    ...mapHeader(oneCol as ICell, extra, key)\n  }));\n"]},"metadata":{},"sourceType":"module"}