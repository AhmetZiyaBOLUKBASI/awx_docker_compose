{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/BackToTop/back-to-top';\nimport { css } from '@patternfly/react-styles';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport { canUseDOM } from '../../helpers/util';\nimport { Button } from '../Button';\n\nvar BackToTopBase = function BackToTopBase(_a) {\n  var className = _a.className,\n      _a$title = _a.title,\n      title = _a$title === void 0 ? 'Back to top' : _a$title,\n      innerRef = _a.innerRef,\n      scrollableSelector = _a.scrollableSelector,\n      _a$isAlwaysVisible = _a.isAlwaysVisible,\n      isAlwaysVisible = _a$isAlwaysVisible === void 0 ? false : _a$isAlwaysVisible,\n      props = __rest(_a, [\"className\", \"title\", \"innerRef\", \"scrollableSelector\", \"isAlwaysVisible\"]);\n\n  var _React$useState = React.useState(isAlwaysVisible),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  React.useEffect(function () {\n    setVisible(isAlwaysVisible);\n  }, [isAlwaysVisible]);\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      scrollElement = _React$useState4[0],\n      setScrollElement = _React$useState4[1];\n\n  var toggleVisible = function toggleVisible() {\n    var scrolled = scrollElement.scrollY ? scrollElement.scrollY : scrollElement.scrollTop;\n\n    if (!isAlwaysVisible) {\n      if (scrolled > 400) {\n        setVisible(true);\n      } else {\n        setVisible(false);\n      }\n    }\n  };\n\n  React.useEffect(function () {\n    var hasScrollSpy = Boolean(scrollableSelector);\n\n    if (hasScrollSpy) {\n      var scrollEl = document.querySelector(scrollableSelector);\n\n      if (!canUseDOM || !(scrollEl instanceof HTMLElement)) {\n        return;\n      }\n\n      setScrollElement(scrollEl);\n      scrollEl.addEventListener('scroll', toggleVisible);\n      return function () {\n        scrollEl.removeEventListener('scroll', toggleVisible);\n      };\n    } else {\n      if (!canUseDOM) {\n        return;\n      }\n\n      var _scrollEl = window;\n      setScrollElement(_scrollEl);\n\n      _scrollEl.addEventListener('scroll', toggleVisible);\n\n      return function () {\n        _scrollEl.removeEventListener('scroll', toggleVisible);\n      };\n    }\n  }, [scrollableSelector, toggleVisible]);\n\n  var handleClick = function handleClick() {\n    scrollElement.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.backToTop, !visible && styles.modifiers.hidden, className),\n    ref: innerRef,\n    onClick: handleClick\n  }, props), React.createElement(Button, {\n    variant: \"primary\",\n    icon: React.createElement(AngleUpIcon, {\n      \"aria-hidden\": \"true\"\n    }),\n    iconPosition: \"right\"\n  }, title));\n};\n\nexport var BackToTop = React.forwardRef(function (props, ref) {\n  return React.createElement(BackToTopBase, Object.assign({\n    innerRef: ref\n  }, props));\n});\nBackToTop.displayName = 'BackToTop';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/BackToTop/BackToTop.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/BackToTop/back-to-top';\nimport { css } from '@patternfly/react-styles';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport { canUseDOM } from '../../helpers/util';\nimport { Button } from '../Button';\n\ninterface BackToTopProps extends React.DetailedHTMLProps<React.HTMLProps<HTMLDivElement>, HTMLDivElement> {\n  /** Additional classes added to the back to top. */\n  className?: string;\n  /** Title to appear in back to top button. */\n  title?: string;\n  /** Forwarded ref */\n  innerRef?: React.Ref<any>;\n  /** Selector for the scrollable element to spy on. Not passing a selector defaults to spying on window scroll events. */\n  scrollableSelector?: string;\n  /** Flag to always show back to top button, defaults to false. */\n  isAlwaysVisible?: boolean;\n}\n\nconst BackToTopBase: React.FunctionComponent<BackToTopProps> = ({\n  className,\n  title = 'Back to top',\n  innerRef,\n  scrollableSelector,\n  isAlwaysVisible = false,\n  ...props\n}: BackToTopProps) => {\n  const [visible, setVisible] = React.useState(isAlwaysVisible);\n  React.useEffect(() => {\n    setVisible(isAlwaysVisible);\n  }, [isAlwaysVisible]);\n\n  const [scrollElement, setScrollElement] = React.useState(null);\n\n  const toggleVisible = () => {\n    const scrolled = scrollElement.scrollY ? scrollElement.scrollY : scrollElement.scrollTop;\n    if (!isAlwaysVisible) {\n      if (scrolled > 400) {\n        setVisible(true);\n      } else {\n        setVisible(false);\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    const hasScrollSpy = Boolean(scrollableSelector);\n    if (hasScrollSpy) {\n      const scrollEl = document.querySelector(scrollableSelector) as HTMLElement;\n      if (!canUseDOM || !(scrollEl instanceof HTMLElement)) {\n        return;\n      }\n      setScrollElement(scrollEl);\n      scrollEl.addEventListener('scroll', toggleVisible);\n\n      return () => {\n        scrollEl.removeEventListener('scroll', toggleVisible);\n      };\n    } else {\n      if (!canUseDOM) {\n        return;\n      }\n      const scrollEl = window;\n      setScrollElement(scrollEl);\n      scrollEl.addEventListener('scroll', toggleVisible);\n\n      return () => {\n        scrollEl.removeEventListener('scroll', toggleVisible);\n      };\n    }\n  }, [scrollableSelector, toggleVisible]);\n\n  const handleClick = () => {\n    scrollElement.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  return (\n    <div\n      className={css(styles.backToTop, !visible && styles.modifiers.hidden, className)}\n      ref={innerRef}\n      onClick={handleClick}\n      {...props}\n    >\n      <Button variant=\"primary\" icon={<AngleUpIcon aria-hidden=\"true\" />} iconPosition=\"right\">\n        {title}\n      </Button>\n    </div>\n  );\n};\n\nexport const BackToTop = React.forwardRef((props: BackToTopProps, ref: React.Ref<any>) => (\n  <BackToTopBase innerRef={ref} {...props} />\n));\nBackToTop.displayName = 'BackToTop';\n"]},"metadata":{},"sourceType":"module"}