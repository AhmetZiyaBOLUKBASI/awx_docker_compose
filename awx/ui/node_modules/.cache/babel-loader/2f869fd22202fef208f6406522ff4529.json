{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DatePicker/date-picker';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Popover } from '../Popover/Popover';\nimport { InputGroup } from '../InputGroup/InputGroup';\nimport OutlinedCalendarAltIcon from '@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon';\nimport { CalendarMonth, isValidDate } from '../CalendarMonth';\nimport { useImperativeHandle } from 'react';\nimport { KeyTypes } from '../../helpers';\nexport var yyyyMMddFormat = function yyyyMMddFormat(date) {\n  return \"\".concat(date.getFullYear(), \"-\").concat((date.getMonth() + 1).toString().padStart(2, '0'), \"-\").concat(date.getDate().toString().padStart(2, '0'));\n};\n\nvar DatePickerBase = function DatePickerBase(_a, ref) {\n  var className = _a.className,\n      _a$locale = _a.locale,\n      locale = _a$locale === void 0 ? undefined : _a$locale,\n      _a$dateFormat = _a.dateFormat,\n      dateFormat = _a$dateFormat === void 0 ? yyyyMMddFormat : _a$dateFormat,\n      _a$dateParse = _a.dateParse,\n      dateParse = _a$dateParse === void 0 ? function (val) {\n    return val.split('-').length === 3 && new Date(\"\".concat(val, \"T00:00:00\"));\n  } : _a$dateParse,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      _a$placeholder = _a.placeholder,\n      placeholder = _a$placeholder === void 0 ? 'YYYY-MM-DD' : _a$placeholder,\n      _a$value = _a.value,\n      valueProp = _a$value === void 0 ? '' : _a$value,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? 'Date picker' : _a$ariaLabel,\n      _a$buttonAriaLabel = _a.buttonAriaLabel,\n      buttonAriaLabel = _a$buttonAriaLabel === void 0 ? 'Toggle date picker' : _a$buttonAriaLabel,\n      _a$onChange = _a.onChange,\n      onChange = _a$onChange === void 0 ? function () {\n    return undefined;\n  } : _a$onChange,\n      _a$onBlur = _a.onBlur,\n      onBlur = _a$onBlur === void 0 ? function () {\n    return undefined;\n  } : _a$onBlur,\n      _a$invalidFormatText = _a.invalidFormatText,\n      invalidFormatText = _a$invalidFormatText === void 0 ? 'Invalid date' : _a$invalidFormatText,\n      helperText = _a.helperText,\n      _a$appendTo = _a.appendTo,\n      appendTo = _a$appendTo === void 0 ? 'parent' : _a$appendTo,\n      popoverProps = _a.popoverProps,\n      monthFormat = _a.monthFormat,\n      weekdayFormat = _a.weekdayFormat,\n      longWeekdayFormat = _a.longWeekdayFormat,\n      dayFormat = _a.dayFormat,\n      weekStart = _a.weekStart,\n      _a$validators = _a.validators,\n      validators = _a$validators === void 0 ? [] : _a$validators,\n      rangeStart = _a.rangeStart,\n      _a$style = _a.style,\n      styleProps = _a$style === void 0 ? {} : _a$style,\n      _a$inputProps = _a.inputProps,\n      inputProps = _a$inputProps === void 0 ? {} : _a$inputProps,\n      props = __rest(_a, [\"className\", \"locale\", \"dateFormat\", \"dateParse\", \"isDisabled\", \"placeholder\", \"value\", 'aria-label', \"buttonAriaLabel\", \"onChange\", \"onBlur\", \"invalidFormatText\", \"helperText\", \"appendTo\", \"popoverProps\", \"monthFormat\", \"weekdayFormat\", \"longWeekdayFormat\", \"dayFormat\", \"weekStart\", \"validators\", \"rangeStart\", \"style\", \"inputProps\"]);\n\n  var _React$useState = React.useState(valueProp),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(dateParse(value)),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      valueDate = _React$useState4[0],\n      setValueDate = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      errorText = _React$useState6[0],\n      setErrorText = _React$useState6[1];\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      popoverOpen = _React$useState8[0],\n      setPopoverOpen = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      selectOpen = _React$useState10[0],\n      setSelectOpen = _React$useState10[1];\n\n  var _React$useState11 = React.useState(true),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      pristine = _React$useState12[0],\n      setPristine = _React$useState12[1];\n\n  var widthChars = React.useMemo(function () {\n    return Math.max(dateFormat(new Date()).length, placeholder.length);\n  }, [dateFormat]);\n  var style = Object.assign({\n    '--pf-c-date-picker__input--c-form-control--width-chars': widthChars\n  }, styleProps);\n  var buttonRef = React.useRef();\n  var datePickerWrapperRef = React.useRef();\n  React.useEffect(function () {\n    setValue(valueProp);\n    setValueDate(dateParse(valueProp));\n  }, [valueProp]);\n  React.useEffect(function () {\n    setPristine(!value);\n  }, [value]);\n\n  var setError = function setError(date) {\n    return setErrorText(validators.map(function (validator) {\n      return validator(date);\n    }).join('\\n') || '');\n  };\n\n  var onTextInput = function onTextInput(value) {\n    setValue(value);\n    setErrorText('');\n    var newValueDate = dateParse(value);\n    setValueDate(newValueDate);\n\n    if (isValidDate(newValueDate)) {\n      onChange(value, new Date(newValueDate));\n    } else {\n      onChange(value);\n    }\n  };\n\n  var onInputBlur = function onInputBlur() {\n    if (pristine) {\n      return;\n    }\n\n    var newValueDate = dateParse(value);\n\n    if (isValidDate(newValueDate)) {\n      onBlur(value, new Date(newValueDate));\n      setError(newValueDate);\n    } else {\n      onBlur(value);\n      setErrorText(invalidFormatText);\n    }\n  };\n\n  var onDateClick = function onDateClick(newValueDate) {\n    var newValue = dateFormat(newValueDate);\n    setValue(newValue);\n    setValueDate(newValueDate);\n    setError(newValueDate);\n    setPopoverOpen(false);\n    onChange(newValue, new Date(newValueDate));\n  };\n\n  var onKeyPress = function onKeyPress(ev) {\n    if (ev.key === 'Enter' && value) {\n      if (isValidDate(valueDate)) {\n        setError(valueDate);\n      } else {\n        setErrorText(invalidFormatText);\n      }\n    }\n  };\n\n  useImperativeHandle(ref, function () {\n    return {\n      setCalendarOpen: function setCalendarOpen(isOpen) {\n        return setPopoverOpen(isOpen);\n      },\n      toggleCalendar: function toggleCalendar(setOpen, eventKey) {\n        if (eventKey === KeyTypes.Escape && popoverOpen && !selectOpen) {\n          setPopoverOpen(function (prev) {\n            return setOpen !== undefined ? setOpen : !prev;\n          });\n        }\n      },\n      isCalendarOpen: popoverOpen\n    };\n  }, [setPopoverOpen, popoverOpen, selectOpen]);\n\n  var getParentElement = function getParentElement() {\n    return datePickerWrapperRef && datePickerWrapperRef.current ? datePickerWrapperRef.current : null;\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.datePicker, className),\n    ref: datePickerWrapperRef,\n    style: style\n  }, props), React.createElement(Popover, Object.assign({\n    position: \"bottom\",\n    bodyContent: React.createElement(CalendarMonth, {\n      date: valueDate,\n      onChange: onDateClick,\n      locale: locale,\n      // Use truthy values of strings\n      validators: validators.map(function (validator) {\n        return function (date) {\n          return !validator(date);\n        };\n      }),\n      onSelectToggle: function onSelectToggle(open) {\n        return setSelectOpen(open);\n      },\n      monthFormat: monthFormat,\n      weekdayFormat: weekdayFormat,\n      longWeekdayFormat: longWeekdayFormat,\n      dayFormat: dayFormat,\n      weekStart: weekStart,\n      rangeStart: rangeStart,\n      isDateFocused: true\n    }),\n    showClose: false,\n    isVisible: popoverOpen,\n    shouldClose: function shouldClose(_1, _2, event) {\n      event = event;\n\n      if (event.key === KeyTypes.Escape && selectOpen) {\n        event.stopPropagation();\n        setSelectOpen(false);\n        return false;\n      } // Let our button handle toggling\n\n\n      if (buttonRef.current && buttonRef.current.contains(event.target)) {\n        return false;\n      }\n\n      setPopoverOpen(false);\n\n      if (event.key === KeyTypes.Escape && popoverOpen) {\n        event.stopPropagation();\n      }\n\n      return true;\n    },\n    withFocusTrap: true,\n    hasNoPadding: true,\n    hasAutoWidth: true,\n    appendTo: appendTo === 'parent' ? getParentElement() : appendTo\n  }, popoverProps), React.createElement(\"div\", {\n    className: styles.datePickerInput\n  }, React.createElement(InputGroup, null, React.createElement(TextInput, Object.assign({\n    isDisabled: isDisabled,\n    \"aria-label\": ariaLabel,\n    placeholder: placeholder,\n    validated: errorText ? 'error' : 'default',\n    value: value,\n    onChange: onTextInput,\n    onBlur: onInputBlur,\n    onKeyPress: onKeyPress\n  }, inputProps)), React.createElement(\"button\", {\n    ref: buttonRef,\n    className: css(buttonStyles.button, buttonStyles.modifiers.control),\n    \"aria-label\": buttonAriaLabel,\n    type: \"button\",\n    onClick: function onClick() {\n      return setPopoverOpen(!popoverOpen);\n    },\n    disabled: isDisabled\n  }, React.createElement(OutlinedCalendarAltIcon, null))))), helperText && React.createElement(\"div\", {\n    className: styles.datePickerHelperText\n  }, helperText), errorText.trim() && React.createElement(\"div\", {\n    className: css(styles.datePickerHelperText, styles.modifiers.error)\n  }, errorText));\n};\n\nexport var DatePicker = React.forwardRef(DatePickerBase);\nDatePicker.displayName = 'DatePicker';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DatePicker/DatePicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DatePicker/date-picker';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { TextInput, TextInputProps } from '../TextInput/TextInput';\nimport { Popover, PopoverProps } from '../Popover/Popover';\nimport { InputGroup } from '../InputGroup/InputGroup';\nimport OutlinedCalendarAltIcon from '@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon';\nimport { CalendarMonth, CalendarFormat, isValidDate } from '../CalendarMonth';\nimport { useImperativeHandle } from 'react';\nimport { KeyTypes } from '../../helpers';\n\nexport interface DatePickerProps\n  extends CalendarFormat,\n    Omit<React.HTMLProps<HTMLInputElement>, 'onChange' | 'onFocus' | 'onBlur' | 'disabled' | 'ref'> {\n  /** Additional classes added to the date time picker. */\n  className?: string;\n  /** Accessible label for the date picker */\n  'aria-label'?: string;\n  /** How to format the date in the TextInput */\n  dateFormat?: (date: Date) => string;\n  /** How to format the date in the TextInput */\n  dateParse?: (value: string) => Date;\n  /** Flag indicating the date picker is disabled*/\n  isDisabled?: boolean;\n  /** String to display in the empty date picker field as a hint for the expected date format */\n  placeholder?: string;\n  /** Value of TextInput */\n  value?: string;\n  /** Error message to display when the TextInput cannot be parsed. */\n  invalidFormatText?: string;\n  /** Callback called every time the input value changes */\n  onChange?: (value: string, date?: Date) => void;\n  /** Callback called every time the input loses focus */\n  onBlur?: (value: string, date?: Date) => void;\n  /** Text for label */\n  helperText?: React.ReactNode;\n  /** Aria label for the button to open the date picker */\n  buttonAriaLabel?: string;\n  /** The container to append the menu to. Defaults to 'parent'.\n   * If your menu is being cut off you can append it to an element higher up the DOM tree.\n   * Some examples:\n   * menuAppendTo={() => document.body}\n   * menuAppendTo={document.getElementById('target')}\n   */\n  appendTo?: HTMLElement | ((ref?: HTMLElement) => HTMLElement) | 'parent';\n  /** Props to pass to the Popover */\n  popoverProps?: Omit<PopoverProps, 'appendTo'>;\n  /** Functions that returns an error message if a date is invalid */\n  validators?: ((date: Date) => string)[];\n  /** Additional props for input field */\n  inputProps?: TextInputProps;\n}\n\nexport interface DatePickerRef {\n  /** Sets the calendar open status */\n  setCalendarOpen: (isOpen: boolean) => void;\n  /** Toggles the calendar open status. If no parameters are passed, the calendar will simply toggle its open status.\n   * If the isOpen parameter is passed, that will set the calendar open status to the value of the isOpen parameter.\n   * If the eventKey parameter is set to 'Escape', that will invoke the date pickers onEscapePress event to toggle the\n   * correct control appropriately. */\n  toggleCalendar: (isOpen?: boolean, eventKey?: string) => void;\n  /** Current calendar open status */\n  isCalendarOpen: boolean;\n}\n\nexport const yyyyMMddFormat = (date: Date) =>\n  `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date\n    .getDate()\n    .toString()\n    .padStart(2, '0')}`;\n\nconst DatePickerBase = (\n  {\n    className,\n    locale = undefined,\n    dateFormat = yyyyMMddFormat,\n    dateParse = (val: string) => val.split('-').length === 3 && new Date(`${val}T00:00:00`),\n    isDisabled = false,\n    placeholder = 'YYYY-MM-DD',\n    value: valueProp = '',\n    'aria-label': ariaLabel = 'Date picker',\n    buttonAriaLabel = 'Toggle date picker',\n    onChange = (): any => undefined,\n    onBlur = (): any => undefined,\n    invalidFormatText = 'Invalid date',\n    helperText,\n    appendTo = 'parent',\n    popoverProps,\n    monthFormat,\n    weekdayFormat,\n    longWeekdayFormat,\n    dayFormat,\n    weekStart,\n    validators = [],\n    rangeStart,\n    style: styleProps = {},\n    inputProps = {},\n    ...props\n  }: DatePickerProps,\n  ref: React.Ref<DatePickerRef>\n) => {\n  const [value, setValue] = React.useState(valueProp);\n  const [valueDate, setValueDate] = React.useState(dateParse(value));\n  const [errorText, setErrorText] = React.useState('');\n  const [popoverOpen, setPopoverOpen] = React.useState(false);\n  const [selectOpen, setSelectOpen] = React.useState(false);\n  const [pristine, setPristine] = React.useState(true);\n  const widthChars = React.useMemo(() => Math.max(dateFormat(new Date()).length, placeholder.length), [dateFormat]);\n  const style = { '--pf-c-date-picker__input--c-form-control--width-chars': widthChars, ...styleProps };\n  const buttonRef = React.useRef<HTMLButtonElement>();\n  const datePickerWrapperRef = React.useRef<HTMLDivElement>();\n\n  React.useEffect(() => {\n    setValue(valueProp);\n    setValueDate(dateParse(valueProp));\n  }, [valueProp]);\n\n  React.useEffect(() => {\n    setPristine(!value);\n  }, [value]);\n\n  const setError = (date: Date) => setErrorText(validators.map(validator => validator(date)).join('\\n') || '');\n\n  const onTextInput = (value: string) => {\n    setValue(value);\n    setErrorText('');\n    const newValueDate = dateParse(value);\n    setValueDate(newValueDate);\n    if (isValidDate(newValueDate)) {\n      onChange(value, new Date(newValueDate));\n    } else {\n      onChange(value);\n    }\n  };\n\n  const onInputBlur = () => {\n    if (pristine) {\n      return;\n    }\n    const newValueDate = dateParse(value);\n    if (isValidDate(newValueDate)) {\n      onBlur(value, new Date(newValueDate));\n      setError(newValueDate);\n    } else {\n      onBlur(value);\n      setErrorText(invalidFormatText);\n    }\n  };\n\n  const onDateClick = (newValueDate: Date) => {\n    const newValue = dateFormat(newValueDate);\n    setValue(newValue);\n    setValueDate(newValueDate);\n    setError(newValueDate);\n    setPopoverOpen(false);\n    onChange(newValue, new Date(newValueDate));\n  };\n\n  const onKeyPress = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (ev.key === 'Enter' && value) {\n      if (isValidDate(valueDate)) {\n        setError(valueDate);\n      } else {\n        setErrorText(invalidFormatText);\n      }\n    }\n  };\n\n  useImperativeHandle<DatePickerRef, DatePickerRef>(\n    ref,\n    () => ({\n      setCalendarOpen: (isOpen: boolean) => setPopoverOpen(isOpen),\n      toggleCalendar: (setOpen?: boolean, eventKey?: string) => {\n        if (eventKey === KeyTypes.Escape && popoverOpen && !selectOpen) {\n          setPopoverOpen(prev => (setOpen !== undefined ? setOpen : !prev));\n        }\n      },\n      isCalendarOpen: popoverOpen\n    }),\n    [setPopoverOpen, popoverOpen, selectOpen]\n  );\n\n  const getParentElement = () =>\n    datePickerWrapperRef && datePickerWrapperRef.current ? datePickerWrapperRef.current : null;\n\n  return (\n    <div className={css(styles.datePicker, className)} ref={datePickerWrapperRef} style={style} {...props}>\n      <Popover\n        position=\"bottom\"\n        bodyContent={\n          <CalendarMonth\n            date={valueDate}\n            onChange={onDateClick}\n            locale={locale}\n            // Use truthy values of strings\n            validators={validators.map(validator => (date: Date) => !validator(date))}\n            onSelectToggle={open => setSelectOpen(open)}\n            monthFormat={monthFormat}\n            weekdayFormat={weekdayFormat}\n            longWeekdayFormat={longWeekdayFormat}\n            dayFormat={dayFormat}\n            weekStart={weekStart}\n            rangeStart={rangeStart}\n            isDateFocused\n          />\n        }\n        showClose={false}\n        isVisible={popoverOpen}\n        shouldClose={(_1, _2, event) => {\n          event = event as KeyboardEvent;\n          if (event.key === KeyTypes.Escape && selectOpen) {\n            event.stopPropagation();\n            setSelectOpen(false);\n            return false;\n          }\n          // Let our button handle toggling\n          if (buttonRef.current && buttonRef.current.contains(event.target as Node)) {\n            return false;\n          }\n          setPopoverOpen(false);\n          if (event.key === KeyTypes.Escape && popoverOpen) {\n            event.stopPropagation();\n          }\n          return true;\n        }}\n        withFocusTrap\n        hasNoPadding\n        hasAutoWidth\n        appendTo={appendTo === 'parent' ? getParentElement() : appendTo}\n        {...popoverProps}\n      >\n        <div className={styles.datePickerInput}>\n          <InputGroup>\n            <TextInput\n              isDisabled={isDisabled}\n              aria-label={ariaLabel}\n              placeholder={placeholder}\n              validated={errorText ? 'error' : 'default'}\n              value={value}\n              onChange={onTextInput}\n              onBlur={onInputBlur}\n              onKeyPress={onKeyPress}\n              {...inputProps}\n            />\n            <button\n              ref={buttonRef}\n              className={css(buttonStyles.button, buttonStyles.modifiers.control)}\n              aria-label={buttonAriaLabel}\n              type=\"button\"\n              onClick={() => setPopoverOpen(!popoverOpen)}\n              disabled={isDisabled}\n            >\n              <OutlinedCalendarAltIcon />\n            </button>\n          </InputGroup>\n        </div>\n      </Popover>\n      {helperText && <div className={styles.datePickerHelperText}>{helperText}</div>}\n      {errorText.trim() && <div className={css(styles.datePickerHelperText, styles.modifiers.error)}>{errorText}</div>}\n    </div>\n  );\n};\n\nexport const DatePicker = React.forwardRef<DatePickerRef, DatePickerProps>(DatePickerBase);\nDatePicker.displayName = 'DatePicker';\n"]},"metadata":{},"sourceType":"module"}