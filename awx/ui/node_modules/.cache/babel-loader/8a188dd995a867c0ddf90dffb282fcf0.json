{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/ModalBox/modal-box';\nimport topSpacer from '@patternfly/react-tokens/dist/esm/c_modal_box_m_align_top_spacer';\nexport var ModalBox = function ModalBox(_a) {\n  var children = _a.children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$variant = _a.variant,\n      variant = _a$variant === void 0 ? 'default' : _a$variant,\n      position = _a.position,\n      positionOffset = _a.positionOffset,\n      ariaLabelledby = _a['aria-labelledby'],\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? '' : _a$ariaLabel,\n      ariaDescribedby = _a['aria-describedby'],\n      style = _a.style,\n      props = __rest(_a, [\"children\", \"className\", \"variant\", \"position\", \"positionOffset\", 'aria-labelledby', 'aria-label', 'aria-describedby', \"style\"]);\n\n  if (positionOffset) {\n    style = style || {};\n    style[topSpacer.name] = positionOffset;\n  }\n\n  return React.createElement(\"div\", Object.assign({}, props, {\n    role: \"dialog\",\n    \"aria-label\": ariaLabel || null,\n    \"aria-labelledby\": ariaLabelledby || null,\n    \"aria-describedby\": ariaDescribedby,\n    \"aria-modal\": \"true\",\n    className: css(styles.modalBox, className, position === 'top' && styles.modifiers.alignTop, variant === 'large' && styles.modifiers.lg, variant === 'small' && styles.modifiers.sm, variant === 'medium' && styles.modifiers.md),\n    style: style\n  }), children);\n};\nModalBox.displayName = 'ModalBox';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Modal/ModalBox.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,4DAAnB;AACA,OAAO,SAAP,MAAsB,kEAAtB;AAqBA,OAAO,IAAM,QAAQ,GAA2C,SAAnD,QAAmD,CAAC,EAAD,EAW5C;AAX6C,MAC/D,QAD+D,GAS1D,EAT0D,CAC/D,QAD+D;AAAA,qBAS1D,EAT0D,CAE/D,SAF+D;AAAA,MAE/D,SAF+D,6BAEnD,EAFmD;AAAA,mBAS1D,EAT0D,CAG/D,OAH+D;AAAA,MAG/D,OAH+D,2BAGrD,SAHqD;AAAA,MAI/D,QAJ+D,GAS1D,EAT0D,CAI/D,QAJ+D;AAAA,MAK/D,cAL+D,GAS1D,EAT0D,CAK/D,cAL+D;AAAA,MAM5C,cAN4C,GAS1D,EAT0D,CAM/D,iBAN+D;AAAA,qBAS1D,EAT0D,CAO/D,YAP+D;AAAA,MAOjD,SAPiD,6BAOrC,EAPqC;AAAA,MAQ3C,eAR2C,GAS1D,EAT0D,CAQ/D,kBAR+D;AAAA,MAS/D,KAT+D,GAS1D,EAT0D,CAS/D,KAT+D;AAAA,MAU5D,KAV4D,GAUvD,MAAA,CAAA,EAAA,EAVuD,CAAA,UAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,YAAA,EAAA,kBAAA,EAAA,OAAA,CAUvD,CAVuD;;AAY/D,MAAI,cAAJ,EAAoB;AAClB,IAAA,KAAK,GAAG,KAAK,IAAI,EAAjB;AACC,IAAA,KAAa,CAAC,SAAS,CAAC,IAAX,CAAb,GAAgC,cAAhC;AACF;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACM,KADN,EACW;AACT,IAAA,IAAI,EAAC,QADI;AACI,kBACD,SAAS,IAAI,IAFhB;AAEoB,uBACZ,cAAc,IAAI,IAH1B;AAG8B,wBACrB,eAJT;AAIwB,kBACtB,MALF;AAMT,IAAA,SAAS,EAAE,GAAG,CACZ,MAAM,CAAC,QADK,EAEZ,SAFY,EAGZ,QAAQ,KAAK,KAAb,IAAsB,MAAM,CAAC,SAAP,CAAiB,QAH3B,EAIZ,OAAO,KAAK,OAAZ,IAAuB,MAAM,CAAC,SAAP,CAAiB,EAJ5B,EAKZ,OAAO,KAAK,OAAZ,IAAuB,MAAM,CAAC,SAAP,CAAiB,EAL5B,EAMZ,OAAO,KAAK,QAAZ,IAAwB,MAAM,CAAC,SAAP,CAAiB,EAN7B,CANL;AAcT,IAAA,KAAK,EAAE;AAdE,GADX,CAAA,EAiBG,QAjBH,CADF;AAqBD,CArCM;AAsCP,QAAQ,CAAC,WAAT,GAAuB,UAAvB","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/ModalBox/modal-box';\nimport topSpacer from '@patternfly/react-tokens/dist/esm/c_modal_box_m_align_top_spacer';\n\nexport interface ModalBoxProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the ModalBox. */\n  children: React.ReactNode;\n  /** Additional classes added to the ModalBox */\n  className?: string;\n  /** Variant of the modal */\n  variant?: 'small' | 'medium' | 'large' | 'default';\n  /** Alternate position of the modal */\n  position?: 'top';\n  /** Offset from alternate position. Can be any valid CSS length/percentage */\n  positionOffset?: string;\n  /** Id to use for Modal Box label */\n  'aria-labelledby'?: string;\n  /** Accessible descriptor of modal */\n  'aria-label'?: string;\n  /** Id to use for Modal Box description */\n  'aria-describedby': string;\n}\n\nexport const ModalBox: React.FunctionComponent<ModalBoxProps> = ({\n  children,\n  className = '',\n  variant = 'default',\n  position,\n  positionOffset,\n  'aria-labelledby': ariaLabelledby,\n  'aria-label': ariaLabel = '',\n  'aria-describedby': ariaDescribedby,\n  style,\n  ...props\n}: ModalBoxProps) => {\n  if (positionOffset) {\n    style = style || {};\n    (style as any)[topSpacer.name] = positionOffset;\n  }\n  return (\n    <div\n      {...props}\n      role=\"dialog\"\n      aria-label={ariaLabel || null}\n      aria-labelledby={ariaLabelledby || null}\n      aria-describedby={ariaDescribedby}\n      aria-modal=\"true\"\n      className={css(\n        styles.modalBox,\n        className,\n        position === 'top' && styles.modifiers.alignTop,\n        variant === 'large' && styles.modifiers.lg,\n        variant === 'small' && styles.modifiers.sm,\n        variant === 'medium' && styles.modifiers.md\n      )}\n      style={style}\n    >\n      {children}\n    </div>\n  );\n};\nModalBox.displayName = 'ModalBox';\n"]},"metadata":{},"sourceType":"module"}