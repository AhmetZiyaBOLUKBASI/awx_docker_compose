{"ast":null,"code":"import{i18n}from\"@lingui/core\";import{isValidDate}from'@patternfly/react-core';export function required(message){var errorMessage=message||/*i18n*/i18n._(\"This field must not be blank\");return function(value){if(typeof value==='string'&&!value.trim()){return errorMessage;}if(typeof value==='number'&&!Number.isNaN(value)){return undefined;}if(!value){return errorMessage;}return undefined;};}export function validateTime(){return function(value){var timeRegex=new RegExp(\"^\\\\s*(\\\\d\\\\d?):([0-5])(\\\\d)\\\\s*([AaPp][Mm])?\\\\s*$\");var message;var timeComponents=value.split(':');var date=new Date();date.setHours(parseInt(timeComponents[0],10));date.setMinutes(parseInt(timeComponents[1],10));if(!isValidDate(date)||!timeRegex.test(value)){message=/*i18n*/i18n._(\"Invalid time format\");}return message;};}export function maxLength(max){return function(value){if(value.trim().length>max){return(/*i18n*/i18n._(\"This field must not exceed {max} characters\",{max:max}));}return undefined;};}export function minLength(min){return function(value){if(value.trim().length<min){return(/*i18n*/i18n._(\"This field must be at least {min} characters\",{min:min}));}return undefined;};}export function minMaxValue(min,max){return function(value){if(!Number.isFinite(min)&&value>max){return(/*i18n*/i18n._(\"This field must be a number and have a value less than {max}\",{max:max}));}if(!Number.isFinite(max)&&value<min){return(/*i18n*/i18n._(\"This field must be a number and have a value greater than {min}\",{min:min}));}if(value<min||value>max){return(/*i18n*/i18n._(\"This field must be a number and have a value between {min} and {max}\",{min:min,max:max}));}return undefined;};}export function requiredEmail(){return function(value){if(!value){return(/*i18n*/i18n._(\"This field must not be blank\"));}// This isn't a perfect validator. It's likely to let a few\n// invalid (though unlikely) email addresses through.\n// This is ok, because the server will always do strict validation for us.\nvar splitVals=value.split('@');if(splitVals.length>=2){if(splitVals[0]&&splitVals[1]){// We get here if the string has an '@' that is enclosed by\n// non-empty substrings\nreturn undefined;}}return(/*i18n*/i18n._(\"Invalid email address\"));};}export function noWhiteSpace(){return function(value){if(/\\s/.test(value)){return(/*i18n*/i18n._(\"This field must not contain spaces\"));}return undefined;};}export function integer(){return function(value){var str=String(value);if(!Number.isInteger(value)&&/[^0-9]/.test(str)){return(/*i18n*/i18n._(\"This field must be an integer\"));}return undefined;};}export function number(){return function(value){var str=String(value);if(/^-?[0-9]*(\\.[0-9]*)?$/.test(str)){return undefined;}// large number scientific notation (e.g. '1e+21')\nif(/^-?[0-9]*e[+-][0-9]*$/.test(str)){return undefined;}return(/*i18n*/i18n._(\"This field must be a number\"));};}export function twilioPhoneNumber(){return function(value){var phoneNumbers=Array.isArray(value)?value:[value];var error;if(!error){phoneNumbers.forEach(function(v){if(!/^\\s*(?:\\+?(\\d{1,3}))?[. (]*(\\d{7,12})$/.test(v)){error=/*i18n*/i18n._(\"{0, plural, one {Please enter a valid phone number.} other {Please enter valid phone numbers.}}\",{0:phoneNumbers.length});}});}return error;};}export function url(){return function(value){if(!value){return undefined;}// URL regex from https://urlregex.com/\nif(// eslint-disable-next-line max-len\n!/((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w\\-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)/.test(value)){return(/*i18n*/i18n._(\"Please enter a valid URL\"));}return undefined;};}export function combine(validators){return function(value){for(var i=0;i<validators.length;i++){var validate=validators[i];var error=validate?validate(value):null;if(error){return error;}}return undefined;};}export function regExp(){return function(value){try{RegExp(value);}catch(_unused){return(/*i18n*/i18n._(\"This field must be a regular expression\"));}return undefined;};}export function requiredPositiveInteger(){return function(value){if(typeof value==='number'){if(!Number.isInteger(value)){return(/*i18n*/i18n._(\"This field must be an integer\"));}if(value<1){return(/*i18n*/i18n._(\"This field must be greater than 0\"));}}if(!value){return(/*i18n*/i18n._(\"Select a value for this field\"));}return undefined;};}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/util/validators.js"],"names":["isValidDate","required","message","errorMessage","value","trim","Number","isNaN","undefined","validateTime","timeRegex","RegExp","timeComponents","split","date","Date","setHours","parseInt","setMinutes","test","maxLength","max","length","minLength","min","minMaxValue","isFinite","requiredEmail","splitVals","noWhiteSpace","integer","str","String","isInteger","number","twilioPhoneNumber","phoneNumbers","Array","isArray","error","forEach","v","url","combine","validators","i","validate","regExp","requiredPositiveInteger"],"mappings":"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","sourcesContent":["import { plural, t } from '@lingui/macro';\nimport { isValidDate } from '@patternfly/react-core';\n\nexport function required(message) {\n  const errorMessage = message || t`This field must not be blank`;\n  return (value) => {\n    if (typeof value === 'string' && !value.trim()) {\n      return errorMessage;\n    }\n    if (typeof value === 'number' && !Number.isNaN(value)) {\n      return undefined;\n    }\n    if (!value) {\n      return errorMessage;\n    }\n    return undefined;\n  };\n}\n\nexport function validateTime() {\n  return (value) => {\n    const timeRegex = new RegExp(\n      `^\\\\s*(\\\\d\\\\d?):([0-5])(\\\\d)\\\\s*([AaPp][Mm])?\\\\s*$`\n    );\n    let message;\n    const timeComponents = value.split(':');\n\n    const date = new Date();\n    date.setHours(parseInt(timeComponents[0], 10));\n    date.setMinutes(parseInt(timeComponents[1], 10));\n\n    if (!isValidDate(date) || !timeRegex.test(value)) {\n      message = t`Invalid time format`;\n    }\n\n    return message;\n  };\n}\n\nexport function maxLength(max) {\n  return (value) => {\n    if (value.trim().length > max) {\n      return t`This field must not exceed ${max} characters`;\n    }\n    return undefined;\n  };\n}\n\nexport function minLength(min) {\n  return (value) => {\n    if (value.trim().length < min) {\n      return t`This field must be at least ${min} characters`;\n    }\n    return undefined;\n  };\n}\n\nexport function minMaxValue(min, max) {\n  return (value) => {\n    if (!Number.isFinite(min) && value > max) {\n      return t`This field must be a number and have a value less than ${max}`;\n    }\n    if (!Number.isFinite(max) && value < min) {\n      return t`This field must be a number and have a value greater than ${min}`;\n    }\n    if (value < min || value > max) {\n      return t`This field must be a number and have a value between ${min} and ${max}`;\n    }\n    return undefined;\n  };\n}\n\nexport function requiredEmail() {\n  return (value) => {\n    if (!value) {\n      return t`This field must not be blank`;\n    }\n\n    // This isn't a perfect validator. It's likely to let a few\n    // invalid (though unlikely) email addresses through.\n\n    // This is ok, because the server will always do strict validation for us.\n\n    const splitVals = value.split('@');\n\n    if (splitVals.length >= 2) {\n      if (splitVals[0] && splitVals[1]) {\n        // We get here if the string has an '@' that is enclosed by\n        // non-empty substrings\n        return undefined;\n      }\n    }\n\n    return t`Invalid email address`;\n  };\n}\n\nexport function noWhiteSpace() {\n  return (value) => {\n    if (/\\s/.test(value)) {\n      return t`This field must not contain spaces`;\n    }\n    return undefined;\n  };\n}\n\nexport function integer() {\n  return (value) => {\n    const str = String(value);\n    if (!Number.isInteger(value) && /[^0-9]/.test(str)) {\n      return t`This field must be an integer`;\n    }\n    return undefined;\n  };\n}\n\nexport function number() {\n  return (value) => {\n    const str = String(value);\n    if (/^-?[0-9]*(\\.[0-9]*)?$/.test(str)) {\n      return undefined;\n    }\n    // large number scientific notation (e.g. '1e+21')\n    if (/^-?[0-9]*e[+-][0-9]*$/.test(str)) {\n      return undefined;\n    }\n    return t`This field must be a number`;\n  };\n}\n\nexport function twilioPhoneNumber() {\n  return (value) => {\n    const phoneNumbers = Array.isArray(value) ? value : [value];\n    let error;\n    if (!error) {\n      phoneNumbers.forEach((v) => {\n        if (!/^\\s*(?:\\+?(\\d{1,3}))?[. (]*(\\d{7,12})$/.test(v)) {\n          error = plural(phoneNumbers.length, {\n            one: 'Please enter a valid phone number.',\n            other: 'Please enter valid phone numbers.',\n          });\n        }\n      });\n    }\n    return error;\n  };\n}\nexport function url() {\n  return (value) => {\n    if (!value) {\n      return undefined;\n    }\n    // URL regex from https://urlregex.com/\n    if (\n      // eslint-disable-next-line max-len\n      !/((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w\\-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)/.test(\n        value\n      )\n    ) {\n      return t`Please enter a valid URL`;\n    }\n    return undefined;\n  };\n}\n\nexport function combine(validators) {\n  return (value) => {\n    for (let i = 0; i < validators.length; i++) {\n      const validate = validators[i];\n      const error = validate ? validate(value) : null;\n      if (error) {\n        return error;\n      }\n    }\n    return undefined;\n  };\n}\n\nexport function regExp() {\n  return (value) => {\n    try {\n      RegExp(value);\n    } catch {\n      return t`This field must be a regular expression`;\n    }\n    return undefined;\n  };\n}\n\nexport function requiredPositiveInteger() {\n  return (value) => {\n    if (typeof value === 'number') {\n      if (!Number.isInteger(value)) {\n        return t`This field must be an integer`;\n      }\n      if (value < 1) {\n        return t`This field must be greater than 0`;\n      }\n    }\n    if (!value) {\n      return t`Select a value for this field`;\n    }\n    return undefined;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}