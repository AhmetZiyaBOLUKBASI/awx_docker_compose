{"ast":null,"code":"import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{i18n}from\"@lingui/core\";import React,{useState,useEffect,useCallback}from'react';import{Switch,Route,useParams}from'react-router-dom';import{JobTemplatesAPI,WorkflowJobTemplatesAPI}from'api';import ContentError from'components/ContentError';import AlertModal from'components/AlertModal';import ErrorDetail from'components/ErrorDetail';import useRequest,{useDismissableError}from'hooks/useRequest';import{SurveyList,SurveyQuestionAdd,SurveyQuestionEdit}from'./Survey';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function TemplateSurvey(_ref){var template=_ref.template,canEdit=_ref.canEdit;var _useState=useState(template.survey_enabled),_useState2=_slicedToArray(_useState,2),surveyEnabled=_useState2[0],setSurveyEnabled=_useState2[1];var _useParams=useParams(),templateType=_useParams.templateType,templateId=_useParams.id;var _useRequest=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _ref3,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(templateType==='workflow_job_template')){_context.next=6;break;}_context.next=3;return WorkflowJobTemplatesAPI.readSurvey(templateId);case 3:_context.t0=_context.sent;_context.next=9;break;case 6:_context.next=8;return JobTemplatesAPI.readSurvey(templateId);case 8:_context.t0=_context.sent;case 9:_ref3=_context.t0;data=_ref3.data;return _context.abrupt(\"return\",data);case 12:case\"end\":return _context.stop();}}},_callee);})),[templateId,templateType])),survey=_useRequest.result,fetchSurvey=_useRequest.request,isLoading=_useRequest.isLoading,loadingError=_useRequest.error,setSurvey=_useRequest.setValue;useEffect(function(){fetchSurvey();},[fetchSurvey]);var _useRequest2=useRequest(useCallback(/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(updatedSurvey){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(templateType==='workflow_job_template')){_context2.next=5;break;}_context2.next=3;return WorkflowJobTemplatesAPI.updateSurvey(templateId,updatedSurvey);case 3:_context2.next=7;break;case 5:_context2.next=7;return JobTemplatesAPI.updateSurvey(templateId,updatedSurvey);case 7:setSurvey(updatedSurvey);case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x){return _ref4.apply(this,arguments);};}(),[templateId,setSurvey,templateType])),updateSurvey=_useRequest2.request,updateError=_useRequest2.error,updateLoading=_useRequest2.isLoading;var updateSurveySpec=function updateSurveySpec(spec){updateSurvey({name:(survey===null||survey===void 0?void 0:survey.name)||'',description:(survey===null||survey===void 0?void 0:survey.description)||'',spec:spec});};var _useRequest3=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(templateType==='workflow_job_template')){_context3.next=5;break;}_context3.next=3;return WorkflowJobTemplatesAPI.destroySurvey(templateId);case 3:_context3.next=7;break;case 5:_context3.next=7;return JobTemplatesAPI.destroySurvey(templateId);case 7:setSurvey(null);case 8:case\"end\":return _context3.stop();}}},_callee3);})),[templateId,setSurvey,templateType])),deleteSurvey=_useRequest3.request,deleteError=_useRequest3.error;var _useRequest4=useRequest(useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(templateType==='workflow_job_template')){_context4.next=5;break;}_context4.next=3;return WorkflowJobTemplatesAPI.update(templateId,{survey_enabled:!surveyEnabled});case 3:_context4.next=7;break;case 5:_context4.next=7;return JobTemplatesAPI.update(templateId,{survey_enabled:!surveyEnabled});case 7:setSurveyEnabled(!surveyEnabled);case 8:case\"end\":return _context4.stop();}}},_callee4);})),[templateId,templateType,surveyEnabled])),toggleSurvey=_useRequest4.request,toggleError=_useRequest4.error;var _useDismissableError=useDismissableError(updateError||deleteError||toggleError),error=_useDismissableError.error,dismissError=_useDismissableError.dismissError;if(loadingError){return/*#__PURE__*/_jsx(ContentError,{error:loadingError});}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Switch,{children:[canEdit&&/*#__PURE__*/_jsx(Route,{path:\"/templates/:templateType/:id/survey/add\",children:/*#__PURE__*/_jsx(SurveyQuestionAdd,{survey:survey,updateSurvey:updateSurveySpec})}),canEdit&&/*#__PURE__*/_jsx(Route,{path:\"/templates/:templateType/:id/survey/edit\",children:/*#__PURE__*/_jsx(SurveyQuestionEdit,{survey:survey,updateSurvey:updateSurveySpec})}),/*#__PURE__*/_jsx(Route,{path:\"/templates/:templateType/:id/survey\",exact:true,children:/*#__PURE__*/_jsx(SurveyList,{isLoading:isLoading||updateLoading,survey:survey,surveyEnabled:surveyEnabled,toggleSurvey:toggleSurvey,updateSurvey:updateSurveySpec,deleteSurvey:deleteSurvey,canEdit:canEdit})})]}),error&&/*#__PURE__*/_jsxs(AlertModal,{isOpen:error,variant:\"error\",title:/*i18n*/i18n._(\"Error!\"),onClose:dismissError,children:[/*i18n*/i18n._(\"Failed to update survey.\"),/*#__PURE__*/_jsx(ErrorDetail,{error:error})]})]});}export default TemplateSurvey;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Template/TemplateSurvey.js"],"names":["React","useState","useEffect","useCallback","Switch","Route","useParams","JobTemplatesAPI","WorkflowJobTemplatesAPI","ContentError","AlertModal","ErrorDetail","useRequest","useDismissableError","SurveyList","SurveyQuestionAdd","SurveyQuestionEdit","TemplateSurvey","template","canEdit","survey_enabled","surveyEnabled","setSurveyEnabled","templateType","templateId","id","readSurvey","data","survey","result","fetchSurvey","request","isLoading","loadingError","error","setSurvey","setValue","updatedSurvey","updateSurvey","updateError","updateLoading","updateSurveySpec","spec","name","description","destroySurvey","deleteSurvey","deleteError","update","toggleSurvey","toggleError","dismissError"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Switch, Route, useParams } from 'react-router-dom';\n\nimport { t } from '@lingui/macro';\nimport { JobTemplatesAPI, WorkflowJobTemplatesAPI } from 'api';\nimport ContentError from 'components/ContentError';\nimport AlertModal from 'components/AlertModal';\nimport ErrorDetail from 'components/ErrorDetail';\nimport useRequest, { useDismissableError } from 'hooks/useRequest';\nimport { SurveyList, SurveyQuestionAdd, SurveyQuestionEdit } from './Survey';\n\nfunction TemplateSurvey({ template, canEdit }) {\n  const [surveyEnabled, setSurveyEnabled] = useState(template.survey_enabled);\n\n  const { templateType, id: templateId } = useParams();\n\n  const {\n    result: survey,\n    request: fetchSurvey,\n    isLoading,\n    error: loadingError,\n    setValue: setSurvey,\n  } = useRequest(\n    useCallback(async () => {\n      const { data } =\n        templateType === 'workflow_job_template'\n          ? await WorkflowJobTemplatesAPI.readSurvey(templateId)\n          : await JobTemplatesAPI.readSurvey(templateId);\n      return data;\n    }, [templateId, templateType])\n  );\n\n  useEffect(() => {\n    fetchSurvey();\n  }, [fetchSurvey]);\n\n  const {\n    request: updateSurvey,\n    error: updateError,\n    isLoading: updateLoading,\n  } = useRequest(\n    useCallback(\n      async (updatedSurvey) => {\n        if (templateType === 'workflow_job_template') {\n          await WorkflowJobTemplatesAPI.updateSurvey(templateId, updatedSurvey);\n        } else {\n          await JobTemplatesAPI.updateSurvey(templateId, updatedSurvey);\n        }\n        setSurvey(updatedSurvey);\n      },\n      [templateId, setSurvey, templateType]\n    )\n  );\n  const updateSurveySpec = (spec) => {\n    updateSurvey({\n      name: survey?.name || '',\n      description: survey?.description || '',\n      spec,\n    });\n  };\n\n  const { request: deleteSurvey, error: deleteError } = useRequest(\n    useCallback(async () => {\n      if (templateType === 'workflow_job_template') {\n        await WorkflowJobTemplatesAPI.destroySurvey(templateId);\n      } else {\n        await JobTemplatesAPI.destroySurvey(templateId);\n      }\n      setSurvey(null);\n    }, [templateId, setSurvey, templateType])\n  );\n\n  const { request: toggleSurvey, error: toggleError } = useRequest(\n    useCallback(async () => {\n      if (templateType === 'workflow_job_template') {\n        await WorkflowJobTemplatesAPI.update(templateId, {\n          survey_enabled: !surveyEnabled,\n        });\n      } else {\n        await JobTemplatesAPI.update(templateId, {\n          survey_enabled: !surveyEnabled,\n        });\n      }\n      setSurveyEnabled(!surveyEnabled);\n    }, [templateId, templateType, surveyEnabled])\n  );\n\n  const { error, dismissError } = useDismissableError(\n    updateError || deleteError || toggleError\n  );\n\n  if (loadingError) {\n    return <ContentError error={loadingError} />;\n  }\n  return (\n    <>\n      <Switch>\n        {canEdit && (\n          <Route path=\"/templates/:templateType/:id/survey/add\">\n            <SurveyQuestionAdd\n              survey={survey}\n              updateSurvey={updateSurveySpec}\n            />\n          </Route>\n        )}\n        {canEdit && (\n          <Route path=\"/templates/:templateType/:id/survey/edit\">\n            <SurveyQuestionEdit\n              survey={survey}\n              updateSurvey={updateSurveySpec}\n            />\n          </Route>\n        )}\n        <Route path=\"/templates/:templateType/:id/survey\" exact>\n          <SurveyList\n            isLoading={isLoading || updateLoading}\n            survey={survey}\n            surveyEnabled={surveyEnabled}\n            toggleSurvey={toggleSurvey}\n            updateSurvey={updateSurveySpec}\n            deleteSurvey={deleteSurvey}\n            canEdit={canEdit}\n          />\n        </Route>\n      </Switch>\n      {error && (\n        <AlertModal\n          isOpen={error}\n          variant=\"error\"\n          title={t`Error!`}\n          onClose={dismissError}\n        >\n          {t`Failed to update survey.`}\n          <ErrorDetail error={error} />\n        </AlertModal>\n      )}\n    </>\n  );\n}\n\nexport default TemplateSurvey;\n"]},"metadata":{},"sourceType":"module"}