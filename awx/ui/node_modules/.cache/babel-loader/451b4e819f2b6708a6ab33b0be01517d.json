{"ast":null,"code":"import _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { modifierPhases } from '../enums'; // source: https://stackoverflow.com/questions/49875255\n\n/**\n * @param modifiers\n */\n\nfunction order(modifiers) {\n  var map = new Map();\n  var visited = new Set();\n  var result = [];\n  modifiers.forEach(function (modifier) {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  /**\n   * @param modifier\n   */\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(_toConsumableArray(modifier.requires || []), _toConsumableArray(modifier.requiresIfExists || []));\n    requires.forEach(function (dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(function (modifier) {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n/**\n * @param modifiers\n */\n\n\nexport default function orderModifiers(modifiers) {\n  // order based on dependencies\n  var orderedModifiers = order(modifiers); // order based on phase\n\n  return modifierPhases.reduce(function (acc, phase) {\n    return acc.concat(orderedModifiers.filter(function (modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/utils/orderModifiers.ts"],"names":[],"mappings":";AAEA,SAAS,cAAT,QAA+B,UAA/B,C,CAEA;;AACA;;AAEG;;AACH,SAAS,KAAT,CAAe,SAAf,EAAwB;AACtB,MAAM,GAAG,GAAG,IAAI,GAAJ,EAAZ;AACA,MAAM,OAAO,GAAG,IAAI,GAAJ,EAAhB;AACA,MAAM,MAAM,GAAG,EAAf;AAEA,EAAA,SAAS,CAAC,OAAV,CAAkB,UAAA,QAAQ,EAAG;AAC3B,IAAA,GAAG,CAAC,GAAJ,CAAQ,QAAQ,CAAC,IAAjB,EAAuB,QAAvB;AACD,GAFD,EALsB,CAStB;;AACA;;AAEG;;AACH,WAAS,IAAT,CAAc,QAAd,EAA0C;AACxC,IAAA,OAAO,CAAC,GAAR,CAAY,QAAQ,CAAC,IAArB;AAEA,QAAM,QAAQ,gCAAQ,QAAQ,CAAC,QAAT,IAAqB,EAA7B,sBAAsC,QAAQ,CAAC,gBAAT,IAA6B,EAAnE,EAAd;AAEA,IAAA,QAAQ,CAAC,OAAT,CAAiB,UAAA,GAAG,EAAG;AACrB,UAAI,CAAC,OAAO,CAAC,GAAR,CAAY,GAAZ,CAAL,EAAuB;AACrB,YAAM,WAAW,GAAG,GAAG,CAAC,GAAJ,CAAQ,GAAR,CAApB;;AAEA,YAAI,WAAJ,EAAiB;AACf,UAAA,IAAI,CAAC,WAAD,CAAJ;AACD;AACF;AACF,KARD;AAUA,IAAA,MAAM,CAAC,IAAP,CAAY,QAAZ;AACD;;AAED,EAAA,SAAS,CAAC,OAAV,CAAkB,UAAA,QAAQ,EAAG;AAC3B,QAAI,CAAC,OAAO,CAAC,GAAR,CAAY,QAAQ,CAAC,IAArB,CAAL,EAAiC;AAC/B;AACA,MAAA,IAAI,CAAC,QAAD,CAAJ;AACD;AACF,GALD;AAOA,SAAO,MAAP;AACD;AAED;;AAEG;;;AACH,eAAc,SAAU,cAAV,CAAyB,SAAzB,EAAwD;AACpE;AACA,MAAM,gBAAgB,GAAG,KAAK,CAAC,SAAD,CAA9B,CAFoE,CAIpE;;AACA,SAAO,cAAc,CAAC,MAAf,CACL,UAAC,GAAD,EAAM,KAAN;AAAA,WAAgB,GAAG,CAAC,MAAJ,CAAW,gBAAgB,CAAC,MAAjB,CAAwB,UAAA,QAAQ;AAAA,aAAI,QAAQ,CAAC,KAAT,KAAmB,KAAvB;AAAA,KAAhC,CAAX,CAAhB;AAAA,GADK,EAEL,EAFK,CAAP;AAID","sourcesContent":["// @ts-nocheck\nimport { Modifier } from '../types';\nimport { modifierPhases } from '../enums';\n\n// source: https://stackoverflow.com/questions/49875255\n/**\n * @param modifiers\n */\nfunction order(modifiers) {\n  const map = new Map();\n  const visited = new Set();\n  const result = [];\n\n  modifiers.forEach(modifier => {\n    map.set(modifier.name, modifier);\n  });\n\n  // On visiting object, check for its dependencies and visit them recursively\n  /**\n   * @param modifier\n   */\n  function sort(modifier: Modifier<any, any>) {\n    visited.add(modifier.name);\n\n    const requires = [...(modifier.requires || []), ...(modifier.requiresIfExists || [])];\n\n    requires.forEach(dep => {\n      if (!visited.has(dep)) {\n        const depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n\n    result.push(modifier);\n  }\n\n  modifiers.forEach(modifier => {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n\n  return result;\n}\n\n/**\n * @param modifiers\n */\nexport default function orderModifiers(modifiers: Modifier<any, any>[]): Modifier<any, any>[] {\n  // order based on dependencies\n  const orderedModifiers = order(modifiers);\n\n  // order based on phase\n  return modifierPhases.reduce(\n    (acc, phase) => acc.concat(orderedModifiers.filter(modifier => modifier.phase === phase)),\n    []\n  );\n}\n"]},"metadata":{},"sourceType":"module"}