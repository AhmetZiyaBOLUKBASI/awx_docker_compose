{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { ActionsColumn } from '../../ActionsColumn';\n\nvar resolveOrDefault = function resolveOrDefault(resolver, defaultValue, rowData, extraData) {\n  return typeof resolver === 'function' ? resolver(rowData, extraData) : defaultValue;\n};\n\nexport var cellActions = function cellActions(actions, actionResolver, areActionsDisabled) {\n  return function (label, _ref) {\n    var rowData = _ref.rowData,\n        column = _ref.column,\n        rowIndex = _ref.rowIndex,\n        columnIndex = _ref.columnIndex,\n        _ref$column$extraPara = _ref.column.extraParams,\n        dropdownPosition = _ref$column$extraPara.dropdownPosition,\n        dropdownDirection = _ref$column$extraPara.dropdownDirection,\n        actionsToggle = _ref$column$extraPara.actionsToggle,\n        property = _ref.property;\n    var extraData = {\n      rowIndex: rowIndex,\n      columnIndex: columnIndex,\n      column: column,\n      property: property\n    };\n    var resolvedActions = resolveOrDefault(actionResolver, actions, rowData, extraData);\n    var resolvedIsDisabled = resolveOrDefault(areActionsDisabled, rowData && rowData.disableActions, rowData, extraData);\n    var renderProps = resolvedActions && resolvedActions.length > 0 ? {\n      children: React.createElement(ActionsColumn, {\n        items: resolvedActions,\n        dropdownPosition: dropdownPosition,\n        dropdownDirection: dropdownDirection,\n        isDisabled: resolvedIsDisabled,\n        rowData: rowData,\n        extraData: extraData,\n        actionsToggle: actionsToggle\n      }, label)\n    } : {};\n    return Object.assign({\n      className: css(styles.tableAction),\n      style: {\n        paddingRight: 0\n      },\n      isVisible: true\n    }, renderProps);\n  };\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/utils/decorators/cellActions.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,qDAAnB;AACA,SAAS,aAAT,QAA8B,qBAA9B;;AAaA,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CACvB,QADuB,EAEvB,YAFuB,EAGvB,OAHuB,EAIvB,SAJuB;AAAA,SAKnB,OAAO,QAAP,KAAoB,UAApB,GAAiC,QAAQ,CAAC,OAAD,EAAU,SAAV,CAAzC,GAAgE,YAL7C;AAAA,CAAzB;;AAOA,OAAO,IAAM,WAAW,GAAG,SAAd,WAAc,CACzB,OADyB,EAEzB,cAFyB,EAGzB,kBAHyB;AAAA,SAIV,UACf,KADe,QAYb;AAAA,QATA,OASA,QATA,OASA;AAAA,QARA,MAQA,QARA,MAQA;AAAA,QAPA,QAOA,QAPA,QAOA;AAAA,QANA,WAMA,QANA,WAMA;AAAA,qCALA,MAKA,CAJE,WAIF;AAAA,QAJiB,gBAIjB,yBAJiB,gBAIjB;AAAA,QAJmC,iBAInC,yBAJmC,iBAInC;AAAA,QAJsD,aAItD,yBAJsD,aAItD;AAAA,QAFA,QAEA,QAFA,QAEA;AACF,QAAM,SAAS,GAAG;AAChB,MAAA,QAAQ,EAAR,QADgB;AAEhB,MAAA,WAAW,EAAX,WAFgB;AAGhB,MAAA,MAAM,EAAN,MAHgB;AAIhB,MAAA,QAAQ,EAAR;AAJgB,KAAlB;AAMA,QAAM,eAAe,GAAG,gBAAgB,CAAC,cAAD,EAAiB,OAAjB,EAA0B,OAA1B,EAAmC,SAAnC,CAAxC;AACA,QAAM,kBAAkB,GAAG,gBAAgB,CACzC,kBADyC,EAEzC,OAAO,IAAI,OAAO,CAAC,cAFsB,EAGzC,OAHyC,EAIzC,SAJyC,CAA3C;AAOA,QAAM,WAAW,GACf,eAAe,IAAK,eAAsB,CAAC,MAAvB,GAAgC,CAApD,GACI;AACE,MAAA,QAAQ,EACN,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc;AACZ,QAAA,KAAK,EAAE,eADK;AAEZ,QAAA,gBAAgB,EAAE,gBAFN;AAGZ,QAAA,iBAAiB,EAAE,iBAHP;AAIZ,QAAA,UAAU,EAAE,kBAJA;AAKZ,QAAA,OAAO,EAAE,OALG;AAMZ,QAAA,SAAS,EAAE,SANC;AAOZ,QAAA,aAAa,EAAE;AAPH,OAAd,EASG,KATH;AAFJ,KADJ,GAgBI,EAjBN;AAmBA,WAAA,MAAA,CAAA,MAAA,CAAA;AACE,MAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,WAAR,CADhB;AAEE,MAAA,KAAK,EAAE;AAAE,QAAA,YAAY,EAAE;AAAhB,OAFT;AAGE,MAAA,SAAS,EAAE;AAHb,KAAA,EAIK,WAJL,CAAA;AAMD,GAxD0B;AAAA,CAApB","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { ActionsColumn } from '../../ActionsColumn';\nimport {\n  IActions,\n  IAction,\n  IActionsResolver,\n  IAreActionsDisabled,\n  IExtra,\n  IExtraData,\n  IFormatterValueType,\n  IRowData,\n  ITransform\n} from '../../TableTypes';\n\nconst resolveOrDefault = (\n  resolver: IActionsResolver | IAreActionsDisabled,\n  defaultValue: IActions | boolean,\n  rowData: IRowData,\n  extraData: IExtraData\n) => (typeof resolver === 'function' ? resolver(rowData, extraData) : defaultValue);\n\nexport const cellActions = (\n  actions: IActions,\n  actionResolver: IActionsResolver,\n  areActionsDisabled: IAreActionsDisabled\n): ITransform => (\n  label: IFormatterValueType,\n  {\n    rowData,\n    column,\n    rowIndex,\n    columnIndex,\n    column: {\n      extraParams: { dropdownPosition, dropdownDirection, actionsToggle }\n    },\n    property\n  }: IExtra\n) => {\n  const extraData = {\n    rowIndex,\n    columnIndex,\n    column,\n    property\n  };\n  const resolvedActions = resolveOrDefault(actionResolver, actions, rowData, extraData) as IAction[];\n  const resolvedIsDisabled = resolveOrDefault(\n    areActionsDisabled,\n    rowData && rowData.disableActions,\n    rowData,\n    extraData\n  ) as boolean;\n\n  const renderProps =\n    resolvedActions && (resolvedActions as []).length > 0\n      ? {\n          children: (\n            <ActionsColumn\n              items={resolvedActions}\n              dropdownPosition={dropdownPosition}\n              dropdownDirection={dropdownDirection}\n              isDisabled={resolvedIsDisabled}\n              rowData={rowData}\n              extraData={extraData}\n              actionsToggle={actionsToggle}\n            >\n              {label as React.ReactNode}\n            </ActionsColumn>\n          )\n        }\n      : {};\n\n  return {\n    className: css(styles.tableAction),\n    style: { paddingRight: 0 },\n    isVisible: true,\n    ...renderProps\n  };\n};\n"]},"metadata":{},"sourceType":"module"}