{"ast":null,"code":"import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{i18n}from\"@lingui/core\";import React,{useCallback}from'react';import{func,shape}from'prop-types';import{Formik}from'formik';import{Button,Form,FormGroup,Modal}from'@patternfly/react-core';import{CredentialsAPI,CredentialTypesAPI}from'api';import AnsibleSelect from'components/AnsibleSelect';import FormField from'components/FormField';import{FormFullWidthLayout}from'components/FormLayout';import Popover from'components/Popover';import{required}from'util/validators';import useRequest from'hooks/useRequest';import{CredentialPluginTestAlert}from'./CredentialPlugins';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ExternalTestModal(_ref){var credential=_ref.credential,credentialType=_ref.credentialType,credentialFormValues=_ref.credentialFormValues,_onClose=_ref.onClose;var _useRequest=useRequest(useCallback(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(values){var payload;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:payload={inputs:credentialType.inputs.fields.reduce(function(filteredInputs,field){filteredInputs[field.id]=credentialFormValues.inputs[field.id];return filteredInputs;},{}),metadata:values};if(!(credential&&credential.credential_type===credentialType.id)){_context.next=3;break;}return _context.abrupt(\"return\",CredentialsAPI.test(credential.id,payload));case 3:return _context.abrupt(\"return\",CredentialTypesAPI.test(credentialType.id,payload));case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}(),[credential,credentialType.id,credentialType.inputs.fields,credentialFormValues.inputs]),null),testPluginSuccess=_useRequest.result,testPluginError=_useRequest.error,testPluginMetadata=_useRequest.request;var handleTest=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return testPluginMetadata(values);case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function handleTest(_x2){return _ref3.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Formik,{initialValues:credentialType.inputs.metadata.reduce(function(initialValues,field){if(field.type==='string'&&field.choices){initialValues[field.id]=field.default||field.choices[0];}else{initialValues[field.id]='';}return initialValues;},{}),onSubmit:function onSubmit(values){return handleTest(values);},children:function children(_ref4){var handleSubmit=_ref4.handleSubmit,setFieldValue=_ref4.setFieldValue;return/*#__PURE__*/_jsx(Modal,{title:/*i18n*/i18n._(\"Test External Credential\"),isOpen:true,onClose:function onClose(){return _onClose();},variant:\"small\",actions:[/*#__PURE__*/_jsx(Button,{ouiaId:\"external-test-modal-run-button\",id:\"run-external-credential-test\",variant:\"primary\",onClick:function onClick(){return handleSubmit();},children:/*i18n*/i18n._(\"Run\")},\"confirm\"),/*#__PURE__*/_jsx(Button,{ouiaId:\"external-test-modal-cancel-button\",id:\"cancel-external-credential-test\",variant:\"link\",onClick:function onClick(){return _onClose();},children:/*i18n*/i18n._(\"Cancel\")},\"cancel\")],children:/*#__PURE__*/_jsx(Form,{children:/*#__PURE__*/_jsx(FormFullWidthLayout,{children:credentialType.inputs.metadata.map(function(field){var _credentialType$input;var isRequired=(_credentialType$input=credentialType.inputs)===null||_credentialType$input===void 0?void 0:_credentialType$input.required.includes(field.id);if(field.type==='string'){if(field.choices){return/*#__PURE__*/_jsx(FormGroup,{fieldId:\"credential-\".concat(field.id),label:field.label,labelIcon:field.help_text&&/*#__PURE__*/_jsx(Popover,{content:field.help_text}),isRequired:isRequired,children:/*#__PURE__*/_jsx(AnsibleSelect,{name:field.id,value:field.default,id:\"credential-\".concat(field.id),data:field.choices.map(function(choice){return{value:choice,key:choice,label:choice};}),onChange:function onChange(event,value){setFieldValue(field.id,value);},validate:isRequired?required(null):null})},field.id);}return/*#__PURE__*/_jsx(FormField,{id:\"credential-\".concat(field.id),label:field.label,tooltip:field.help_text,name:field.id,type:field.multiline?'textarea':'text',isRequired:isRequired,validate:isRequired?required(null):null},field.id);}return null;})})})});}}),/*#__PURE__*/_jsx(CredentialPluginTestAlert,{credentialName:credentialFormValues.name,successResponse:testPluginSuccess,errorResponse:testPluginError})]});}ExternalTestModal.propType={credential:shape({}),credentialType:shape({}).isRequired,credentialFormValues:shape({}).isRequired,onClose:func.isRequired};ExternalTestModal.defaultProps={credential:null};export default ExternalTestModal;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Credential/shared/ExternalTestModal.js"],"names":["React","useCallback","func","shape","Formik","Button","Form","FormGroup","Modal","CredentialsAPI","CredentialTypesAPI","AnsibleSelect","FormField","FormFullWidthLayout","Popover","required","useRequest","CredentialPluginTestAlert","ExternalTestModal","credential","credentialType","credentialFormValues","onClose","values","payload","inputs","fields","reduce","filteredInputs","field","id","metadata","credential_type","test","testPluginSuccess","result","testPluginError","error","testPluginMetadata","request","handleTest","initialValues","type","choices","default","handleSubmit","setFieldValue","map","isRequired","includes","label","help_text","choice","value","key","event","multiline","name","propType","defaultProps"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\n\nimport { t } from '@lingui/macro';\nimport { func, shape } from 'prop-types';\nimport { Formik } from 'formik';\nimport { Button, Form, FormGroup, Modal } from '@patternfly/react-core';\nimport { CredentialsAPI, CredentialTypesAPI } from 'api';\nimport AnsibleSelect from 'components/AnsibleSelect';\nimport FormField from 'components/FormField';\nimport { FormFullWidthLayout } from 'components/FormLayout';\nimport Popover from 'components/Popover';\nimport { required } from 'util/validators';\nimport useRequest from 'hooks/useRequest';\nimport { CredentialPluginTestAlert } from './CredentialPlugins';\n\nfunction ExternalTestModal({\n  credential,\n  credentialType,\n  credentialFormValues,\n  onClose,\n}) {\n  const {\n    result: testPluginSuccess,\n    error: testPluginError,\n    request: testPluginMetadata,\n  } = useRequest(\n    useCallback(\n      async (values) => {\n        const payload = {\n          inputs: credentialType.inputs.fields.reduce(\n            (filteredInputs, field) => {\n              filteredInputs[field.id] = credentialFormValues.inputs[field.id];\n              return filteredInputs;\n            },\n            {}\n          ),\n          metadata: values,\n        };\n\n        if (credential && credential.credential_type === credentialType.id) {\n          return CredentialsAPI.test(credential.id, payload);\n        }\n        return CredentialTypesAPI.test(credentialType.id, payload);\n      },\n      [\n        credential,\n        credentialType.id,\n        credentialType.inputs.fields,\n        credentialFormValues.inputs,\n      ]\n    ),\n    null\n  );\n\n  const handleTest = async (values) => {\n    await testPluginMetadata(values);\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={credentialType.inputs.metadata.reduce(\n          (initialValues, field) => {\n            if (field.type === 'string' && field.choices) {\n              initialValues[field.id] = field.default || field.choices[0];\n            } else {\n              initialValues[field.id] = '';\n            }\n            return initialValues;\n          },\n          {}\n        )}\n        onSubmit={(values) => handleTest(values)}\n      >\n        {({ handleSubmit, setFieldValue }) => (\n          <Modal\n            title={t`Test External Credential`}\n            isOpen\n            onClose={() => onClose()}\n            variant=\"small\"\n            actions={[\n              <Button\n                ouiaId=\"external-test-modal-run-button\"\n                id=\"run-external-credential-test\"\n                key=\"confirm\"\n                variant=\"primary\"\n                onClick={() => handleSubmit()}\n              >\n                {t`Run`}\n              </Button>,\n              <Button\n                ouiaId=\"external-test-modal-cancel-button\"\n                id=\"cancel-external-credential-test\"\n                key=\"cancel\"\n                variant=\"link\"\n                onClick={() => onClose()}\n              >\n                {t`Cancel`}\n              </Button>,\n            ]}\n          >\n            <Form>\n              <FormFullWidthLayout>\n                {credentialType.inputs.metadata.map((field) => {\n                  const isRequired = credentialType.inputs?.required.includes(\n                    field.id\n                  );\n                  if (field.type === 'string') {\n                    if (field.choices) {\n                      return (\n                        <FormGroup\n                          key={field.id}\n                          fieldId={`credential-${field.id}`}\n                          label={field.label}\n                          labelIcon={\n                            field.help_text && (\n                              <Popover content={field.help_text} />\n                            )\n                          }\n                          isRequired={isRequired}\n                        >\n                          <AnsibleSelect\n                            name={field.id}\n                            value={field.default}\n                            id={`credential-${field.id}`}\n                            data={field.choices.map((choice) => ({\n                              value: choice,\n                              key: choice,\n                              label: choice,\n                            }))}\n                            onChange={(event, value) => {\n                              setFieldValue(field.id, value);\n                            }}\n                            validate={isRequired ? required(null) : null}\n                          />\n                        </FormGroup>\n                      );\n                    }\n\n                    return (\n                      <FormField\n                        key={field.id}\n                        id={`credential-${field.id}`}\n                        label={field.label}\n                        tooltip={field.help_text}\n                        name={field.id}\n                        type={field.multiline ? 'textarea' : 'text'}\n                        isRequired={isRequired}\n                        validate={isRequired ? required(null) : null}\n                      />\n                    );\n                  }\n\n                  return null;\n                })}\n              </FormFullWidthLayout>\n            </Form>\n          </Modal>\n        )}\n      </Formik>\n      <CredentialPluginTestAlert\n        credentialName={credentialFormValues.name}\n        successResponse={testPluginSuccess}\n        errorResponse={testPluginError}\n      />\n    </>\n  );\n}\n\nExternalTestModal.propType = {\n  credential: shape({}),\n  credentialType: shape({}).isRequired,\n  credentialFormValues: shape({}).isRequired,\n  onClose: func.isRequired,\n};\n\nExternalTestModal.defaultProps = {\n  credential: null,\n};\n\nexport default ExternalTestModal;\n"]},"metadata":{},"sourceType":"module"}