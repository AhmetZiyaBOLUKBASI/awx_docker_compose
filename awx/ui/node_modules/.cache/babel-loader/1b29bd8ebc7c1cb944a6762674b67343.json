{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{i18n}from\"@lingui/core\";/* eslint-disable react/jsx-no-useless-fragment */import React,{useState,useRef,useEffect}from'react';import{Dropdown,DropdownPosition}from'@patternfly/react-core';import{useKebabifiedMenu}from'contexts/Kebabified';import{ToolbarAddButton}from'../PaginatedTable';import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function AddDropDownButton(_ref){var dropdownItems=_ref.dropdownItems,ouiaId=_ref.ouiaId;var _useKebabifiedMenu=useKebabifiedMenu(),isKebabified=_useKebabifiedMenu.isKebabified;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isOpen=_useState2[0],setIsOpen=_useState2[1];var element=useRef(null);useEffect(function(){var toggle=function toggle(e){var _element$current;if(!isKebabified&&(!element||!((_element$current=element.current)!==null&&_element$current!==void 0&&_element$current.contains(e.target)))){setIsOpen(false);}};document.addEventListener('click',toggle,false);return function(){document.removeEventListener('click',toggle);};},[isKebabified]);if(isKebabified){return/*#__PURE__*/_jsx(_Fragment,{children:dropdownItems});}return/*#__PURE__*/_jsx(\"div\",{ref:element,children:/*#__PURE__*/_jsx(Dropdown,{isPlain:true,isOpen:isOpen,position:DropdownPosition.right,toggle:/*#__PURE__*/_jsx(ToolbarAddButton,{ouiaId:ouiaId,\"aria-label\":/*i18n*/i18n._(\"Add\"),showToggleIndicator:true,onClick:function onClick(){return setIsOpen(!isOpen);}}),dropdownItems:dropdownItems,ouiaId:\"add-dropdown\"})},\"add\");}export{AddDropDownButton as _AddDropDownButton};export default AddDropDownButton;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/AddDropDownButton/AddDropDownButton.js"],"names":["React","useState","useRef","useEffect","Dropdown","DropdownPosition","useKebabifiedMenu","ToolbarAddButton","AddDropDownButton","dropdownItems","ouiaId","isKebabified","isOpen","setIsOpen","element","toggle","e","current","contains","target","document","addEventListener","removeEventListener","right","_AddDropDownButton"],"mappings":"sIAAA,kDACA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,MAA1B,CAAkCC,SAAlC,KAAmD,OAAnD,CAGA,OAASC,QAAT,CAAmBC,gBAAnB,KAA2C,wBAA3C,CACA,OAASC,iBAAT,KAAkC,qBAAlC,CACA,OAASC,gBAAT,KAAiC,mBAAjC,C,gGAEA,QAASC,CAAAA,iBAAT,MAAsD,IAAzBC,CAAAA,aAAyB,MAAzBA,aAAyB,CAAVC,MAAU,MAAVA,MAAU,CACpD,uBAAyBJ,iBAAiB,EAA1C,CAAQK,YAAR,oBAAQA,YAAR,CACA,cAA4BV,QAAQ,CAAC,KAAD,CAApC,wCAAOW,MAAP,eAAeC,SAAf,eACA,GAAMC,CAAAA,OAAO,CAAGZ,MAAM,CAAC,IAAD,CAAtB,CAEAC,SAAS,CAAC,UAAM,CACd,GAAMY,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,CAAD,CAAO,sBACpB,GAAI,CAACL,YAAD,GAAkB,CAACG,OAAD,EAAY,oBAACA,OAAO,CAACG,OAAT,qCAAC,iBAAiBC,QAAjB,CAA0BF,CAAC,CAACG,MAA5B,CAAD,CAA9B,CAAJ,CAAyE,CACvEN,SAAS,CAAC,KAAD,CAAT,CACD,CACF,CAJD,CAMAO,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmCN,MAAnC,CAA2C,KAA3C,EACA,MAAO,WAAM,CACXK,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,CAAsCP,MAAtC,EACD,CAFD,CAGD,CAXQ,CAWN,CAACJ,YAAD,CAXM,CAAT,CAaA,GAAIA,YAAJ,CAAkB,CAChB,mBAAO,yBAAGF,aAAH,EAAP,CACD,CAED,mBACE,YAAK,GAAG,CAAEK,OAAV,uBACE,KAAC,QAAD,EACE,OAAO,KADT,CAEE,MAAM,CAAEF,MAFV,CAGE,QAAQ,CAAEP,gBAAgB,CAACkB,KAH7B,CAIE,MAAM,cACJ,KAAC,gBAAD,EACE,MAAM,CAAEb,MADV,CAEE,qBAAY,aAFd,CAGE,mBAAmB,KAHrB,CAIE,OAAO,CAAE,yBAAMG,CAAAA,SAAS,CAAC,CAACD,MAAF,CAAf,EAJX,EALJ,CAYE,aAAa,CAAEH,aAZjB,CAaE,MAAM,CAAC,cAbT,EADF,EAAuB,KAAvB,CADF,CAmBD,CAMD,OAASD,iBAAiB,GAAIgB,CAAAA,kBAA9B,EACA,cAAehB,CAAAA,iBAAf","sourcesContent":["/* eslint-disable react/jsx-no-useless-fragment */\nimport React, { useState, useRef, useEffect } from 'react';\nimport { t } from '@lingui/macro';\nimport PropTypes from 'prop-types';\nimport { Dropdown, DropdownPosition } from '@patternfly/react-core';\nimport { useKebabifiedMenu } from 'contexts/Kebabified';\nimport { ToolbarAddButton } from '../PaginatedTable';\n\nfunction AddDropDownButton({ dropdownItems, ouiaId }) {\n  const { isKebabified } = useKebabifiedMenu();\n  const [isOpen, setIsOpen] = useState(false);\n  const element = useRef(null);\n\n  useEffect(() => {\n    const toggle = (e) => {\n      if (!isKebabified && (!element || !element.current?.contains(e.target))) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('click', toggle, false);\n    return () => {\n      document.removeEventListener('click', toggle);\n    };\n  }, [isKebabified]);\n\n  if (isKebabified) {\n    return <>{dropdownItems}</>;\n  }\n\n  return (\n    <div ref={element} key=\"add\">\n      <Dropdown\n        isPlain\n        isOpen={isOpen}\n        position={DropdownPosition.right}\n        toggle={\n          <ToolbarAddButton\n            ouiaId={ouiaId}\n            aria-label={t`Add`}\n            showToggleIndicator\n            onClick={() => setIsOpen(!isOpen)}\n          />\n        }\n        dropdownItems={dropdownItems}\n        ouiaId=\"add-dropdown\"\n      />\n    </div>\n  );\n}\n\nAddDropDownButton.propTypes = {\n  dropdownItems: PropTypes.arrayOf(PropTypes.element.isRequired).isRequired,\n};\n\nexport { AddDropDownButton as _AddDropDownButton };\nexport default AddDropDownButton;\n"]},"metadata":{},"sourceType":"module"}