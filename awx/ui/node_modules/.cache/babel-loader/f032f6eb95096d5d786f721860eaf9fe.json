{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { ToolbarExpandableContent } from './ToolbarExpandableContent';\nimport { PageContext } from '../Page/Page';\nexport var ToolbarContent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarContent, _React$Component);\n\n  var _super = _createSuper(ToolbarContent);\n\n  function ToolbarContent() {\n    var _this;\n\n    _classCallCheck(this, ToolbarContent);\n\n    _this = _super.apply(this, arguments);\n    _this.expandableContentRef = React.createRef();\n    _this.chipContainerRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(ToolbarContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          className = _a.className,\n          children = _a.children,\n          isExpanded = _a.isExpanded,\n          toolbarId = _a.toolbarId,\n          visibility = _a.visibility,\n          visiblity = _a.visiblity,\n          alignment = _a.alignment,\n          clearAllFilters = _a.clearAllFilters,\n          showClearFiltersButton = _a.showClearFiltersButton,\n          clearFiltersButtonText = _a.clearFiltersButtonText,\n          props = __rest(_a, [\"className\", \"children\", \"isExpanded\", \"toolbarId\", \"visibility\", \"visiblity\", \"alignment\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\"]);\n\n      if (visiblity !== undefined) {\n        // eslint-disable-next-line no-console\n        console.warn('The ToolbarContent visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n      }\n\n      return React.createElement(PageContext.Consumer, null, function (_ref) {\n        var width = _ref.width,\n            getBreakpoint = _ref.getBreakpoint;\n        return React.createElement(\"div\", Object.assign({\n          className: css(styles.toolbarContent, formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), className)\n        }, props), React.createElement(ToolbarContext.Consumer, null, function (_ref2) {\n          var clearAllFiltersContext = _ref2.clearAllFilters,\n              clearFiltersButtonContext = _ref2.clearFiltersButtonText,\n              showClearFiltersButtonContext = _ref2.showClearFiltersButton,\n              toolbarIdContext = _ref2.toolbarId;\n          var expandableContentId = \"\".concat(toolbarId || toolbarIdContext, \"-expandable-content-\").concat(ToolbarContent.currentId++);\n          return React.createElement(ToolbarContentContext.Provider, {\n            value: {\n              expandableContentRef: _this2.expandableContentRef,\n              expandableContentId: expandableContentId,\n              chipContainerRef: _this2.chipContainerRef\n            }\n          }, React.createElement(\"div\", {\n            className: css(styles.toolbarContentSection)\n          }, children), React.createElement(ToolbarExpandableContent, {\n            id: expandableContentId,\n            isExpanded: isExpanded,\n            expandableContentRef: _this2.expandableContentRef,\n            chipContainerRef: _this2.chipContainerRef,\n            clearAllFilters: clearAllFilters || clearAllFiltersContext,\n            showClearFiltersButton: showClearFiltersButton || showClearFiltersButtonContext,\n            clearFiltersButtonText: clearFiltersButtonText || clearFiltersButtonContext\n          }));\n        }));\n      });\n    }\n  }]);\n\n  return ToolbarContent;\n}(React.Component);\nToolbarContent.displayName = 'ToolbarContent';\nToolbarContent.currentId = 0;\nToolbarContent.defaultProps = {\n  isExpanded: false,\n  showClearFiltersButton: false\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarContent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { ToolbarExpandableContent } from './ToolbarExpandableContent';\nimport { PageContext } from '../Page/Page';\n\nexport interface ToolbarContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Classes applied to root element of the data toolbar content row */\n  className?: string;\n  /** Visibility at various breakpoints. */\n  visibility?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** @deprecated prop misspelled */\n  visiblity?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** Alignment at various breakpoints. */\n  alignment?: {\n    default?: 'alignRight' | 'alignLeft';\n    md?: 'alignRight' | 'alignLeft';\n    lg?: 'alignRight' | 'alignLeft';\n    xl?: 'alignRight' | 'alignLeft';\n    '2xl'?: 'alignRight' | 'alignLeft';\n  };\n  /** Content to be rendered as children of the content row */\n  children?: React.ReactNode;\n  /** Flag indicating if a data toolbar toggle group's expandable content is expanded */\n  isExpanded?: boolean;\n  /** Optional callback for clearing all filters in the toolbar */\n  clearAllFilters?: () => void;\n  /** Flag indicating that the clear all filters button should be visible */\n  showClearFiltersButton?: boolean;\n  /** Text to display in the clear all filters button */\n  clearFiltersButtonText?: string;\n  /** Id of the parent Toolbar component */\n  toolbarId?: string;\n}\n\nexport class ToolbarContent extends React.Component<ToolbarContentProps> {\n  static displayName = 'ToolbarContent';\n  private expandableContentRef = React.createRef<HTMLDivElement>();\n  private chipContainerRef = React.createRef<HTMLDivElement>();\n  private static currentId = 0;\n\n  static defaultProps: ToolbarContentProps = {\n    isExpanded: false,\n    showClearFiltersButton: false\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      isExpanded,\n      toolbarId,\n      visibility,\n      visiblity,\n      alignment,\n      clearAllFilters,\n      showClearFiltersButton,\n      clearFiltersButtonText,\n      ...props\n    } = this.props;\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'The ToolbarContent visiblity prop has been deprecated. ' +\n          'Please use the correctly spelled visibility prop instead.'\n      );\n    }\n\n    return (\n      <PageContext.Consumer>\n        {({ width, getBreakpoint }) => (\n          <div\n            className={css(\n              styles.toolbarContent,\n              formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)),\n              formatBreakpointMods(alignment, styles, '', getBreakpoint(width)),\n              className\n            )}\n            {...props}\n          >\n            <ToolbarContext.Consumer>\n              {({\n                clearAllFilters: clearAllFiltersContext,\n                clearFiltersButtonText: clearFiltersButtonContext,\n                showClearFiltersButton: showClearFiltersButtonContext,\n                toolbarId: toolbarIdContext\n              }) => {\n                const expandableContentId = `${toolbarId ||\n                  toolbarIdContext}-expandable-content-${ToolbarContent.currentId++}`;\n                return (\n                  <ToolbarContentContext.Provider\n                    value={{\n                      expandableContentRef: this.expandableContentRef,\n                      expandableContentId,\n                      chipContainerRef: this.chipContainerRef\n                    }}\n                  >\n                    <div className={css(styles.toolbarContentSection)}>{children}</div>\n                    <ToolbarExpandableContent\n                      id={expandableContentId}\n                      isExpanded={isExpanded}\n                      expandableContentRef={this.expandableContentRef}\n                      chipContainerRef={this.chipContainerRef}\n                      clearAllFilters={clearAllFilters || clearAllFiltersContext}\n                      showClearFiltersButton={showClearFiltersButton || showClearFiltersButtonContext}\n                      clearFiltersButtonText={clearFiltersButtonText || clearFiltersButtonContext}\n                    />\n                  </ToolbarContentContext.Provider>\n                );\n              }}\n            </ToolbarContext.Consumer>\n          </div>\n        )}\n      </PageContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}