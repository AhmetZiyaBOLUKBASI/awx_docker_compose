{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{i18n}from\"@lingui/core\";import React from'react';import{useField}from'formik';import StepName from'components/LaunchPrompt/steps/StepName';import{stringIsUUID}from'util/strings';import NodeTypeStep from'./NodeTypeStep';import{jsx as _jsx}from\"react/jsx-runtime\";var STEP_ID='nodeType';export default function useNodeTypeStep(nodeToEdit){var _useField=useField('nodeType'),_useField2=_slicedToArray(_useField,2),meta=_useField2[1];var _useField3=useField('approvalName'),_useField4=_slicedToArray(_useField3,1),approvalNameField=_useField4[0];var _useField5=useField('nodeType'),_useField6=_slicedToArray(_useField5,2),nodeTypeField=_useField6[0];var _useField7=useField('identifier'),_useField8=_slicedToArray(_useField7,2),identifierMeta=_useField8[1];var _useField9=useField({name:'nodeResource',validate:function validate(value){if((value===null||value===void 0?void 0:value.type)==='job_template'&&(!(value!==null&&value!==void 0&&value.project)||(value===null||value===void 0?void 0:value.project)===null||(!(value!==null&&value!==void 0&&value.inventory)||(value===null||value===void 0?void 0:value.inventory)===null)&&!(value!==null&&value!==void 0&&value.ask_inventory_on_launch))){return(/*i18n*/i18n._(\"Job Templates with a missing inventory or project cannot be selected when creating or editing nodes.  Select another template or fix the missing fields to proceed.\"));}return undefined;}}),_useField10=_slicedToArray(_useField9,2),nodeResourceField=_useField10[0],nodeResourceMeta=_useField10[1];var formError=!!meta.error||!!nodeResourceMeta.error||identifierMeta.error;return{step:getStep(nodeTypeField,approvalNameField,nodeResourceField,formError,nodeToEdit),initialValues:getInitialValues(),isReady:true,contentError:null,hasError:formError,setTouched:function setTouched(setFieldTouched){setFieldTouched('nodeType',true,false);},validate:function validate(){}};}function getStep(nodeTypeField,approvalNameField,nodeResourceField,formError,nodeToEdit){var _nodeToEdit$originalN;var isEnabled=function isEnabled(){if(nodeTypeField.value!=='workflow_approval_template'&&nodeResourceField.value===null||nodeTypeField.value==='workflow_approval_template'&&approvalNameField.value===''||formError){return false;}return true;};return{id:STEP_ID,name:/*#__PURE__*/_jsx(StepName,{hasErrors:formError,id:\"node-type-step\",children:/*i18n*/i18n._(\"Node type\")}),component:/*#__PURE__*/_jsx(NodeTypeStep,{isIdentifierRequired:nodeToEdit&&nodeToEdit.originalNodeObject&&!stringIsUUID((_nodeToEdit$originalN=nodeToEdit.originalNodeObject)===null||_nodeToEdit$originalN===void 0?void 0:_nodeToEdit$originalN.identifier)}),enableNext:isEnabled()};}function getInitialValues(){return{approvalName:'',approvalDescription:'',timeoutMinutes:0,timeoutSeconds:0,nodeType:'job_template',convergence:'any',identifier:''};}","map":{"version":3,"sources":["/awx_devel/awx/ui/src/screens/Template/WorkflowJobTemplateVisualizer/Modals/NodeModals/NodeTypeStep/useNodeTypeStep.js"],"names":["React","useField","StepName","stringIsUUID","NodeTypeStep","STEP_ID","useNodeTypeStep","nodeToEdit","meta","approvalNameField","nodeTypeField","identifierMeta","name","validate","value","type","project","inventory","ask_inventory_on_launch","undefined","nodeResourceField","nodeResourceMeta","formError","error","step","getStep","initialValues","getInitialValues","isReady","contentError","hasError","setTouched","setFieldTouched","isEnabled","id","component","originalNodeObject","identifier","enableNext","approvalName","approvalDescription","timeoutMinutes","timeoutSeconds","nodeType","convergence"],"mappings":"sIAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,QAAT,KAAyB,QAAzB,CACA,MAAOC,CAAAA,QAAP,KAAqB,wCAArB,CACA,OAASC,YAAT,KAA6B,cAA7B,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,C,2CAEA,GAAMC,CAAAA,OAAO,CAAG,UAAhB,CAEA,cAAe,SAASC,CAAAA,eAAT,CAAyBC,UAAzB,CAAqC,CAClD,cAAiBN,QAAQ,CAAC,UAAD,CAAzB,wCAASO,IAAT,eACA,eAA4BP,QAAQ,CAAC,cAAD,CAApC,yCAAOQ,iBAAP,eACA,eAA2BR,QAAQ,CAAC,UAAD,CAAnC,yCAAOS,aAAP,eACA,eAA2BT,QAAQ,CAAC,YAAD,CAAnC,yCAASU,cAAT,eACA,eAA8CV,QAAQ,CAAC,CACrDW,IAAI,CAAE,cAD+C,CAErDC,QAAQ,CAAE,kBAACC,KAAD,CAAW,CACnB,GACE,CAAAA,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,IAAgB,cAAhB,GACC,EAACD,KAAD,SAACA,KAAD,WAACA,KAAK,CAAEE,OAAR,GACC,CAAAF,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEE,OAAP,IAAmB,IADpB,EAEE,CAAC,EAACF,KAAD,SAACA,KAAD,WAACA,KAAK,CAAEG,SAAR,GAAqB,CAAAH,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEG,SAAP,IAAqB,IAA3C,GACC,EAACH,KAAD,SAACA,KAAD,WAACA,KAAK,CAAEI,uBAAR,CAJJ,CADF,CAME,CACA,eAAO,6KAAP,EACD,CACD,MAAOC,CAAAA,SAAP,CACD,CAboD,CAAD,CAAtD,0CAAOC,iBAAP,gBAA0BC,gBAA1B,gBAgBA,GAAMC,CAAAA,SAAS,CACb,CAAC,CAACd,IAAI,CAACe,KAAP,EAAgB,CAAC,CAACF,gBAAgB,CAACE,KAAnC,EAA4CZ,cAAc,CAACY,KAD7D,CAGA,MAAO,CACLC,IAAI,CAAEC,OAAO,CACXf,aADW,CAEXD,iBAFW,CAGXW,iBAHW,CAIXE,SAJW,CAKXf,UALW,CADR,CAQLmB,aAAa,CAAEC,gBAAgB,EAR1B,CASLC,OAAO,CAAE,IATJ,CAULC,YAAY,CAAE,IAVT,CAWLC,QAAQ,CAAER,SAXL,CAYLS,UAAU,CAAE,oBAACC,eAAD,CAAqB,CAC/BA,eAAe,CAAC,UAAD,CAAa,IAAb,CAAmB,KAAnB,CAAf,CACD,CAdI,CAeLnB,QAAQ,CAAE,mBAAM,CAAE,CAfb,CAAP,CAiBD,CACD,QAASY,CAAAA,OAAT,CACEf,aADF,CAEED,iBAFF,CAGEW,iBAHF,CAIEE,SAJF,CAKEf,UALF,CAME,2BACA,GAAM0B,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,GACGvB,aAAa,CAACI,KAAd,GAAwB,4BAAxB,EACCM,iBAAiB,CAACN,KAAlB,GAA4B,IAD9B,EAECJ,aAAa,CAACI,KAAd,GAAwB,4BAAxB,EACCL,iBAAiB,CAACK,KAAlB,GAA4B,EAH9B,EAIAQ,SALF,CAME,CACA,MAAO,MAAP,CACD,CACD,MAAO,KAAP,CACD,CAXD,CAYA,MAAO,CACLY,EAAE,CAAE7B,OADC,CAELO,IAAI,cACF,KAAC,QAAD,EAAU,SAAS,CAAEU,SAArB,CAAgC,EAAE,CAAC,gBAAnC,kBACG,mBADH,EAHG,CAOLa,SAAS,cACP,KAAC,YAAD,EACE,oBAAoB,CAClB5B,UAAU,EACVA,UAAU,CAAC6B,kBADX,EAEA,CAACjC,YAAY,wBAACI,UAAU,CAAC6B,kBAAZ,gDAAC,sBAA+BC,UAAhC,CAJjB,EARG,CAgBLC,UAAU,CAAEL,SAAS,EAhBhB,CAAP,CAkBD,CAED,QAASN,CAAAA,gBAAT,EAA4B,CAC1B,MAAO,CACLY,YAAY,CAAE,EADT,CAELC,mBAAmB,CAAE,EAFhB,CAGLC,cAAc,CAAE,CAHX,CAILC,cAAc,CAAE,CAJX,CAKLC,QAAQ,CAAE,cALL,CAMLC,WAAW,CAAE,KANR,CAOLP,UAAU,CAAE,EAPP,CAAP,CASD","sourcesContent":["import React from 'react';\nimport { t } from '@lingui/macro';\nimport { useField } from 'formik';\nimport StepName from 'components/LaunchPrompt/steps/StepName';\nimport { stringIsUUID } from 'util/strings';\nimport NodeTypeStep from './NodeTypeStep';\n\nconst STEP_ID = 'nodeType';\n\nexport default function useNodeTypeStep(nodeToEdit) {\n  const [, meta] = useField('nodeType');\n  const [approvalNameField] = useField('approvalName');\n  const [nodeTypeField, ,] = useField('nodeType');\n  const [, identifierMeta] = useField('identifier');\n  const [nodeResourceField, nodeResourceMeta] = useField({\n    name: 'nodeResource',\n    validate: (value) => {\n      if (\n        value?.type === 'job_template' &&\n        (!value?.project ||\n          value?.project === null ||\n          ((!value?.inventory || value?.inventory === null) &&\n            !value?.ask_inventory_on_launch))\n      ) {\n        return t`Job Templates with a missing inventory or project cannot be selected when creating or editing nodes.  Select another template or fix the missing fields to proceed.`;\n      }\n      return undefined;\n    },\n  });\n\n  const formError =\n    !!meta.error || !!nodeResourceMeta.error || identifierMeta.error;\n\n  return {\n    step: getStep(\n      nodeTypeField,\n      approvalNameField,\n      nodeResourceField,\n      formError,\n      nodeToEdit\n    ),\n    initialValues: getInitialValues(),\n    isReady: true,\n    contentError: null,\n    hasError: formError,\n    setTouched: (setFieldTouched) => {\n      setFieldTouched('nodeType', true, false);\n    },\n    validate: () => {},\n  };\n}\nfunction getStep(\n  nodeTypeField,\n  approvalNameField,\n  nodeResourceField,\n  formError,\n  nodeToEdit\n) {\n  const isEnabled = () => {\n    if (\n      (nodeTypeField.value !== 'workflow_approval_template' &&\n        nodeResourceField.value === null) ||\n      (nodeTypeField.value === 'workflow_approval_template' &&\n        approvalNameField.value === '') ||\n      formError\n    ) {\n      return false;\n    }\n    return true;\n  };\n  return {\n    id: STEP_ID,\n    name: (\n      <StepName hasErrors={formError} id=\"node-type-step\">\n        {t`Node type`}\n      </StepName>\n    ),\n    component: (\n      <NodeTypeStep\n        isIdentifierRequired={\n          nodeToEdit &&\n          nodeToEdit.originalNodeObject &&\n          !stringIsUUID(nodeToEdit.originalNodeObject?.identifier)\n        }\n      />\n    ),\n    enableNext: isEnabled(),\n  };\n}\n\nfunction getInitialValues() {\n  return {\n    approvalName: '',\n    approvalDescription: '',\n    timeoutMinutes: 0,\n    timeoutSeconds: 0,\n    nodeType: 'job_template',\n    convergence: 'any',\n    identifier: '',\n  };\n}\n"]},"metadata":{},"sourceType":"module"}