{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Button, ButtonVariant } from '../Button';\nexport var DataListToggle = function DataListToggle(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$isExpanded = _a.isExpanded,\n      isExpanded = _a$isExpanded === void 0 ? false : _a$isExpanded,\n      _a$ariaControls = _a['aria-controls'],\n      ariaControls = _a$ariaControls === void 0 ? '' : _a$ariaControls,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? 'Details' : _a$ariaLabel,\n      _a$rowid = _a.rowid,\n      rowid = _a$rowid === void 0 ? '' : _a$rowid,\n      id = _a.id,\n      props = __rest(_a, [\"className\", \"isExpanded\", 'aria-controls', 'aria-label', \"rowid\", \"id\"]);\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dataListItemControl, className)\n  }, props), React.createElement(\"div\", {\n    className: css(styles.dataListToggle)\n  }, React.createElement(Button, {\n    id: id,\n    variant: ButtonVariant.plain,\n    \"aria-controls\": ariaControls !== '' && ariaControls,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabel !== 'Details' ? null : \"\".concat(rowid, \" \").concat(id),\n    \"aria-expanded\": isExpanded\n  }, React.createElement(\"div\", {\n    className: css(styles.dataListToggleIcon)\n  }, React.createElement(AngleRightIcon, null)))));\n};\nDataListToggle.displayName = 'DataListToggle';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DataList/DataListToggle.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,cAAP,MAA2B,yDAA3B;AACA,OAAO,MAAP,MAAmB,4DAAnB;AACA,SAAS,MAAT,EAAiB,aAAjB,QAAsC,WAAtC;AAmBA,OAAO,IAAM,cAAc,GAAiD,SAA/D,cAA+D,CAAC,EAAD,EAQlD;AARmD,qBAMzE,EANyE,CAC3E,SAD2E;AAAA,MAC3E,SAD2E,6BAC/D,EAD+D;AAAA,sBAMzE,EANyE,CAE3E,UAF2E;AAAA,MAE3E,UAF2E,8BAE9D,KAF8D;AAAA,wBAMzE,EANyE,CAG3E,eAH2E;AAAA,MAG1D,YAH0D,gCAG3C,EAH2C;AAAA,qBAMzE,EANyE,CAI3E,YAJ2E;AAAA,MAI7D,SAJ6D,6BAIjD,SAJiD;AAAA,iBAMzE,EANyE,CAK3E,KAL2E;AAAA,MAK3E,KAL2E,yBAKnE,EALmE;AAAA,MAM3E,EAN2E,GAMzE,EANyE,CAM3E,EAN2E;AAAA,MAOxE,KAPwE,GAOnE,MAAA,CAAA,EAAA,EAPmE,CAAA,WAAA,EAAA,YAAA,EAAA,eAAA,EAAA,YAAA,EAAA,OAAA,EAAA,IAAA,CAOnE,CAPmE;;AAQlD,SACzB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,mBAAR,EAA6B,SAA7B;AAAnB,GAAA,EAAgE,KAAhE,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,cAAR;AAAnB,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AACL,IAAA,EAAE,EAAE,EADC;AAEL,IAAA,OAAO,EAAE,aAAa,CAAC,KAFlB;AAEuB,qBACb,YAAY,KAAK,EAAjB,IAAuB,YAHjC;AAG6C,kBACtC,SAJP;AAIgB,uBACJ,SAAS,KAAK,SAAd,GAA0B,IAA1B,aAAoC,KAApC,cAA6C,EAA7C,CALZ;AAK6D,qBACnD;AANV,GAAP,EAQE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,kBAAR;AAAnB,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe,IAAf,CADF,CARF,CADF,CADF,CADyB;AAiB1B,CAzBM;AA0BP,cAAc,CAAC,WAAf,GAA6B,gBAA7B","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Button, ButtonVariant } from '../Button';\n\nexport interface DataListToggleProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the DataList cell */\n  className?: string;\n  /** Flag to show if the expanded content of the DataList item is visible */\n  isExpanded?: boolean;\n  /** Identify the DataList toggle number */\n  id: string;\n  /** Id for the row */\n  rowid?: string;\n  /** Adds accessible text to the DataList toggle */\n  'aria-labelledby'?: string;\n  /** Adds accessible text to the DataList toggle */\n  'aria-label'?: string;\n  /** Allows users of some screen readers to shift focus to the controlled element. Should be used when the controlled contents are not adjacent to the toggle that controls them. */\n  'aria-controls'?: string;\n}\n\nexport const DataListToggle: React.FunctionComponent<DataListToggleProps> = ({\n  className = '',\n  isExpanded = false,\n  'aria-controls': ariaControls = '',\n  'aria-label': ariaLabel = 'Details',\n  rowid = '',\n  id,\n  ...props\n}: DataListToggleProps) => (\n  <div className={css(styles.dataListItemControl, className)} {...props}>\n    <div className={css(styles.dataListToggle)}>\n      <Button\n        id={id}\n        variant={ButtonVariant.plain}\n        aria-controls={ariaControls !== '' && ariaControls}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabel !== 'Details' ? null : `${rowid} ${id}`}\n        aria-expanded={isExpanded}\n      >\n        <div className={css(styles.dataListToggleIcon)}>\n          <AngleRightIcon />\n        </div>\n      </Button>\n    </div>\n  </div>\n);\nDataListToggle.displayName = 'DataListToggle';\n"]},"metadata":{},"sourceType":"module"}