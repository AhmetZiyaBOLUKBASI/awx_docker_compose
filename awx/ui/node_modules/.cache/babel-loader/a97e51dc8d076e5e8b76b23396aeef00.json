{"ast":null,"code":"import _createForOfIteratorHelper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { Modal, ModalVariant } from '../Modal';\nimport { WizardFooterInternal } from './WizardFooterInternal';\nimport { WizardToggle } from './WizardToggle';\nimport { WizardNav } from './WizardNav';\nimport { WizardNavItem } from './WizardNavItem';\nimport { WizardContextProvider } from './WizardContext';\nimport { WizardHeader } from './WizardHeader';\nexport var Wizard = /*#__PURE__*/function (_React$Component) {\n  _inherits(Wizard, _React$Component);\n\n  var _super = _createSuper(Wizard);\n\n  function Wizard(props) {\n    var _this;\n\n    _classCallCheck(this, Wizard);\n\n    _this = _super.call(this, props);\n\n    _this.handleKeyClicks = function (event) {\n      if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n        if (_this.state.isNavOpen) {\n          _this.setState({\n            isNavOpen: !_this.state.isNavOpen\n          });\n        } else if (_this.props.isOpen) {\n          _this.props.onClose();\n        }\n      }\n    };\n\n    _this.onNext = function () {\n      var _this$props = _this.props,\n          onNext = _this$props.onNext,\n          onClose = _this$props.onClose,\n          onSave = _this$props.onSave;\n      var currentStep = _this.state.currentStep;\n\n      var flattenedSteps = _this.getFlattenedSteps();\n\n      var maxSteps = flattenedSteps.length;\n\n      if (currentStep >= maxSteps) {\n        // Hit the save button at the end of the wizard\n        if (onSave) {\n          return onSave();\n        }\n\n        return onClose();\n      } else {\n        var newStep = currentStep + 1;\n\n        _this.setState({\n          currentStep: newStep\n        });\n\n        var _flattenedSteps = flattenedSteps[currentStep - 1],\n            prevId = _flattenedSteps.id,\n            prevName = _flattenedSteps.name;\n        var _flattenedSteps2 = flattenedSteps[newStep - 1],\n            id = _flattenedSteps2.id,\n            name = _flattenedSteps2.name;\n        return onNext && onNext({\n          id: id,\n          name: name\n        }, {\n          prevId: prevId,\n          prevName: prevName\n        });\n      }\n    };\n\n    _this.onBack = function () {\n      var onBack = _this.props.onBack;\n      var currentStep = _this.state.currentStep;\n\n      var flattenedSteps = _this.getFlattenedSteps();\n\n      if (flattenedSteps.length < currentStep) {\n        // Previous step was removed, just update the currentStep state\n        var adjustedStep = flattenedSteps.length;\n\n        _this.setState({\n          currentStep: adjustedStep\n        });\n      } else {\n        var newStep = currentStep - 1 <= 0 ? 0 : currentStep - 1;\n\n        _this.setState({\n          currentStep: newStep\n        });\n\n        var _flattenedSteps$newSt = flattenedSteps[newStep],\n            prevId = _flattenedSteps$newSt.id,\n            prevName = _flattenedSteps$newSt.name;\n        var _flattenedSteps3 = flattenedSteps[newStep - 1],\n            id = _flattenedSteps3.id,\n            name = _flattenedSteps3.name;\n        return onBack && onBack({\n          id: id,\n          name: name\n        }, {\n          prevId: prevId,\n          prevName: prevName\n        });\n      }\n    };\n\n    _this.goToStep = function (step) {\n      var onGoToStep = _this.props.onGoToStep;\n      var currentStep = _this.state.currentStep;\n\n      var flattenedSteps = _this.getFlattenedSteps();\n\n      var maxSteps = flattenedSteps.length;\n\n      if (step < 1) {\n        step = 1;\n      } else if (step > maxSteps) {\n        step = maxSteps;\n      }\n\n      _this.setState({\n        currentStep: step,\n        isNavOpen: false\n      });\n\n      var _flattenedSteps4 = flattenedSteps[currentStep - 1],\n          prevId = _flattenedSteps4.id,\n          prevName = _flattenedSteps4.name;\n      var _flattenedSteps5 = flattenedSteps[step - 1],\n          id = _flattenedSteps5.id,\n          name = _flattenedSteps5.name;\n      return onGoToStep && onGoToStep({\n        id: id,\n        name: name\n      }, {\n        prevId: prevId,\n        prevName: prevName\n      });\n    };\n\n    _this.goToStepById = function (stepId) {\n      var flattenedSteps = _this.getFlattenedSteps();\n\n      var step;\n\n      for (var i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].id === stepId) {\n          step = i + 1;\n          break;\n        }\n      }\n\n      if (step) {\n        _this.setState({\n          currentStep: step\n        });\n      }\n    };\n\n    _this.goToStepByName = function (stepName) {\n      var flattenedSteps = _this.getFlattenedSteps();\n\n      var step;\n\n      for (var i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].name === stepName) {\n          step = i + 1;\n          break;\n        }\n      }\n\n      if (step) {\n        _this.setState({\n          currentStep: step\n        });\n      }\n    };\n\n    _this.getFlattenedSteps = function () {\n      var steps = _this.props.steps;\n      var flattenedSteps = [];\n\n      var _iterator = _createForOfIteratorHelper(steps),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var step = _step.value;\n\n          if (step.steps) {\n            var _iterator2 = _createForOfIteratorHelper(step.steps),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var childStep = _step2.value;\n                flattenedSteps.push(childStep);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          } else {\n            flattenedSteps.push(step);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return flattenedSteps;\n    };\n\n    _this.getFlattenedStepsIndex = function (flattenedSteps, stepName) {\n      for (var i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].name === stepName) {\n          return i + 1;\n        }\n      }\n\n      return 0;\n    };\n\n    _this.initSteps = function (steps) {\n      // Set default Step values\n      for (var i = 0; i < steps.length; i++) {\n        if (steps[i].steps) {\n          for (var j = 0; j < steps[i].steps.length; j++) {\n            steps[i].steps[j] = Object.assign({\n              canJumpTo: true\n            }, steps[i].steps[j]);\n          }\n        }\n\n        steps[i] = Object.assign({\n          canJumpTo: true\n        }, steps[i]);\n      }\n\n      return steps;\n    };\n\n    _this.getElement = function (appendTo) {\n      if (typeof appendTo === 'function') {\n        return appendTo();\n      }\n\n      return appendTo || document.body;\n    };\n\n    var newId = Wizard.currentId++;\n    _this.titleId = props.titleId || \"pf-wizard-title-\".concat(newId);\n    _this.descriptionId = props.descriptionId || \"pf-wizard-description-\".concat(newId);\n    _this.state = {\n      currentStep: _this.props.startAtStep && Number.isInteger(_this.props.startAtStep) ? _this.props.startAtStep : 1,\n      isNavOpen: false\n    };\n    _this.drawerRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Wizard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var target = typeof document !== 'undefined' ? document.body : null;\n\n      if (target) {\n        target.addEventListener('keydown', this.handleKeyClicks, false);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var target = typeof document !== 'undefined' && document.body || null;\n\n      if (target) {\n        target.removeEventListener('keydown', this.handleKeyClicks, false);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          width = _a.width,\n          height = _a.height,\n          title = _a.title,\n          description = _a.description,\n          descriptionComponent = _a.descriptionComponent,\n          onClose = _a.onClose,\n          onSave = _a.onSave,\n          onBack = _a.onBack,\n          onNext = _a.onNext,\n          onGoToStep = _a.onGoToStep,\n          className = _a.className,\n          steps = _a.steps,\n          startAtStep = _a.startAtStep,\n          _a$nextButtonText = _a.nextButtonText,\n          nextButtonText = _a$nextButtonText === void 0 ? 'Next' : _a$nextButtonText,\n          _a$backButtonText = _a.backButtonText,\n          backButtonText = _a$backButtonText === void 0 ? 'Back' : _a$backButtonText,\n          _a$cancelButtonText = _a.cancelButtonText,\n          cancelButtonText = _a$cancelButtonText === void 0 ? 'Cancel' : _a$cancelButtonText,\n          hideClose = _a.hideClose,\n          _a$closeButtonAriaLab = _a.closeButtonAriaLabel,\n          closeButtonAriaLabel = _a$closeButtonAriaLab === void 0 ? 'Close' : _a$closeButtonAriaLab,\n          navAriaLabel = _a.navAriaLabel,\n          navAriaLabelledBy = _a.navAriaLabelledBy,\n          mainAriaLabel = _a.mainAriaLabel,\n          mainAriaLabelledBy = _a.mainAriaLabelledBy,\n          hasNoBodyPadding = _a.hasNoBodyPadding,\n          footer = _a.footer,\n          appendTo = _a.appendTo,\n          isOpen = _a.isOpen,\n          titleId = _a.titleId,\n          descriptionId = _a.descriptionId,\n          isNavExpandable = _a.isNavExpandable,\n          hasDrawer = _a.hasDrawer,\n          isDrawerExpanded = _a.isDrawerExpanded,\n          rest = __rest(_a, [\"width\", \"height\", \"title\", \"description\", \"descriptionComponent\", \"onClose\", \"onSave\", \"onBack\", \"onNext\", \"onGoToStep\", \"className\", \"steps\", \"startAtStep\", \"nextButtonText\", \"backButtonText\", \"cancelButtonText\", \"hideClose\", \"closeButtonAriaLabel\", \"navAriaLabel\", \"navAriaLabelledBy\", \"mainAriaLabel\", \"mainAriaLabelledBy\", \"hasNoBodyPadding\", \"footer\", \"appendTo\", \"isOpen\", \"titleId\", \"descriptionId\", \"isNavExpandable\", \"hasDrawer\", \"isDrawerExpanded\"]);\n\n      var currentStep = this.state.currentStep;\n      var flattenedSteps = this.getFlattenedSteps();\n      var adjustedStep = flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n      var activeStep = flattenedSteps[adjustedStep - 1];\n      var computedSteps = this.initSteps(steps);\n      var firstStep = activeStep === flattenedSteps[0];\n      var isValid = activeStep && activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n\n      var nav = function nav(isWizardNavOpen) {\n        var wizNavAProps = {\n          isOpen: isWizardNavOpen,\n          'aria-label': navAriaLabel,\n          'aria-labelledby': (title || navAriaLabelledBy) && (navAriaLabelledBy || _this2.titleId)\n        };\n        return React.createElement(WizardNav, Object.assign({}, wizNavAProps), computedSteps.map(function (step, index) {\n          if (step.isFinishedStep) {\n            // Don't show finished step in the side nav\n            return;\n          }\n\n          var enabled;\n          var navItemStep;\n\n          if (step.steps) {\n            var hasActiveChild = false;\n            var canJumpToParent = false;\n\n            var _iterator3 = _createForOfIteratorHelper(step.steps),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var subStep = _step3.value;\n\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            navItemStep = _this2.getFlattenedStepsIndex(flattenedSteps, step.steps[0].name);\n            return React.createElement(WizardNavItem, {\n              key: index,\n              id: step.id,\n              content: step.name,\n              isExpandable: isNavExpandable,\n              isCurrent: hasActiveChild,\n              isDisabled: !canJumpToParent,\n              step: navItemStep,\n              onNavItemClick: _this2.goToStep\n            }, React.createElement(WizardNav, Object.assign({}, wizNavAProps, {\n              returnList: true\n            }), step.steps.map(function (childStep, indexChild) {\n              if (childStep.isFinishedStep) {\n                // Don't show finished step in the side nav\n                return;\n              }\n\n              navItemStep = _this2.getFlattenedStepsIndex(flattenedSteps, childStep.name);\n              enabled = childStep.canJumpTo;\n              return React.createElement(WizardNavItem, {\n                key: \"child_\".concat(indexChild),\n                id: childStep.id,\n                content: childStep.name,\n                isCurrent: activeStep.name === childStep.name,\n                isDisabled: !enabled,\n                step: navItemStep,\n                onNavItemClick: _this2.goToStep\n              });\n            })));\n          }\n\n          navItemStep = _this2.getFlattenedStepsIndex(flattenedSteps, step.name);\n          enabled = step.canJumpTo;\n          return React.createElement(WizardNavItem, Object.assign({}, step.stepNavItemProps, {\n            key: index,\n            id: step.id,\n            content: step.name,\n            isCurrent: activeStep.name === step.name,\n            isDisabled: !enabled,\n            step: navItemStep,\n            onNavItemClick: _this2.goToStep\n          }));\n        }));\n      };\n\n      var context = {\n        goToStepById: this.goToStepById,\n        goToStepByName: this.goToStepByName,\n        onNext: this.onNext,\n        onBack: this.onBack,\n        onClose: onClose,\n        activeStep: activeStep\n      };\n      var divStyles = Object.assign(Object.assign({}, height ? {\n        height: height\n      } : {}), width ? {\n        width: width\n      } : {});\n      var wizard = React.createElement(WizardContextProvider, {\n        value: context\n      }, React.createElement(\"div\", Object.assign({}, rest, {\n        className: css(styles.wizard, activeStep && activeStep.isFinishedStep && 'pf-m-finished', className),\n        style: Object.keys(divStyles).length ? divStyles : undefined\n      }), title && React.createElement(WizardHeader, {\n        titleId: this.titleId,\n        descriptionId: this.descriptionId,\n        onClose: onClose,\n        title: title,\n        description: description,\n        descriptionComponent: descriptionComponent,\n        closeButtonAriaLabel: closeButtonAriaLabel,\n        hideClose: hideClose\n      }), React.createElement(WizardToggle, {\n        hasDrawer: hasDrawer,\n        isDrawerExpanded: isDrawerExpanded,\n        mainAriaLabel: mainAriaLabel,\n        isInPage: isOpen === undefined,\n        mainAriaLabelledBy: (title || mainAriaLabelledBy) && (mainAriaLabelledBy || this.titleId),\n        isNavOpen: this.state.isNavOpen,\n        onNavToggle: function onNavToggle(isNavOpen) {\n          return _this2.setState({\n            isNavOpen: isNavOpen\n          });\n        },\n        nav: nav,\n        steps: steps,\n        activeStep: activeStep,\n        hasNoBodyPadding: hasNoBodyPadding\n      }, footer || React.createElement(WizardFooterInternal, {\n        onNext: this.onNext,\n        onBack: this.onBack,\n        onClose: onClose,\n        isValid: isValid,\n        firstStep: firstStep,\n        activeStep: activeStep,\n        nextButtonText: activeStep && activeStep.nextButtonText || nextButtonText,\n        backButtonText: backButtonText,\n        cancelButtonText: cancelButtonText\n      }))));\n\n      if (isOpen !== undefined) {\n        return React.createElement(Modal, {\n          width: width !== null ? width : undefined,\n          isOpen: isOpen,\n          variant: ModalVariant.large,\n          \"aria-labelledby\": this.titleId,\n          \"aria-describedby\": this.descriptionId,\n          showClose: false,\n          hasNoBodyWrapper: true\n        }, wizard);\n      }\n\n      return wizard;\n    }\n  }]);\n\n  return Wizard;\n}(React.Component);\nWizard.displayName = 'Wizard';\nWizard.currentId = 0;\nWizard.defaultProps = {\n  title: null,\n  description: '',\n  descriptionComponent: 'p',\n  className: '',\n  startAtStep: 1,\n  nextButtonText: 'Next',\n  backButtonText: 'Back',\n  cancelButtonText: 'Cancel',\n  hideClose: false,\n  closeButtonAriaLabel: 'Close',\n  navAriaLabel: null,\n  navAriaLabelledBy: null,\n  mainAriaLabel: null,\n  mainAriaLabelledBy: null,\n  hasNoBodyPadding: false,\n  onBack: null,\n  onNext: null,\n  onGoToStep: null,\n  width: null,\n  height: null,\n  footer: null,\n  onClose: function onClose() {\n    return undefined;\n  },\n  appendTo: null,\n  isOpen: undefined,\n  isNavExpandable: false,\n  hasDrawer: false,\n  isDrawerExpanded: false\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Wizard/Wizard.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { Modal, ModalVariant } from '../Modal';\nimport { WizardFooterInternal } from './WizardFooterInternal';\nimport { WizardToggle } from './WizardToggle';\nimport { WizardNav } from './WizardNav';\nimport { WizardNavItem, WizardNavItemProps } from './WizardNavItem';\nimport { WizardContextProvider } from './WizardContext';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { WizardHeader } from './WizardHeader';\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: React.ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** @beta The content to render in the drawer panel (use when hasDrawer prop is set on the wizard).   */\n  drawerPanelContent?: any;\n  /** @beta Custom drawer toggle button that opens the drawer. */\n  drawerToggleButton?: React.ReactNode;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?: React.HTMLProps<HTMLButtonElement | HTMLAnchorElement> | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: React.ReactNode },\n  prevStep: { prevId?: string | number; prevName: React.ReactNode }\n) => void;\n\nexport interface WizardProps extends React.HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: React.ReactNode;\n  /** Component type of the description */\n  descriptionComponent?: 'div' | 'p';\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose?: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  startAtStep?: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: React.ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave?: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext?: WizardStepFunctionType;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack?: WizardStepFunctionType;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n  /** Flag indicating nav items with sub steps are expandable */\n  isNavExpandable?: boolean;\n  /** @beta Flag indicating the wizard has a drawer for at least one of the wizard steps */\n  hasDrawer?: boolean;\n  /** @beta Flag indicating the wizard drawer is expanded */\n  isDrawerExpanded?: boolean;\n}\n\ninterface WizardState {\n  currentStep: number;\n  isNavOpen: boolean;\n}\n\nexport class Wizard extends React.Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: null,\n    description: '',\n    descriptionComponent: 'p',\n    className: '',\n    startAtStep: 1,\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: null,\n    navAriaLabelledBy: null,\n    mainAriaLabel: null,\n    mainAriaLabelledBy: null,\n    hasNoBodyPadding: false,\n    onBack: null as WizardStepFunctionType,\n    onNext: null as WizardStepFunctionType,\n    onGoToStep: null as WizardStepFunctionType,\n    width: null as string,\n    height: null as string,\n    footer: null as React.ReactNode,\n    onClose: () => undefined as any,\n    appendTo: null as HTMLElement,\n    isOpen: undefined,\n    isNavExpandable: false,\n    hasDrawer: false,\n    isDrawerExpanded: false\n  };\n  private titleId: string;\n  private descriptionId: string;\n  private drawerRef: React.RefObject<any>;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = Wizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId = props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      currentStep: this.props.startAtStep && Number.isInteger(this.props.startAtStep) ? this.props.startAtStep : 1,\n      isNavOpen: false\n    };\n\n    this.drawerRef = React.createRef();\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  private onNext = (): void => {\n    const { onNext, onClose, onSave } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const maxSteps = flattenedSteps.length;\n    if (currentStep >= maxSteps) {\n      // Hit the save button at the end of the wizard\n      if (onSave) {\n        return onSave();\n      }\n      return onClose();\n    } else {\n      const newStep = currentStep + 1;\n      this.setState({\n        currentStep: newStep\n      });\n      const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n      const { id, name } = flattenedSteps[newStep - 1];\n      return onNext && onNext({ id, name }, { prevId, prevName });\n    }\n  };\n\n  private onBack = (): void => {\n    const { onBack } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    if (flattenedSteps.length < currentStep) {\n      // Previous step was removed, just update the currentStep state\n      const adjustedStep = flattenedSteps.length;\n      this.setState({\n        currentStep: adjustedStep\n      });\n    } else {\n      const newStep = currentStep - 1 <= 0 ? 0 : currentStep - 1;\n      this.setState({\n        currentStep: newStep\n      });\n      const { id: prevId, name: prevName } = flattenedSteps[newStep];\n      const { id, name } = flattenedSteps[newStep - 1];\n      return onBack && onBack({ id, name }, { prevId, prevName });\n    }\n  };\n\n  private goToStep = (step: number): void => {\n    const { onGoToStep } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const maxSteps = flattenedSteps.length;\n    if (step < 1) {\n      step = 1;\n    } else if (step > maxSteps) {\n      step = maxSteps;\n    }\n    this.setState({ currentStep: step, isNavOpen: false });\n    const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n    const { id, name } = flattenedSteps[step - 1];\n    return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n  };\n\n  private goToStepById = (stepId: number | string): void => {\n    const flattenedSteps = this.getFlattenedSteps();\n    let step;\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].id === stepId) {\n        step = i + 1;\n        break;\n      }\n    }\n    if (step) {\n      this.setState({ currentStep: step });\n    }\n  };\n\n  private goToStepByName = (stepName: string): void => {\n    const flattenedSteps = this.getFlattenedSteps();\n    let step;\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        step = i + 1;\n        break;\n      }\n    }\n    if (step) {\n      this.setState({ currentStep: step });\n    }\n  };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    const flattenedSteps: WizardStep[] = [];\n    for (const step of steps) {\n      if (step.steps) {\n        for (const childStep of step.steps) {\n          flattenedSteps.push(childStep);\n        }\n      } else {\n        flattenedSteps.push(step);\n      }\n    }\n    return flattenedSteps;\n  };\n\n  private getFlattenedStepsIndex = (flattenedSteps: WizardStep[], stepName: React.ReactNode): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps.length; j++) {\n          steps[i].steps[j] = Object.assign({ canJumpTo: true }, steps[i].steps[j]);\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n      height,\n      title,\n      description,\n      descriptionComponent,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      className,\n      steps,\n      startAtStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'Close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      isNavExpandable,\n      hasDrawer,\n      isDrawerExpanded,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep = flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid = activeStep && activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby': (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId)\n      };\n\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.steps[0].name);\n              return (\n                <WizardNavItem\n                  key={index}\n                  id={step.id}\n                  content={step.name}\n                  isExpandable={isNavExpandable}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={this.goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map((childStep: WizardStep, indexChild: number) => {\n                      if (childStep.isFinishedStep) {\n                        // Don't show finished step in the side nav\n                        return;\n                      }\n                      navItemStep = this.getFlattenedStepsIndex(flattenedSteps, childStep.name);\n                      enabled = childStep.canJumpTo;\n                      return (\n                        <WizardNavItem\n                          key={`child_${indexChild}`}\n                          id={childStep.id}\n                          content={childStep.name}\n                          isCurrent={activeStep.name === childStep.name}\n                          isDisabled={!enabled}\n                          step={navItemStep}\n                          onNavItemClick={this.goToStep}\n                        />\n                      );\n                    })}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.name);\n            enabled = step.canJumpTo;\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                id={step.id}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={this.goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById: this.goToStepById,\n      goToStepByName: this.goToStepByName,\n      onNext: this.onNext,\n      onBack: this.onBack,\n      onClose,\n      activeStep\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {})\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(styles.wizard, activeStep && activeStep.isFinishedStep && 'pf-m-finished', className)}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              descriptionComponent={descriptionComponent}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            hasDrawer={hasDrawer}\n            isDrawerExpanded={isDrawerExpanded}\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={(title || mainAriaLabelledBy) && (mainAriaLabelledBy || this.titleId)}\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={isNavOpen => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding}\n          >\n            {footer || (\n              <WizardFooterInternal\n                onNext={this.onNext}\n                onBack={this.onBack}\n                onClose={onClose}\n                isValid={isValid}\n                firstStep={firstStep}\n                activeStep={activeStep}\n                nextButtonText={(activeStep && activeStep.nextButtonText) || nextButtonText}\n                backButtonText={backButtonText}\n                cancelButtonText={cancelButtonText}\n              />\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n\n    return wizard;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}