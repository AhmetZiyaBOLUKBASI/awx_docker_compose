{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _styled2 from\"styled-components\";import _styled from\"styled-components\";import{i18n}from\"@lingui/core\";import React,{useState}from'react';import styled from'styled-components';import{Split,SplitItem,TextListItemVariants}from'@patternfly/react-core';import{formatDateString}from'util/dates';import{DetailName,DetailValue}from'../../DetailList';import MultiButtonToggle from'../../MultiButtonToggle';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var OccurrencesLabel=styled.div.withConfig({displayName:\"ScheduleOccurrences__OccurrencesLabel\",componentId:\"sc-60c0oa-0\"})([\"display:inline-block;font-size:var(--pf-c-form__label--FontSize);font-weight:var(--pf-c-form__label--FontWeight);line-height:var(--pf-c-form__label--LineHeight);color:var(--pf-c-form__label--Color);span:first-of-type{font-weight:var(--pf-global--FontWeight--bold);margin-right:10px;}\"]);var _StyledDetailName=styled(DetailName).withConfig({displayName:\"ScheduleOccurrences___StyledDetailName\",componentId:\"sc-60c0oa-1\"})([\"grid-column:1 / -1\"]);var _StyledDetailValue=styled(DetailValue).withConfig({displayName:\"ScheduleOccurrences___StyledDetailValue\",componentId:\"sc-60c0oa-2\"})([\"grid-column:1 / -1;margin-top:-10px\"]);function ScheduleOccurrences(_ref){var _ref$preview=_ref.preview,preview=_ref$preview===void 0?{local:[],utc:[]}:_ref$preview,tz=_ref.tz;var _useState=useState('local'),_useState2=_slicedToArray(_useState,2),mode=_useState2[0],setMode=_useState2[1];if(preview.local.length<2){return null;}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(_StyledDetailName,{component:TextListItemVariants.dt,fullWidth:true,children:/*#__PURE__*/_jsxs(Split,{hasGutter:true,children:[/*#__PURE__*/_jsx(SplitItem,{children:/*#__PURE__*/_jsxs(OccurrencesLabel,{children:[/*#__PURE__*/_jsx(\"span\",{children:/*i18n*/i18n._(\"Occurrences\")}),/*#__PURE__*/_jsx(\"span\",{children:/*i18n*/i18n._(\"(Limited to first 10)\")})]})}),/*#__PURE__*/_jsx(SplitItem,{children:/*#__PURE__*/_jsx(MultiButtonToggle,{buttons:[['local',/*i18n*/i18n._(\"Local\")],['utc',/*i18n*/i18n._(\"UTC\")]],value:mode,onChange:function onChange(newMode){return setMode(newMode);},name:\"timezone\"})})]})}),/*#__PURE__*/_jsx(_StyledDetailValue,{component:TextListItemVariants.dd,fullWidth:true,children:preview[mode].map(function(dateStr){return/*#__PURE__*/_jsx(\"div\",{children:mode==='local'?formatDateString(dateStr,tz):formatDateString(dateStr,'UTC')},dateStr);})})]});}ScheduleOccurrences.defaultProps={preview:{local:[],utc:[]},tz:Intl.DateTimeFormat().resolvedOptions().timeZone};export default ScheduleOccurrences;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/Schedule/ScheduleOccurrences/ScheduleOccurrences.js"],"names":["React","useState","styled","Split","SplitItem","TextListItemVariants","formatDateString","DetailName","DetailValue","MultiButtonToggle","OccurrencesLabel","div","ScheduleOccurrences","preview","local","utc","tz","mode","setMode","length","dt","newMode","dd","map","dateStr","defaultProps","Intl","DateTimeFormat","resolvedOptions","timeZone"],"mappings":"qNACA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAEA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CAGA,OAASC,KAAT,CAAgBC,SAAhB,CAA2BC,oBAA3B,KAAuD,wBAAvD,CACA,OAASC,gBAAT,KAAiC,YAAjC,CACA,OAASC,UAAT,CAAqBC,WAArB,KAAwC,kBAAxC,CACA,MAAOC,CAAAA,iBAAP,KAA8B,yBAA9B,C,6IAEA,GAAMC,CAAAA,gBAAgB,CAAGR,MAAM,CAACS,GAAV,6XAAtB,C,gVAaA,QAASC,CAAAA,mBAAT,MAAuE,uBAAxCC,OAAwC,CAAxCA,OAAwC,uBAA9B,CAAEC,KAAK,CAAE,EAAT,CAAaC,GAAG,CAAE,EAAlB,CAA8B,cAANC,EAAM,MAANA,EAAM,CACrE,cAAwBf,QAAQ,CAAC,OAAD,CAAhC,wCAAOgB,IAAP,eAAaC,OAAb,eAEA,GAAIL,OAAO,CAACC,KAAR,CAAcK,MAAd,CAAuB,CAA3B,CAA8B,CAC5B,MAAO,KAAP,CACD,CAED,mBACE,wCACE,wBACE,SAAS,CAAEd,oBAAoB,CAACe,EADlC,CAEE,SAAS,KAFX,uBAKE,MAAC,KAAD,EAAO,SAAS,KAAhB,wBACE,KAAC,SAAD,wBACE,MAAC,gBAAD,yBACE,8BAAO,qBAAP,EADF,cAEE,8BAAO,+BAAP,EAFF,GADF,EADF,cAOE,KAAC,SAAD,wBACE,KAAC,iBAAD,EACE,OAAO,CAAE,CACP,CAAC,OAAD,SAAU,eAAV,CADO,CAEP,CAAC,KAAD,SAAQ,aAAR,CAFO,CADX,CAKE,KAAK,CAAEH,IALT,CAME,QAAQ,CAAE,kBAACI,OAAD,QAAaH,CAAAA,OAAO,CAACG,OAAD,CAApB,EANZ,CAOE,IAAI,CAAC,UAPP,EADF,EAPF,GALF,EADF,cA0BE,yBACE,SAAS,CAAEhB,oBAAoB,CAACiB,EADlC,CAEE,SAAS,KAFX,UAKGT,OAAO,CAACI,IAAD,CAAP,CAAcM,GAAd,CAAkB,SAACC,OAAD,qBACjB,qBACGP,IAAI,GAAK,OAAT,CACGX,gBAAgB,CAACkB,OAAD,CAAUR,EAAV,CADnB,CAEGV,gBAAgB,CAACkB,OAAD,CAAU,KAAV,CAHtB,EAAUA,OAAV,CADiB,EAAlB,CALH,EA1BF,GADF,CA0CD,CAODZ,mBAAmB,CAACa,YAApB,CAAmC,CACjCZ,OAAO,CAAE,CAAEC,KAAK,CAAE,EAAT,CAAaC,GAAG,CAAE,EAAlB,CADwB,CAEjCC,EAAE,CAAEU,IAAI,CAACC,cAAL,GAAsBC,eAAtB,GAAwCC,QAFX,CAAnC,CAKA,cAAejB,CAAAA,mBAAf","sourcesContent":["import 'styled-components/macro';\nimport React, { useState } from 'react';\nimport { shape, string } from 'prop-types';\nimport styled from 'styled-components';\n\nimport { t } from '@lingui/macro';\nimport { Split, SplitItem, TextListItemVariants } from '@patternfly/react-core';\nimport { formatDateString } from 'util/dates';\nimport { DetailName, DetailValue } from '../../DetailList';\nimport MultiButtonToggle from '../../MultiButtonToggle';\n\nconst OccurrencesLabel = styled.div`\n  display: inline-block;\n  font-size: var(--pf-c-form__label--FontSize);\n  font-weight: var(--pf-c-form__label--FontWeight);\n  line-height: var(--pf-c-form__label--LineHeight);\n  color: var(--pf-c-form__label--Color);\n\n  span:first-of-type {\n    font-weight: var(--pf-global--FontWeight--bold);\n    margin-right: 10px;\n  }\n`;\n\nfunction ScheduleOccurrences({ preview = { local: [], utc: [] }, tz }) {\n  const [mode, setMode] = useState('local');\n\n  if (preview.local.length < 2) {\n    return null;\n  }\n\n  return (\n    <>\n      <DetailName\n        component={TextListItemVariants.dt}\n        fullWidth\n        css=\"grid-column: 1 / -1\"\n      >\n        <Split hasGutter>\n          <SplitItem>\n            <OccurrencesLabel>\n              <span>{t`Occurrences`}</span>\n              <span>{t`(Limited to first 10)`}</span>\n            </OccurrencesLabel>\n          </SplitItem>\n          <SplitItem>\n            <MultiButtonToggle\n              buttons={[\n                ['local', t`Local`],\n                ['utc', t`UTC`],\n              ]}\n              value={mode}\n              onChange={(newMode) => setMode(newMode)}\n              name=\"timezone\"\n            />\n          </SplitItem>\n        </Split>\n      </DetailName>\n      <DetailValue\n        component={TextListItemVariants.dd}\n        fullWidth\n        css=\"grid-column: 1 / -1; margin-top: -10px\"\n      >\n        {preview[mode].map((dateStr) => (\n          <div key={dateStr}>\n            {mode === 'local'\n              ? formatDateString(dateStr, tz)\n              : formatDateString(dateStr, 'UTC')}\n          </div>\n        ))}\n      </DetailValue>\n    </>\n  );\n}\n\nScheduleOccurrences.propTypes = {\n  preview: shape(),\n  tz: string,\n};\n\nScheduleOccurrences.defaultProps = {\n  preview: { local: [], utc: [] },\n  tz: Intl.DateTimeFormat().resolvedOptions().timeZone,\n};\n\nexport default ScheduleOccurrences;\n"]},"metadata":{},"sourceType":"module"}