{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport { canUseDOM } from '../../helpers/util';\nimport { handleArrows } from '../../helpers';\nexport var TreeViewRoot = /*#__PURE__*/function (_React$Component) {\n  _inherits(TreeViewRoot, _React$Component);\n\n  var _super = _createSuper(TreeViewRoot);\n\n  function TreeViewRoot() {\n    var _this;\n\n    _classCallCheck(this, TreeViewRoot);\n\n    _this = _super.apply(this, arguments);\n    _this.displayName = 'TreeViewRoot';\n    _this.treeRef = React.createRef();\n\n    _this.handleKeys = function (event) {\n      if (_this.treeRef.current !== event.target.closest('.pf-c-tree-view')) {\n        return;\n      }\n\n      var activeElement = document.activeElement;\n      var key = event.key;\n      var treeItems = Array.from(_this.treeRef.current.getElementsByClassName('pf-c-tree-view__node')).filter(function (el) {\n        return !el.classList.contains('pf-m-disabled');\n      });\n\n      if (key === 'Space') {\n        document.activeElement.click();\n        event.preventDefault();\n      }\n\n      handleArrows(event, treeItems, function (element) {\n        return activeElement === element;\n      }, undefined, [], undefined, true, true);\n\n      if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n        var isExpandable = activeElement.firstElementChild.firstElementChild.classList.contains('pf-c-tree-view__node-toggle');\n        var isExpanded = activeElement.closest('li').classList.contains('pf-m-expanded');\n\n        if (key === 'ArrowLeft') {\n          if (isExpandable && isExpanded) {\n            activeElement.click();\n          } else {\n            var parentList = activeElement.closest('ul').parentElement;\n\n            if (parentList.tagName !== 'DIV') {\n              var parentButton = parentList.querySelector('button');\n              activeElement.tabIndex = -1;\n              parentButton.tabIndex = 0;\n              parentButton.focus();\n            }\n          }\n        } else {\n          if (isExpandable && !isExpanded) {\n            activeElement.tabIndex = -1;\n            activeElement.click();\n            var childElement = activeElement.closest('li').querySelector('ul > li').querySelector('button');\n            childElement.tabIndex = 0;\n            childElement.focus();\n          }\n        }\n\n        event.preventDefault();\n      }\n    };\n\n    _this.handleKeysCheckbox = function (event) {\n      if (_this.treeRef.current !== event.target.closest('.pf-c-tree-view')) {\n        return;\n      }\n\n      var activeElement = document.activeElement;\n      var key = event.key;\n\n      if (key === 'Space') {\n        document.activeElement.click();\n        event.preventDefault();\n      }\n\n      var treeNodes = Array.from(_this.treeRef.current.getElementsByClassName('pf-c-tree-view__node'));\n      handleArrows(event, treeNodes, function (element) {\n        return element.contains(activeElement);\n      }, function (element) {\n        return element.querySelector('BUTTON,INPUT');\n      }, [], undefined, true, true);\n\n      if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n        if (key === 'ArrowLeft') {\n          if (activeElement.tagName === 'INPUT') {\n            activeElement.parentElement.previousSibling && activeElement.parentElement.previousSibling.focus();\n          } else if (activeElement.previousSibling) {\n            if (activeElement.previousElementSibling.tagName === 'SPAN') {\n              activeElement.previousSibling.firstChild.focus();\n            } else {\n              activeElement.previousSibling.focus();\n            }\n          }\n        } else {\n          if (activeElement.tagName === 'INPUT') {\n            activeElement.parentElement.nextSibling && activeElement.parentElement.nextSibling.focus();\n          } else if (activeElement.nextSibling) {\n            if (activeElement.nextElementSibling.tagName === 'SPAN') {\n              activeElement.nextSibling.firstChild.focus();\n            } else {\n              activeElement.nextSibling.focus();\n            }\n          }\n        }\n\n        event.preventDefault();\n      }\n    };\n\n    _this.variantStyleModifiers = {\n      default: '',\n      compact: styles.modifiers.compact,\n      compactNoBackground: [styles.modifiers.compact, styles.modifiers.noBackground]\n    };\n    return _this;\n  }\n\n  _createClass(TreeViewRoot, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (canUseDOM) {\n        window.addEventListener('keydown', this.props.hasChecks ? this.handleKeysCheckbox : this.handleKeys);\n      }\n\n      if (this.props.hasChecks) {\n        var firstToggle = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-toggle')[0];\n\n        if (firstToggle) {\n          firstToggle.tabIndex = 0;\n        }\n\n        var firstInput = this.treeRef.current.getElementsByTagName('INPUT')[0];\n\n        if (firstInput) {\n          firstInput.tabIndex = 0;\n        }\n      } else {\n        this.treeRef.current.getElementsByClassName('pf-c-tree-view__node')[0].tabIndex = 0;\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (canUseDOM) {\n        window.removeEventListener('keydown', this.props.hasChecks ? this.handleKeysCheckbox : this.handleKeys);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var _a = this.props,\n          children = _a.children,\n          hasChecks = _a.hasChecks,\n          hasGuides = _a.hasGuides,\n          variant = _a.variant,\n          className = _a.className,\n          props = __rest(_a, [\"children\", \"hasChecks\", \"hasGuides\", \"variant\", \"className\"]);\n\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.treeView, hasGuides && styles.modifiers.guides, this.variantStyleModifiers[variant], className),\n        ref: this.treeRef\n      }, props), children);\n    }\n  }]);\n\n  return TreeViewRoot;\n}(React.Component);","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/TreeView/TreeViewRoot.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport { canUseDOM } from '../../helpers/util';\nimport { handleArrows } from '../../helpers';\n\nexport interface TreeViewRootProps {\n  /** Child nodes of the tree view */\n  children: React.ReactNode;\n  /** Flag indicating if the tree view has checkboxes */\n  hasChecks?: boolean;\n  /** Flag indicating if tree view has guide lines. */\n  hasGuides?: boolean;\n  /** Variant presentation styles for the tree view. */\n  variant?: 'default' | 'compact' | 'compactNoBackground';\n  /** Class to add to add if not passed a parentItem */\n  className?: string;\n}\n\nexport class TreeViewRoot extends React.Component<TreeViewRootProps> {\n  displayName = 'TreeViewRoot';\n  private treeRef = React.createRef<HTMLDivElement>();\n\n  componentDidMount() {\n    if (canUseDOM) {\n      window.addEventListener('keydown', this.props.hasChecks ? this.handleKeysCheckbox : this.handleKeys);\n    }\n    if (this.props.hasChecks) {\n      const firstToggle = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-toggle')[0] as HTMLElement;\n      if (firstToggle) {\n        firstToggle.tabIndex = 0;\n      }\n      const firstInput = this.treeRef.current.getElementsByTagName('INPUT')[0] as HTMLElement;\n      if (firstInput) {\n        firstInput.tabIndex = 0;\n      }\n    } else {\n      (this.treeRef.current.getElementsByClassName('pf-c-tree-view__node')[0] as HTMLElement).tabIndex = 0;\n    }\n  }\n\n  componentWillUnmount() {\n    if (canUseDOM) {\n      window.removeEventListener('keydown', this.props.hasChecks ? this.handleKeysCheckbox : this.handleKeys);\n    }\n  }\n\n  handleKeys = (event: KeyboardEvent) => {\n    if (this.treeRef.current !== (event.target as HTMLElement).closest('.pf-c-tree-view')) {\n      return;\n    }\n    const activeElement = document.activeElement;\n    const key = event.key;\n    const treeItems = Array.from(this.treeRef.current.getElementsByClassName('pf-c-tree-view__node')).filter(\n      el => !el.classList.contains('pf-m-disabled')\n    );\n\n    if (key === 'Space') {\n      (document.activeElement as HTMLElement).click();\n      event.preventDefault();\n    }\n\n    handleArrows(\n      event,\n      treeItems,\n      (element: Element) => activeElement === element,\n      undefined,\n      [],\n      undefined,\n      true,\n      true\n    );\n\n    if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n      const isExpandable = activeElement.firstElementChild.firstElementChild.classList.contains(\n        'pf-c-tree-view__node-toggle'\n      );\n      const isExpanded = activeElement.closest('li').classList.contains('pf-m-expanded');\n      if (key === 'ArrowLeft') {\n        if (isExpandable && isExpanded) {\n          (activeElement as HTMLElement).click();\n        } else {\n          const parentList = activeElement.closest('ul').parentElement;\n          if (parentList.tagName !== 'DIV') {\n            const parentButton = parentList.querySelector('button');\n            (activeElement as HTMLElement).tabIndex = -1;\n            parentButton.tabIndex = 0;\n            parentButton.focus();\n          }\n        }\n      } else {\n        if (isExpandable && !isExpanded) {\n          (activeElement as HTMLElement).tabIndex = -1;\n          (activeElement as HTMLElement).click();\n          const childElement = activeElement\n            .closest('li')\n            .querySelector('ul > li')\n            .querySelector('button');\n          childElement.tabIndex = 0;\n          childElement.focus();\n        }\n      }\n      event.preventDefault();\n    }\n  };\n\n  handleKeysCheckbox = (event: KeyboardEvent) => {\n    if (this.treeRef.current !== (event.target as HTMLElement).closest('.pf-c-tree-view')) {\n      return;\n    }\n    const activeElement = document.activeElement;\n    const key = event.key;\n\n    if (key === 'Space') {\n      (document.activeElement as HTMLElement).click();\n      event.preventDefault();\n    }\n\n    const treeNodes = Array.from(this.treeRef.current.getElementsByClassName('pf-c-tree-view__node'));\n\n    handleArrows(\n      event,\n      treeNodes as HTMLElement[],\n      (element: Element) => element.contains(activeElement),\n      (element: Element) => element.querySelector('BUTTON,INPUT'),\n      [],\n      undefined,\n      true,\n      true\n    );\n\n    if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n      if (key === 'ArrowLeft') {\n        if (activeElement.tagName === 'INPUT') {\n          activeElement.parentElement.previousSibling &&\n            (activeElement.parentElement.previousSibling as HTMLElement).focus();\n        } else if (activeElement.previousSibling) {\n          if (activeElement.previousElementSibling.tagName === 'SPAN') {\n            (activeElement.previousSibling.firstChild as HTMLElement).focus();\n          } else {\n            (activeElement.previousSibling as HTMLElement).focus();\n          }\n        }\n      } else {\n        if (activeElement.tagName === 'INPUT') {\n          activeElement.parentElement.nextSibling && (activeElement.parentElement.nextSibling as HTMLElement).focus();\n        } else if (activeElement.nextSibling) {\n          if (activeElement.nextElementSibling.tagName === 'SPAN') {\n            (activeElement.nextSibling.firstChild as HTMLElement).focus();\n          } else {\n            (activeElement.nextSibling as HTMLElement).focus();\n          }\n        }\n      }\n      event.preventDefault();\n    }\n  };\n\n  variantStyleModifiers: { [key in TreeViewRootProps['variant']]: string | string[] } = {\n    default: '',\n    compact: styles.modifiers.compact,\n    compactNoBackground: [styles.modifiers.compact, styles.modifiers.noBackground]\n  };\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { children, hasChecks, hasGuides, variant, className, ...props } = this.props;\n    return (\n      <div\n        className={css(\n          styles.treeView,\n          hasGuides && styles.modifiers.guides,\n          this.variantStyleModifiers[variant],\n          className\n        )}\n        ref={this.treeRef}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}