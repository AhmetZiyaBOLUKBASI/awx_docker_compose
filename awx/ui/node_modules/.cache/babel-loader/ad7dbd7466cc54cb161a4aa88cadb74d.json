{"ast":null,"code":"import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _classCallCheck from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import Base from'../Base';var CredentialTypes=/*#__PURE__*/function(_Base){_inherits(CredentialTypes,_Base);var _super=_createSuper(CredentialTypes);function CredentialTypes(http){var _this;_classCallCheck(this,CredentialTypes);_this=_super.call(this,http);_this.baseUrl='api/v2/credential_types/';return _this;}_createClass(CredentialTypes,[{key:\"loadAllTypes\",value:function(){var _loadAllTypes=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var acceptableKinds,pageSize,_yield$this$read,_yield$this$read$data,next,results,nextResults,_yield$this$read2,data,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:acceptableKinds=_args.length>0&&_args[0]!==undefined?_args[0]:['machine','cloud','net','ssh','vault','kubernetes'];pageSize=200;// The number of credential types a user can have is unlimited. In practice, it is unlikely for\n// users to have more than a page at the maximum request size.\n_context.next=4;return this.read({page_size:pageSize});case 4:_yield$this$read=_context.sent;_yield$this$read$data=_yield$this$read.data;next=_yield$this$read$data.next;results=_yield$this$read$data.results;nextResults=[];if(!next){_context.next=15;break;}_context.next=12;return this.read({page_size:pageSize,page:2});case 12:_yield$this$read2=_context.sent;data=_yield$this$read2.data;nextResults=data.results;case 15:return _context.abrupt(\"return\",results.concat(nextResults).filter(function(type){return acceptableKinds.includes(type.kind);}));case 16:case\"end\":return _context.stop();}}},_callee,this);}));function loadAllTypes(){return _loadAllTypes.apply(this,arguments);}return loadAllTypes;}()},{key:\"test\",value:function test(id,data){return this.http.post(\"\".concat(this.baseUrl).concat(id,\"/test/\"),data);}}]);return CredentialTypes;}(Base);export default CredentialTypes;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/api/models/CredentialTypes.js"],"names":["Base","CredentialTypes","http","baseUrl","acceptableKinds","pageSize","read","page_size","data","next","results","nextResults","page","concat","filter","type","includes","kind","id","post"],"mappings":"6lBAAA,MAAOA,CAAAA,IAAP,KAAiB,SAAjB,C,GAEMC,CAAAA,e,wGACJ,yBAAYC,IAAZ,CAAkB,iDAChB,uBAAMA,IAAN,EACA,MAAKC,OAAL,CAAe,0BAAf,CAFgB,aAGjB,C,6IAED,uQACEC,eADF,+CACoB,CAAC,SAAD,CAAY,OAAZ,CAAqB,KAArB,CAA4B,KAA5B,CAAmC,OAAnC,CAA4C,YAA5C,CADpB,CAGQC,QAHR,CAGmB,GAHnB,CAIE;AACA;AALF,sBAQY,MAAKC,IAAL,CAAU,CAAEC,SAAS,CAAEF,QAAb,CAAV,CARZ,8EAOIG,IAPJ,CAOYC,IAPZ,uBAOYA,IAPZ,CAOkBC,OAPlB,uBAOkBA,OAPlB,CASMC,WATN,CASoB,EATpB,KAUMF,IAVN,iDAW2B,MAAKH,IAAL,CAAU,CAC/BC,SAAS,CAAEF,QADoB,CAE/BO,IAAI,CAAE,CAFyB,CAAV,CAX3B,yCAWYJ,IAXZ,mBAWYA,IAXZ,CAeIG,WAAW,CAAGH,IAAI,CAACE,OAAnB,CAfJ,wCAiBSA,OAAO,CACXG,MADI,CACGF,WADH,EAEJG,MAFI,CAEG,SAACC,IAAD,QAAUX,CAAAA,eAAe,CAACY,QAAhB,CAAyBD,IAAI,CAACE,IAA9B,CAAV,EAFH,CAjBT,8D,kHAsBA,cAAKC,EAAL,CAASV,IAAT,CAAe,CACb,MAAO,MAAKN,IAAL,CAAUiB,IAAV,WAAkB,KAAKhB,OAAvB,SAAiCe,EAAjC,WAA6CV,IAA7C,CAAP,CACD,C,6BA9B2BR,I,EAiC9B,cAAeC,CAAAA,eAAf","sourcesContent":["import Base from '../Base';\n\nclass CredentialTypes extends Base {\n  constructor(http) {\n    super(http);\n    this.baseUrl = 'api/v2/credential_types/';\n  }\n\n  async loadAllTypes(\n    acceptableKinds = ['machine', 'cloud', 'net', 'ssh', 'vault', 'kubernetes']\n  ) {\n    const pageSize = 200;\n    // The number of credential types a user can have is unlimited. In practice, it is unlikely for\n    // users to have more than a page at the maximum request size.\n    const {\n      data: { next, results },\n    } = await this.read({ page_size: pageSize });\n    let nextResults = [];\n    if (next) {\n      const { data } = await this.read({\n        page_size: pageSize,\n        page: 2,\n      });\n      nextResults = data.results;\n    }\n    return results\n      .concat(nextResults)\n      .filter((type) => acceptableKinds.includes(type.kind));\n  }\n\n  test(id, data) {\n    return this.http.post(`${this.baseUrl}${id}/test/`, data);\n  }\n}\n\nexport default CredentialTypes;\n"]},"metadata":{},"sourceType":"module"}