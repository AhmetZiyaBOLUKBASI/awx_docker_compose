{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nexport var ContextSelectorToggle = /*#__PURE__*/function (_React$Component) {\n  _inherits(ContextSelectorToggle, _React$Component);\n\n  var _super = _createSuper(ContextSelectorToggle);\n\n  function ContextSelectorToggle() {\n    var _this;\n\n    _classCallCheck(this, ContextSelectorToggle);\n\n    _this = _super.apply(this, arguments);\n    _this.toggle = React.createRef();\n\n    _this.componentDidMount = function () {\n      document.addEventListener('mousedown', _this.onDocClick);\n      document.addEventListener('touchstart', _this.onDocClick);\n      document.addEventListener('keydown', _this.onEscPress);\n    };\n\n    _this.componentWillUnmount = function () {\n      document.removeEventListener('mousedown', _this.onDocClick);\n      document.removeEventListener('touchstart', _this.onDocClick);\n      document.removeEventListener('keydown', _this.onEscPress);\n    };\n\n    _this.onDocClick = function (event) {\n      var _this$props = _this.props,\n          isOpen = _this$props.isOpen,\n          parentRef = _this$props.parentRef,\n          onToggle = _this$props.onToggle;\n\n      if (isOpen && (parentRef === null || parentRef === void 0 ? void 0 : parentRef.current) && !parentRef.current.contains(event.target)) {\n        onToggle(null, false);\n\n        _this.toggle.current.focus();\n      }\n    };\n\n    _this.onEscPress = function (event) {\n      var _this$props2 = _this.props,\n          isOpen = _this$props2.isOpen,\n          onToggle = _this$props2.onToggle;\n      var keyCode = event.keyCode || event.which;\n\n      if (isOpen && keyCode === KEY_CODES.ESCAPE_KEY) {\n        onToggle(null, false);\n\n        _this.toggle.current.focus();\n      }\n    };\n\n    _this.onKeyDown = function (event) {\n      var _this$props3 = _this.props,\n          isOpen = _this$props3.isOpen,\n          onToggle = _this$props3.onToggle,\n          onEnter = _this$props3.onEnter;\n\n      if (event.keyCode === KEY_CODES.TAB && !isOpen || event.key !== KEY_CODES.ENTER) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if ((event.keyCode === KEY_CODES.TAB || event.keyCode === KEY_CODES.ENTER || event.key !== KEY_CODES.SPACE) && isOpen) {\n        onToggle(null, !isOpen);\n      } else if ((event.keyCode === KEY_CODES.ENTER || event.key === ' ') && !isOpen) {\n        onToggle(null, !isOpen);\n        onEnter();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ContextSelectorToggle, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          toggleText = _a.toggleText,\n          isOpen = _a.isOpen,\n          onToggle = _a.onToggle,\n          id = _a.id,\n          isPlain = _a.isPlain,\n          isText = _a.isText,\n          isActive = _a.isActive,\n          onEnter = _a.onEnter,\n          parentRef = _a.parentRef,\n          props = __rest(_a, [\"className\", \"toggleText\", \"isOpen\", \"onToggle\", \"id\", \"isPlain\", \"isText\", \"isActive\", \"onEnter\", \"parentRef\"]);\n\n      return React.createElement(\"button\", Object.assign({}, props, {\n        id: id,\n        ref: this.toggle,\n        className: css(styles.contextSelectorToggle, isActive && styles.modifiers.active, isPlain && styles.modifiers.plain, isText && styles.modifiers.text, className),\n        type: \"button\",\n        onClick: function onClick(event) {\n          return onToggle(event, !isOpen);\n        },\n        \"aria-expanded\": isOpen,\n        onKeyDown: this.onKeyDown\n      }), React.createElement(\"span\", {\n        className: css(styles.contextSelectorToggleText)\n      }, toggleText), React.createElement(\"span\", {\n        className: css(styles.contextSelectorToggleIcon)\n      }, React.createElement(CaretDownIcon, {\n        \"aria-hidden\": true\n      })));\n    }\n  }]);\n\n  return ContextSelectorToggle;\n}(React.Component);\nContextSelectorToggle.displayName = 'ContextSelectorToggle';\nContextSelectorToggle.defaultProps = {\n  className: '',\n  toggleText: '',\n  isOpen: false,\n  onEnter: function onEnter() {\n    return undefined;\n  },\n  parentRef: null,\n  isActive: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle: function onToggle(event, value) {\n    return undefined;\n  }\n};","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/ContextSelector/ContextSelectorToggle.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ContextSelectorToggleProps {\n  /** HTML ID of toggle */\n  id: string;\n  /** Classes applied to root element of toggle */\n  className?: string;\n  /** Text that appears in the Context Selector Toggle */\n  toggleText?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (event: any, value: boolean) => void;\n  /** Callback for toggle open on keyboard entry */\n  onEnter?: () => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Flag to indicate the toggle has no border or background */\n  isPlain?: boolean;\n  /** Flag to indicate if toggle is textual toggle */\n  isText?: boolean;\n}\n\nexport class ContextSelectorToggle extends React.Component<ContextSelectorToggleProps> {\n  static displayName = 'ContextSelectorToggle';\n  static defaultProps: PickOptional<ContextSelectorToggleProps> = {\n    className: '',\n    toggleText: '',\n    isOpen: false,\n    onEnter: () => undefined as any,\n    parentRef: null as any,\n    isActive: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (event: any, value: boolean) => undefined as any\n  };\n\n  toggle: React.RefObject<HTMLButtonElement> = React.createRef();\n\n  componentDidMount = () => {\n    document.addEventListener('mousedown', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.onEscPress);\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener('mousedown', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.onEscPress);\n  };\n\n  onDocClick = (event: any) => {\n    const { isOpen, parentRef, onToggle } = this.props;\n    if (isOpen && parentRef?.current && !parentRef.current.contains(event.target)) {\n      onToggle(null, false);\n      this.toggle.current.focus();\n    }\n  };\n\n  onEscPress = (event: any) => {\n    const { isOpen, onToggle } = this.props;\n    const keyCode = event.keyCode || event.which;\n    if (isOpen && keyCode === KEY_CODES.ESCAPE_KEY) {\n      onToggle(null, false);\n      this.toggle.current.focus();\n    }\n  };\n\n  onKeyDown = (event: any) => {\n    const { isOpen, onToggle, onEnter } = this.props;\n    if ((event.keyCode === KEY_CODES.TAB && !isOpen) || event.key !== KEY_CODES.ENTER) {\n      return;\n    }\n    event.preventDefault();\n    if (\n      (event.keyCode === KEY_CODES.TAB || event.keyCode === KEY_CODES.ENTER || event.key !== KEY_CODES.SPACE) &&\n      isOpen\n    ) {\n      onToggle(null, !isOpen);\n    } else if ((event.keyCode === KEY_CODES.ENTER || event.key === ' ') && !isOpen) {\n      onToggle(null, !isOpen);\n      onEnter();\n    }\n  };\n\n  render() {\n    const {\n      className,\n      toggleText,\n      isOpen,\n      onToggle,\n      id,\n      isPlain,\n      isText,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isActive,\n      onEnter,\n      parentRef,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    return (\n      <button\n        {...props}\n        id={id}\n        ref={this.toggle}\n        className={css(\n          styles.contextSelectorToggle,\n          isActive && styles.modifiers.active,\n          isPlain && styles.modifiers.plain,\n          isText && styles.modifiers.text,\n          className\n        )}\n        type=\"button\"\n        onClick={event => onToggle(event, !isOpen)}\n        aria-expanded={isOpen}\n        onKeyDown={this.onKeyDown}\n      >\n        <span className={css(styles.contextSelectorToggleText)}>{toggleText}</span>\n        <span className={css(styles.contextSelectorToggleIcon)}>\n          <CaretDownIcon aria-hidden />\n        </span>\n      </button>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}