{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from'react';import{matchPath,Link,useHistory}from'react-router-dom';import{NavExpandable,NavItem}from'@patternfly/react-core';import{jsx as _jsx}from\"react/jsx-runtime\";function NavExpandableGroup(props){var history=useHistory();var groupId=props.groupId,groupTitle=props.groupTitle,routes=props.routes;// Extract a list of paths from the route params and store them for later. This creates\n// an array of url paths associated with any NavItem component rendered by this component.\nvar navItemPaths=routes.map(function(_ref){var path=_ref.path;return path;});var isActive=navItemPaths.some(isActivePath);function isActivePath(path){return Boolean(matchPath(history.location.pathname,{path:path}));}if(routes.length===1&&groupId==='settings'){var _routes=_slicedToArray(routes,1),path=_routes[0].path;return/*#__PURE__*/_jsx(NavItem,{itemId:groupId,isActive:isActivePath(path),children:/*#__PURE__*/_jsx(Link,{to:path,children:groupTitle})},path);}return/*#__PURE__*/_jsx(NavExpandable,{isActive:isActive,isExpanded:true,groupId:groupId,ouiaId:groupId,title:groupTitle,children:routes.map(function(_ref2){var path=_ref2.path,title=_ref2.title;return/*#__PURE__*/_jsx(NavItem,{groupId:groupId,isActive:isActivePath(path),children:/*#__PURE__*/_jsx(Link,{to:path,children:title})},path);})});}export default NavExpandableGroup;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/AppContainer/NavExpandableGroup.js"],"names":["React","matchPath","Link","useHistory","NavExpandable","NavItem","NavExpandableGroup","props","history","groupId","groupTitle","routes","navItemPaths","map","path","isActive","some","isActivePath","Boolean","location","pathname","length","title"],"mappings":"uGAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,SAAT,CAAoBC,IAApB,CAA0BC,UAA1B,KAA4C,kBAA5C,CACA,OAASC,aAAT,CAAwBC,OAAxB,KAAuC,wBAAvC,C,2CAEA,QAASC,CAAAA,kBAAT,CAA4BC,KAA5B,CAAmC,CACjC,GAAMC,CAAAA,OAAO,CAAGL,UAAU,EAA1B,CACA,GAAQM,CAAAA,OAAR,CAAwCF,KAAxC,CAAQE,OAAR,CAAiBC,UAAjB,CAAwCH,KAAxC,CAAiBG,UAAjB,CAA6BC,MAA7B,CAAwCJ,KAAxC,CAA6BI,MAA7B,CAEA;AACA;AACA,GAAMC,CAAAA,YAAY,CAAGD,MAAM,CAACE,GAAP,CAAW,kBAAGC,CAAAA,IAAH,MAAGA,IAAH,OAAcA,CAAAA,IAAd,EAAX,CAArB,CAEA,GAAMC,CAAAA,QAAQ,CAAGH,YAAY,CAACI,IAAb,CAAkBC,YAAlB,CAAjB,CAEA,QAASA,CAAAA,YAAT,CAAsBH,IAAtB,CAA4B,CAC1B,MAAOI,CAAAA,OAAO,CAACjB,SAAS,CAACO,OAAO,CAACW,QAAR,CAAiBC,QAAlB,CAA4B,CAAEN,IAAI,CAAJA,IAAF,CAA5B,CAAV,CAAd,CACD,CAED,GAAIH,MAAM,CAACU,MAAP,GAAkB,CAAlB,EAAuBZ,OAAO,GAAK,UAAvC,CAAmD,CACjD,2BAAmBE,MAAnB,IAASG,IAAT,YAASA,IAAT,CACA,mBACE,KAAC,OAAD,EAAS,MAAM,CAAEL,OAAjB,CAA0B,QAAQ,CAAEQ,YAAY,CAACH,IAAD,CAAhD,uBACE,KAAC,IAAD,EAAM,EAAE,CAAEA,IAAV,UAAiBJ,UAAjB,EADF,EAA6DI,IAA7D,CADF,CAKD,CAED,mBACE,KAAC,aAAD,EACE,QAAQ,CAAEC,QADZ,CAEE,UAAU,KAFZ,CAGE,OAAO,CAAEN,OAHX,CAIE,MAAM,CAAEA,OAJV,CAKE,KAAK,CAAEC,UALT,UAOGC,MAAM,CAACE,GAAP,CAAW,mBAAGC,CAAAA,IAAH,OAAGA,IAAH,CAASQ,KAAT,OAASA,KAAT,oBACV,KAAC,OAAD,EAAS,OAAO,CAAEb,OAAlB,CAA2B,QAAQ,CAAEQ,YAAY,CAACH,IAAD,CAAjD,uBACE,KAAC,IAAD,EAAM,EAAE,CAAEA,IAAV,UAAiBQ,KAAjB,EADF,EAA8DR,IAA9D,CADU,EAAX,CAPH,EADF,CAeD,CAQD,cAAeR,CAAAA,kBAAf","sourcesContent":["import React from 'react';\nimport PropTypes, { oneOfType, string, arrayOf } from 'prop-types';\nimport { matchPath, Link, useHistory } from 'react-router-dom';\nimport { NavExpandable, NavItem } from '@patternfly/react-core';\n\nfunction NavExpandableGroup(props) {\n  const history = useHistory();\n  const { groupId, groupTitle, routes } = props;\n\n  // Extract a list of paths from the route params and store them for later. This creates\n  // an array of url paths associated with any NavItem component rendered by this component.\n  const navItemPaths = routes.map(({ path }) => path);\n\n  const isActive = navItemPaths.some(isActivePath);\n\n  function isActivePath(path) {\n    return Boolean(matchPath(history.location.pathname, { path }));\n  }\n\n  if (routes.length === 1 && groupId === 'settings') {\n    const [{ path }] = routes;\n    return (\n      <NavItem itemId={groupId} isActive={isActivePath(path)} key={path}>\n        <Link to={path}>{groupTitle}</Link>\n      </NavItem>\n    );\n  }\n\n  return (\n    <NavExpandable\n      isActive={isActive}\n      isExpanded\n      groupId={groupId}\n      ouiaId={groupId}\n      title={groupTitle}\n    >\n      {routes.map(({ path, title }) => (\n        <NavItem groupId={groupId} isActive={isActivePath(path)} key={path}>\n          <Link to={path}>{title}</Link>\n        </NavItem>\n      ))}\n    </NavExpandable>\n  );\n}\n\nNavExpandableGroup.propTypes = {\n  groupId: string.isRequired,\n  groupTitle: oneOfType([PropTypes.element, string]).isRequired,\n  routes: arrayOf(PropTypes.object).isRequired,\n};\n\nexport default NavExpandableGroup;\n"]},"metadata":{},"sourceType":"module"}