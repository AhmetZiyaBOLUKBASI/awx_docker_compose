{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport { Text, TextVariants } from '../Text';\nimport { Button, ButtonVariant } from '../Button';\nexport var NotificationDrawerHeader = function NotificationDrawerHeader(_a) {\n  var children = _a.children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      count = _a.count,\n      _a$closeButtonAriaLab = _a.closeButtonAriaLabel,\n      closeButtonAriaLabel = _a$closeButtonAriaLab === void 0 ? 'Close' : _a$closeButtonAriaLab,\n      customText = _a.customText,\n      onClose = _a.onClose,\n      _a$title = _a.title,\n      title = _a$title === void 0 ? 'Notifications' : _a$title,\n      _a$unreadText = _a.unreadText,\n      unreadText = _a$unreadText === void 0 ? 'unread' : _a$unreadText,\n      props = __rest(_a, [\"children\", \"className\", \"count\", \"closeButtonAriaLabel\", \"customText\", \"onClose\", \"title\", \"unreadText\"]);\n\n  return React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerHeader, className)\n  }), React.createElement(Text, {\n    component: TextVariants.h1,\n    className: css(styles.notificationDrawerHeaderTitle)\n  }, title), (customText !== undefined || count !== undefined) && React.createElement(\"span\", {\n    className: css(styles.notificationDrawerHeaderStatus)\n  }, customText || \"\".concat(count, \" \").concat(unreadText)), (children || onClose) && React.createElement(\"div\", {\n    className: css(styles.notificationDrawerHeaderAction)\n  }, children, onClose && React.createElement(\"div\", null, React.createElement(Button, {\n    variant: ButtonVariant.plain,\n    \"aria-label\": closeButtonAriaLabel,\n    onClick: onClose\n  }, React.createElement(TimesIcon, {\n    \"aria-hidden\": \"true\"\n  })))));\n};\nNotificationDrawerHeader.displayName = 'NotificationDrawerHeader';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/NotificationDrawer/NotificationDrawerHeader.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,gFAAnB;AACA,OAAO,SAAP,MAAsB,mDAAtB;AAEA,SAAS,IAAT,EAAe,YAAf,QAAmC,SAAnC;AACA,SAAS,MAAT,EAAiB,aAAjB,QAAsC,WAAtC;AAqBA,OAAO,IAAM,wBAAwB,GAA2D,SAAnF,wBAAmF,CAAC,EAAD,EAU5D;AAV6D,MAC/F,QAD+F,GAQ1E,EAR0E,CAC/F,QAD+F;AAAA,qBAQ1E,EAR0E,CAE/F,SAF+F;AAAA,MAE/F,SAF+F,6BAEnF,EAFmF;AAAA,MAG/F,KAH+F,GAQ1E,EAR0E,CAG/F,KAH+F;AAAA,8BAQ1E,EAR0E,CAI/F,oBAJ+F;AAAA,MAI/F,oBAJ+F,sCAIxE,OAJwE;AAAA,MAK/F,UAL+F,GAQ1E,EAR0E,CAK/F,UAL+F;AAAA,MAM/F,OAN+F,GAQ1E,EAR0E,CAM/F,OAN+F;AAAA,iBAQ1E,EAR0E,CAO/F,KAP+F;AAAA,MAO/F,KAP+F,yBAOvF,eAPuF;AAAA,sBAQ1E,EAR0E,CAQ/F,UAR+F;AAAA,MAQ/F,UAR+F,8BAQlF,QARkF;AAAA,MAS5F,KAT4F,GASvF,MAAA,CAAA,EAAA,EATuF,CAAA,UAAA,EAAA,WAAA,EAAA,OAAA,EAAA,sBAAA,EAAA,YAAA,EAAA,SAAA,EAAA,OAAA,EAAA,YAAA,CASvF,CATuF;;AAU5D,SACnC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAS,KAAT,EAAc;AAAE,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,wBAAR,EAAkC,SAAlC;AAAhB,GAAd,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AAAC,IAAA,SAAS,EAAE,YAAY,CAAC,EAAzB;AAA6B,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,6BAAR;AAA3C,GAAL,EACG,KADH,CADF,EAIG,CAAC,UAAU,KAAK,SAAf,IAA4B,KAAK,KAAK,SAAvC,KACC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,8BAAR;AAApB,GAAA,EAA8D,UAAU,cAAO,KAAP,cAAgB,UAAhB,CAAxE,CALJ,EAOG,CAAC,QAAQ,IAAI,OAAb,KACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,8BAAR;AAAnB,GAAA,EACG,QADH,EAEG,OAAO,IACN,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AAAC,IAAA,OAAO,EAAE,aAAa,CAAC,KAAxB;AAA6B,kBAAc,oBAA3C;AAAiE,IAAA,OAAO,EAAE;AAA1E,GAAP,EACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU;AAAA,mBAAa;AAAb,GAAV,CADF,CADF,CAHJ,CARJ,CADmC;AAqBpC,CA/BM;AAgCP,wBAAwB,CAAC,WAAzB,GAAuC,0BAAvC","sourcesContent":["import * as React from 'react';\n\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\n\nimport { Text, TextVariants } from '../Text';\nimport { Button, ButtonVariant } from '../Button';\n\nexport interface NotificationDrawerHeaderProps extends React.HTMLProps<HTMLDivElement> {\n  /**  Content rendered inside the drawer */\n  children?: React.ReactNode;\n  /**  Additional classes for notification drawer header. */\n  className?: string;\n  /** Adds custom accessible text to the notification drawer close button. */\n  closeButtonAriaLabel?: string;\n  /**  Notification drawer heading count */\n  count?: number;\n  /**  Notification drawer heading custom text which can be used instead of providing count/unreadText */\n  customText?: string;\n  /**  Callback for when close button is clicked */\n  onClose?: () => void;\n  /**  Notification drawer heading title */\n  title?: string;\n  /**  Notification drawer heading unread text used in combination with a count */\n  unreadText?: string;\n}\n\nexport const NotificationDrawerHeader: React.FunctionComponent<NotificationDrawerHeaderProps> = ({\n  children,\n  className = '',\n  count,\n  closeButtonAriaLabel = 'Close',\n  customText,\n  onClose,\n  title = 'Notifications',\n  unreadText = 'unread',\n  ...props\n}: NotificationDrawerHeaderProps) => (\n  <div {...props} className={css(styles.notificationDrawerHeader, className)}>\n    <Text component={TextVariants.h1} className={css(styles.notificationDrawerHeaderTitle)}>\n      {title}\n    </Text>\n    {(customText !== undefined || count !== undefined) && (\n      <span className={css(styles.notificationDrawerHeaderStatus)}>{customText || `${count} ${unreadText}`}</span>\n    )}\n    {(children || onClose) && (\n      <div className={css(styles.notificationDrawerHeaderAction)}>\n        {children}\n        {onClose && (\n          <div>\n            <Button variant={ButtonVariant.plain} aria-label={closeButtonAriaLabel} onClick={onClose}>\n              <TimesIcon aria-hidden=\"true\" />\n            </Button>\n          </div>\n        )}\n      </div>\n    )}\n  </div>\n);\nNotificationDrawerHeader.displayName = 'NotificationDrawerHeader';\n"]},"metadata":{},"sourceType":"module"}