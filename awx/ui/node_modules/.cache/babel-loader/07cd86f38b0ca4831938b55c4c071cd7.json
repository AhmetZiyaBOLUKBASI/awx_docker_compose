{"ast":null,"code":"import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{i18n}from\"@lingui/core\";import React,{useState}from'react';import{useParams,Link}from'react-router-dom';import{Select,SelectOption,SelectGroup,SelectVariant,Chip}from'@patternfly/react-core';import ChipGroup from'components/ChipGroup';import{stringIsUUID}from'util/strings';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var JOB_URL_SEGMENT_MAP={job:'playbook',project_update:'project',system_job:'management',system:'system_job',inventory_update:'inventory',workflow_job:'workflow'};function WorkflowOutputNavigation(_ref){var relatedJobs=_ref.relatedJobs,parentRef=_ref.parentRef;var _useParams=useParams(),id=_useParams.id;var relevantResults=relatedJobs.filter(function(_ref2){var jobId=_ref2.job,unified_job_type=_ref2.summary_fields.unified_job_template.unified_job_type;return jobId&&\"\".concat(jobId)!==id&&unified_job_type!=='workflow_approval';});var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isOpen=_useState2[0],setIsOpen=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),filterBy=_useState4[0],setFilterBy=_useState4[1];var _useState5=useState(relevantResults),_useState6=_slicedToArray(_useState5,2),sortedJobs=_useState6[0],setSortedJobs=_useState6[1];var handleFilter=function handleFilter(v){if(filterBy===v){setSortedJobs(relevantResults);setFilterBy();}else{setFilterBy(v);setSortedJobs(relevantResults.filter(function(node){return node.summary_fields.job.status===v.toLowerCase()&&\"\".concat(node.job)!==id;}));}};var numSuccessJobs=relevantResults.filter(function(node){return node.summary_fields.job.status==='successful';}).length;var numFailedJobs=relevantResults.length-numSuccessJobs;return/*#__PURE__*/_jsx(Select,{variant:SelectVariant.typeaheadMulti,menuAppendTo:parentRef===null||parentRef===void 0?void 0:parentRef.current,onToggle:function onToggle(){setIsOpen(!isOpen);},selections:filterBy,onSelect:function onSelect(e,v){if(v!=='Failed'&&v!=='Successful')return;handleFilter(v);},isOpen:isOpen,isGrouped:true,hasInlineFilter:true,placeholderText:/*i18n*/i18n._(\"Workflow Job 1/{0}\",{0:relevantResults.length}),chipGroupComponent:/*#__PURE__*/_jsx(ChipGroup,{numChips:1,totalChips:1,children:/*#__PURE__*/_jsx(Chip,{onClick:function onClick(){return handleFilter(filterBy);},children:[filterBy]},filterBy)}),children:[/*#__PURE__*/_jsxs(SelectGroup,{label:/*i18n*/i18n._(\"Workflow Statuses\"),children:[/*#__PURE__*/_jsx(SelectOption,{description:/*i18n*/i18n._(\"Filter by failed jobs\"),value:/*i18n*/i18n._(\"Failed\"),itemCount:numFailedJobs},\"failed\"),/*#__PURE__*/_jsx(SelectOption,{description:/*i18n*/i18n._(\"Filter by successful jobs\"),value:/*i18n*/i18n._(\"Successful\"),itemCount:numSuccessJobs},\"successful\")]},\"status\"),/*#__PURE__*/_jsx(SelectGroup,{label:/*i18n*/i18n._(\"Workflow Nodes\"),children:sortedJobs===null||sortedJobs===void 0?void 0:sortedJobs.map(function(node){var _node$summary_fields$;return/*#__PURE__*/_jsx(SelectOption,{to:\"/jobs/\".concat(JOB_URL_SEGMENT_MAP[node.summary_fields.unified_job_template.unified_job_type],\"/\").concat((_node$summary_fields$=node.summary_fields.job)===null||_node$summary_fields$===void 0?void 0:_node$summary_fields$.id,\"/output\"),component:Link,value:node.summary_fields.unified_job_template.name,children:stringIsUUID(node.identifier)?node.summary_fields.unified_job_template.name:node.identifier},node.id);})},\"nodes\")]},\"\".concat(id));}export default WorkflowOutputNavigation;","map":{"version":3,"sources":["/awx_devel/awx/ui/src/components/WorkflowOutputNavigation/WorkflowOutputNavigation.js"],"names":["React","useState","useParams","Link","Select","SelectOption","SelectGroup","SelectVariant","Chip","ChipGroup","stringIsUUID","JOB_URL_SEGMENT_MAP","job","project_update","system_job","system","inventory_update","workflow_job","WorkflowOutputNavigation","relatedJobs","parentRef","id","relevantResults","filter","jobId","unified_job_type","summary_fields","unified_job_template","isOpen","setIsOpen","filterBy","setFilterBy","sortedJobs","setSortedJobs","handleFilter","v","node","status","toLowerCase","numSuccessJobs","length","numFailedJobs","typeaheadMulti","current","e","map","name","identifier"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { t } from '@lingui/macro';\nimport {\n  Select,\n  SelectOption,\n  SelectGroup,\n  SelectVariant,\n  Chip,\n} from '@patternfly/react-core';\nimport ChipGroup from 'components/ChipGroup';\nimport { stringIsUUID } from 'util/strings';\n\nconst JOB_URL_SEGMENT_MAP = {\n  job: 'playbook',\n  project_update: 'project',\n  system_job: 'management',\n  system: 'system_job',\n  inventory_update: 'inventory',\n  workflow_job: 'workflow',\n};\n\nfunction WorkflowOutputNavigation({ relatedJobs, parentRef }) {\n  const { id } = useParams();\n\n  const relevantResults = relatedJobs.filter(\n    ({\n      job: jobId,\n      summary_fields: {\n        unified_job_template: { unified_job_type },\n      },\n    }) => jobId && `${jobId}` !== id && unified_job_type !== 'workflow_approval'\n  );\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [filterBy, setFilterBy] = useState();\n  const [sortedJobs, setSortedJobs] = useState(relevantResults);\n\n  const handleFilter = (v) => {\n    if (filterBy === v) {\n      setSortedJobs(relevantResults);\n      setFilterBy();\n    } else {\n      setFilterBy(v);\n      setSortedJobs(\n        relevantResults.filter(\n          (node) =>\n            node.summary_fields.job.status === v.toLowerCase() &&\n            `${node.job}` !== id\n        )\n      );\n    }\n  };\n\n  const numSuccessJobs = relevantResults.filter(\n    (node) => node.summary_fields.job.status === 'successful'\n  ).length;\n  const numFailedJobs = relevantResults.length - numSuccessJobs;\n\n  return (\n    <Select\n      key={`${id}`}\n      variant={SelectVariant.typeaheadMulti}\n      menuAppendTo={parentRef?.current}\n      onToggle={() => {\n        setIsOpen(!isOpen);\n      }}\n      selections={filterBy}\n      onSelect={(e, v) => {\n        if (v !== 'Failed' && v !== 'Successful') return;\n        handleFilter(v);\n      }}\n      isOpen={isOpen}\n      isGrouped\n      hasInlineFilter\n      placeholderText={t`Workflow Job 1/${relevantResults.length}`}\n      chipGroupComponent={\n        <ChipGroup numChips={1} totalChips={1}>\n          <Chip key={filterBy} onClick={() => handleFilter(filterBy)}>\n            {[filterBy]}\n          </Chip>\n        </ChipGroup>\n      }\n    >\n      {[\n        <SelectGroup label={t`Workflow Statuses`} key=\"status\">\n          <SelectOption\n            description={t`Filter by failed jobs`}\n            key=\"failed\"\n            value={t`Failed`}\n            itemCount={numFailedJobs}\n          />\n          <SelectOption\n            description={t`Filter by successful jobs`}\n            key=\"successful\"\n            value={t`Successful`}\n            itemCount={numSuccessJobs}\n          />\n        </SelectGroup>,\n        <SelectGroup label={t`Workflow Nodes`} key=\"nodes\">\n          {sortedJobs?.map((node) => (\n            <SelectOption\n              key={node.id}\n              to={`/jobs/${\n                JOB_URL_SEGMENT_MAP[\n                  node.summary_fields.unified_job_template.unified_job_type\n                ]\n              }/${node.summary_fields.job?.id}/output`}\n              component={Link}\n              value={node.summary_fields.unified_job_template.name}\n            >\n              {stringIsUUID(node.identifier)\n                ? node.summary_fields.unified_job_template.name\n                : node.identifier}\n            </SelectOption>\n          ))}\n        </SelectGroup>,\n      ]}\n    </Select>\n  );\n}\n\nexport default WorkflowOutputNavigation;\n"]},"metadata":{},"sourceType":"module"}