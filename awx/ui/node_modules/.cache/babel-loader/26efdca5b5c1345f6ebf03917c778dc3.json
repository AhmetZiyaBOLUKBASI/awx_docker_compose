{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { FormFieldGroupToggle } from './FormFieldGroupToggle';\nimport { GenerateId } from '../../helpers';\nexport var InternalFormFieldGroup = function InternalFormFieldGroup(_a) {\n  var children = _a.children,\n      className = _a.className,\n      header = _a.header,\n      isExpandable = _a.isExpandable,\n      isExpanded = _a.isExpanded,\n      onToggle = _a.onToggle,\n      toggleAriaLabel = _a.toggleAriaLabel,\n      props = __rest(_a, [\"children\", \"className\", \"header\", \"isExpandable\", \"isExpanded\", \"onToggle\", \"toggleAriaLabel\"]);\n\n  var headerTitleText = header ? header.props.titleText : null;\n\n  if (isExpandable && !toggleAriaLabel && !headerTitleText) {\n    // eslint-disable-next-line no-console\n    console.error('FormFieldGroupExpandable:', 'toggleAriaLabel or the titleText prop of FormFieldGroupHeader is required to make the toggle button accessible');\n  }\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.formFieldGroup, isExpanded && isExpandable && styles.modifiers.expanded, className),\n    role: \"group\"\n  }, headerTitleText && {\n    'aria-labelledby': \"\".concat(header.props.titleText.id)\n  }, props), isExpandable && React.createElement(GenerateId, {\n    prefix: \"form-field-group-toggle\"\n  }, function (id) {\n    return React.createElement(FormFieldGroupToggle, Object.assign({\n      onToggle: onToggle,\n      isExpanded: isExpanded,\n      \"aria-label\": toggleAriaLabel,\n      toggleId: id\n    }, headerTitleText && {\n      'aria-labelledby': \"\".concat(header.props.titleText.id, \" \").concat(id)\n    }));\n  }), header && header, (!isExpandable || isExpandable && isExpanded) && React.createElement(\"div\", {\n    className: css(styles.formFieldGroupBody)\n  }, children));\n};\nInternalFormFieldGroup.displayName = 'InternalFormFieldGroup';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Form/InternalFormFieldGroup.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAP,MAAmB,mDAAnB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,SAAS,oBAAT,QAAqC,wBAArC;AACA,SAAS,UAAT,QAA2B,eAA3B;AAmBA,OAAO,IAAM,sBAAsB,GAAyD,SAA/E,sBAA+E,CAAC,EAAD,EAS1D;AAT2D,MAC3F,QAD2F,GAO5E,EAP4E,CAC3F,QAD2F;AAAA,MAE3F,SAF2F,GAO5E,EAP4E,CAE3F,SAF2F;AAAA,MAG3F,MAH2F,GAO5E,EAP4E,CAG3F,MAH2F;AAAA,MAI3F,YAJ2F,GAO5E,EAP4E,CAI3F,YAJ2F;AAAA,MAK3F,UAL2F,GAO5E,EAP4E,CAK3F,UAL2F;AAAA,MAM3F,QAN2F,GAO5E,EAP4E,CAM3F,QAN2F;AAAA,MAO3F,eAP2F,GAO5E,EAP4E,CAO3F,eAP2F;AAAA,MAQxF,KARwF,GAQnF,MAAA,CAAA,EAAA,EARmF,CAAA,UAAA,EAAA,WAAA,EAAA,QAAA,EAAA,cAAA,EAAA,YAAA,EAAA,UAAA,EAAA,iBAAA,CAQnF,CARmF;;AAU3F,MAAM,eAAe,GAAG,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,SAAhB,GAA4B,IAA1D;;AACA,MAAI,YAAY,IAAI,CAAC,eAAjB,IAAoC,CAAC,eAAzC,EAA0D;AACxD;AACA,IAAA,OAAO,CAAC,KAAR,CACE,2BADF,EAEE,gHAFF;AAID;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACE,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,cAAR,EAAwB,UAAU,IAAI,YAAd,IAA8B,MAAM,CAAC,SAAP,CAAiB,QAAvE,EAAiF,SAAjF,CADhB;AAEE,IAAA,IAAI,EAAC;AAFP,GAAA,EAGO,eAAe,IAAI;AAAE,iCAAsB,MAAM,CAAC,KAAP,CAAa,SAAb,CAAuB,EAA7C;AAAF,GAH1B,EAIM,KAJN,CAAA,EAMG,YAAY,IACX,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AAAC,IAAA,MAAM,EAAC;AAAR,GAAX,EACG,UAAA,EAAE;AAAA,WACD,KAAA,CAAA,aAAA,CAAC,oBAAD,EAAqB,MAAA,CAAA,MAAA,CAAA;AACnB,MAAA,QAAQ,EAAE,QADS;AAEnB,MAAA,UAAU,EAAE,UAFO;AAEG,oBACV,eAHO;AAInB,MAAA,QAAQ,EAAE;AAJS,KAAA,EAKd,eAAe,IAAI;AAAE,mCAAsB,MAAM,CAAC,KAAP,CAAa,SAAb,CAAuB,EAA7C,cAAmD,EAAnD;AAAF,KALL,CAArB,CADC;AAAA,GADL,CAPJ,EAmBG,MAAM,IAAI,MAnBb,EAoBG,CAAC,CAAC,YAAD,IAAkB,YAAY,IAAI,UAAnC,KACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE,GAAG,CAAC,MAAM,CAAC,kBAAR;AAAnB,GAAA,EAAiD,QAAjD,CArBJ,CADF;AA0BD,CA5CM;AA6CP,sBAAsB,CAAC,WAAvB,GAAqC,wBAArC","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { FormFieldGroupToggle } from './FormFieldGroupToggle';\nimport { GenerateId } from '../../helpers';\n\nexport interface InternalFormFieldGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'label'> {\n  /** Anything that can be rendered as form field group content. */\n  children?: React.ReactNode;\n  /** Additional classes added to the form field group. */\n  className?: string;\n  /** Form field group header */\n  header?: any;\n  /** Flag indicating if the field group is expandable */\n  isExpandable?: boolean;\n  /** Flag indicate if the form field group is expanded. Modifies the card to be expandable. */\n  isExpanded?: boolean;\n  /** Function callback called when user clicks toggle button */\n  onToggle?: () => void;\n  /** Aria-label to use on the form field group toggle button */\n  toggleAriaLabel?: string;\n}\n\nexport const InternalFormFieldGroup: React.FunctionComponent<InternalFormFieldGroupProps> = ({\n  children,\n  className,\n  header,\n  isExpandable,\n  isExpanded,\n  onToggle,\n  toggleAriaLabel,\n  ...props\n}: InternalFormFieldGroupProps) => {\n  const headerTitleText = header ? header.props.titleText : null;\n  if (isExpandable && !toggleAriaLabel && !headerTitleText) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'FormFieldGroupExpandable:',\n      'toggleAriaLabel or the titleText prop of FormFieldGroupHeader is required to make the toggle button accessible'\n    );\n  }\n  return (\n    <div\n      className={css(styles.formFieldGroup, isExpanded && isExpandable && styles.modifiers.expanded, className)}\n      role=\"group\"\n      {...(headerTitleText && { 'aria-labelledby': `${header.props.titleText.id}` })}\n      {...props}\n    >\n      {isExpandable && (\n        <GenerateId prefix=\"form-field-group-toggle\">\n          {id => (\n            <FormFieldGroupToggle\n              onToggle={onToggle}\n              isExpanded={isExpanded}\n              aria-label={toggleAriaLabel}\n              toggleId={id}\n              {...(headerTitleText && { 'aria-labelledby': `${header.props.titleText.id} ${id}` })}\n            />\n          )}\n        </GenerateId>\n      )}\n      {header && header}\n      {(!isExpandable || (isExpandable && isExpanded)) && (\n        <div className={css(styles.formFieldGroupBody)}>{children}</div>\n      )}\n    </div>\n  );\n};\nInternalFormFieldGroup.displayName = 'InternalFormFieldGroup';\n"]},"metadata":{},"sourceType":"module"}