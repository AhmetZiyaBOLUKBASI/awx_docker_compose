{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Tooltip } from '../Tooltip';\nexport var DataListText = function DataListText(_a) {\n  var _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$component = _a.component,\n      component = _a$component === void 0 ? 'span' : _a$component,\n      _a$wrapModifier = _a.wrapModifier,\n      wrapModifier = _a$wrapModifier === void 0 ? null : _a$wrapModifier,\n      _a$tooltip = _a.tooltip,\n      tooltipProp = _a$tooltip === void 0 ? '' : _a$tooltip,\n      _a$onMouseEnter = _a.onMouseEnter,\n      onMouseEnterProp = _a$onMouseEnter === void 0 ? function () {} : _a$onMouseEnter,\n      props = __rest(_a, [\"children\", \"className\", \"component\", \"wrapModifier\", \"tooltip\", \"onMouseEnter\"]);\n\n  var Component = component;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tooltip = _React$useState2[0],\n      setTooltip = _React$useState2[1];\n\n  var onMouseEnter = function onMouseEnter(event) {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      setTooltip(tooltipProp || event.target.innerHTML);\n    } else {\n      setTooltip('');\n    }\n\n    onMouseEnterProp(event);\n  };\n\n  var text = React.createElement(Component, Object.assign({\n    onMouseEnter: onMouseEnter,\n    className: css(className, wrapModifier && styles.modifiers[wrapModifier], styles.dataListText)\n  }, props), children);\n  return tooltip !== '' ? React.createElement(Tooltip, {\n    content: tooltip,\n    isVisible: true\n  }, text) : text;\n};\nDataListText.displayName = 'DataListText';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/DataList/DataListText.tsx"],"names":[],"mappings":";;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,GAAT,QAAoB,0BAApB;AACA,OAAO,MAAP,MAAmB,4DAAnB;AACA,SAAS,OAAT,QAAwB,YAAxB;AAkBA,OAAO,IAAM,YAAY,GAA+C,SAA3D,YAA2D,CAAC,EAAD,EAQhD;AARiD,oBAM9B,EAN8B,CACvE,QADuE;AAAA,MACvE,QADuE,4BAC5D,IAD4D;AAAA,qBAM9B,EAN8B,CAEvE,SAFuE;AAAA,MAEvE,SAFuE,6BAE3D,EAF2D;AAAA,qBAM9B,EAN8B,CAGvE,SAHuE;AAAA,MAGvE,SAHuE,6BAG3D,MAH2D;AAAA,wBAM9B,EAN8B,CAIvE,YAJuE;AAAA,MAIvE,YAJuE,gCAIxD,IAJwD;AAAA,mBAM9B,EAN8B,CAKvE,OALuE;AAAA,MAK9D,WAL8D,2BAKhD,EALgD;AAAA,wBAM9B,EAN8B,CAMvE,YANuE;AAAA,MAMzD,gBANyD,gCAMtC,YAAK,CAAG,CAN8B;AAAA,MAOpE,KAPoE,GAO/D,MAAA,CAAA,EAAA,EAP+D,CAAA,UAAA,EAAA,WAAA,EAAA,WAAA,EAAA,cAAA,EAAA,SAAA,EAAA,cAAA,CAO/D,CAP+D;;AASvE,MAAM,SAAS,GAAG,SAAlB;;AAEA,wBAA8B,KAAK,CAAC,QAAN,CAAe,EAAf,CAA9B;AAAA;AAAA,MAAO,OAAP;AAAA,MAAgB,UAAhB;;AACA,MAAM,YAAY,GAAG,SAAf,YAAe,CAAC,KAAD,EAAe;AAClC,QAAI,KAAK,CAAC,MAAN,CAAa,WAAb,GAA2B,KAAK,CAAC,MAAN,CAAa,WAA5C,EAAyD;AACvD,MAAA,UAAU,CAAC,WAAW,IAAI,KAAK,CAAC,MAAN,CAAa,SAA7B,CAAV;AACD,KAFD,MAEO;AACL,MAAA,UAAU,CAAC,EAAD,CAAV;AACD;;AACD,IAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,GAPD;;AASA,MAAM,IAAI,GACR,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA;AACR,IAAA,YAAY,EAAE,YADN;AAER,IAAA,SAAS,EAAE,GAAG,CAAC,SAAD,EAAY,YAAY,IAAI,MAAM,CAAC,SAAP,CAAiB,YAAjB,CAA5B,EAA4D,MAAM,CAAC,YAAnE;AAFN,GAAA,EAGJ,KAHI,CAAV,EAKG,QALH,CADF;AAUA,SAAO,OAAO,KAAK,EAAZ,GACL,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ;AAAC,IAAA,OAAO,EAAE,OAAV;AAAmB,IAAA,SAAS,EAAA;AAA5B,GAAR,EACG,IADH,CADK,GAKL,IALF;AAOD,CAtCM;AAuCP,YAAY,CAAC,WAAb,GAA2B,cAA3B","sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Tooltip } from '../Tooltip';\nimport { DataListWrapModifier } from './DataList';\n\nexport interface DataListTextProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered within the data list text */\n  children?: React.ReactNode;\n  /** Additional classes added to the data list text */\n  className?: string;\n  /** Determines which element to render as a data list text. Usually div or span */\n  component?: React.ReactNode;\n  /** Determines which wrapping modifier to apply to the data list text */\n  wrapModifier?: DataListWrapModifier | 'nowrap' | 'truncate' | 'breakWord';\n  /** text to display on the tooltip */\n  tooltip?: string;\n  /** callback used to create the tooltip if text is truncated */\n  onMouseEnter?: (event: any) => void;\n}\n\nexport const DataListText: React.FunctionComponent<DataListTextProps> = ({\n  children = null,\n  className = '',\n  component = 'span',\n  wrapModifier = null,\n  tooltip: tooltipProp = '',\n  onMouseEnter: onMouseEnterProp = () => {},\n  ...props\n}: DataListTextProps) => {\n  const Component = component as any;\n\n  const [tooltip, setTooltip] = React.useState('');\n  const onMouseEnter = (event: any) => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      setTooltip(tooltipProp || event.target.innerHTML);\n    } else {\n      setTooltip('');\n    }\n    onMouseEnterProp(event);\n  };\n\n  const text = (\n    <Component\n      onMouseEnter={onMouseEnter}\n      className={css(className, wrapModifier && styles.modifiers[wrapModifier], styles.dataListText)}\n      {...props}\n    >\n      {children}\n    </Component>\n  );\n\n  return tooltip !== '' ? (\n    <Tooltip content={tooltip} isVisible>\n      {text}\n    </Tooltip>\n  ) : (\n    text\n  );\n};\nDataListText.displayName = 'DataListText';\n"]},"metadata":{},"sourceType":"module"}