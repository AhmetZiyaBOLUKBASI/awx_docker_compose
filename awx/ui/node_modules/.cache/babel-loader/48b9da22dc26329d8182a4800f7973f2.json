{"ast":null,"code":"import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { fillTemplate } from '../../helpers';\nimport { DropdownToggle } from '../Dropdown';\nvar toggleId = 0;\nexport var OptionsToggle = function OptionsToggle(_ref) {\n  var _ref$itemsTitle = _ref.itemsTitle,\n      itemsTitle = _ref$itemsTitle === void 0 ? 'items' : _ref$itemsTitle,\n      optionsToggle = _ref.optionsToggle,\n      _ref$itemsPerPageTitl = _ref.itemsPerPageTitle,\n      itemsPerPageTitle = _ref$itemsPerPageTitl === void 0 ? 'Items per page' : _ref$itemsPerPageTitl,\n      _ref$ofWord = _ref.ofWord,\n      ofWord = _ref$ofWord === void 0 ? 'of' : _ref$ofWord,\n      _ref$firstIndex = _ref.firstIndex,\n      firstIndex = _ref$firstIndex === void 0 ? 0 : _ref$firstIndex,\n      _ref$lastIndex = _ref.lastIndex,\n      lastIndex = _ref$lastIndex === void 0 ? 0 : _ref$lastIndex,\n      itemCount = _ref.itemCount,\n      _ref$widgetId = _ref.widgetId,\n      widgetId = _ref$widgetId === void 0 ? '' : _ref$widgetId,\n      _ref$showToggle = _ref.showToggle,\n      showToggle = _ref$showToggle === void 0 ? true : _ref$showToggle,\n      _ref$onToggle = _ref.onToggle,\n      onToggle = _ref$onToggle === void 0 ? function (_isOpen) {\n    return undefined;\n  } : _ref$onToggle,\n      _ref$isOpen = _ref.isOpen,\n      isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,\n      _ref$isDisabled = _ref.isDisabled,\n      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,\n      _ref$parentRef = _ref.parentRef,\n      parentRef = _ref$parentRef === void 0 ? null : _ref$parentRef,\n      ToggleTemplate = _ref.toggleTemplate,\n      _ref$onEnter = _ref.onEnter,\n      onEnter = _ref$onEnter === void 0 ? null : _ref$onEnter,\n      _ref$perPageComponent = _ref.perPageComponent,\n      perPageComponent = _ref$perPageComponent === void 0 ? 'div' : _ref$perPageComponent;\n  var isDiv = perPageComponent === 'div';\n  var toggleClasses = css(styles.optionsMenuToggle, isDisabled && styles.modifiers.disabled, styles.modifiers.plain, styles.modifiers.text);\n  var template = typeof ToggleTemplate === 'string' ? fillTemplate(ToggleTemplate, {\n    firstIndex: firstIndex,\n    lastIndex: lastIndex,\n    ofWord: ofWord,\n    itemCount: itemCount,\n    itemsTitle: itemsTitle\n  }) : React.createElement(ToggleTemplate, {\n    firstIndex: firstIndex,\n    lastIndex: lastIndex,\n    ofWord: ofWord,\n    itemCount: itemCount,\n    itemsTitle: itemsTitle\n  });\n  var dropdown = showToggle && React.createElement(React.Fragment, null, isDiv && React.createElement(\"span\", {\n    className: css(styles.optionsMenuToggleText)\n  }, template), React.createElement(DropdownToggle, {\n    onEnter: onEnter,\n    \"aria-label\": isDiv ? optionsToggle || 'Items per page' : optionsToggle,\n    onToggle: onToggle,\n    isDisabled: isDisabled || itemCount && itemCount <= 0,\n    isOpen: isOpen,\n    id: \"\".concat(widgetId, \"-toggle-\").concat(toggleId++),\n    className: isDiv ? styles.optionsMenuToggleButton : toggleClasses,\n    parentRef: parentRef,\n    \"aria-haspopup\": \"listbox\"\n  }, !isDiv && template));\n  return isDiv ? React.createElement(\"div\", {\n    className: toggleClasses\n  }, dropdown) : dropdown;\n};\nOptionsToggle.displayName = 'OptionsToggle';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-core/src/components/Pagination/OptionsToggle.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\n\nimport { fillTemplate } from '../../helpers';\nimport { ToggleTemplateProps } from './ToggleTemplate';\nimport { DropdownToggle } from '../Dropdown';\n\nexport interface OptionsToggleProps extends React.HTMLProps<HTMLDivElement> {\n  /** The type or title of the items being paginated */\n  itemsTitle?: string;\n  /** Accessible label for the options toggle */\n  optionsToggle?: string;\n  /** The title of the pagination options menu */\n  itemsPerPageTitle?: string;\n  /** The first index of the items being paginated */\n  firstIndex?: number;\n  /** The last index of the items being paginated */\n  lastIndex?: number;\n  /** The total number of items being paginated */\n  itemCount?: number;\n  /** Id added to the title of the pagination options menu */\n  widgetId?: string;\n  /** showToggle */\n  showToggle?: boolean;\n  /** Event function that fires when user clicks the options menu toggle */\n  onToggle?: (isOpen: boolean) => void;\n  /** Flag indicating if the options menu dropdown is open or not */\n  isOpen?: boolean;\n  /** Flag indicating if the options menu is disabled */\n  isDisabled?: boolean;\n  /** */\n  parentRef?: HTMLElement;\n  /** This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */\n  toggleTemplate?: ((props: ToggleTemplateProps) => React.ReactElement) | string;\n  /** Callback for toggle open on keyboard entry */\n  onEnter?: () => void;\n  /** Label for the English word \"of\" */\n  ofWord?: string;\n  /** Component to be used for wrapping the toggle contents. Use 'button' when you want\n   * all of the toggle text to be clickable.\n   */\n  perPageComponent?: 'div' | 'button';\n}\n\nlet toggleId = 0;\nexport const OptionsToggle: React.FunctionComponent<OptionsToggleProps> = ({\n  itemsTitle = 'items',\n  optionsToggle,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  itemsPerPageTitle = 'Items per page',\n  ofWord = 'of',\n  firstIndex = 0,\n  lastIndex = 0,\n  itemCount,\n  widgetId = '',\n  showToggle = true,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle = (_isOpen: boolean) => undefined as any,\n  isOpen = false,\n  isDisabled = false,\n  parentRef = null,\n  toggleTemplate: ToggleTemplate,\n  onEnter = null,\n  perPageComponent = 'div'\n}: OptionsToggleProps) => {\n  const isDiv = perPageComponent === 'div';\n  const toggleClasses = css(\n    styles.optionsMenuToggle,\n    isDisabled && styles.modifiers.disabled,\n    styles.modifiers.plain,\n    styles.modifiers.text\n  );\n\n  const template =\n    typeof ToggleTemplate === 'string' ? (\n      fillTemplate(ToggleTemplate, { firstIndex, lastIndex, ofWord, itemCount, itemsTitle })\n    ) : (\n      <ToggleTemplate\n        firstIndex={firstIndex}\n        lastIndex={lastIndex}\n        ofWord={ofWord}\n        itemCount={itemCount}\n        itemsTitle={itemsTitle}\n      />\n    );\n\n  const dropdown = showToggle && (\n    <React.Fragment>\n      {isDiv && <span className={css(styles.optionsMenuToggleText)}>{template}</span>}\n      <DropdownToggle\n        onEnter={onEnter}\n        aria-label={isDiv ? optionsToggle || 'Items per page' : optionsToggle}\n        onToggle={onToggle}\n        isDisabled={isDisabled || (itemCount && itemCount <= 0)}\n        isOpen={isOpen}\n        id={`${widgetId}-toggle-${toggleId++}`}\n        className={isDiv ? styles.optionsMenuToggleButton : toggleClasses}\n        parentRef={parentRef}\n        aria-haspopup=\"listbox\"\n      >\n        {!isDiv && template}\n      </DropdownToggle>\n    </React.Fragment>\n  );\n\n  return isDiv ? <div className={toggleClasses}>{dropdown}</div> : dropdown;\n};\nOptionsToggle.displayName = 'OptionsToggle';\n"]},"metadata":{},"sourceType":"module"}