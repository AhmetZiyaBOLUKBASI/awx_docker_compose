{"ast":null,"code":"/*!\n* tabbable 5.3.3\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/\nvar candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]:not(slot)', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable=\"false\"])', 'details>summary:first-of-type', 'details'];\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\nvar NoElement = typeof Element === 'undefined';\nvar matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {\n  return element.getRootNode();\n} : function (element) {\n  return element.ownerDocument;\n};\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\n\nvar getCandidates = function getCandidates(el, includeContainer, filter) {\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidatesScope\n * @property {Element} scope contains inner candidates\n * @property {Element[]} candidates\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidatesScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidatesScope>}\n */\n\n\nvar getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\n  var candidates = [];\n  var elementsToCheck = Array.from(elements);\n\n  while (elementsToCheck.length) {\n    var element = elementsToCheck.shift();\n\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      var assigned = element.assignedElements();\n      var content = assigned.length ? assigned : element.children;\n      var nestedCandidates = getCandidatesIteratively(content, true, options);\n\n      if (options.flatten) {\n        candidates.push.apply(candidates, nestedCandidates);\n      } else {\n        candidates.push({\n          scope: element,\n          candidates: nestedCandidates\n        });\n      }\n    } else {\n      // check candidate element\n      var validCandidate = matches.call(element, candidateSelector);\n\n      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\n        candidates.push(element);\n      } // iterate over shadow content if possible\n\n\n      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow\n      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);\n      var validShadowRoot = !options.shadowRootFilter || options.shadowRootFilter(element);\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\n\n        if (options.flatten) {\n          candidates.push.apply(candidates, _nestedCandidates);\n        } else {\n          candidates.push({\n            scope: element,\n            candidates: _nestedCandidates\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift.apply(elementsToCheck, element.children);\n      }\n    }\n  }\n\n  return candidates;\n};\n\nvar getTabindex = function getTabindex(node, isScope) {\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    //\n    // isScope is positive for custom element with shadow root or slot that by default\n    // have tabIndex -1, but need to be sorted by document order in order for their\n    // content to be inserted in the correct position\n    if ((isScope || /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || node.isContentEditable) && isNaN(parseInt(node.getAttribute('tabindex'), 10))) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n};\n\nvar isInput = function isInput(node) {\n  return node.tagName === 'INPUT';\n};\n\nvar isHiddenInput = function isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\n  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {\n    return child.tagName === 'SUMMARY';\n  });\n  return r;\n};\n\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nvar isTabbableRadio = function isTabbableRadio(node) {\n  if (!node.name) {\n    return true;\n  }\n\n  var radioScope = node.form || getRootNode(node);\n\n  var queryRadios = function queryRadios(name) {\n    return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\n  };\n\n  var radioSet;\n\n  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);\n      return false;\n    }\n  }\n\n  var checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nvar isRadio = function isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\nvar isZeroArea = function isZeroArea(node) {\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n      width = _node$getBoundingClie.width,\n      height = _node$getBoundingClie.height;\n\n  return width === 0 && height === 0;\n};\n\nvar isHidden = function isHidden(node, _ref) {\n  var displayCheck = _ref.displayCheck,\n      getShadowRoot = _ref.getShadowRoot; // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  } // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n\n\n  var nodeRootHost = getRootNode(node).host;\n  var nodeIsAttached = (nodeRootHost === null || nodeRootHost === void 0 ? void 0 : nodeRootHost.ownerDocument.contains(nodeRootHost)) || node.ownerDocument.contains(node);\n\n  if (!displayCheck || displayCheck === 'full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      var originalNode = node;\n\n      while (node) {\n        var parentElement = node.parentElement;\n        var rootNode = getRootNode(node);\n\n        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    } // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n\n    if (nodeIsAttached) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    } // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  } // visible, as far as we can tell, or per current `displayCheck` mode\n\n\n  return false;\n}; // form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\n\n\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    var parentNode = node.parentElement; // check if `node` is contained in a disabled <fieldset>\n\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (var i = 0; i < parentNode.children.length; i++) {\n          var child = parentNode.children.item(i); // when the first <legend> (in document order) is found\n\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);\n          }\n        } // the disabled <fieldset> containing `node` has no <legend>\n\n\n        return true;\n      }\n\n      parentNode = parentNode.parentElement;\n    }\n  } // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n\n\n  return false;\n};\n\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\n  if (node.disabled || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus\n  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\n  if (isNonTabbableRadio(node) || getTabindex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\n  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  } // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n\n\n  return false;\n};\n/**\n * @param {Array.<Element|CandidatesScope>} candidates\n * @returns Element[]\n */\n\n\nvar sortByOrder = function sortByOrder(candidates) {\n  var regularTabbables = [];\n  var orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    var isScope = !!item.scope;\n    var element = isScope ? item.scope : item;\n    var candidateTabindex = getTabindex(element, isScope);\n    var elements = isScope ? sortByOrder(item.candidates) : element;\n\n    if (candidateTabindex === 0) {\n      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements\n      });\n    }\n  });\n  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {\n    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\n    return acc;\n  }, []).concat(regularTabbables);\n};\n\nvar tabbable = function tabbable(el, options) {\n  options = options || {};\n  var candidates;\n\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable\n    });\n  } else {\n    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\n  }\n\n  return sortByOrder(candidates);\n};\n\nvar focusable = function focusable(el, options) {\n  options = options || {};\n  var candidates;\n\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot\n    });\n  } else {\n    candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\n  }\n\n  return candidates;\n};\n\nvar isTabbable = function isTabbable(node, options) {\n  options = options || {};\n\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\n\nvar isFocusable = function isFocusable(node, options) {\n  options = options || {};\n\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { focusable, isFocusable, isTabbable, tabbable };","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/tabbable/src/index.js"],"names":["candidateSelectors","candidateSelector","NoElement","matches","Element","getRootNode","element","getCandidates","candidates","Array","el","includeContainer","getCandidatesIteratively","elementsToCheck","assigned","content","nestedCandidates","options","scope","validCandidate","elements","shadowRoot","validShadowRoot","getTabindex","node","isScope","isNaN","parseInt","sortOrderedTabbables","a","b","isInput","isHiddenInput","isDetailsWithSummary","r","child","getCheckedRadio","i","nodes","isTabbableRadio","radioScope","queryRadios","window","radioSet","console","err","checked","isRadio","isNonTabbableRadio","isZeroArea","width","height","isHidden","displayCheck","getShadowRoot","getComputedStyle","isDirectSummary","nodeUnderDetails","nodeRootHost","nodeIsAttached","originalNode","parentElement","rootNode","isDisabledFromFieldset","parentNode","isNodeMatchingSelectorFocusable","isNodeMatchingSelectorTabbable","isValidShadowRootTabbable","tabIndex","shadowHostNode","sortByOrder","regularTabbables","orderedTabbables","item","candidateTabindex","documentOrder","sortable","acc","tabbable","filter","flatten","shadowRootFilter","focusable","isTabbable","focusableCandidateSelector","isFocusable"],"mappings":"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","sourcesContent":["const candidateSelectors = [\n  'input',\n  'select',\n  'textarea',\n  'a[href]',\n  'button',\n  '[tabindex]:not(slot)',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]:not([contenteditable=\"false\"])',\n  'details>summary:first-of-type',\n  'details',\n];\nconst candidateSelector = /* #__PURE__ */ candidateSelectors.join(',');\n\nconst NoElement = typeof Element === 'undefined';\n\nconst matches = NoElement\n  ? function () {}\n  : Element.prototype.matches ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\nconst getRootNode =\n  !NoElement && Element.prototype.getRootNode\n    ? (element) => element.getRootNode()\n    : (element) => element.ownerDocument;\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nconst getCandidates = function (el, includeContainer, filter) {\n  let candidates = Array.prototype.slice.apply(\n    el.querySelectorAll(candidateSelector)\n  );\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidatesScope\n * @property {Element} scope contains inner candidates\n * @property {Element[]} candidates\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidatesScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidatesScope>}\n */\nconst getCandidatesIteratively = function (\n  elements,\n  includeContainer,\n  options\n) {\n  const candidates = [];\n  const elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    const element = elementsToCheck.shift();\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      const assigned = element.assignedElements();\n      const content = assigned.length ? assigned : element.children;\n      const nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push(...nestedCandidates);\n      } else {\n        candidates.push({\n          scope: element,\n          candidates: nestedCandidates,\n        });\n      }\n    } else {\n      // check candidate element\n      const validCandidate = matches.call(element, candidateSelector);\n      if (\n        validCandidate &&\n        options.filter(element) &&\n        (includeContainer || !elements.includes(element))\n      ) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      const shadowRoot =\n        element.shadowRoot ||\n        // check for an undisclosed shadow\n        (typeof options.getShadowRoot === 'function' &&\n          options.getShadowRoot(element));\n\n      const validShadowRoot =\n        !options.shadowRootFilter || options.shadowRootFilter(element);\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        const nestedCandidates = getCandidatesIteratively(\n          shadowRoot === true ? element.children : shadowRoot.children,\n          true,\n          options\n        );\n\n        if (options.flatten) {\n          candidates.push(...nestedCandidates);\n        } else {\n          candidates.push({\n            scope: element,\n            candidates: nestedCandidates,\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift(...element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\nconst getTabindex = function (node, isScope) {\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    //\n    // isScope is positive for custom element with shadow root or slot that by default\n    // have tabIndex -1, but need to be sorted by document order in order for their\n    // content to be inserted in the correct position\n    if (\n      (isScope ||\n        /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) ||\n        node.isContentEditable) &&\n      isNaN(parseInt(node.getAttribute('tabindex'), 10))\n    ) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\nconst sortOrderedTabbables = function (a, b) {\n  return a.tabIndex === b.tabIndex\n    ? a.documentOrder - b.documentOrder\n    : a.tabIndex - b.tabIndex;\n};\n\nconst isInput = function (node) {\n  return node.tagName === 'INPUT';\n};\n\nconst isHiddenInput = function (node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nconst isDetailsWithSummary = function (node) {\n  const r =\n    node.tagName === 'DETAILS' &&\n    Array.prototype.slice\n      .apply(node.children)\n      .some((child) => child.tagName === 'SUMMARY');\n  return r;\n};\n\nconst getCheckedRadio = function (nodes, form) {\n  for (let i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nconst isTabbableRadio = function (node) {\n  if (!node.name) {\n    return true;\n  }\n  const radioScope = node.form || getRootNode(node);\n  const queryRadios = function (name) {\n    return radioScope.querySelectorAll(\n      'input[type=\"radio\"][name=\"' + name + '\"]'\n    );\n  };\n\n  let radioSet;\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.CSS !== 'undefined' &&\n    typeof window.CSS.escape === 'function'\n  ) {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',\n        err.message\n      );\n      return false;\n    }\n  }\n\n  const checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nconst isRadio = function (node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nconst isNonTabbableRadio = function (node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\nconst isZeroArea = function (node) {\n  const { width, height } = node.getBoundingClientRect();\n  return width === 0 && height === 0;\n};\nconst isHidden = function (node, { displayCheck, getShadowRoot }) {\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  const isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  const nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  const nodeRootHost = getRootNode(node).host;\n  const nodeIsAttached =\n    nodeRootHost?.ownerDocument.contains(nodeRootHost) ||\n    node.ownerDocument.contains(node);\n\n  if (!displayCheck || displayCheck === 'full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      const originalNode = node;\n      while (node) {\n        const parentElement = node.parentElement;\n        const rootNode = getRootNode(node);\n        if (\n          parentElement &&\n          !parentElement.shadowRoot &&\n          getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (nodeIsAttached) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck` mode\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nconst isDisabledFromFieldset = function (node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    let parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (let i = 0; i < parentNode.children.length; i++) {\n          const child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *')\n              ? true\n              : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\n\nconst isNodeMatchingSelectorFocusable = function (options, node) {\n  if (\n    node.disabled ||\n    isHiddenInput(node) ||\n    isHidden(node, options) ||\n    // For a details element with a summary, the summary element gets the focus\n    isDetailsWithSummary(node) ||\n    isDisabledFromFieldset(node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isNodeMatchingSelectorTabbable = function (options, node) {\n  if (\n    isNonTabbableRadio(node) ||\n    getTabindex(node) < 0 ||\n    !isNodeMatchingSelectorFocusable(options, node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isValidShadowRootTabbable = function (shadowHostNode) {\n  const tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidatesScope>} candidates\n * @returns Element[]\n */\nconst sortByOrder = function (candidates) {\n  const regularTabbables = [];\n  const orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    const isScope = !!item.scope;\n    const element = isScope ? item.scope : item;\n    const candidateTabindex = getTabindex(element, isScope);\n    const elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope\n        ? regularTabbables.push(...elements)\n        : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements,\n      });\n    }\n  });\n\n  return orderedTabbables\n    .sort(sortOrderedTabbables)\n    .reduce((acc, sortable) => {\n      sortable.isScope\n        ? acc.push(...sortable.content)\n        : acc.push(sortable.content);\n      return acc;\n    }, [])\n    .concat(regularTabbables);\n};\n\nconst tabbable = function (el, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable,\n    });\n  } else {\n    candidates = getCandidates(\n      el,\n      options.includeContainer,\n      isNodeMatchingSelectorTabbable.bind(null, options)\n    );\n  }\n  return sortByOrder(candidates);\n};\n\nconst focusable = function (el, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot,\n    });\n  } else {\n    candidates = getCandidates(\n      el,\n      options.includeContainer,\n      isNodeMatchingSelectorFocusable.bind(null, options)\n    );\n  }\n\n  return candidates;\n};\n\nconst isTabbable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nconst focusableCandidateSelector = /* #__PURE__ */ candidateSelectors\n  .concat('iframe')\n  .join(',');\n\nconst isFocusable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { tabbable, focusable, isTabbable, isFocusable };\n"]},"metadata":{},"sourceType":"module"}