{"ast":null,"code":"import _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Zone from \"../zone.js\";\n/**\n * A zone that failed to parse. You should never need to instantiate this.\n * @implements {Zone}\n */\n\nvar InvalidZone = /*#__PURE__*/function (_Zone) {\n  _inherits(InvalidZone, _Zone);\n\n  var _super = _createSuper(InvalidZone);\n\n  function InvalidZone(zoneName) {\n    var _this;\n\n    _classCallCheck(this, InvalidZone);\n\n    _this = _super.call(this);\n    /**  @private */\n\n    _this.zoneName = zoneName;\n    return _this;\n  }\n  /** @override **/\n\n\n  _createClass(InvalidZone, [{\n    key: \"type\",\n    get: function get() {\n      return \"invalid\";\n    }\n    /** @override **/\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.zoneName;\n    }\n    /** @override **/\n\n  }, {\n    key: \"isUniversal\",\n    get: function get() {\n      return false;\n    }\n    /** @override **/\n\n  }, {\n    key: \"offsetName\",\n    value: function offsetName() {\n      return null;\n    }\n    /** @override **/\n\n  }, {\n    key: \"formatOffset\",\n    value: function formatOffset() {\n      return \"\";\n    }\n    /** @override **/\n\n  }, {\n    key: \"offset\",\n    value: function offset() {\n      return NaN;\n    }\n    /** @override **/\n\n  }, {\n    key: \"equals\",\n    value: function equals() {\n      return false;\n    }\n    /** @override **/\n\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return false;\n    }\n  }]);\n\n  return InvalidZone;\n}(Zone);\n\nexport { InvalidZone as default };","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/luxon/src/zones/invalidZone.js"],"names":["Zone","InvalidZone","zoneName","NaN"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,YAAjB;AAEA;AACA;AACA;AACA;;IACqBC,W;;;;;AACnB,uBAAYC,QAAZ,EAAsB;AAAA;;AAAA;;AACpB;AACA;;AACA,UAAKA,QAAL,GAAgBA,QAAhB;AAHoB;AAIrB;AAED;;;;;SACA,eAAW;AACT,aAAO,SAAP;AACD;AAED;;;;SACA,eAAW;AACT,aAAO,KAAKA,QAAZ;AACD;AAED;;;;SACA,eAAkB;AAChB,aAAO,KAAP;AACD;AAED;;;;WACA,sBAAa;AACX,aAAO,IAAP;AACD;AAED;;;;WACA,wBAAe;AACb,aAAO,EAAP;AACD;AAED;;;;WACA,kBAAS;AACP,aAAOC,GAAP;AACD;AAED;;;;WACA,kBAAS;AACP,aAAO,KAAP;AACD;AAED;;;;SACA,eAAc;AACZ,aAAO,KAAP;AACD;;;;EA7CsCH,I;;SAApBC,W","sourcesContent":["import Zone from \"../zone.js\";\n\n/**\n * A zone that failed to parse. You should never need to instantiate this.\n * @implements {Zone}\n */\nexport default class InvalidZone extends Zone {\n  constructor(zoneName) {\n    super();\n    /**  @private */\n    this.zoneName = zoneName;\n  }\n\n  /** @override **/\n  get type() {\n    return \"invalid\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.zoneName;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName() {\n    return null;\n  }\n\n  /** @override **/\n  formatOffset() {\n    return \"\";\n  }\n\n  /** @override **/\n  offset() {\n    return NaN;\n  }\n\n  /** @override **/\n  equals() {\n    return false;\n  }\n\n  /** @override **/\n  get isValid() {\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}