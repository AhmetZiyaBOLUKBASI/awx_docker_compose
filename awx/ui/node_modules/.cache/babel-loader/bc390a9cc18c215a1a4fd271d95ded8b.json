{"ast":null,"code":"import _slicedToArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useOUIAProps } from '@patternfly/react-core';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport { css } from '@patternfly/react-styles';\nimport { TableComposableContext } from './TableComposable';\n\nvar TrBase = function TrBase(_a) {\n  var children = _a.children,\n      className = _a.className,\n      isExpanded = _a.isExpanded,\n      isEditable = _a.isEditable,\n      _a$isHidden = _a.isHidden,\n      isHidden = _a$isHidden === void 0 ? false : _a$isHidden,\n      _a$isHoverable = _a.isHoverable,\n      isHoverable = _a$isHoverable === void 0 ? false : _a$isHoverable,\n      _a$isRowSelected = _a.isRowSelected,\n      isRowSelected = _a$isRowSelected === void 0 ? false : _a$isRowSelected,\n      _a$isStriped = _a.isStriped,\n      isStriped = _a$isStriped === void 0 ? false : _a$isStriped,\n      _a$isBorderRow = _a.isBorderRow,\n      isBorderRow = _a$isBorderRow === void 0 ? false : _a$isBorderRow,\n      innerRef = _a.innerRef,\n      ouiaId = _a.ouiaId,\n      _a$ouiaSafe = _a.ouiaSafe,\n      ouiaSafe = _a$ouiaSafe === void 0 ? true : _a$ouiaSafe,\n      _a$resetOffset = _a.resetOffset,\n      resetOffset = _a$resetOffset === void 0 ? false : _a$resetOffset,\n      onRowClick = _a.onRowClick,\n      isSelectable = _a.isSelectable,\n      passedAriaLabel = _a['aria-label'],\n      props = __rest(_a, [\"children\", \"className\", \"isExpanded\", \"isEditable\", \"isHidden\", \"isHoverable\", \"isRowSelected\", \"isStriped\", \"isBorderRow\", \"innerRef\", \"ouiaId\", \"ouiaSafe\", \"resetOffset\", \"onRowClick\", \"isSelectable\", 'aria-label']);\n\n  var ouiaProps = useOUIAProps('TableRow', ouiaId, ouiaSafe);\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      computedAriaLabel = _React$useState2[0],\n      setComputedAriaLabel = _React$useState2[1];\n\n  var onKeyDown = null;\n\n  if (onRowClick) {\n    onKeyDown = function onKeyDown(e) {\n      if (e.key === 'Enter' || e.key === ' ') {\n        onRowClick(e);\n        e.preventDefault();\n      }\n    };\n  }\n\n  var rowIsHidden = isHidden || isExpanded !== undefined && !isExpanded;\n\n  var _React$useContext = React.useContext(TableComposableContext),\n      registerSelectableRow = _React$useContext.registerSelectableRow;\n\n  React.useEffect(function () {\n    if (isSelectable && !rowIsHidden) {\n      setComputedAriaLabel(\"\".concat(isRowSelected ? 'Selected' : 'Unselected', \", selectable row.\"));\n      registerSelectableRow();\n    } else {\n      setComputedAriaLabel(undefined);\n    }\n  }, [isRowSelected, isSelectable, registerSelectableRow, rowIsHidden]);\n  var ariaLabel = passedAriaLabel || computedAriaLabel;\n  return React.createElement(React.Fragment, null, isSelectable && React.createElement(\"output\", {\n    className: \"pf-screen-reader\"\n  }, ariaLabel), React.createElement(\"tr\", Object.assign({\n    className: css(className, isExpanded !== undefined && styles.tableExpandableRow, isExpanded && styles.modifiers.expanded, isEditable && inlineStyles.modifiers.inlineEditable, isHoverable && styles.modifiers.hoverable, isRowSelected && styles.modifiers.selected, isStriped && styles.modifiers.striped, isBorderRow && styles.modifiers.borderRow, resetOffset && styles.modifiers.firstCellOffsetReset),\n    hidden: rowIsHidden\n  }, isHoverable && {\n    tabIndex: 0\n  }, {\n    \"aria-label\": ariaLabel,\n    ref: innerRef\n  }, onRowClick && {\n    onClick: onRowClick,\n    onKeyDown: onKeyDown\n  }, ouiaProps, props), children));\n};\n\nexport var Tr = React.forwardRef(function (props, ref) {\n  return React.createElement(TrBase, Object.assign({}, props, {\n    innerRef: ref\n  }));\n});\nTr.displayName = 'Tr';","map":{"version":3,"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/TableComposable/Tr.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useOUIAProps, OUIAProps } from '@patternfly/react-core';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport { css } from '@patternfly/react-styles';\nimport { TableComposableContext } from './TableComposable';\n\nexport interface TrProps extends React.HTMLProps<HTMLTableRowElement>, OUIAProps {\n  /** Content rendered inside the <tr> row */\n  children?: React.ReactNode;\n  /** Additional classes added to the <tr> row  */\n  className?: string;\n  /** Forwarded ref */\n  innerRef?: React.Ref<any>;\n  /** Flag indicating the Tr is hidden */\n  isHidden?: boolean;\n  /** Only applicable to Tr within the Tbody: Makes the row expandable and determines if it's expanded or not.\n   * To prevent column widths from responding automatically when expandable rows are toggled, the width prop must also be passed into either the th or td component\n   */\n  isExpanded?: boolean;\n  /** Only applicable to Tr within the Tbody: Whether the row is editable */\n  isEditable?: boolean;\n  /** Flag which adds hover styles for the table row */\n  isHoverable?: boolean;\n  /** Flag indicating the row is selected - adds selected styling */\n  isRowSelected?: boolean;\n  /** Flag indicating the row is striped */\n  isStriped?: boolean;\n  /** Flag indicating the row will act as a border. This is typically used for a table with a nested and sticky header. */\n  isBorderRow?: boolean;\n  /** An event handler for the row */\n  onRowClick?: (event?: React.KeyboardEvent | React.MouseEvent) => void;\n  /** Flag indicating that the row is selectable */\n  isSelectable?: boolean;\n  /** Flag indicating the spacing offset of the first cell should be reset */\n  resetOffset?: boolean;\n}\n\nconst TrBase: React.FunctionComponent<TrProps> = ({\n  children,\n  className,\n  isExpanded,\n  isEditable,\n  isHidden = false,\n  isHoverable = false,\n  isRowSelected = false,\n  isStriped = false,\n  isBorderRow = false,\n  innerRef,\n  ouiaId,\n  ouiaSafe = true,\n  resetOffset = false,\n  onRowClick,\n  isSelectable,\n  'aria-label': passedAriaLabel,\n  ...props\n}: TrProps) => {\n  const ouiaProps = useOUIAProps('TableRow', ouiaId, ouiaSafe);\n  const [computedAriaLabel, setComputedAriaLabel] = React.useState<string | undefined>('');\n\n  let onKeyDown = null;\n  if (onRowClick) {\n    onKeyDown = (e: React.KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        onRowClick(e);\n        e.preventDefault();\n      }\n    };\n  }\n\n  const rowIsHidden = isHidden || (isExpanded !== undefined && !isExpanded);\n\n  const { registerSelectableRow } = React.useContext(TableComposableContext);\n\n  React.useEffect(() => {\n    if (isSelectable && !rowIsHidden) {\n      setComputedAriaLabel(`${isRowSelected ? 'Selected' : 'Unselected'}, selectable row.`);\n      registerSelectableRow();\n    } else {\n      setComputedAriaLabel(undefined);\n    }\n  }, [isRowSelected, isSelectable, registerSelectableRow, rowIsHidden]);\n\n  const ariaLabel = passedAriaLabel || computedAriaLabel;\n\n  return (\n    <>\n      {isSelectable && <output className=\"pf-screen-reader\">{ariaLabel}</output>}\n      <tr\n        className={css(\n          className,\n          isExpanded !== undefined && styles.tableExpandableRow,\n          isExpanded && styles.modifiers.expanded,\n          isEditable && inlineStyles.modifiers.inlineEditable,\n          isHoverable && styles.modifiers.hoverable,\n          isRowSelected && styles.modifiers.selected,\n          isStriped && styles.modifiers.striped,\n          isBorderRow && styles.modifiers.borderRow,\n          resetOffset && styles.modifiers.firstCellOffsetReset\n        )}\n        hidden={rowIsHidden}\n        {...(isHoverable && { tabIndex: 0 })}\n        aria-label={ariaLabel}\n        ref={innerRef}\n        {...(onRowClick && { onClick: onRowClick, onKeyDown })}\n        {...ouiaProps}\n        {...props}\n      >\n        {children}\n      </tr>\n    </>\n  );\n};\n\nexport const Tr = React.forwardRef((props: TrProps, ref: React.Ref<HTMLTableRowElement>) => (\n  <TrBase {...props} innerRef={ref} />\n));\nTr.displayName = 'Tr';\n"]},"metadata":{},"sourceType":"module"}